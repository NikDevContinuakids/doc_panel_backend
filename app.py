from collections import defaultdict
import json
from re import X
#from time import clock_settime
import flask
from jinja2 import Undefined
from pandas import json_normalize
import pandas as pd
import sqlalchemy
import Connection.const
from sqlalchemy.orm import session
from werkzeug.utils import redirect
import sys
from sqlalchemy import and_, extract, literal_column, or_, text, true
from sqlalchemy import func
from sqlalchemy.sql import func
from sqlalchemy.sql.expression import cast
from dateutil import relativedelta
import Model.models
import flask_mail
import smtplib
import cryptography.fernet
import datetime
from datetime import timedelta
import Constant.constant
import logging
import requests
import os
import traceback
from flask import Flask, jsonify, render_template, request
from flask_login import LoginManager, UserMixin, login_required, login_user, logout_user
from flask import Flask, current_app, request
from flask_mail import Mail, Message
import Common_Function.CommonFun
import Common_Function.MailFun
import jwt
from flask_cors import CORS
import base64
import re
import hashlib
from flask_jwt_extended import JWTManager
from functools import lru_cache
from waitress import serve

Session = Connection.const.connectToDatabase()
app = flask.Flask(__name__)
# app.debug = True
cors = CORS(app, resources={r"*": {"origins": "*"}})
app.config['SECRET_KEY'] = 'CreatedByVipulKumar@2022'
app.json.sort_keys = False
# app.config['JSON_SORT_KEYS'] = False
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = datetime.timedelta(seconds=30)
app.config['JWT_REFRESH_TOKEN_EXPIRES'] = datetime.timedelta(seconds=30)
# jwt = JWTManager(app)
@app.errorhandler(Exception)
def server_error(err):
    app.logger.exception(err)
    return "Something Went wrong", 500

# app.config.update(
#     DEBUG=True,
#     SECRET_KEY='secret_xxxx'
# )

# # flask-login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "/login"


# Added by vipul:-22-04-2022
#Desc:- It will return ciphertext string value.
def encryptString(plainText):
    key = b'F4sEtLhzEL36Kg1vaoxY1U-cYl3Sw-LkmWoyJXG3w4s='
    encryption_type = cryptography.fernet.Fernet(key)
    encrypted_message = (encryption_type.encrypt(plainText.encode())).decode()
    return encrypted_message
# End

# Added by vipul:-22-04-2022
# Desc:- It will convert encrypted text into plain text string value.


def decryptString(ciphertext):
    key = b'F4sEtLhzEL36Kg1vaoxY1U-cYl3Sw-LkmWoyJXG3w4s='
    encryption_type = cryptography.fernet.Fernet(key)
    decrypted_message = (encryption_type.decrypt(
        ciphertext.encode())).decode()
    return decrypted_message


if __name__=='__main__':
    app.run(host='localhost',port=5001, threaded=True)
    # serve(app, host='0.0.0.0', port=5003, threads=3)

@app.route("/favicon.ico")
def favicon():
    return "", 200

@app.route('/AddOrg',methods=['GET','POST'])
def AddOrg():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):

            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json(force = True)
                    ID = request_json.get('ID')
                    if(ID=='' or ID==None):

                        Name = request_json.get('Name')
                        Email = request_json.get('Email')
                        mobile = request_json.get('Mobile')
                        about = request_json.get('About')

                        Insert=Model.models.Application.M_Organisation()
                        Insert.MO_Name=Name
                        Insert.MO_Email=Email
                        Insert.MO_Mobile= mobile
                        Insert.MO_About=about
                        Insert.MO_AddIP= flask.request.remote_addr
                        Insert.MO_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        print("success")
                                #return "inserted Successfully"

                        ORGID= session.query(Model.models.Application.M_Organisation.MOID
                                            ).order_by(Model.models.Application.M_Organisation.MOID.desc()
                                                        ).first()


                        return jsonify({'msg':'Organisation inserted Successfully', 'data': {'OrgId':ORGID[0]}})
                    # else:
                    #     return jsonify({'token': data, 'msg':'username is not valid','About':about,'TokenUser':data['user']})
                    else:

                        request_json = request.get_json(force = True)
                        Name = request_json.get('Name')
                        Email = request_json.get('Email')
                        mobile = request_json.get('Mobile')
                        about = request_json.get('About')
                        # Name = request_json.get('Name')
                        # Email = request_json.get('Email')
                        # mobile = request_json.get('Mobile')
                        # about = request_json.get('About')
                        ID = request_json.get('ID')
                        Insert= session.query(Model.models.Application.M_Organisation).get(ID)
                        Insert.MO_Name= Name
                        Insert.MO_Email= Email
                        Insert.MO_Mobile= mobile
                        Insert.MO_About= about
                        Insert.MO_AddIP= flask.request.remote_addr
                        Insert.MO_ModDate=datetime.datetime.now()

                        session.commit()
                        return jsonify({'msg':'Organisation updated Successfully', 'data': '30'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DeleteOrg',methods=['GET','POST'])
def DeleteOrg():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    Id= request.get_json()
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Organisation
                                    ).filter(Model.models.Application.M_Organisation.MOID==Id
                                            ).update({Model.models.Application.M_Organisation.MO_IsDeleted:1})
                        session.commit()
                        return jsonify({'msg':'Organisation Deleted Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddClinic',methods=['GET','POST'])
def AddClinic():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):

            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json(force = True)
                    OrganisationName = request_json.get('OrganisationName')
                    Name = request_json.get('Name')
                    Mobile = request_json.get('Mobile')
                    Email = request_json.get('Email')
                    Address= request_json.get('Address')
                    Pincode= request_json.get('pincode')
                    city= request_json.get('city')
                    country=request_json.get('country')
                    state=request_json.get('state')
                    clinicTimeOpen=request_json.get('clinicTimeOpen')
                    clinicTimeClose=request_json.get('clinicTimeClose')
                    clinicTimingLabel=request_json.get('clinicTimingLabel')
                    ClinicCode=request_json.get('ClinicCode')
                    ID = request_json.get('ID')
                    if(ID=='' or ID==None):

                        Insert=Model.models.Application.M_Branch()
                        Insert.MB_Name=Name
                        Insert.M_Organisation_MOID=OrganisationName
                        Insert.MB_Email= Email
                        Insert.MB_Mobile=Mobile
                        Insert.MB_State=state
                        Insert.MB_City=city
                        Insert.MB_Country=country
                        Insert.MB_PinCode=Pincode
                        Insert.MB_Address= Address
                        Insert.MB_CloseTime= clinicTimeClose
                        Insert.MB_OpenTime = clinicTimeOpen
                        Insert.MB_ClinicTime = clinicTimingLabel
                        Insert.MB_Code = ClinicCode
                        Insert.MB_AddIP= flask.request.remote_addr
                        Insert.MB_AddUser=data['id']
                        session.add(Insert)
                        session.commit()


                        return jsonify({'msg':'Clinic Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_Branch).get(ID)
                        Insert.MB_Name=Name
                        Insert.M_Organisation_MOID=OrganisationName
                        Insert.MB_Email= Email
                        Insert.MB_Mobile=Mobile
                        Insert.MB_State=state
                        Insert.MB_City=city
                        Insert.MB_Country=country
                        Insert.MB_PinCode=Pincode
                        Insert.MB_Address= Address
                        Insert.MB_CloseTime= clinicTimeClose
                        Insert.MB_OpenTime = clinicTimeOpen
                        Insert.MB_ClinicTime = clinicTimingLabel
                        Insert.MB_AddIP= flask.request.remote_addr
                        Insert.MB_ModUser=data['id']
                        Insert.MB_ModDate=datetime.datetime.now()
                        session.commit()

                        return jsonify({'msg':'Clinic Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteClinic',methods=['GET','POST'])
def DeleteClinic():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    Id=request.get_json()
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Branch
                                    ).filter(Model.models.Application.M_Branch.MBID==Id
                                    ).update({Model.models.Application.M_Branch.MB_IsDeleted:1,
                                              Model.models.Application.M_Branch.MB_ModUser:data['id'],
                                              Model.models.Application.M_Branch.MB_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Clinic Deleted Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getClinicDtls', methods=['GET'])
def getClinicDtls():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getClinicDtls,
                        session.query(Model.models.Application.M_Branch.MBID.label('ID'),
                                    Model.models.Application.M_Branch.MB_Name.label('Clinic Name'),
                                    Model.models.Application.M_Organisation.MO_Name.label('Organisation'),
                                    Model.models.Application.M_Branch.MB_OpenTime.label('Open Time'),
                                    Model.models.Application.M_Branch.MB_CloseTime.label('Close Time'),
                                    Model.models.Application.M_Branch.MB_Address.label('Address'),
                                    Model.models.Application.M_Branch.MB_Mobile.label('Mobile'),
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0
                                    ).join(Model.models.Application.M_Organisation, Model.models.Application.M_Organisation.MOID==Model.models.Application.M_Branch.M_Organisation_MOID
                                    ).order_by(Model.models.Application.M_Branch.MBID.desc()).all()
                                )
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getClinicPracticeDtls', methods=['GET'])
def getClinicPracticeDtls():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getClinicPracticeDtls,
                        session.query(Model.models.Application.M_DoctorPracticeDetails.MDPDID.label('ID'),
                                    Model.models.Application.M_DoctorPracticeDetails.MDPD_DoctorId.label('Doctor Name'),
                                    Model.models.Application.M_DoctorPracticeDetails.MDPD_Address.label('Address'),
                                    Model.models.Application.M_DoctorPracticeDetails.MDPD_Mobile1.label('Mobile 1'),
                                    Model.models.Application.M_DoctorPracticeDetails.MDPD_Mobile2.label('Mobile 2')
                                ).filter_by(MDPD_IsActive=1).filter(Model.models.Application.M_DoctorPracticeDetails.MDPD_IsDeleted==0
                                    ).all()
                                )
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddReportform', methods=['GET'])
def AddReportform():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddReportform,session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddReportform',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    session.commit()
                    # getClinic= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getClinics,
                    #             session.query(Model.models.Application.M_Branch.MBID.label('key'),
                    #                         Model.models.Application.M_Branch.MB_Name.label('label')
                    #                         ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                    #                     )
                    # getOrg= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getOrg,
                    #             session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                    #                         Model.models.Application.M_Organisation.MO_Name.label('label')
                    #                             ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                    #                     )
                    # getProcedure= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getProcedures,
                    #             session.query(Model.models.Application.T_Details.TDID.label('key'),
                    #                         Model.models.Application.T_Details.TD_Name.label('label')
                    #                             ).filter_by(M_Details_MDID=6,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                    #                     )
                    # getDoctor= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getDoctors,
                    #             session.query(Model.models.Application.M_DoctorDetails.MDDID.label('key'),
                    #                         Model.models.Application.M_DoctorDetails.MDD_FirstName.label('label')
                    #                             ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0).order_by(Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
                    #                     )
                    # getRoom= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getRoom,
                    #             session.query(Model.models.Application.M_Room.MRID.label('key'),
                    #                         Model.models.Application.M_Room.MR_RoomNumber.label('label')
                    #                             ).filter_by(MR_IsActive=1,MR_IsDeleted=0).order_by(Model.models.Application.M_Room.MR_RoomNumber).all()
                    #                     )
                    # getStatus= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getStatus,
                    #             session.query(Model.models.Application.T_Details.TDID.label('key'),
                    #                         Model.models.Application.T_Details.TD_Name.label('label')
                    #                             ).filter_by(M_Details_MDID=11,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                    #                     )
                    # getAppointType= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getStatus,
                    #             session.query(Model.models.Application.T_Details.TDID.label('key'),
                    #                         Model.models.Application.T_Details.TD_Name.label('label')
                    #                             ).filter_by(M_Details_MDID=12,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                    #                     )
                    # getPatient= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getPatients,
                    #             session.query(Model.models.Application.M_Patient.MPID.label('key'),
                    #                         Model.models.Application.M_Patient.MP_Name.label('label')
                    #                             ).filter_by(MP_IsActive=1,MP_IsDeleted=0).order_by(Model.models.Application.M_Patient.MP_Name).all()
                    #                     )
                    # getTextField[4]['options'] = getClinic

                    # getTextField[3]['options'] = getOrg

                    # getTextField[1]['options'] = getProcedure

                    # getTextField[2]['options'] = getDoctor

                    # getTextField[0]['options'] = getPatient


                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/AddCollectionForm', methods=['GET'])
def AddCollectionForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddCollectionForm,session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddCollectionForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    session.commit()
                    getReportType= Common_Function.CommonFun.getReportType()

                    getTextField[0]['options'] = getReportType


                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddFloor',methods=['GET','POST'])
def AddFloor():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):

            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json(force = True)
                    Name = request_json.get('Name')
                    Email = request_json.get('Email')


                    Insert=Model.models.Application.M_Floor()
                    Insert.MF_FloorName=Name
                    Insert.MF_AliasName=Email
                    Insert.MF_AddIP= flask.request.remote_addr
                    Insert.MF_AddDate= datetime.datetime.now()
                    Insert.MF_AddUser= data['id']
                    session.add(Insert)
                    session.commit()
                    print("success")
                            #return "inserted Successfully"

                    ORGID= session.query(Model.models.Application.M_Floor.MFID).order_by(Model.models.Application.M_Floor.MFID.desc()).first()


                    return jsonify({'msg':'Floor Created Successfully', 'data': {'OrgId':ORGID[0]}})
                    # else:
                    #     return jsonify({'token': data, 'msg':'username is not valid','About':about,'TokenUser':data['user']})
                else:

                    ID= request.args.get('id')
                    request_json = request.get_json(force = True)
                    Name = request_json.get('Name')
                    Alias = request_json.get('Email')
                    Insert=session.query(Model.models.Application.M_Floor).get(ID)
                    Insert.MF_FloorName=Name
                    Insert.MF_AliasName=Alias
                    Insert.MF_AddIP= flask.request.remote_addr
                    Insert.MF_ModDate= datetime.datetime.now()
                    Insert.MF_ModUser= data['id']

                    session.commit()
                    return jsonify({'msg':'Floor Updated Successfully', 'data': ID})
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DeleteFloor',methods=['GET'])
def DeleteFloor():
    try:
        if(request.method == "POST"):
            session=Session()
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    Id=request.args.get('id')
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Floor
                                    ).filter(Model.models.Application.M_Floor.MFID==Id
                                    ).update({Model.models.Application.M_Floor.MF_IsActive:0,
                                    Model.models.Application.M_Floor.MF_IsDeleted:1,
                                    Model.models.Application.M_Floor.MF_ModUser:data['id'],
                                    Model.models.Application.M_Floor.MF_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Floor Deleted Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getFloorAllDtls', methods=['GET'])
def getFloorAllDtls():
    session=Session()
    try:
        if(request.method == "GET"):

            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    Name= request.args.get('Name')
                    Alias= request.args.get('Email')

                    apply = []

                    if(Name !='' and Name !=None):
                        apply.append(Model.models.Application.M_Floor.MF_FloorName == Name)
                    if(Alias !='' and Alias !=None):
                        apply.append(Model.models.Application.M_Floor.MF_AliasName == Alias)

                    if((Name!='' and Alias !='') or  (Alias !=None and Alias !=None)):
                        queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.FloorAllDtls,
                        session.query(Model.models.Application.M_Floor.MFID.label('ID'),
                                    Model.models.Application.M_Floor.MF_FloorName.label('Name'),
                                    Model.models.Application.M_Floor.MF_AliasName.label('Alias')
                                        ).filter_by(MF_IsActive=1,MF_IsDeleted=0).filter(*apply).all()
                                )
                        session.commit()
                    else:
                        queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.FloorAllDtls,
                        session.query(Model.models.Application.M_Floor.MFID.label('ID'),
                                    Model.models.Application.M_Floor.MF_FloorName.label('Name'),
                                    Model.models.Application.M_Floor.MF_AliasName.label('Alias')
                                        ).filter_by(MF_IsActive=1,MF_IsDeleted=0).all()
                                )
                        session.commit()
                        return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/addRoom',methods=['GET','POST'])
def AddRoom():
    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    ID = request_json.get('ID')
                    if(ID=='' or ID==None):
                        request_json = request.get_json()
                        Org = request_json.get('org')
                        Clinic = request_json.get('clinic')
                        Floor = request_json.get('Floor')
                        RoomName = request_json.get('roomname')
                        RoomNo = request_json.get('roomnumber')

                        Insert=Model.models.Application.M_Room()
                        Insert.M_Organisation_MOID=Org
                        Insert.M_Branch_MBID=Clinic
                        Insert.M_Floor_MFID=Floor
                        Insert.MR_RoomName=RoomName
                        Insert.MR_RoomNumber=RoomNo
                        Insert.MR_AddIP= flask.request.remote_addr
                        Insert.MR_AddUser = data['id']
                        Insert.MR_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        print("success")
                        ORGID= session.query(Model.models.Application.M_Room.MRID).order_by(Model.models.Application.M_Room.MRID.desc()).first()


                        return jsonify({'msg':'Room Created Successfully', 'data': {'RoomId':ORGID[0]}})
                    else:


                        request_json = request.get_json(force = True)
                        Org = request_json.get('org')
                        Clinic = request_json.get('clinic')
                        Floor = request_json.get('Floor')
                        RoomName = request_json.get('roomname')
                        RoomNo = request_json.get('roomnumber')

                        Insert=session.query(Model.models.Application.M_Room).get(ID)
                        Insert.M_Organisation_MOID=Org
                        Insert.M_Branch_MBID=Clinic
                        Insert.M_Floor_MFID=Floor
                        Insert.MR_RoomName=RoomName
                        Insert.MR_RoomNumber=RoomNo
                        Insert.MR_AddIP= flask.request.remote_addr
                        Insert.MR_ModDate=datetime.datetime.now()
                        Insert.MR_ModUser = data['id']
                        session.commit()
                        return jsonify({'msg':'Room Updated Successfully', 'data': ID})

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getRoomForm', methods=['GET'])
def getRoomForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getRoomForm,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddRoom',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getClinic= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getClinics,
                        session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                    Model.models.Application.M_Branch.MB_Name.label('label')
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                )
                    session.commit()
                    getOrg= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getOrg,
                        session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                                    Model.models.Application.M_Organisation.MO_Name.label('label')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                                )
                    session.commit()
                    getFloor= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getFloor,
                        session.query(Model.models.Application.M_Floor.MFID.label('key'),
                                    Model.models.Application.M_Floor.MF_FloorName.label('label')
                                        ).filter_by(MF_IsActive=1,MF_IsDeleted=0).order_by(Model.models.Application.M_Floor.MF_FloorName).all()
                                )
                    session.commit()
                    nameValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.nameValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='name',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    emailValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.emailValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='email',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    # Validation= Common_Function.CommonFun.convertToJson(
                    #     Constant.constant.constant.Validation,
                    #     session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                    #                 Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                    #                 Model.models.Application.M_validations.MV_Message.label('message')
                    #                     ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                    #             )
                    numberValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.numberValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='number',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    getTextField[1]['options'] = getClinic

                    getTextField[0]['options'] = getOrg

                    getTextField[2]['options'] = getFloor

                    getTextField[0]['validations'] = Common_Function.CommonFun.Validation()
                    getTextField[1]['validations'] = Common_Function.CommonFun.Validation()
                    getTextField[2]['validations'] = Common_Function.CommonFun.Validation()
                    getTextField[3]['validations'] = nameValidation
                    getTextField[4]['validations'] = numberValidation

                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getAllBranchDtl',methods=['GET'])
def getAllBranchDtl():
    try:
        if(request.method == "GET"):
            session=Session()
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    users = data['id']
                    # clinic = Common_Function.CommonFun.getClinic()
                    clinic = Common_Function.CommonFun.getClinicRights(users)
                    return jsonify(result=clinic)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/medicalProfileSubmit',methods=['POST'])
def medicalProfileSubmit():
    try:
        if(request.method == "POST"):
            session=Session()
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:

                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                  request_json = request.get_json()
                  name = request_json.get('name')
                  gender = request_json.get('gender')
                  bloodGroup = request_json.get('bloodGroup')
                  dob = request_json.get('dob')
                  knownAllergies = request_json.get('knownAllergies')
                  PreExsMed = request_json.get('PreExsMed')
                  Id = request_json.get('ID')
                  Insert=session.query(Model.models.Application.M_Patient).get(Id)

                  Insert.MP_Name=name
                  Insert.MP_Gender=gender
                  Insert.MP_DOB=dob
                  Insert.MP_BloodGroup=bloodGroup
                  Insert.MP_Allergies=knownAllergies
                  Insert.MP_PreExMed=PreExsMed
                  Insert.MP_AddIP= flask.request.remote_addr
                  Insert.MP_ModDate=datetime.datetime.now()
                  session.commit()
                  print("success")
                  return jsonify({'msg':'Medical Profile Updated Successfully'})
                  clinic = ''
                  return jsonify(result=clinic)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()





@app.route('/getRoomEditForm',methods=['POST'])
def getRoomEditForm():
    try:
        if(request.method == "POST"):
            session=Session()
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    content_type = request.headers.get('Content-Type')
                    #Id=request.get_json(force = True)
                    Id= request.data
                    #Id=request.get_json(silent=True)
                    queryresult= session.query(Model.models.Application.M_Room.MRID.label('ID'),
                                    Model.models.Application.M_Room.MR_RoomNumber.label('Number'),
                                    Model.models.Application.M_Room.MR_RoomName.label('Name'),
                                    Model.models.Application.M_Room.M_Floor_MFID.label('Floor'),
                                    Model.models.Application.M_Room.M_Branch_MBID.label('Clinic'),
                                    Model.models.Application.M_Room.M_Organisation_MOID.label('Organisation')
                                    ).filter_by(MR_IsActive=1,MR_IsDeleted=0,MRID=Id
                                    ).join(Model.models.Application.M_Floor, Model.models.Application.M_Floor.MFID==Model.models.Application.M_Room.M_Floor_MFID
                                    ).join(Model.models.Application.M_Organisation, Model.models.Application.M_Organisation.MOID==Model.models.Application.M_Room.M_Organisation_MOID
                                    ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Room.M_Branch_MBID
                                        ).all()
                    session.commit()
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getRoomForm,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddRoom',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getClinic= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getClinics,
                        session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                    Model.models.Application.M_Branch.MB_Name.label('label')
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                )
                    session.commit()
                    getOrg= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getOrg,
                        session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                                    Model.models.Application.M_Organisation.MO_Name.label('label')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                                )
                    session.commit()
                    getFloor= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getFloor,
                        session.query(Model.models.Application.M_Floor.MFID.label('key'),
                                    Model.models.Application.M_Floor.MF_FloorName.label('label')
                                        ).filter_by(MF_IsActive=1,MF_IsDeleted=0).order_by(Model.models.Application.M_Floor.MF_FloorName).all()
                                )
                    session.commit()
                    getTextField[4]['value'] = queryresult[0].Number
                    getTextField[3]['value'] = queryresult[0].Name
                    getTextField[2]['value'] = queryresult[0].Floor
                    getTextField[1]['value'] = queryresult[0].Clinic
                    getTextField[0]['value'] = queryresult[0].Organisation

                    getTextField[1]['options'] = getClinic
                    getTextField[0]['options'] = getOrg

                    getTextField[2]['options'] = getFloor


                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSearchRoomForm', methods=['GET'])
def getSearchRoomForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getRoomForms,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='searchRoom',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getClinic= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getClinics,
                        session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                    Model.models.Application.M_Branch.MB_Name.label('label')
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                )
                    session.commit()
                    getOrg= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getOrg,
                        session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                                    Model.models.Application.M_Organisation.MO_Name.label('label')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                                )
                    session.commit()
                    getFloor= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getFloor,
                        session.query(Model.models.Application.M_Floor.MFID.label('key'),
                                    Model.models.Application.M_Floor.MF_FloorName.label('label')
                                        ).filter_by(MF_IsActive=1,MF_IsDeleted=0).order_by(Model.models.Application.M_Floor.MF_FloorName).all()
                                )
                    session.commit()
                    getTextField[1]['options'] = getClinic

                    getTextField[0]['options'] = getOrg

                    getTextField[2]['options'] = getFloor


                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DeleteRoom',methods=['POST'])
def DeleteRoom():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    Id=request.get_json()
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Room
                                    ).filter(Model.models.Application.M_Room.MRID==Id
                                             ).update({Model.models.Application.M_Room.MR_IsDeleted:1,
                                                       Model.models.Application.M_Room.MR_ModUser:data['id'],
                                                       Model.models.Application.M_Room.MR_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Room Deleted Successfully'})
                    else:
                        return jsonify({'msg':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getRoomSearchDtls', methods=['POST','GET'])
def getRoomSearchDtls():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json(force = True)
                    Org = request_json.get('org')
                    Clinic = request_json.get('clinic')
                    Floor = request_json.get('Floor')
                    RoomName = request_json.get('roomname')
                    RoomNo = request_json.get('roomnumber')

                    apply = []

                    if(Org !='' and Org !=None):
                        apply.append(Model.models.Application.M_Room.M_Organisation_MOID == Org)
                    if(Clinic !='' and Clinic !=None):
                        apply.append(Model.models.Application.M_Room.M_Branch_MBID == Clinic)
                    if(Floor !='' and Floor !=None):
                        apply.append(Model.models.Application.M_Room.M_Floor_MFID == Floor)
                    if(RoomName !='' and RoomName !=None):
                        #search = "%{}%".format(RoomName)
                        apply.append(Model.models.Application.M_Room.MR_RoomName.contains(RoomName))
                    if(RoomNo !='' and RoomNo !=None):
                        #search1 = "%{}%".format(RoomNo)
                        apply.append(Model.models.Application.M_Room.MR_RoomNumber.contains(RoomNo))
                    if((Org!='' and Org !=None) or (Clinic!='' and Clinic !=None) or (Floor!='' and Floor !=None) or (RoomName!='' and RoomName !=None) or  (RoomNo !='' and RoomNo !=None)):
                        queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.RoomAllDtls,
                            session.query(Model.models.Application.M_Room.MRID.label('ID'),
                                        Model.models.Application.M_Organisation.MO_Name.label('Organisation'),
                                        Model.models.Application.M_Branch.MB_Name.label('Clinic'),
                                        Model.models.Application.M_Floor.MF_FloorName.label('Floor'),
                                        Model.models.Application.M_Room.MR_RoomName.label('Room Name'),
                                        Model.models.Application.M_Room.MR_RoomNumber.label('Room Number')
                                            ).filter_by(MR_IsActive=1,MR_IsDeleted=0).filter(*apply
                                        ).join(Model.models.Application.M_Floor, Model.models.Application.M_Floor.MFID==Model.models.Application.M_Room.M_Floor_MFID
                                    ).join(Model.models.Application.M_Organisation, Model.models.Application.M_Organisation.MOID==Model.models.Application.M_Room.M_Organisation_MOID
                                    ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Room.M_Branch_MBID
                                        ).order_by(Model.models.Application.M_Room.MRID.desc()).all()
                                    )
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'No Record Found'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getRoomAllDtls', methods=['GET'])
def getRoomAllDtls():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.RoomAllDtls,
                        session.query(Model.models.Application.M_Room.MRID.label('ID'),
                                    Model.models.Application.M_Room.MR_RoomNumber.label('Room Number'),
                                    Model.models.Application.M_Room.MR_RoomName.label('Room Name'),
                                    Model.models.Application.M_Floor.MF_FloorName.label('Floor'),
                                    Model.models.Application.M_Branch.MB_Name.label('Clinic'),
                                    Model.models.Application.M_Organisation.MO_Name.label('Organisation')
                                    ).filter_by(MR_IsActive=1,MR_IsDeleted=0
                                    ).join(Model.models.Application.M_Floor, Model.models.Application.M_Floor.MFID==Model.models.Application.M_Room.M_Floor_MFID
                                    ).join(Model.models.Application.M_Organisation, Model.models.Application.M_Organisation.MOID==Model.models.Application.M_Room.M_Organisation_MOID
                                    ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Room.M_Branch_MBID
                                    ).order_by(Model.models.Application.M_Room.MRID.desc()).all()
                                )
                    session.commit()
                    return jsonify(result=queryresult)

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDoctorDtls', methods=['GET'])
def getDoctorDtls():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getDoctorDtls,
                        session.query(Model.models.Application.M_DoctorDetails.MDDID.label('ID'),
                                    func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,' ',Model.models.Application.M_DoctorDetails.MDD_LastName).label('Full Name'),
                                    Model.models.Application.M_DoctorDetails.MDD_OnlineFeeINR.label('Online Fee (INR)'),
                                    Model.models.Application.M_DoctorDetails.MDD_OnlineFeeUSD.label('Online Fee (USD)'),
                                    Model.models.Application.M_DoctorDetails.MDD_visitFeeINR.label('Visit Fee (INR)'),
                                    Model.models.Application.M_DoctorDetails.MDD_visitFeeUSD.label('Visit Fee (USD)'),
                                    Model.models.Application.M_DoctorDetails.MDD_Clinic.label('MDD_Clinic'),
                                    Model.models.Application.M_Branch.MB_Name.label('Clinic'),
                                    ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0
                                    ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID ==Model.models.Application.M_DoctorDetails.MDD_Clinic).all()
                                )
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAddOrgForm', methods=['GET'])
def getAddOrgForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getAddOrgForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline')

                        ).filter_by(MFC_FormName='AddOrgForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    nameValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.nameValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='name',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    emailValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.emailValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='email',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    mobileValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.mobileValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='mobile',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    Validation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.Validation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    
                    session.commit()
                    getTextField[0]['validations'] = Validation
                    getTextField[1]['validations'] = Validation
                    getTextField[2]['validations'] = Validation
                    getTextField[3]['validations'] = Validation

                    getTextField[3]['rows'] = 7
                    getTextField[3]['minLength']=5
                    getTextField[3]['maxLength']=300


                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getEditOrgForm', methods=['GET','POST'])
def getEditOrgForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    Id= request.data
                    #Id=request.get_json(silent=True)
                    queryresult= session.query(Model.models.Application.M_Organisation.MOID.label('ID'),
                                    Model.models.Application.M_Organisation.MO_Name.label('Name'),
                                    Model.models.Application.M_Organisation.MO_Email.label('Email'),
                                    Model.models.Application.M_Organisation.MO_Mobile.label('Mobile'),
                                    Model.models.Application.M_Organisation.MO_About.label('About'),

                                    ).filter_by(MO_IsActive=1,MO_IsDeleted=0,MOID=Id
                                    ).all()
                    session.commit()
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getEditOrgForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline')

                        ).filter_by(MFC_FormName='AddOrgForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

                    session.commit()
                    Validation= Common_Function.CommonFun.Validation()

                    getTextField[0]['validations'] = Validation
                    getTextField[1]['validations'] = Validation
                    getTextField[2]['validations'] = Validation
                    getTextField[3]['validations'] = Validation

                    getTextField[3]['rows'] = 7
                    getTextField[3]['minLength']=5
                    getTextField[3]['maxLength']=300

                    getTextField[0]['value'] = queryresult[0].Name
                    getTextField[1]['value'] = queryresult[0].Email
                    getTextField[2]['value'] = queryresult[0].Mobile
                    getTextField[3]['value'] = queryresult[0].About

                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getSearchedOrg', methods=['POST','get'])
def getSearchedOrgForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json(force = True)
                    Name = request_json.get('Name')
                    Email = request_json.get('Email')
                    Mobile = request_json.get('Mobile')


                    apply = []

                    if(Name !='' and Name !=None):
                        apply.append(Model.models.Application.M_Organisation.MO_Name.contains(Name))
                    if(Email !='' and Email !=None):
                        apply.append(Model.models.Application.M_Organisation.MO_Email.contains(Email))
                    if(Mobile !='' and Mobile !=None):
                        apply.append(Model.models.Application.M_Organisation.MO_Mobile.contains(Mobile))

                    if((Name!='' and Name !=None) or (Email!='' and Email !=None) or (Mobile!='' and Mobile !=None)):
                        queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.OrgAllDtl,
                        session.query(Model.models.Application.M_Organisation.MOID.label('ID'),
                                    Model.models.Application.M_Organisation.MO_Name.label('Name'),
                                    Model.models.Application.M_Organisation.MO_Email.label('Email'),
                                    Model.models.Application.M_Organisation.MO_Mobile.label('Mobile'),
                                    Model.models.Application.M_Organisation.MO_About.label('About')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0).filter(*apply
                                    ).order_by(Model.models.Application.M_Organisation.MOID.desc()).all()
                                )
                        session.commit()
                        return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getSearchedClinic', methods=['POST','get'])
def getSearchedClinic():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json(force = True)
                    organisation = request_json.get('organisation')
                    clinic = request_json.get('clinic')
                    email = request_json.get('email')
                    mobile = request_json.get('mobile')
                    country = request_json.get('country')
                    state = request_json.get('state')
                    city = request_json.get('city')

                    apply = []

                    if(organisation !='' and organisation !=None):
                        apply.append(Model.models.Application.M_Branch.M_Organisation_MOID == organisation)
                    if(clinic !='' and clinic !=None):
                        apply.append(Model.models.Application.M_Branch.MB_Name.contains(clinic))
                    if(email !='' and email !=None):
                        apply.append(Model.models.Application.M_Branch.MB_Email.contains(email))
                    if(mobile !='' and mobile !=None):
                        apply.append(Model.models.Application.M_Branch.MB_Mobile.contains(mobile))
                    if(country !='' and country !=None):
                        apply.append(Model.models.Application.M_Branch.MB_Country == country)
                    if(state !='' and state !=None):
                        apply.append(Model.models.Application.M_Branch.MB_State == state)
                    if(city !='' and city !=None):
                        apply.append(Model.models.Application.M_Branch.MB_City==city)

                    if((organisation!='' and organisation !=None) or (clinic!='' and clinic !=None) or (email!='' and email !=None) or (mobile!='' and mobile !=None) or (country!='' and country !=None) or (state!='' and state !=None) or (city!='' and city !=None)):
                        queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getSearchedClinic,
                        session.query(Model.models.Application.M_Branch.MBID.label('ID'),
                                    Model.models.Application.M_Branch.MB_Name.label('Clinic Name'),
                                    Model.models.Application.M_Organisation.MO_Name.label('Organisation'),
                                    Model.models.Application.M_Branch.MB_OpenTime.label('Open Time'),
                                    Model.models.Application.M_Branch.MB_CloseTime.label('Close Time'),
                                    Model.models.Application.M_Branch.MB_Address.label('Address'),
                                    Model.models.Application.M_Branch.MB_Mobile.label('Mobile'),
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0).filter(*apply
                                    ).join(Model.models.Application.M_Organisation, Model.models.Application.M_Organisation.MOID==Model.models.Application.M_Branch.M_Organisation_MOID
                                    ).order_by(Model.models.Application.M_Branch.MBID.desc()).all()
                                )
                        session.commit()
                        return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSearchOrgForm', methods=['GET'])
def getSearchOrgForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getSearchOrgForm,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='SearchOrgForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

                    session.commit()
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSearchClinicForm', methods=['GET'])
def getSearchClinicForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getSearchClinicForm,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='SearchClinicForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getOrg= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getOrglist,
                        session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                                    Model.models.Application.M_Organisation.MO_Name.label('label')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                                )
                    session.commit()
                    getCountry= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetCountryid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=1,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getState = Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetStateid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=2,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getCity = Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetCityid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=3,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )

                    getTextField[0]['options'] = getOrg

                    getTextField[4]['options'] = getCountry

                    getTextField[5]['options'] = getState

                    getTextField[6]['options'] = getCity

                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAddClinicForm', methods=['GET'])
def getAddClinicForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getAddClinicForm,
                                session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline')
                        ).filter_by(MFC_FormName='AddClinicForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getTiming= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getTiming,
                                session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Style,'').label('style')
                        ).filter_by(MFC_FormName='CliniceTime',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getAddress= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getAddress,
                                session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline')
                        ).filter_by(MFC_FormName='AddressField',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    time = {'hour': 13, 'minute': 30}

                    getOrg= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getOrglist,
                        session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                                    Model.models.Application.M_Organisation.MO_Name.label('label')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                                )
                    session.commit()
                    getCountry= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetCountryid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=1,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getState = Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetStateid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=2,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getCity = Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetCityid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=3,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )

                    session.commit()
                    Validation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.Validation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    nameValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.nameValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='name',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    emailValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.emailValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='email',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    mobileValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.mobileValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='mobile',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    getAddress[0]['validations'] = Validation
                    getAddress[1]['validations'] = Validation
                    getAddress[2]['validations'] = Validation
                    getAddress[3]['validations'] = Validation
                    getAddress[2]['options'] = getState
                    getAddress[3]['options'] = getCity
                    getAddress[1]['options'] = getCountry
                    getTiming[0]['validations'] = Validation
                    getTiming[0]['time'] = {'hour': 13, 'minute': 30}  #time
                    getTiming[2]['validations'] = Validation
                    getTiming[3]['validations'] = Validation
                    getTextField[0]['options'] = getOrg
                    getTextField[0]['validations'] = Validation
                    getTextField[1]['validations'] = Validation
                    getTextField[2]['validations'] = emailValidation
                    getTextField[3]['validations'] = mobileValidation
                    getTextField[4]['validations'] = Validation
                    getTextField[5]['childControl'] = getAddress
                    getTextField[6]['childControl'] = getTiming
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/EditClinicForm', methods=['GET','POST'])
def EditClinicForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    Id= request.data

                    queryresult= session.query(Model.models.Application.M_Branch.MBID.label('ID'),
                                    Model.models.Application.M_Branch.MB_Name.label('Clinic'),
                                    Model.models.Application.M_Branch.M_Organisation_MOID.label('Organisation'),
                                    Model.models.Application.M_Branch.MB_OpenTime.label('Open'),
                                    Model.models.Application.M_Branch.MB_CloseTime.label('Close'),
                                    Model.models.Application.M_Branch.MB_Address.label('Address'),
                                    Model.models.Application.M_Branch.MB_Mobile.label('Mobile'),
                                    Model.models.Application.M_Branch.MB_Email.label('Email'),
                                    Model.models.Application.M_Branch.MB_City.label('City'),
                                    Model.models.Application.M_Branch.MB_State.label('State'),
                                    Model.models.Application.M_Branch.MB_Country.label('Country'),
                                    Model.models.Application.M_Branch.MB_PinCode.label('Pincode')
                                    # Model.models.Application.M_Branch.MB_City.label('Close'),
                                    # Model.models.Application.M_Branch.MB_State.label('Address'),
                                    # Model.models.Application.M_Branch.MB_Country.label('Mobile')
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0,MBID=Id
                                    ).all()
                    session.commit()
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getAddClinicForm,
                                session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline')
                        ).filter_by(MFC_FormName='AddClinicForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getTiming= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getTiming,
                                session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Style,'').label('style')
                        ).filter_by(MFC_FormName='CliniceTime',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getAddress= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getAddress,
                                session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline')
                        ).filter_by(MFC_FormName='AddressField',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    time = {'hour': 13, 'minute': 30}
                    getOrg = Common_Function.CommonFun.getOrg()
                    getCountry= Common_Function.CommonFun.getCountry()

                    # getOrg= Common_Function.CommonFun.convertToJson(
                    #     Constant.constant.constant.getOrglist,
                    #     session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                    #                 Model.models.Application.M_Organisation.MO_Name.label('label')
                    #                     ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                    #             )
                    # getCountry= Common_Function.CommonFun.convertToJson(
                    #     Constant.constant.constant.GetCountryid,
                    #     session.query(Model.models.Application.T_Details.TDID.label('key'),
                    #                 Model.models.Application.T_Details.TD_Name.label('label')
                    #                     ).filter_by(M_Details_MDID=1,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                    #             )

                    getState = Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetStateid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=2,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getCity = Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetCityid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=3,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )

                    session.commit()
                    Validation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.Validation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    nameValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.nameValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='name',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    emailValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.emailValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='email',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    mobileValidation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.mobileValidation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='mobile',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    session.commit()
                    getAddress[0]['validations'] = Validation
                    getAddress[1]['validations'] = Validation
                    getAddress[2]['validations'] = Validation
                    getAddress[3]['validations'] = Validation
                    getAddress[2]['options'] = getState
                    getAddress[3]['options'] = getCity
                    getAddress[1]['options'] = getCountry
                    getTiming[0]['validations'] = Validation
                    getTiming[0]['time'] = {'hour': 13, 'minute': 30}  #time
                    getTiming[2]['validations'] = Validation
                    getTextField[0]['options'] = getOrg
                    getTextField[0]['validations'] = Validation
                    getTextField[1]['validations'] = Validation
                    getTextField[2]['validations'] = emailValidation
                    getTextField[3]['validations'] = mobileValidation
                    getTextField[4]['validations'] = Validation
                    getTextField[5]['childControl'] = getAddress
                    getTextField[6]['childControl'] = getTiming

                    getTextField[0]['value'] = queryresult[0].Organisation
                    getTextField[1]['value'] = queryresult[0].Clinic
                    getTextField[2]['value'] = queryresult[0].Email
                    getTextField[3]['value'] = queryresult[0].Mobile
                    getTextField[4]['value'] = queryresult[0].Address
                    getAddress[0]['value'] = queryresult[0].Pincode
                    getAddress[1]['value'] = queryresult[0].Country
                    getAddress[2]['value'] = queryresult[0].State
                    getAddress[3]['value'] = queryresult[0].City
                    getTiming[0]['value'] = queryresult[0].Open
                    getTiming[2]['value'] = queryresult[0].Close
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/AddPatientForm', methods=['GET'])
def AddPatientForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddPatientForm2,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddPatientForm2',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).order_by(Model.models.Application.M_FormControl.MFC_preference).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID).all()
                    )
                    session.commit()
                    getRelation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getRelation,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=10,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    # getTextField[6]['options'] = getGender
                    # getTextField[11]['options'] = getCity

                    # getTextField[9]['options'] = getCountry

                    # getTextField[8]['options'] = getProcedure

                    # getTextField[10]['options'] = getState

                    # getTextField[13]['options'] = getClinic

                    # getTextField[12]['options'] = getOrg
                    # getTextField[14]['options'] = getIdentityType
                    getTextField[0]['options'] = Common_Function.CommonFun.getClinic()

                    getTextField[5]['options'] = getRelation
                    getTextField[3]['options'] = [{
                        "key": 1,
                        "label": "Below 18"
                        }]
                    getTextField[0]['hide'] = False
                    getTextField[1]['hide'] = False
                    getTextField[2]['hide'] = False
                    getTextField[3]['hide'] = False
                    getTextField[4]['hide'] = True
                    getTextField[5]['hide'] = True
                    # #getTextField[22]['options'] = getState
                    # getTextField[20]['options'] = getIdentityType


                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/AddPatientFormAfterCheck', methods=['GET'])
def AddPatientFormAfterCheck():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddPatientFormAfterCheck,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddPatientForm3',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).order_by(Model.models.Application.M_FormControl.MFC_preference).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID).all()
                    )
                    session.commit()
                    getRelation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getRelation,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=10,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getTextField[0]['options'] = Common_Function.CommonFun.getClinic()

                    getTextField[5]['options'] = getRelation



                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/searchPatientForm', methods=['GET'])
def searchPatientForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.searchPatientForm,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='SearchPatientForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).order_by(Model.models.Application.M_FormControl.MFC_preference).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getClinic= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getCliniclist,
                        session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                    Model.models.Application.M_Branch.MB_Name.label('label')
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0
                                    ).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                )
                    session.commit()
                    getOrg= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getOrglist,
                        session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                                    Model.models.Application.M_Organisation.MO_Name.label('label')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0
                                                    ).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                                )
                    session.commit()
                    getRefferDoctor= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getRefferDoctor,
                        session.query(Model.models.Application.M_ReferredByDoctor.MRDID.label('key'),
                                    sqlalchemy.func.concat(Model.models.Application.M_ReferredByDoctor.MRD_FirstName,' ',Model.models.Application.M_ReferredByDoctor.MRD_LastName).label('label')
                                        ).filter_by(MRD_IsActive=1,MRD_IsDeleted=0
                                                    ).order_by(Model.models.Application.M_ReferredByDoctor.MRD_FirstName).all()
                                )
                    session.commit()
                    getTextField[5]['options'] = getOrg

                    getTextField[1]['options'] = getRefferDoctor

                    getTextField[6]['options'] = getClinic

                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getpatientEditForm', methods=['POST'])
def getpatientEditForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    content_type = request.headers.get('Content-Type')
                    #Id=request.get_json(force = True)
                    Id= request.data
                    queryresult= session.query(Model.models.Application.M_Patient.MPID.label('ID'),
                                    Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                    Model.models.Application.M_Patient.MP_RefferedBy.label('Reffered'),
                                    Model.models.Application.M_Patient.MP_Code.label('Code'),
                                    Model.models.Application.M_Patient.MP_Name.label('Name'),
                                    Model.models.Application.M_Patient.MP_Email.label('Email'),
                                    Model.models.Application.M_Patient.MP_Mobile.label('Mobile'),
                                    Model.models.Application.M_Patient.MP_Address.label('Address'),
                                    Model.models.Application.M_Patient.MP_Gender.label('Gender'),
                                    Model.models.Application.M_Patient.MP_DOB.label('DOB'),
                                    Model.models.Application.M_Patient.MP_Procedure.label('Procedure'),
                                    Model.models.Application.M_Patient.MP_City.label('City'),
                                    Model.models.Application.M_Patient.MP_State.label('State'),
                                    Model.models.Application.M_Patient.MP_Country.label('Country'),
                                    Model.models.Application.M_Patient.M_Organisation_MOID.label('Organisation'),
                                    Model.models.Application.M_Patient.M_Branch_MBID.label('Clinic'),
                                    Model.models.Application.M_Patient.M_IdentityType.label('IdentityType'),
                                    Model.models.Application.M_Patient.M_IdentityNumber.label('IdentityNum'),
                                    Model.models.Application.M_Patient.MP_PassportNo.label('PassportNo'),
                                    Model.models.Application.M_Patient.MP_CountryCode.label('CountryCode'),
                                    Model.models.Application.M_Patient.MP_OtherRelation.label('OtherRelation')
                                        ).filter_by(MPID=Id,MP_IsActive=1,MP_IsDeleted=0).all()
                    session.commit()
                    attendentresult= session.query(Model.models.Application.M_PatientDetails.MPDID.label('attID'),
                                    Model.models.Application.M_PatientDetails.MPD_AttndntName.label('AttndntName'),
                                    Model.models.Application.M_PatientDetails.MPD_AttndntRelation.label('Relation'),
                                    Model.models.Application.M_PatientDetails.M_IdentityType_MITID.label('IdentityType'),
                                    Model.models.Application.M_PatientDetails.MPD_IdentityVal.label('IdentityVal'),
                                    Model.models.Application.M_PatientDetails.MPD_ContactNumber.label('ContactNumber'),
                                    Model.models.Application.M_PatientDetails.MPD_AttndntAddress.label('AttndntAddress')
                                        ).filter_by(M_Patient_MPID=Id,MPD_IsActive=1,MPD_IsDeleted=0).all()


                    session.commit()

                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.EditPatientForm,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddPatientForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).order_by(Model.models.Application.M_FormControl.MFC_preference).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getClinic= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getCliniclist,
                        session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                    Model.models.Application.M_Branch.MB_Name.label('label')
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0).all()
                                )
                    session.commit()
                    getOrg= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getOrglist,
                        session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                                    Model.models.Application.M_Organisation.MO_Name.label('label')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0).all()
                                )
                    session.commit()
                    getCountry= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetCountryid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=1,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getState = Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetStateid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=2,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getCity = Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetCityid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=3,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getProcedure= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getProcedures,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=6,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getGender= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetGenders,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=4,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getIdentityType= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getIdentityType,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=9,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getRelation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getRelation,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=10,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getTextField[6]['options'] = getGender
                    getTextField[11]['options'] = getCity

                    getTextField[9]['options'] = getCountry

                    getTextField[8]['options'] = getProcedure

                    getTextField[10]['options'] = getState

                    getTextField[13]['options'] = getClinic

                    getTextField[12]['options'] = getOrg
                    getTextField[14]['options'] = getIdentityType
                    getTextField[17]['options'] = getRelation
                    #getTextField[23]['options'] = getCity
                    #getTextField[22]['options'] = getState
                    getTextField[20]['options'] = getIdentityType

                    getTextField[0]['value'] = queryresult[0].Reffered
                    getTextField[1]['value'] = queryresult[0].Code
                    getTextField[2]['value'] = queryresult[0].Name
                    getTextField[3]['value'] = queryresult[0].Email
                    getTextField[4]['value'] = queryresult[0].Mobile
                    getTextField[5]['value'] = queryresult[0].Address
                    getTextField[6]['value'] = queryresult[0].Gender
                    if(queryresult[0].DOB !='' and queryresult[0].DOB!= None):
                        getTextField[7]['value'] = queryresult[0].DOB.strftime('%Y-%m-%d')
                    else:
                        getTextField[7]['value'] = queryresult[0].DOB
                    getTextField[8]['value'] = queryresult[0].Procedure
                    getTextField[9]['value'] = queryresult[0].Country
                    getTextField[10]['value'] = queryresult[0].State
                    getTextField[11]['value'] = queryresult[0].City
                    getTextField[12]['value'] = 52#queryresult[0].Organisation
                    getTextField[13]['value'] = queryresult[0].Clinic
                    getTextField[14]['value'] = queryresult[0].IdentityType
                    getTextField[15]['value'] = queryresult[0].IdentityNum
                    if(len(attendentresult)>0):
                        getTextField[16]['value'] = attendentresult[0].AttndntName
                        getTextField[17]['value'] = attendentresult[0].Relation
                        getTextField[18]['value'] = attendentresult[0].ContactNumber
                        getTextField[19]['value'] = attendentresult[0].AttndntAddress
                        getTextField[20]['value'] = attendentresult[0].IdentityType
                        getTextField[21]['value'] = attendentresult[0].IdentityVal
                    getTextField[22]['value'] = queryresult[0].CountryCode
                    getTextField[23]['value'] = queryresult[0].PassportNo
                    getTextField[24]['value'] = queryresult[0].OtherRelation


                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPatientDdl', methods=['GET'])
def getPatientDdl():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    content_type = request.headers.get('Content-Type')

                    getClinic= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getCliniclist,
                        session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                    Model.models.Application.M_Branch.MB_Name.label('label')
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0).all()
                                )
                    session.commit()
                    getOrg= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getOrglist,
                        session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                                    Model.models.Application.M_Organisation.MO_Name.label('label')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0).all()
                                )
                    session.commit()
                    getCountry= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetCountryid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=1,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getState = Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetStateid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=2,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getCity = Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetCityid,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=3,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getProcedure= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getProcedures,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=6,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getGender= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.GetGenders,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=4,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getIdentityType= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getIdentityType,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=9,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    session.commit()
                    getRelation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getRelation,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=10,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                )
                    getRefferDoctor= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getRefferDoctor,
                        session.query(Model.models.Application.M_ReferredByDoctor.MRDID.label('key'),
                                    sqlalchemy.func.concat(Model.models.Application.M_ReferredByDoctor.MRD_FirstName,' ',Model.models.Application.M_ReferredByDoctor.MRD_LastName).label('label')
                                        ).filter_by(MRD_IsActive=1,MRD_IsDeleted=0
                                                    ).order_by(Model.models.Application.M_ReferredByDoctor.MRD_FirstName).all()
                                )
                    session.commit()
                    getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())
                    getAllDdl = []
                    getAllDdl.append({'Clinic':getClinic,'Gender':getGender,'City':getCity,'Country':getCountry,
                                      'Service':getProcedure,'State':getState,'Org':getOrg,'IdentityType':getIdentityType,
                                      'Relation':getRelation,'Services':getServiceDtl,'ReferDoctor':getRefferDoctor})



                    return jsonify(result=getAllDdl)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddPatient',methods=['GET','POST'])
def AddPatient():
    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                BranchId= request.headers.get('branchId')
                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    ID = request_json.get('PID')
                    if(ID=='' or ID==None):

                        request_json = request.get_json(force = True)
                        # Referral = request_json.get('refferal')
                        # code = request_json.get('code')
                        pname = request_json.get('pname')
                        # email = request_json.get('email')
                        mobile = request_json.get('mobile')
                        # address = request_json.get('address')
                        # gender = request_json.get('gender')
                        # dob = request_json.get('dob')

                        # procedure = request_json.get('procedure')
                        # country = request_json.get('country')
                        # state = request_json.get('state')
                        # city = request_json.get('city')
                        # org = request_json.get('org')
                        # clinic = request_json.get('Clinic')
                        Passport = request_json.get('passportNumber')
                        CountryCode = request_json.get('countryCode')
                        referredBy = request_json.get('referredBy')
                        # identitytype = request_json.get('identitytype')
                        # identityno = request_json.get('identityno')
                        attendant = request_json.get('Guardian')
                        relation = request_json.get('Relation')
                        # attidentitytype = request_json.get('attidentitytype')
                        # attidentityno = request_json.get('identityno')
                        # attaddress = request_json.get('attaddress')

                        getClinic= session.query(Model.models.Application.M_Branch.MB_Code
                                        ).filter_by(MBID=int(BranchId),MB_IsActive=1,MB_IsDeleted=0).all()

                        totalPatientinbranch= session.query(Model.models.Application.M_Patient.MP_UHID
                                        ).filter_by(MP_IsActive=1,MP_IsDeleted=0).order_by(Model.models.Application.M_Patient.MPID.desc()).first()
                        clinicname=getClinic[0].MB_Code
                        sn=len(totalPatientinbranch) + 1
                        lastPatientIDs = totalPatientinbranch[0]
                        lastPatientID=  lastPatientIDs[-5:]
                        newPatientID= str(int(lastPatientID)+1).zfill(5)
                        UHID='CK'+str(clinicname) + str(newPatientID)
                        totalPatient= session.query(Model.models.Application.M_Patient.MP_UHID
                                        ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MP_Mobile=mobile,MP_Name=pname).order_by(Model.models.Application.M_Patient.MPID.desc()).all()
                        if(len(totalPatient)==0):
                            Insert=Model.models.Application.M_Patient()
                            Insert.MP_UHID=UHID
                            # Insert.MP_RefferedBy=Referral
                            # Insert.MP_Code=code
                            Insert.MP_Name=pname
                            # Insert.MP_Email=email
                            Insert.MP_Mobile=mobile
                            # Insert.MP_Address=address
                            Insert.MP_PassportNo=Passport
                            Insert.MP_CountryCode=CountryCode
                            Insert.MP_RefferedBy=referredBy
                            # Insert.MP_Gender=gender
                            # Insert.MP_DOB=dob

                            # Insert.MP_Procedure=procedure
                            # Insert.MP_City=city
                            # Insert.MP_State=state
                            # Insert.MP_Country=country
                            # Insert.M_Organisation_MOID=org
                            Insert.M_Branch_MBID=BranchId
                            # Insert.M_IdentityType=identitytype
                            # Insert.M_IdentityNumber=identityno
                            Insert.MP_AddUser= data['id']
                            Insert.MP_AddDate = datetime.datetime.now()
                            Insert.MP_AddIP= flask.request.remote_addr
                            session.add(Insert)
                            session.commit()
                            print("success")
                                    #return "inserted Successfully"

                            ORGID= session.query(Model.models.Application.M_Patient.MPID).order_by(Model.models.Application.M_Patient.MPID.desc()).first()

                            Insert=Model.models.Application.M_PatientDetails()
                            Insert.M_Patient_MPID=ORGID[0]
                            Insert.MPD_AttndntName=attendant
                            Insert.MPD_AttndntRelation=relation

                            # Insert.M_IdentityType_MITID=attidentitytype
                            # Insert.MPD_IdentityVal=attidentityno
                            # Insert.MPD_ContactNumber=mobile
                            # Insert.MPD_AttndntAddress=attaddress
                            Insert.MPD_AddUser= data['id']
                            Insert.MPD_AddDate = datetime.datetime.now()
                            session.add(Insert)
                            session.commit()
                            return jsonify({'msg':'Patient Added Successfully', 'data': {'PatientId':ORGID[0]}})
                        else:
                            return jsonify({'err': 'User with Same name and Phone No already Exist'})
                    else:

                        request_json = request.get_json(force = True)
                        Referral = request_json.get('refferal')
                        code = request_json.get('code')
                        pname = request_json.get('pname')
                        email = request_json.get('email')
                        mobile = request_json.get('mobile')
                        address = request_json.get('address')
                        gender = request_json.get('gender')
                        dob = request_json.get('dob')
                        Passport = request_json.get('passportNumber')
                        CountryCode = request_json.get('countryCode')
                        referredBy = request_json.get('referredBy')
                        procedure = request_json.get('procedure')
                        country = request_json.get('country')
                        state = request_json.get('state')
                        city = request_json.get('city')
                        org = request_json.get('org')
                        clinic = request_json.get('clinic')
                        identitytype = request_json.get('identitytype')
                        identityno = request_json.get('identityno')
                        attendant = request_json.get('attendant')
                        relation = request_json.get('relation')
                        attidentitytype = request_json.get('attidentitytype')
                        attidentityno = request_json.get('attidentityno')
                        attaddress = request_json.get('attaddress')


                        Insert=session.query(Model.models.Application.M_Patient).get(ID)
                        if(Referral!='' and Referral!=None):
                            Insert.MP_RefferedBy=Referral
                    
                        Insert.MP_Code=code
                        if(pname!='' and pname!=None):
                            Insert.MP_Name=pname
                        Insert.MP_Email=email
                        Insert.MP_Mobile=mobile
                        if(address!='' and address!=None):
                            Insert.MP_Address=address
                        if(gender!='' and gender!=None):
                            Insert.MP_Gender=gender
                        if(dob!='' and dob!=None):
                            Insert.MP_DOB=dob
                        Insert.MP_PassportNo=Passport
                        if(CountryCode!='' and CountryCode!=None):
                            Insert.MP_CountryCode=CountryCode
                        if(procedure!='' and procedure!=None):
                            Insert.MP_Procedure=procedure
                        if(city!='' and city!=None):
                            Insert.MP_City=city
                        if(state!='' and state!=None):
                            Insert.MP_State=state
                        if(country!='' and country!=None):
                            Insert.MP_Country=country
                        if(org!='' and org!=None):
                            Insert.M_Organisation_MOID=org
                        if(BranchId!='' and BranchId!=None):
                            Insert.M_Branch_MBID=BranchId
                        if(identitytype!='' and identitytype!=None):
                            Insert.M_IdentityType=identitytype
                        if(identityno!='' and identityno!=None):
                            Insert.M_IdentityNumber=identityno
                        Insert.MP_AddIP= flask.request.remote_addr
                        Insert.MP_ModDate=datetime.datetime.now()

                        session.commit()
                        print("success")
                                #return "inserted Successfully"

                        MPDID= session.query(Model.models.Application.M_PatientDetails.MPDID).filter_by(M_Patient_MPID=ID).all()
                        if(len(MPDID))>0:
                            Insert=session.query(Model.models.Application.M_PatientDetails).get(MPDID[0])
                            Insert.MPD_AttndntName=attendant
                            Insert.MPD_AttndntRelation=relation
                            Insert.M_IdentityType_MITID=attidentitytype
                            Insert.MPD_IdentityVal=attidentityno
                            Insert.MPD_ContactNumber=mobile
                            Insert.MPD_AttndntAddress=attaddress
                            Insert.MPD_ModDate=datetime.datetime.now()

                            session.commit()

                        return jsonify({'msg':'Patient Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DeletePatient',methods=['POST'])
def DeletePatient():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    Id=request.get_json()
                    #Id=request.data
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Patient
                                    ).filter(Model.models.Application.M_Patient.MPID==Id
                                             ).update({Model.models.Application.M_Patient.MP_IsDeleted:1,
                                                       Model.models.Application.M_Patient.MP_ModUser:data['id'],
                                                       Model.models.Application.M_Patient.MP_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Patient Deleted Successfully'})
                    else:
                        return jsonify({'msg':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPatient', methods=['GET'])
def getPatient():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                branchId= request.headers.get('branchId')
                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getPatient,
                        session.query(Model.models.Application.M_Patient.MPID.label('ID'),
                                    Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                    Model.models.Application.M_Patient.MP_Name.label('Name'),
                                    Model.models.Application.M_Patient.MP_Email.label('Email'),
                                    Model.models.Application.M_Patient.MP_Mobile.label('Mobile'),
                                    Model.models.Application.M_Patient.MP_Address.label('Address'),
                                    sqlalchemy.func.concat(Model.models.Application.M_ReferredByDoctor.MRD_FirstName,' ',Model.models.Application.M_ReferredByDoctor.MRD_LastName).label('Referred By')
                                    ).filter_by(MP_IsActive=1, MP_IsDeleted=0, M_Branch_MBID = int(branchId)
                                    ).outerjoin(Model.models.Application.M_ReferredByDoctor,
                                    Model.models.Application.M_ReferredByDoctor.MRDID==Model.models.Application.M_Patient.MP_RefferedBy
                                    ).order_by(Model.models.Application.M_Patient.MPID.desc()).all()
                                )
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/searchPatientDtl', methods=['POST'])
def searchPatientDtl():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                branchId= request.headers.get('branchId')
                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    UHID = request_json.get('UHID')
                    refferal = request_json.get('refferal')
                    pname = request_json.get('pname')
                    email = request_json.get('email')
                    mobile = request_json.get('mobile')
                    org = request_json.get('org')
                    clinic = request_json.get('clinic')
                    apply = []

                    if(UHID !='' and UHID !=None):
                        apply.append(Model.models.Application.M_Patient.MP_UHID.contains(UHID))
                    if(refferal !='' and refferal !=None):
                        apply.append(Model.models.Application.M_Patient.MP_RefferedBy==refferal)
                    if(pname !='' and pname !=None):
                        apply.append(Model.models.Application.M_Patient.MP_Name.contains(pname))
                    if(email !='' and email !=None):
                        apply.append(Model.models.Application.M_Patient.MP_Email.contains(email))
                    if(mobile !='' and mobile !=None):
                        apply.append(Model.models.Application.M_Patient.MP_Mobile.contains(mobile))
                    # if(org !='' and org !=None):
                    #     apply.append(Model.models.Application.M_Patient.M_Organisation_MOID==org)
                    if(clinic !='' and clinic !=None):
                        apply.append(Model.models.Application.M_Patient.M_Branch_MBID==clinic)
                    if((UHID!='' and UHID !=None) or (refferal!='' and refferal !=None) or (pname!='' and pname !=None) or (email!='' and email !=None) or  (mobile !='' and mobile !=None) or  (org !='' and org !=None) or  (clinic !='' and clinic !=None)):

                        queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getPatient,
                        session.query(Model.models.Application.M_Patient.MPID.label('ID'),
                                    Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                    Model.models.Application.M_Patient.MP_Name.label('Name'),
                                    Model.models.Application.M_Patient.MP_Email.label('Email'),
                                    Model.models.Application.M_Patient.MP_Mobile.label('Mobile'),
                                    Model.models.Application.M_Patient.MP_Address.label('Address'),
                                    sqlalchemy.func.concat(Model.models.Application.M_ReferredByDoctor.MRD_FirstName,' ',Model.models.Application.M_ReferredByDoctor.MRD_LastName).label('Referred By')
                                    ).filter(Model.models.Application.M_Patient.MP_IsActive==1,Model.models.Application.M_Patient.MP_IsDeleted==0).filter(*apply
                                    ).outerjoin(Model.models.Application.M_ReferredByDoctor,
                                    Model.models.Application.M_ReferredByDoctor.MRDID==Model.models.Application.M_Patient.MP_RefferedBy
                                    ).order_by(Model.models.Application.M_Patient.MPID.desc()).all()
                                )
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getPatientDtl,
                        session.query(Model.models.Application.M_Patient.MPID.label('ID'),
                                    Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                    Model.models.Application.M_Patient.MP_Name.label('Name'),
                                    Model.models.Application.M_Patient.MP_Email.label('Email'),
                                    Model.models.Application.M_Patient.MP_Mobile.label('Mobile'),
                                    Model.models.Application.M_Patient.MP_Address.label('Address'),
                                    sqlalchemy.func.concat(Model.models.Application.M_ReferredByDoctor.MRD_FirstName,' ',Model.models.Application.M_ReferredByDoctor.MRD_LastName).label('Referred By')
                                    ).filter(Model.models.Application.M_Patient.MP_IsActive==1,Model.models.Application.M_Patient.MP_IsDeleted==0,
                                             Model.models.Application.M_Patient.M_Branch_MBID == int(branchId)
                                    ).filter(*apply
                                    ).outerjoin(Model.models.Application.M_ReferredByDoctor,
                                    Model.models.Application.M_ReferredByDoctor.MRDID==Model.models.Application.M_Patient.MP_RefferedBy
                                    ).order_by(Model.models.Application.M_Patient.MPID.desc()).all()
                                )
                        session.commit()
                        return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAppointmentForm', methods=['POST','GET'])
def getAppointmentForm():
    session=Session()
    try:
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                if(request.method == "POST"):
                    # FormItems=[]
                    content_type = request.headers.get('Content-Type')
                    PId= str(request.data)
                    # if(Id=="0" and Id==0):
                    #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getAppointmentForm,session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Validations,'').label('filterDate')
                                ).filter_by(MFC_FormName='AddAppointmentForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    getDonation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getRelation,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=131,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TDID).all()
                                )
                    getProcedure= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getProcedures,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=6,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getDoctor= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDoctors,
                                session.query(Model.models.Application.M_DoctorDetails.MDDID.label('key'),
                                            Model.models.Application.M_DoctorDetails.MDD_FirstName.label('label')
                                                ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0).order_by(Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
                                        )
                    getStatus= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getStatus,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=11,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())
                    Validation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.Validation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    getTextField[0]['validations'] = Validation
                    getTextField[1]['validations'] = Validation
                    getTextField[2]['validations'] = Validation
                    getTextField[3]['validations'] = Validation
                    getTextField[4]['validations'] = Validation
                    getTextField[5]['validations'] = Validation

                    getTextField[3]['options'] = getDonation

                    getTextField[0]['options'] = getServiceDtl

                    getTextField[4]['options'] = getDoctor

                    getTextField[5]['options'] = getStatus

                    return jsonify(result=getTextField)
                else:
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getAppointmentForm,session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Validations,'').label('filterDate')
                                ).filter_by(MFC_FormName='AddAppointForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    getRelation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getRelation,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=131,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TDID).all()
                                )
                    getClinic= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getClinics,
                                session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                            Model.models.Application.M_Branch.MB_Name.label('label')
                                            ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                        )
                    # getOrg= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getOrg,
                    #             session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                    #                         Model.models.Application.M_Organisation.MO_Name.label('label')
                    #                             ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                    #                     )
                    # getProcedure= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getProcedures,
                    #             session.query(Model.models.Application.T_Details.TDID.label('key'),
                    #                         Model.models.Application.T_Details.TD_Name.label('label')
                    #                             ).filter_by(M_Details_MDID=6,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                    #                     )
                    getDoctor= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDoctors,
                                session.query(Model.models.Application.M_DoctorDetails.MDDID.label('key'),
                                            Model.models.Application.M_DoctorDetails.MDD_FirstName.label('label')
                                                ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0).order_by(Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
                                        )
                    getRoom= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getRoom,
                                session.query(Model.models.Application.M_Room.MRID.label('key'),
                                            Model.models.Application.M_Room.MR_RoomNumber.label('label')
                                                ).filter_by(MR_IsActive=1,MR_IsDeleted=0).order_by(Model.models.Application.M_Room.MR_RoomNumber).all()
                                        )
                    getStatus= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getStatus,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=11,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getAppointType= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getStatus,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=12,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getPatient= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPatients,
                                session.query(Model.models.Application.M_Patient.MPID.label('key'),
                                            sqlalchemy.func.concat(Model.models.Application.M_Patient.MP_Name,' ( ',Model.models.Application.M_Patient.MP_UHID,' )').label('label')
                                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0).order_by(Model.models.Application.M_Patient.MP_Name).all()
                                        )
                    getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())
                    # getTextField[7]['options'] = getClinic

                    Validation= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.Validation,
                        session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                    Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                    Model.models.Application.M_validations.MV_Message.label('message')
                                        ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                )
                    getTextField[0]['validations'] = Validation
                    getTextField[1]['validations'] = Validation
                    getTextField[2]['validations'] = Validation
                    getTextField[3]['validations'] = Validation
                    getTextField[4]['validations'] = Validation
                    getTextField[5]['validations'] = Validation
                    getTextField[0]['options'] = getPatient
                    # # getTextField[7]['options'] = getOrg

                    getTextField[1]['options'] = getServiceDtl

                    getTextField[5]['options'] = getDoctor
                    getTextField[4]['options'] = getRelation
                    getTextField[6]['options'] = getStatus
                    # getTextField[5]['options'] = getAppointType

                    return jsonify(result=getTextField)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/blankCellAppointment', methods=['POST','GET'])
def blankCellAppointment():
    session=Session()
    try:
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                if(request.method == "POST"):
                    # FormItems=[]
                    branchId= request.headers.get('branchId')
                    content_type = request.headers.get('Content-Type')
                    PId= str(request.data)
                    # if(Id=="0" and Id==0):
                    #if(PId!="b'0'"):
                    request_json = request.get_json()
                    doctorName = request_json.get('doctorName')
                    time = request_json.get('time')
                    datess = request_json.get('date')

                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.blankCellAppointment,session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Validations,'').label('filterDate')
                                ).filter_by(MFC_FormName='AddAppointForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    getClinic= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getClinics,
                                session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                            Model.models.Application.M_Branch.MB_Name.label('label')
                                            ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                        )
                    # getOrg= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getOrg,
                    #             session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                    #                         Model.models.Application.M_Organisation.MO_Name.label('label')
                    #                             ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                    #                     )
                    getProcedure= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getProcedures,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=6,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getDoctor= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDoctors,
                                session.query(Model.models.Application.M_DoctorDetails.MDDID.label('key'),
                                            Model.models.Application.M_DoctorDetails.MDD_FirstName.label('label')
                                                ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0
                                                ).filter(Model.models.Application.M_DoctorDetails.MDD_Clinic.contains(branchId)
                                                ).order_by(Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
                                        )
                    getRoom= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getRoom,
                                session.query(Model.models.Application.M_Room.MRID.label('key'),
                                            Model.models.Application.M_Room.MR_RoomNumber.label('label')
                                                ).filter_by(MR_IsActive=1,MR_IsDeleted=0).order_by(Model.models.Application.M_Room.MR_RoomNumber).all()
                                        )
                    getStatus= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getStatus,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=11,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getAppointType= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getStatus,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=12,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getDuration= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDuration,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=131,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TDID).all()
                                        )
                    getPatient= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPatients,
                                session.query(Model.models.Application.M_Patient.MPID.label('key'),
                                            sqlalchemy.func.concat(Model.models.Application.M_Patient.MP_Name,' ( ',Model.models.Application.M_Patient.MP_UHID, ', ',Model.models.Application.M_Patient.MP_Mobile,' )').label('label')
                                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0).order_by(Model.models.Application.M_Patient.MP_Name).all()
                                        )
                    getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())
                    Validation= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.Validation,
                                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                                            Model.models.Application.M_validations.MV_Message.label('message')
                                                ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                                        )
                    getTextField[0]['validations']=Validation
                    getTextField[1]['validations']=Validation
                    getTextField[2]['validations']=Validation
                    getTextField[3]['validations']=Validation
                    getTextField[4]['validations']=Validation
                    getTextField[5]['validations']=Validation
                    getTextField[6]['validations']=Validation
                    
                    if(datess!='' and datess!=None):
                        date = datess
                    else:
                        date=datetime.date.today()
                    # getTextField[7]['options'] = getClinic
                    getTextField[0]['options'] = getPatient
                    # getTextField[7]['options'] = getOrg

                    getTextField[1]['options'] = getServiceDtl
                    getTextField[4]['options'] = getDuration

                    getTextField[5]['options'] = getDoctor
                    # getTextField[8]['options'] = getRoom
                    getTextField[6]['options'] = getStatus
                    getTextField[7]['options'] = getAppointType
                    getTextField[5]['value'] = doctorName
                    getTextField[3]['value'] = time
                    getTextField[2]['value'] = str(date)
                    getTextField[4]['value'] = 521
                    getTextField[6]['value'] = 29
                    getTextField[7]['value'] = 31
                    getTextField[8]['value'] = True

                    return jsonify(result=getTextField)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    finally:
        session.close()



@app.route('/getEditAppointmentForm', methods=['POST','GET'])
def getEditAppointmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    content_type = request.headers.get('Content-Type')
                    PId=request.data
                    # if(Id=="0" and Id==0):
                    #if(PId!="b'0'"):

                    queryresult= session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
                                    Model.models.Application.M_Appointment.M_Patient_MPID.label('Pid'),
                                    Model.models.Application.M_Appointment.MP_Procedure.label('procedure'),
                                    Model.models.Application.M_Appointment.MA_Date.label('date'),
                                    Model.models.Application.M_Appointment.MP_AppointmentType.label('AppointmentType'),
                                    Model.models.Application.M_Appointment.MA_Time.label('time'),
                                    Model.models.Application.M_Appointment.MP_Duration.label('duration'),
                                    Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('doctor'),
                                    Model.models.Application.M_Appointment.MP_Status.label('status')
                                        ).filter_by(MAID=PId,MP_IsActive=1,MP_IsDeleted=0).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getEditAppointmentForm,session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Validations,'').label('filterDate')
                                ).filter_by(MFC_FormName='AddAppointForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    getClinic= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getClinics,
                                session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                            Model.models.Application.M_Branch.MB_Name.label('label')
                                            ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                        )
                    # getOrg= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getOrg,
                    #             session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                    #                         Model.models.Application.M_Organisation.MO_Name.label('label')
                    #                             ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                    #                     )
                    # getProcedure= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getProcedures,
                    #             session.query(Model.models.Application.T_Details.TDID.label('key'),
                    #                         Model.models.Application.T_Details.TD_Name.label('label')
                    #                             ).filter_by(M_Details_MDID=6,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                    #                     )
                    getDoctor= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDoctors,
                                session.query(Model.models.Application.M_DoctorDetails.MDDID.label('key'),
                                            Model.models.Application.M_DoctorDetails.MDD_FirstName.label('label')
                                                ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0).order_by(Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
                                        )
                    getDuration= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDuration,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=131,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TDID).all()
                                        )
                    getStatus= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getStatus,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=11,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )

                    getPatient= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPatients,
                                session.query(Model.models.Application.M_Patient.MPID.label('key'),
                                            sqlalchemy.func.concat(Model.models.Application.M_Patient.MP_Name,' ( ',Model.models.Application.M_Patient.MP_UHID,' )').label('label')
                                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0).order_by(Model.models.Application.M_Patient.MP_Name).all()
                                        )
                    getAppointType= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getStatus,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=12,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())
                    # getTextField[7]['options'] = getClinic

                    # getTextField[7]['options'] = getOrg
                    #print(str(queryresult[0].time))
                    getTextField[1]['options'] = getServiceDtl
                    getTextField[0]['options'] = getPatient
                    getTextField[0]['disable'] = 'true'
                    getTextField[5]['options'] = getDoctor
                    getTextField[4]['options'] = getDuration
                    getTextField[6]['options'] = getStatus
                    # getTextField[5]['options'] = getAppointType

                    getTextField[0]['value'] = queryresult[0].Pid
                    getTextField[1]['value'] = queryresult[0].procedure
                    getTextField[2]['value'] = queryresult[0].date
                    getTextField[3]['value'] = str(queryresult[0].time) #.strftime('%H-%M-%S')
                    getTextField[4]['value'] = queryresult[0].duration
                    # getTextField[5]['value'] = queryresult[0].attointtype
                    getTextField[5]['value'] = queryresult[0].doctor
                    # getTextField[7]['value'] = queryresult[0].org
                    # getTextField[7]['value'] = queryresult[0].clinic
                    # getTextField[8]['value'] = queryresult[0].room
                    getTextField[7]['options'] = getAppointType
                    getTextField[7]['value'] = queryresult[0].AppointmentType
                    getTextField[6]['value'] = queryresult[0].status
                    getTextField[8]['value'] = True
                    return jsonify(result=getTextField)

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getSearchAppointmentForm', methods=['GET'])
def getSearchAppointmentForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getSearchAppointmentForm,session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='SearchAppointForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    getClinic= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getClinics,
                                session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                            Model.models.Application.M_Branch.MB_Name.label('label')
                                            ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                        )
                    # getOrg= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.getOrg,
                    #             session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                    #                         Model.models.Application.M_Organisation.MO_Name.label('label')
                    #                             ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                    #                     )
                    getProcedure= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getProcedures,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=6,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getDoctor= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDoctors,
                                session.query(Model.models.Application.M_DoctorDetails.MDDID.label('key'),
                                            Model.models.Application.M_DoctorDetails.MDD_FirstName.label('label')
                                                ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0).order_by(Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
                                        )
                    getRoom= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getRoom,
                                session.query(Model.models.Application.M_Room.MRID.label('key'),
                                            Model.models.Application.M_Room.MR_RoomNumber.label('label')
                                                ).filter_by(MR_IsActive=1,MR_IsDeleted=0).order_by(Model.models.Application.M_Room.MR_RoomNumber).all()
                                        )
                    getStatus= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getStatus,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=11,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getAppointType= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getStatus,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                            Model.models.Application.T_Details.TD_Name.label('label')
                                                ).filter_by(M_Details_MDID=12,TD_IsActive=1,TD_IsDeleted=0).order_by(Model.models.Application.T_Details.TD_Name).all()
                                        )
                    getPatient= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPatients,
                                session.query(Model.models.Application.M_Patient.MPID.label('key'),
                                            sqlalchemy.func.concat(Model.models.Application.M_Patient.MP_Name,' ( ',Model.models.Application.M_Patient.MP_UHID,' )').label('label')
                                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0).order_by(Model.models.Application.M_Patient.MP_Name).all()
                                        )
                    getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())

                    getTextField[3]['options'] = getClinic

                    # getTextField[3]['options'] = getOrg

                    getTextField[1]['options'] = getServiceDtl

                    getTextField[2]['options'] = getDoctor

                    getTextField[0]['options'] = getPatient


                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/AddAppointment',methods=['GET','POST'])
def AddAppointment():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):

            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                BranchId= request.headers.get('branchId')
                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
            # BranchId= 10
            
                    request_json = request.get_json()
                    #Id = request_json.get('pid')
                    ID = request_json.get('ID')
                    if(ID=='' or ID==None):
                        # request_json = request.get_json()
                        request_json = request.get_json(force = True)
                        pname = request_json.get('pname')
                        procedure = request_json.get('procedure')
                        date = request_json.get('date')
                        time = request_json.get('time')
                        duration = request_json.get('duration')
                        appointmentType = request_json.get('appointmentType')
                        doctor = request_json.get('doctor')
                        notify = request_json.get('notify')
                        status = request_json.get('status')
                        # note = request_json.get('note')
                        currentdate = datetime.datetime.now().strftime('%Y%m%d')
                        currenttime = datetime.datetime.now().strftime('%H%M')
                        appdate1 = datetime.datetime.strptime(date,'%Y-%m-%d')
                        appdate = appdate1.strftime('%Y%m%d')
                        apptime1 = datetime.datetime.strptime(time,'%H:%M')
                        apptime = apptime1.strftime('%H%M')
                        appdatetime = str(appdate)+str(apptime)
                        doctorout = session.query(Model.models.Application.DoctorOutoffice.DOID
                                                    #).filter_by(DO_FromDate=date,DO_ToDate=date,DO_DoctorId=doctor,DO_IsActive=1,DO_IsDeleted=0
                                                    ).filter_by(DO_DoctorId=doctor,DO_IsActive=1,DO_IsDeleted=0
                                                    ).filter(sqlalchemy.func.date_format(Model.models.Application.DoctorOutoffice.DO_FromDate,'%Y%m%d%H%M')>=appdatetime
                                                    ).all()
                        print(doctorout)

                        checkdoctor = session.query(Model.models.Application.M_Appointment.MAID
                                                    ).filter_by(MA_Date=date,M_DoctorDetails_MDDID=doctor,MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0
                                                    ).filter(Model.models.Application.M_Appointment.MA_Time==time).all()
                        if(len(checkdoctor)==0):
                            # if(currentdate == appdate or currentdate < appdate):
                            #     if((currentdate == appdate and (apptime >= currenttime and  apptime <='2000')) or (currentdate <= appdate and ('0800' <= apptime and  apptime <='2000'))):
                            if('0800' <= apptime and  apptime <='2000'):        
                                print('hello')
                                print(currentdate,currenttime)
                                Insert=Model.models.Application.M_Appointment()
                                Insert.M_Patient_MPID=pname
                                Insert.MP_Procedure=procedure
                                Insert.MA_Date=date
                                Insert.MA_Time=time
                                Insert.MP_Duration=duration
                                Insert.MP_AppointmentType=appointmentType
                                Insert.M_DoctorDetails_MDDID=doctor
                                # Insert.M_Organisation_MOID=org
                                Insert.M_Branch_MBID=int(BranchId)
                                # Insert.M_Room_MRID=room
                                Insert.MP_Status=status
                                # Insert.MP_Notes=note
                                Insert.MP_AddIP= flask.request.remote_addr
                                Insert.MP_AddUser = data['id']
                                Insert.MP_AddDate = datetime.datetime.now()
                                session.add(Insert)
                                session.commit()
                                        #return "inserted Successfully"
                                
                                ORGID= session.query(Model.models.Application.M_Appointment.MAID).order_by(Model.models.Application.M_Appointment.MAID.desc()).first()

                                if(notify==True):
                                    PatName = session.query(Model.models.Application.M_Patient.MP_Name,
                                                        Model.models.Application.M_Patient.MP_Mobile,
                                                    ).filter_by(MPID=pname,MP_IsActive=1,MP_IsDeleted=0).all()
                                    CategoryName= session.query(Model.models.Application.M_Service.CategoryName
                                                                ).filter(Model.models.Application.M_Service.MSID==procedure).first()
                                    Name= PatName[0].MP_Name
                                    Mobile= PatName[0].MP_Mobile
                                    date2 = datetime.datetime.strptime(date, '%Y-%m-%d').date()
                                    date3 = date2.strftime('%d-%m-%Y')
                                    time2 = datetime.datetime.strptime(time, '%H:%M').time()
                                    time3 = time2.strftime('%I:%M %p')
                                    catedg = CategoryName[0]
                                    dtime = str(catedg)+'_'+str(date3) +'_'+str(time3)
                                    # dtime = str(date3) +'_'+str(time3)
                                    if(Mobile!='' and Mobile!=None):
                                        msg = 'https://api.pinnacle.in/index.php/sms/urlsms?sender=CONKID&numbers=91' + str(Mobile) +'&messagetype=TXT&message=Dear member '+' '+', your appointment at Continua Kids for '+str(Name)+' has been created for ' + str(dtime) +'&response=Y&apikey=bb4d93-a1481e-f7c2a2-67d92c-2d3477'
                                        rese = requests.get(msg)
                                        # print(rese)
                                    else:
                                        pass
                                return jsonify({'msg':'Appointment Added Successfully', 'data': {'AppointmentId':ORGID[0]}})
                                # else:
                                #     return jsonify({'err':'Appointment Not allowed at that time'}),200
                            else:
                                return jsonify({'err':'Appointment Not allowed for that date'}),200
                        else:
                            return jsonify({'err':'Doctor is not available at this time'}),200
                    # else:
                    #     return jsonify({'token': data, 'msg':'username is not valid','About':about,'TokenUser':data['user']})
                    else:
                        # request_json = request.get_json()
                        request_json = request.get_json(force = True)
                        pname = request_json.get('pname')
                        procedure = request_json.get('procedure')
                        date = request_json.get('date')
                        time = request_json.get('time')
                        duration = request_json.get('duration')
                        appointmentType = request_json.get('appointmentType')
                        doctor = request_json.get('doctor')
                        notify = request_json.get('notify')
                        status = request_json.get('status')
                        currentdate = datetime.datetime.now().strftime('%Y%m%d')
                        currenttime = datetime.datetime.now().strftime('%H%M')
                        appdate1 = datetime.datetime.strptime(date,'%Y-%m-%d')
                        appdate = appdate1.strftime('%Y%m%d')
                        apptime1 = datetime.datetime.strptime(time,'%H:%M:%S')
                        apptime = apptime1.strftime('%H%M')
                        checkdoctor = session.query(Model.models.Application.M_Appointment.MAID
                                                    ).filter_by(MA_Date=date,M_DoctorDetails_MDDID=doctor,MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0
                                                    ).filter(Model.models.Application.M_Appointment.MA_Time==time).all()
                        if(len(checkdoctor)>0):
                            AppId = checkdoctor[0].MAID
                        else:
                            AppId = 0
                        if(len(checkdoctor)==0 or AppId==ID):
                            # if(currentdate == appdate or currentdate < appdate):
                            #     if((currentdate == appdate and (apptime >= currenttime and  apptime <='2000')) or (currentdate <= appdate and ('0800' <= apptime and  apptime <='2000'))):
                            if('0800' <= apptime and  apptime <='2000'):        
                                print('hello')
                                Insert=session.query(Model.models.Application.M_Appointment).get(ID)
                                Insert.M_Patient_MPID=pname
                                Insert.MP_Procedure=procedure
                                Insert.MA_Date=date
                                Insert.MA_Time=time
                                Insert.MP_Duration=duration
                                Insert.MP_AppointmentType=appointmentType
                                Insert.M_DoctorDetails_MDDID=doctor
                                Insert.M_Branch_MBID=int(BranchId)
                                Insert.MP_Status=status
                                Insert.MP_AddIP= flask.request.remote_addr
                                
                                Insert.MP_ModDate = datetime.datetime.now()
                                session.commit()
                                print("success")
                                if(notify==True):
                                    PatName = session.query(Model.models.Application.M_Patient.MP_Name,
                                                        Model.models.Application.M_Patient.MP_Mobile,
                                                    ).filter_by(MPID=pname,MP_IsActive=1,MP_IsDeleted=0).all()
                                    Name= PatName[0].MP_Name
                                    Mobile= PatName[0].MP_Mobile
                                    date2 = datetime.datetime.strptime(date, '%Y-%m-%d').date()
                                    date3 = date2.strftime('%d-%m-%Y')
                                    time2 = datetime.datetime.strptime(time, '%H:%M').time()
                                    time3 = time2.strftime('%I:%M %p')
                                    dtime = str(date3) +'_'+str(time3)
                                    if(Mobile!='' and Mobile!=None):
                                        msg = 'https://api.pinnacle.in/index.php/sms/urlsms?sender=CONKID&numbers=91' + str(Mobile) +'&messagetype=TXT&message=Your appointment '+str(ID)+' at Continua Kids for '+str(Name)+' has been updated for ' + str(dtime) +'. Thank you!&response=Y&apikey=bb4d93-a1481e-f7c2a2-67d92c-2d3477'
                                        rese = requests.get(msg)
                                        print(rese)
                                    else:
                                        pass

                                return jsonify({'msg':'Appointment Updated Successfully'})
                                # else:
                                #     return jsonify({'err':'Appointment Not allowed at that time'}),200
                            else:
                                return jsonify({'err':'Appointment Not allowed for that date'}),200
                        else:
                            return jsonify({'err':'Doctor is not available at this time'}),200
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAppointment', methods=['GET'])
def getAppointment():
    session=Session()
    try:
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getAppointment,
                        session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
                                    Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                    Model.models.Application.M_Patient.MP_Name.label('Patient'),
                                    Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                                    # Model.models.Application.M_Appointment.MA_Date.label('Date')
                                    sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('Date')
                                        ).filter_by(MP_IsActive=1,MP_IsDeleted=0
                        ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                        ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                        ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                        ).order_by(Model.models.Application.M_Appointment.MAID.desc()).all())


                return jsonify(result=queryresult)

            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSearchedAppointment', methods=['POST','GET'])
def getSearchedAppointment():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json(force = True)
                    pname =request_json.get('pname')
                    procedure =request_json.get('procedure')
                    doctor = request_json.get('doctor')
                    # org =request_json.get('org')
                    clinic = request_json.get('clinic')
                    uhid =request_json.get('uhid')

                    apply = []

                    if(pname !='' and pname !=None):
                        apply.append(Model.models.Application.M_Appointment.M_Patient_MPID==int(pname))
                    if(procedure !='' and procedure !=None):
                        apply.append(Model.models.Application.M_Appointment.MP_Procedure==procedure)
                    if(doctor !='' and doctor !=None):
                        apply.append(Model.models.Application.M_Appointment.M_DoctorDetails_MDDID==doctor)
                    # if(org !='' and org !=None):
                    #     apply.append(Model.models.Application.M_Appointment.M_Organisation_MOID==org)
                    if(clinic !='' and clinic !=None):
                        apply.append(Model.models.Application.M_Appointment.M_Branch_MBID==clinic)
                    if(uhid !='' and uhid !=None):
                        getPatient= session.query(Model.models.Application.M_Patient.MPID
                        ).filter_by(MP_IsActive=1,MP_IsDeleted=0).filter(Model.models.Application.M_Patient.MP_UHID.contains(uhid),).all()
                        if(len(getPatient)>0):
                            apply.append(Model.models.Application.M_Appointment.M_Patient_MPID.contains(getPatient[0].MPID))
                    if((doctor!='' and doctor !='') or (clinic!='' and clinic !='') or (uhid!='' and uhid !='') or  (procedure !=None and procedure !=None) or  (pname !=None and pname !=None)):
                        queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getAppointment,
                        session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
                                    Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                    Model.models.Application.M_Patient.MP_Name.label('Patient'),
                                    Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                                    Model.models.Application.M_Appointment.MA_Date.label('Date')
                                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0).filter(*apply
                        ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                        ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                        ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DeleteAppointment',methods=['POST'])
def DeleteAppointment():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    Id=request.get_json()
                    #Id=request.data
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Appointment
                                    ).filter(Model.models.Application.M_Appointment.MAID==Id
                                             ).update({Model.models.Application.M_Appointment.MP_IsDeleted:1,
                                                       Model.models.Application.M_Appointment.MP_ModUser:data['id'],
                                                       Model.models.Application.M_Appointment.MP_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Appointment Deleted Successfully'})
                    else:
                        return jsonify({'msg':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/cancelledAppointment',methods=['POST'])
def cancelledAppointment():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    # Id=request_json.get('id')
                    #Id=request.data
                    request1=request.get_json()
                    Id = request1.get('AID')
                    reason = request1.get('reason')
                    
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Appointment
                                    ).filter(Model.models.Application.M_Appointment.MAID==Id
                                             ).update({Model.models.Application.M_Appointment.MP_IsCancelled:1,
                                                        Model.models.Application.M_Appointment.MP_Reason:reason,
                                                       Model.models.Application.M_Appointment.MP_ModUser:data['id'],
                                                       Model.models.Application.M_Appointment.MP_ModDate:datetime.datetime.now()})
                        session.commit()
                        PatName = session.query(sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%m-%Y').label('Date'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Time,'%I:%M %p').label('Time'),
                                                Model.models.Application.M_Patient.MP_Name,
                                                        Model.models.Application.M_Patient.MP_Mobile,
                                                    ).filter_by(MAID=Id,MP_IsActive=1,MP_IsDeleted=0
                                                    ).join(Model.models.Application.M_Patient,
                            Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID).all()
                        Name= PatName[0].MP_Name
                        Mobile= PatName[0].MP_Mobile
                        # date3 = PatName[0].Date
                        # time3 = PatName[0].Time
                        dtime = str(PatName[0].Date) +'_'+str(PatName[0].Time)
                        if(Mobile!='' and Mobile!=None):
                            msg = 'https://api.pinnacle.in/index.php/sms/urlsms?sender=CONKID&numbers=91' + str(Mobile) +'&messagetype=TXT&message=Your appointment '+str(Id)+' at Continua Kids for '+str(Name)+' has been Cancelled for ' + str(dtime) +'. Thank you!&response=Y&apikey=bb4d93-a1481e-f7c2a2-67d92c-2d3477'
                            rese = requests.get(msg)
                            print(rese)
                        else:
                            pass
                        return jsonify({'msg':'Appointment Cancelled Successfully'})
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/checkINAppointment',methods=['POST'])
def checkINAppointment():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    # Id=request_json.get('id')
                    Id=request.get_json()
                    #Id=request.data
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Appointment
                                    ).filter(Model.models.Application.M_Appointment.MAID==Id
                                             ).update({Model.models.Application.M_Appointment.MP_Status:393,
                                                       Model.models.Application.M_Appointment.MP_ModUser:data['id'],
                                                       Model.models.Application.M_Appointment.MP_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Appointment Checked In Successfully'})
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/confirmAppointment',methods=['POST'])
def confirmAppointment():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    # Id=request_json.get('id')
                    Id=request.get_json()
                    #Id=request.data
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Appointment
                                    ).filter(Model.models.Application.M_Appointment.MAID==Id
                                             ).update({Model.models.Application.M_Appointment.MP_Status:29,
                                                       Model.models.Application.M_Appointment.MP_ModUser:data['id'],
                                                       Model.models.Application.M_Appointment.MP_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Appointment Checked In Successfully'})
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/CreateInvoiceFromApp',methods=['POST'])
def CreateInvoiceFromApp():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    # Id=request_json.get('id')
                    Id=request.get_json()
                    #Id=request.data
                    if(Id != '' and Id != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.CreateInvoiceFromApp,
                                session.query(Model.models.Application.M_Appointment.MAID,
                                              Model.models.Application.M_Appointment.M_Patient_MPID,
                                                   Model.models.Application.M_Appointment.MP_Procedure,
                                                   Model.models.Application.M_Service.MS_CategoryName,
                                                   Model.models.Application.M_ServicePro.MSP_Fee,
                                                   Model.models.Application.M_ServicePro.MSP_Duration,
                                                   Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount.label('Prepaid'),
                                    ).filter(Model.models.Application.M_Appointment.MAID==Id
                                    ).join(Model.models.Application.M_ServicePro,
                                    Model.models.Application.M_ServicePro.MSP_serviceId==Model.models.Application.M_Appointment.MP_Procedure
                                    ).join(Model.models.Application.M_Service,
                                    Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                    ).outerjoin(Model.models.Application.T_PrepaidAmt,
                                    Model.models.Application.T_PrepaidAmt.TP_PatientID==Model.models.Application.M_Appointment.M_Patient_MPID
                                    ).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

########## Done by Vipul patel on 23/11/2022 to get details of patient only.#######################
@app.route('/showParticularPatientAppointment',methods=['POST'])
def showParticularPatientAppointment():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    # Id=request_json.get('id')
                    Id=request.data
                    Id= Id.decode()
                    #Id=request.get_json()
                    if(Id != '' and Id != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.showParticularPatientAppointment,
                                session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
                                            Model.models.Application.M_Appointment.MAID.label('Consult Id'),
                                            Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                            Model.models.Application.M_Patient.MP_Name.label('Patient'),
                                            Model.models.Application.M_Service.MS_CategoryName.label('Service'),
                                            Model.models.Application.T_Details.TD_Name.label('Status'),
                                            Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('DoctorID'),
                                            sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,' ',Model.models.Application.M_DoctorDetails.MDD_LastName).label('Doctor'),
                                            Model.models.Application.M_InvoiceMaster.MIID.label('Invoice No'),
                                            Model.models.Application.M_InvoiceMaster.MI_InvoiceTotal.label('Total'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('Date'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Time,'%h:%i:%s').label('Time')
                                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0,M_Patient_MPID=Id
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Status
                                ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                ).outerjoin(Model.models.Application.M_InvoiceMaster, Model.models.Application.M_InvoiceMaster.MI_AppointmentId==Model.models.Application.M_Appointment.MAID
                                ).order_by(Model.models.Application.M_Appointment.MAID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/showParticularPatientPackage',methods=['POST'])
def showParticularPatientPackage():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    # Id=request_json.get('id')
                    #Id=request.data
                    Id=request.get_json()
                    if(Id != '' and Id != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getAppointment,
                                session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
                                            Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                            Model.models.Application.M_Patient.MP_Name.label('Patient'),
                                            Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                                            Model.models.Application.M_Appointment.MA_Date.label('Date')
                                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0,M_Patient_MPID=Id
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/invoiceDetails',methods=['POST'])
def invoiceDetails():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request_json = request.get_json(force = True)
                    aid = request_json.get('appointmentId')
                    
                    if(aid != '' and aid != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getInvoicePdf,
                                session.query(Model.models.Application.M_Invoice.MIID.label('InvoiceNo'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Invoice.MI_Date,'%d-%b-%Y').label('Date'),
                                            Model.models.Application.M_Invoice.MI_InvoiceTotal.label('InvoiceTotal'),
                                            Model.models.Application.M_Invoice.MI_DueBalance.label('Balance'),
                                            Model.models.Application.M_Invoice.MI_Comments.label('Description'),
                                            Model.models.Application.M_Invoice.MI_TotalPayable.label('TotalPayable'),
                                            Model.models.Application.M_Invoice.MI_discountPercent.label('discountPercent'),
                                            Model.models.Application.M_Invoice.MI_CGST.label('CGST'),
                                            Model.models.Application.M_Invoice.MI_SGST.label('SGST'),
                                            Model.models.Application.M_Invoice.MI_AmountPaid.label('AmountPaid'),
                                            Model.models.Application.M_Invoice.MI_Comments.label('Comments'),
                                            Model.models.Application.M_Invoice.MI_lastDigits.label('CardNo'),
                                            Model.models.Application.M_Invoice.MI_CardType.label('CardType'),
                                            Model.models.Application.M_Patient.MP_Name.label('Name'),
                                            Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                            Model.models.Application.M_Appointment.MP_Procedure.label('Service'),
                                            Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB')
                                                ).filter_by(MI_IsActive=1,MI_IsDeleted=0,MI_AppointmentId=aid
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Invoice.M_Patient_MPID
                                ).join(Model.models.Application.M_Appointment, Model.models.Application.M_Appointment.MAID==Model.models.Application.M_Invoice.MI_AppointmentId
                                ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                
                                ).order_by(Model.models.Application.M_Invoice.MIID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/showParticularPatientInvoice',methods=['POST'])
def showParticularPatientInvoice():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    Id=request.data
                    Id= Id.decode()
                    if(Id != '' and Id != None):
                        # queryresult= Common_Function.CommonFun.convertToJson(
                        #         Constant.constant.constant.getinvoiceDetails,
                        #         session.query(Model.models.Application.M_Invoice.MIID.label('Invoice'),
                        #                     sqlalchemy.func.date_format(Model.models.Application.M_Invoice.MI_Date,'%d-%b-%Y').label('Date'),
                        #                     Model.models.Application.M_Invoice.MI_InvoiceTotal.label('AMT'),
                        #                     Model.models.Application.M_Invoice.MI_DueBalance.label('Balance'),
                        #                     Model.models.Application.M_Invoice.MI_Comments.label('Description')
                        #                         ).filter_by(MI_IsActive=1,MI_IsDeleted=0,M_Patient_MPID=Id
                        #         ).order_by(Model.models.Application.M_Invoice.MIID.desc()).all())
                        # session.commit()
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getinvoiceDetails,
                                session.query(Model.models.Application.M_InvoiceMaster.MIID.label('Invoice'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_Date,'%d-%b-%Y').label('Invoice Date'),
                                            Model.models.Application.M_InvoiceMaster.MI_InvoiceTotal.label('AMT'),
                                            Model.models.Application.M_InvoiceMaster.MI_AmountPaid.label('AMT Paid'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceName.label('Service Name'),
                                            sqlalchemy.func.concat(Model.models.Application.M_InvoiceMaster.MPP_Prefix,'/',Model.models.Application.M_InvoiceMaster.MIID).label('Invoice No'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_InvoiceMaster.MI_DueBalance,0).label('Due'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_InvoiceMaster.dueSettle,0).label('Balance'),
                                            Model.models.Application.M_InvoiceMaster.MI_Comments.label('Description'),
                                            Model.models.Application.M_InvoiceMaster.MI_AddDate.label('AddDate'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('Visit Date'),
                                                ).filter_by(MI_IsActive=1,MI_IsDeleted=0,M_Patient_MPID=Id
                                                ).filter(Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode!='Package'
                                ).outerjoin(Model.models.Application.M_Appointment,Model.models.Application.M_Appointment.MAID==Model.models.Application.M_InvoiceMaster.MI_AppointmentId
                                ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/showParticularPatientDueInvoice',methods=['POST'])
def showParticularPatientDueInvoice():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    Id=request.data
                    Id= Id.decode()
                    if(Id != '' and Id != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.showParticularPatientDueInvoice,
                                session.query(Model.models.Application.M_InvoiceMaster.MIID.label('Invoice'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_Date,'%d-%b-%Y').label('Date'),
                                            Model.models.Application.M_InvoiceMaster.MI_InvoiceTotal.label('AMT'),
                                            sqlalchemy.func.concat(Model.models.Application.M_InvoiceMaster.MPP_Prefix,'/',Model.models.Application.M_InvoiceMaster.MIID).label('Invoice No'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_InvoiceMaster.dueSettle,0).label('Balance'),
                                            Model.models.Application.M_InvoiceMaster.MI_Comments.label('Description')
                                                ).filter_by(MI_IsActive=1,MI_IsDeleted=0, M_Patient_MPID=Id
                                                ).filter(Model.models.Application.M_InvoiceMaster.dueSettle !='0'
                                ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/dueBalanceInvoice',methods=['POST'])
def dueBalanceInvoice():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    Request1=request.get_json()
                    Id= Request1.get('InvNO')
                    if(Id != '' and Id != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.dueBalanceInvoice,
                                session.query(Model.models.Application.M_InvoiceMaster.MIID.label('Invoice'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_Date,'%d-%b-%Y').label('InvDate'),
                                            Model.models.Application.M_InvoiceMaster.MI_InvoiceTotal.label('AMT'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_InvoiceMaster.dueSettle,0).label('Amount'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceId.label('ServiceId'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceName.label('Service'),
                                            Model.models.Application.M_Service.MS_CategoryName.label('Servicesss')
                                                ).filter_by(MI_IsActive=1,MI_IsDeleted=0,MIID=Id
                                ).outerjoin(Model.models.Application.M_Service,Model.models.Application.M_Service.MSID==Model.models.Application.M_InvoiceMaster.MI_ServiceId
                                ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


# @app.route('/showParticularPatientCredit',methods=['POST'])
# def showParticularPatientCredit():
#     try:
#         if(request.method == "POST"):
#             if('Authorization' in request.headers):
#                 token= request.headers.get('Authorization')

#                 if not token:
#                     return jsonify({'MSG':'Token is missing'})
#                 data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
#                 if(data):
#                     session=Session()
#                     # request_json = request.get_json(force = True)
#                     # Id=request_json.get('id')
#                     #Id=request.data
#                     Id=request.get_json()
#                     if(Id != '' and Id != None):
#                         queryresult= Common_Function.CommonFun.convertToJson(
#                                 Constant.constant.constant.getAppointment,
#                                 session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
#                                             Model.models.Application.M_Organisation.MO_Name.label('Organisation'),
#                                             Model.models.Application.M_Branch.MB_Name.label('Branch'),
#                                             Model.models.Application.M_Room.MR_RoomName.label('Room'),
#                                             Model.models.Application.M_Patient.MP_Name.label('Patient'),
#                                             Model.models.Application.T_Details.TD_Name.label('Procedure'),
#                                             Model.models.Application.M_Appointment.MA_Date.label('Date')
#                                                 ).filter_by(MP_IsActive=1,MP_IsDeleted=0,M_Patient_MPID=Id
#                                 ).join(Model.models.Application.M_Organisation, Model.models.Application.M_Organisation.MOID==Model.models.Application.M_Appointment.M_Organisation_MOID
#                                 ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
#                                 ).join(Model.models.Application.M_Room, Model.models.Application.M_Room.MRID==Model.models.Application.M_Appointment.M_Room_MRID
#                                 ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
#                                 ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Procedure).all())
#                         session.commit()
#                         return jsonify(result=queryresult)
#                     else:
#                         return jsonify({'err':'something went wrong please try again'})
#                 else:
#                     return jsonify({'err':'Token is expired'})
#             else:
#                 return jsonify({'err':'Please Login'})

#     finally:
#         session.close()

@app.route('/showParticularPatientConsentForm',methods=['POST'])
def showParticularPatientConsentForm():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    # Id=request_json.get('id')
                    #Id=request.data
                    Id=request.get_json()
                    if(Id != '' and Id != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getAppointment,
                                session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
                                            Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                            Model.models.Application.M_Patient.MP_Name.label('Patient'),
                                            Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                                            Model.models.Application.M_Appointment.MA_Date.label('Date')
                                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0,M_Patient_MPID=Id
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/checkOutAppointment',methods=['POST'])
def checkOutAppointment():
    try:
        if(request.method == "POST"):

            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    # Id=request_json.get('id')
                    #Id=request.data
                    Id=request.get_json()
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Appointment
                                    ).filter(Model.models.Application.M_Appointment.MAID==Id
                                             ).update({Model.models.Application.M_Appointment.MP_Status:393,
                                                       Model.models.Application.M_Appointment.MP_ModUser:data['id'],
                                                       Model.models.Application.M_Appointment.MP_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Appointment Checked Out Successfully'})
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/addAppInvoice',methods=['GET','POST'])
def addAppInvoice():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):
            branchId= request.headers.get('branchId')
            
            request_json = request.get_json()
            amountPaid = request_json.get('amountPaid')
            bankName = request_json.get('bankName')
            branch = request_json.get('branch')
            card = request_json.get('card')
            cardType = request_json.get('cardType')
            cash = request_json.get('cash')
            cgst = request_json.get('cgst')
            cheque = request_json.get('cheque')
            comments = request_json.get('comments')
            date = request_json.get('invoiceDate')
            discount = request_json.get('discount')
            discountPercent = request_json.get('discountPercent')
            discountReason = request_json.get('discountReason')
            dueBalance = request_json.get('dueBalance')
            invoiceTotal = request_json.get('invoiceTotal')
            invoiceType = request_json.get('invoiceType')
            # AppointmentId = request_json.get('MI_AppointmentId')
            lastDigits = request_json.get('lastDigits')
            online = request_json.get('online')
            prepaid = request_json.get('prepaid')
            sgst = request_json.get('sgst')
            totalPayable = request_json.get('totalPayable')
            upi = request_json.get('upi')
            Pid = request_json.get('PID')
            AID = request_json.get('AID')
            service = request_json.get('service')
            
            getAppointment = session.query(Model.models.Application.M_Appointment,
                                    Model.models.Application.M_Appointment.MP_Procedure
                                    ).filter(Model.models.Application.M_Appointment.MAID==AID).all()
            ServiceId = getAppointment[0].MP_Procedure
            checkAppointment = session.query(Model.models.Application.M_InvoiceMaster
                                    ).filter(Model.models.Application.M_InvoiceMaster.MI_AppointmentId==AID
                                    ).filter_by(MI_IsDeleted=0,MI_IsActive=1).all()
            if(len(checkAppointment)==0):            
                Insert=Model.models.Application.M_Invoice()
                Insert.MI_AmountPaid=amountPaid
                Insert.MI_bankName=bankName
                Insert.M_Branch_MBID=branchId
                Insert.MI_Card=card
                Insert.MI_AppointmentId=AID
                if(cardType!='' and cardType!=None):
                    Insert.MI_CardType=cardType
                Insert.MI_Cash=cash
                Insert.MI_CGST=cgst
                Insert.MI_Cheque=cheque
                Insert.MI_Comments=comments
                Insert.MI_Date=date
                Insert.MI_Discount=discount
                Insert.MI_discountPercent=discountPercent
                Insert.MI_DiscountReason=discountReason
                Insert.MI_DueBalance=dueBalance
                Insert.MI_InvoiceTotal=invoiceTotal
                Insert.MI_invoiceType=invoiceType
                Insert.MI_ServiceId=ServiceId
                
                Insert.MI_lastDigits=lastDigits
                Insert.MI_Online=online
                Insert.MI_Prepaid=prepaid
                Insert.MI_SGST=sgst
                Insert.MI_TotalPayable=totalPayable
                Insert.MI_Upi=upi
                Insert.M_Patient_MPID=Pid

                Insert.MI_AddIP= flask.request.remote_addr
                Insert.MI_AddDate = datetime.datetime.now()
                Insert.MI_AddUser = 1 #data['id']
                session.add(Insert)
                session.commit()
                getClinic= session.query(Model.models.Application.M_Branch.MB_Code
                                        ).filter_by(MBID=int(branchId),MB_IsActive=1,MB_IsDeleted=0).all()
                getInvoiceNo= session.query(Model.models.Application.M_InvoiceMaster.MainInvoiceNo
                                        ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                        # ).filter(Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode!='Package'
                                        ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
                clinicname=getClinic[0].MB_Code
                # sn=len(totalPatientinbranch) + 1
                lastInvoice = getInvoiceNo[0].MainInvoiceNo
                NewInvoice=  int(lastInvoice) + 1
                # newPatientID= str(int(lastPatientID)+1).zfill(5)
                Prefix='CK'+str(clinicname)
                mod = ''
                if(prepaid!='' and prepaid!=None and prepaid!=0):
                    mod = 'Prepaid'
                if(online !='' and online !=None and online!=0):
                    mod = 'Online'
                if(upi !='' and upi !=None and upi!=0):
                    mod = 'UPI'
                if(cash !='' and cash !=None and cash!=0):
                    mod = 'Cash'
                if(card !='' and card !=None and card!=0):
                    mod = 'Card'
                if(cheque !='' and cheque !=None and cheque!=0):
                    mod = 'Cheque'
                Insert=Model.models.Application.M_InvoiceMaster()
                Insert.MI_AmountPaid=amountPaid
                Insert.MI_bankName=bankName
                Insert.M_Branch_MBID=branchId
                Insert.MI_Card=card
                Insert.MI_AppointmentId=AID
                if(cardType!='' and cardType!=None):
                    Insert.MI_CardType=cardType
                Insert.MI_Cash=cash
                Insert.MI_CGST=cgst
                Insert.MI_Cheque=cheque
                Insert.MI_Comments=comments
                Insert.MI_Date=date
                Insert.MI_Discount=discount
                Insert.MainInvoiceNo=NewInvoice
                Insert.MI_discountPercent=discountPercent
                Insert.MI_DiscountReason=discountReason
                Insert.MI_DueBalance=dueBalance
                Insert.dueSettle=dueBalance
                Insert.MI_InvoiceTotal=invoiceTotal
                Insert.MI_invoiceType=invoiceType
                Insert.MI_ServiceId=ServiceId
                Insert.MI_ServiceName=service
                Insert.MPP_Prefix=Prefix
                Insert.MI_lastDigits=lastDigits
                Insert.MI_Online=online
                Insert.MI_Prepaid=prepaid
                Insert.MI_SGST=sgst
                Insert.MI_TotalPayable=totalPayable
                Insert.MI_Upi=upi
                Insert.M_Patient_MPID=Pid
                Insert.MPIA_PaymentMode=''
                Insert.MPP_PaymentType=mod

                Insert.MI_AddIP= flask.request.remote_addr
                Insert.MI_AddDate = datetime.datetime.now()
                Insert.MI_AddUser = 1 #data['id']
                session.add(Insert)
                session.commit()
                if(int(dueBalance)>0):
                    dueBalancedtl = session.query(Model.models.Application.T_DueBalanceAmt.TDID,
                                                    Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount
                                    ).filter_by(TD_PatientID=Pid,TP_IsActive=1,TP_IsDeleted=0).all()
                        
                    if(len(dueBalancedtl)==0):
                        Insert=Model.models.Application.T_DueBalanceAmt()
                        Insert.TD_Date=datetime.datetime.now()
                        Insert.TD_PrepaidAmount=dueBalance
                        Insert.TD_PatientID=Pid
                        
                        Insert.TP_AddIP= flask.request.remote_addr
                        Insert.TP_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                    else:
                        PrepaidAm = dueBalancedtl[0].TD_PrepaidAmount
                        amountnow = PrepaidAm + float(dueBalance)
                        session.query(Model.models.Application.T_DueBalanceAmt
                                ).filter(Model.models.Application.T_DueBalanceAmt.TD_PatientID==Pid
                                            ).update({Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount:amountnow,
                                                    Model.models.Application.T_DueBalanceAmt.TP_ModDate:datetime.datetime.now()})
                        session.commit()
                
                if(int(prepaid)>0):
                    prepaiddata = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                                Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount
                                ).filter_by(TP_PatientID=Pid,TP_IsActive=1,TP_IsDeleted=0).all()
                    Insert=Model.models.Application.T_CreditMaster()
                    Insert.TC_Date=datetime.datetime.now()
                    Insert.TC_Amount=prepaid
                    Insert.TC_PatientID=Pid
                    Insert.TC_Comment='ACCDebit'
                    Insert.TC_Description=service
                    
                    Insert.TC_AddIP= flask.request.remote_addr
                    Insert.TC_AddDate = datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    
                    PrepaidAm = prepaiddata[0].TP_PrepaidAmount
                    amountnow = PrepaidAm - float(prepaid)
                    session.query(Model.models.Application.T_PrepaidAmt
                                ).filter(Model.models.Application.T_PrepaidAmt.TP_PatientID==Pid
                                            ).update({Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount:amountnow,
                                                    Model.models.Application.T_PrepaidAmt.TP_ModDate:datetime.datetime.now()})
                    session.commit()
                print("success")
                Invoice = session.query(sqlalchemy.func.concat(Model.models.Application.M_InvoiceMaster.MPP_Prefix,
                                                               '/',Model.models.Application.M_InvoiceMaster.MIID).label('MIIID'),
                                                    Model.models.Application.M_InvoiceMaster.MPP_Prefix
                                    ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                    ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
                InvoiceNo= Invoice[0].MIIID
                mod = ''
                if(prepaid!='' and prepaid!=None and prepaid!=0):
                    mod = 'Prepaid'
                if(online !='' and online !=None and online!=0):
                    mod = 'Online'
                if(upi !='' and upi !=None and upi!=0):
                    mod = 'UPI'
                if(cash !='' and cash !=None and cash!=0):
                    mod = 'Cash'
                if(card !='' and card !=None and card!=0):
                    mod = 'Card'
                if(cheque !='' and cheque !=None and cheque!=0):
                    mod = 'Cheque'
                
                Insert=session.query(Model.models.Application.M_Appointment).get(AID)
                Insert.MP_Status=527
                Insert.MP_ModDate=datetime.datetime.now()
                Insert.MA_PaymentMode=mod
                Insert.MA_Fee=invoiceTotal
                Insert.MA_Discount=discount
                Insert.MA_ReceiptDate=datetime.datetime.now()
                Insert.MA_InvoiceNo= InvoiceNo
                Insert.MA_CGST=cgst
                Insert.MA_SGST=sgst
                Insert.MA_TotalAmount=totalPayable
                Insert.MA_AppStatus='Completed'
                session.commit()
                ORGID= session.query(Model.models.Application.M_Appointment.MAID,
                                                     Model.models.Application.M_Patient.MPID,
                                                     Model.models.Application.M_Patient.MP_Mobile,
                                                     Model.models.Application.M_Patient.MP_Name,
                                                     ).filter(Model.models.Application.M_Appointment.MAID==AID
                                                    ).join(Model.models.Application.M_Patient,Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                                    ).all()

                if(ORGID[0].MP_Mobile !=''):
                    Name= ORGID[0].MP_Name
                    Mobile= ''#ORGID[0].MP_Mobile
                    x= 'https://rb.gy/b8iod'
                    if(Mobile!='' and Mobile!=None):
                        msg = 'https://api.pinnacle.in/index.php/sms/urlsms?sender=CONKID&numbers=91' + str(Mobile) +'&messagetype=TXT&message=Thank you for visiting Continua Kids. View your visit details in the app '+x+'. Thank you!&response=Y&apikey=bb4d93-a1481e-f7c2a2-67d92c-2d3477'
                        # rese = requests.get('https://api.pinnacle.in/index.php/sms/urlsms?sender=CONKID&numbers=918544388788&messagetype=TXT&message=Dear member Vipul, your appointment at Continua Kids for Test has been created for 20-07-2023_11:00 AM&response=Y&apikey=bb4d93-a1481e-f7c2a2-67d92c-2d3477')
                        rese = requests.get(msg)
                        print(rese)
                else:
                    pass
                return jsonify({'msg':'Invoice Created Successfully'})
            else:
                return jsonify({'err':'Invoice already generated'})
        else:
            return jsonify({'err':'Wrong Method Used'})
    except:
        return jsonify({'err':'token is invalid'})
    finally:
        session.close()


@app.route('/copyAppointment',methods=['POST'])
def copyAppointment():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                BranchId= request.headers.get('branchId')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request_json = request.get_json(force = True)
                    pname = request_json.get('pname')
                    procedure = request_json.get('procedure')
                    date = request_json.get('date')
                    time = request_json.get('time')
                    duration = request_json.get('duration')
                    doctor = request_json.get('doctor')
                    status = request_json.get('status')
                    currentdate = datetime.datetime.now().strftime('%Y%m%d')
                    currenttime = datetime.datetime.now().strftime('%H%M')
                    appdate1 = datetime.datetime.strptime(date,'%Y-%m-%d')
                    appdate = appdate1.strftime('%Y%m%d')
                    apptime1 = datetime.datetime.strptime(time,'%H:%M')
                    apptime = apptime1.strftime('%H%M')
                    appdatetime = str(appdate)+str(apptime)
                    doctorout = session.query(Model.models.Application.DoctorOutoffice.DOID
                                                ).filter_by(DO_DoctorId=doctor,DO_IsActive=1,DO_IsDeleted=0
                                                ).filter(sqlalchemy.func.date_format(Model.models.Application.DoctorOutoffice.DO_FromDate,'%Y%m%d%H%M')>=appdatetime
                                                ).all()
                    print(doctorout)

                    checkdoctor = session.query(Model.models.Application.M_Appointment.MAID
                                                ).filter_by(MA_Date=date,M_DoctorDetails_MDDID=doctor,MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0
                                                ).filter(Model.models.Application.M_Appointment.MA_Time==time).all()
                    if(len(checkdoctor)==0):
                        if('0800' <= apptime and  apptime <='2000'):        
                            print('hello')
                            print(currentdate,currenttime)
                            Insert=Model.models.Application.M_Appointment()
                            Insert.M_Patient_MPID=pname
                            Insert.MP_Procedure=procedure
                            Insert.MA_Date=date
                            Insert.MA_Time=time
                            Insert.MP_Duration=duration
                            Insert.M_DoctorDetails_MDDID=doctor
                            Insert.M_Branch_MBID=int(BranchId)
                            Insert.MP_Status=status
                            Insert.MP_AddIP= flask.request.remote_addr
                            Insert.MP_AddUser = data['id']
                            Insert.MP_AddDate = datetime.datetime.now()
                            session.add(Insert)
                            session.commit()
                                    

                            ORGID= session.query(Model.models.Application.M_Appointment.MAID).order_by(Model.models.Application.M_Appointment.MAID.desc()).first()


                            return jsonify({'msg':'Appointment Copied Successfully', 'data': {'AppointmentId':ORGID[0]}})
                            
                        else:
                            return jsonify({'err':'Appointment Not allowed for that date'}),200
                    else:
                        return jsonify({'err':'Doctor is not available at this time'}),200
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/addPatientFile',methods=['GET','POST'])
def addPatientFile():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    content_type = request.headers.get('Content-Type')
                    files= request.files.getlist(str('files[]'))
                    data= request.form.get('PID')
                    #files = flask.request.files.getlist("mulfile")
                    #files = request.form.getlist('files[]')
                    #filqes= files.get('Files')
                    # request_json = request.get_json()
                    # request_json = request.get_json()
                    # PID = request_json.get('mulfile')
                    #file = request.files('filename')
                    #files= flask.request.files.getlist("mulfile")
                    #files= flask.request.files[str('Document')]
                    FilePath = 'static/PatientFile_Document'
                    for file in files:
                        if(file.filename!='' and file.filename!= None):
                            date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                            name, ext = os.path.splitext(file.filename)
                            files = 'PF'+ '_'+ name +'_' + date  + ext
                            fileName=files
                            if(os.path.exists(FilePath)):
                                file.save(os.path.join(FilePath, fileName))
                                print(file.filename)
                            else:
                                os.makedirs(FilePath)
                                file.save(os.path.join(FilePath, fileName))
                        # User = data['id']
                        Insert=Model.models.Application.M_PatientFiles()
                        Insert.MPF_PatientID=data
                        Insert.MPF_Name=fileName
                        Insert.MPF_FilePath=FilePath
                        Insert.MPF_FileType='NotAvailable'
                        Insert.MPF_AddIP= flask.request.remote_addr
                        # Insert.MPF_ModUser= int(User)
                        Insert.MPF_ModDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'File Uploaded Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getUploadForm', methods=['POST','GET'])
def getUploadForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    # PId= str(request.data)
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getUploadForm,session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Validations,'').label('filterDate')
                                ).filter_by(MFC_FormName='UploadFileForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    return jsonify(result=getTextField)

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getUploadedFile', methods=['POST','GET'])
def getUploadedFile():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    PId= request.data
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getUploadedFile,
                                    session.query(Model.models.Application.M_PatientFiles,
                                            Model.models.Application.M_PatientFiles.MPFID.label('ID'),
                                            Model.models.Application.M_Patient.MP_Name.label('Patient Name'),
                                            Model.models.Application.M_PatientFiles.MPF_DocName.label('DocName'),
                                            func.concat(Model.models.Application.M_PatientFiles.MPF_FilePath, '/', Model.models.Application.M_PatientFiles.MPF_Name).label('Path'),
                                            Model.models.Application.M_PatientFiles.MPF_Name.label('File Name'),
                                            Model.models.Application.M_PatientFiles.MPF_AddDate.label('Add Date')
                                            ).filter_by(MPF_IsActive=1 ,MPF_IsDeleted=0,MPF_PatientID=PId).join(Model.models.Application.M_Patient,
                                                Model.models.Application.M_Patient.MPID==Model.models.Application.M_PatientFiles.MPF_PatientID
                                                ).all()
                            )
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DownloadUploadFile', methods=['POST','GET'])
def DownloadUploadFile():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    PId= request.data
                    getTextField= session.query(Model.models.Application.M_PatientFiles,
                                            func.concat(Model.models.Application.M_PatientFiles.MPF_FilePath, '/', Model.models.Application.M_PatientFiles.MPF_Name).label('Path'),
                                            (Model.models.Application.M_PatientFiles.MPF_Name).label('Fname')
                                            ).filter_by(MPF_IsActive=1 ,MPF_IsDeleted=0,MPFID=PId).all()
                    value = getTextField[0].Path
                    Name = getTextField[0].Fname
                    name, ext = os.path.splitext(Name)
                    # gfgfg=os.path.abspath(value)
                    # os.chdir(r'E:\DIS_Developers\Vipul\Continua-PYUI')

                    # file = open(value, 'rb')
                    # file_content = file.read()
                    # arr = bytes(file_content, 'utf-8')
                    # base64_one = base64.encodestring(arr)


                    with open(value, "rb") as encofile:
                        encoded_string = base64.b64encode(encofile.read())
                    # name, ext = os.path.splitext(value)
                    fname=name
                    fext=ext[1:]
                    fbstring=str(encoded_string)
                    #print(encoded_string)
                    return jsonify({'fname':fname,'fext': fext,'fbstring':fbstring[2:-1]})

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/DeleteUploadedFile',methods=['POST'])
def DeleteUploadedFile():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    Id=request.get_json()
                    #Id=request.data
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_PatientFiles
                                    ).filter(Model.models.Application.M_PatientFiles.MPFID==Id
                                             ).update({Model.models.Application.M_PatientFiles.MPF_IsDeleted:1,
                                                       Model.models.Application.M_PatientFiles.MPF_ModUser:data['id'],
                                                       Model.models.Application.M_PatientFiles.MPF_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'File Deleted Successfully'})
                    else:
                        return jsonify({'msg':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/AddCreditForm',methods=['POST','GET'])
def AddCreditForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                branchId= request.headers.get('branchId')
                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    Id=request.data
                    Id = Id.decode()
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getRoomForm,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Validations,'').label('validations'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddCreditForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

                    
                    getCredit= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getCredit,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=13,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
                    getPayType= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getPayType,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=14,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
                    getPatient= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPatients,
                                session.query(Model.models.Application.M_Patient.MPID.label('key'),
                                            Model.models.Application.M_Patient.MP_Name.label('label')
                                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0).order_by(Model.models.Application.M_Patient.MP_Name).all()
                                        )

                    getService= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getService,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=15,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
                    getCardType= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getCardType,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=18,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
                    getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())
                    date = datetime.date.today()
                    getTextField[0]['options'] = getCredit
                    getTextField[1]['options'] = getPatient
                    getTextField[2]['options'] = getPayType
                    getTextField[3]['options'] = str(datetime.datetime.now())
                    getTextField[6]['options'] = getCardType
                    getTextField[1]['value'] = int(Id)
                    getTextField[0]['value'] = 33
                    getTextField[3]['value'] = str(date)

                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/AddPatientCredit',methods=['GET','POST'])
def AddPatientCredit():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):

                    request_json = request.get_json()
                    ID = request_json.get('ID')
                    if(ID=='' or ID==None):
                        branchId= request.headers.get('branchId')
                        request_json = request.get_json(force = True)
                        credtype = request_json.get('credtype')
                        patient = request_json.get('patient')
                        # org = request_json.get('org')
                        # clinic = request_json.get('clinic')
                        paymode = request_json.get('paymode')
                        date = request_json.get('date')
                        # service = request_json.get('service')
                        totalamt = request_json.get('totalamt')
                        bank = request_json.get('bank')
                        cardtype = request_json.get('cardtype')
                        cardno = request_json.get('cardno')
                        comment = request_json.get('comment')


                        Insert=Model.models.Application.M_Credit()
                        Insert.MC_CreditType=credtype
                        Insert.M_Patient_MPID=patient
                        Insert.M_Branch_MBID=branchId
                        Insert.MC_TotalAmount=totalamt
                        Insert.MC_Date=date
                        Insert.MC_AddIP= flask.request.remote_addr
                        Insert.MC_AddUser = data['id']
                        Insert.MC_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()

                        M_CreditID= session.query(Model.models.Application.M_Credit.MCID).order_by(Model.models.Application.M_Credit.MCID.desc()).first()

                        getClinic= session.query(Model.models.Application.M_Branch.MB_Code
                                        ).filter_by(MBID=int(branchId),MB_IsActive=1,MB_IsDeleted=0).all()
                    
                        getInvoiceNo= session.query(Model.models.Application.M_InvoiceMaster.MainInvoiceNo
                                            ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                            # ).filter(Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode=='Credit/Advance'
                                            ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
                        clinicname=getClinic[0].MB_Code
                        if(len(getInvoiceNo)>0):
                            lastInvoice = getInvoiceNo[0].MainInvoiceNo
                            NewInvoice=  int(lastInvoice) + 1
                        else:
                            NewInvoice= 1
                        Prefix='CK'+str(clinicname)
                        
                        Insert=Model.models.Application.T_Credit()
                        Insert.M_Credit_MCID=M_CreditID[0]
                        Insert.TC_CreditType=credtype
                        Insert.TC_PatientID=patient
                        # Insert.M_Organisation_MOID=org
                        Insert.M_Branch_MBID=branchId
                        Insert.TC_PaymentMode=paymode
                        Insert.TC_Date=date
                        # Insert.TC_ServiceID=service
                        Insert.TC_Amount=totalamt
                        Insert.TC_BankName = bank
                        if(cardtype!='' and cardtype!=None):
                            Insert.TC_CardType=cardtype
                        Insert.TC_Comment=comment
                        Insert.TC_CardNumber=cardno
                        Insert.TC_AddIP= flask.request.remote_addr
                        Insert.TC_AddUser = data['id']
                        Insert.TC_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        print("success")
                        mod = ''
                        if(paymode==35):
                            mod='Cash'
                        if(paymode==37):
                            mod='Card'
                        if(paymode==534):
                            mod='Cheque'
                        if(paymode==36):
                            mod='Online'
                        if(paymode==533):
                            mod='UPI'
                        Insert=Model.models.Application.M_InvoiceMaster()
                        # Insert.MI_invoiceType=invoiceType
                        Insert.M_Branch_MBID=branchId
                        Insert.MI_Date=datetime.datetime.now()
                        # Insert.MIP_MedicineDetails=medicineDetails
                        Insert.MI_InvoiceTotal=totalamt
                        Insert.MI_CGST=0
                        Insert.MI_SGST=0
                        Insert.MI_discountPercent=0
                        Insert.MI_Discount=0
                        Insert.MI_DiscountReason=''
                        Insert.MainInvoiceNo=NewInvoice
                        Insert.MI_TotalPayable=totalamt
                        Insert.MI_AmountPaid=totalamt
                        Insert.MI_DueBalance=0
                        Insert.dueSettle=0
                        if(paymode==35):
                            Insert.MI_Cash=totalamt
                        if(paymode==37):
                            Insert.MI_Card=totalamt
                        if(paymode==534):
                            Insert.MI_Cheque=totalamt
                        if(paymode==36):
                            Insert.MI_Online=totalamt
                        if(paymode==533):
                            Insert.MI_Upi=totalamt
                        Insert.MI_Prepaid=0
                        Insert.MI_bankName=bank
                        if(cardtype!='' and cardtype!=None):
                            Insert.MI_CardType=cardtype
                        Insert.MI_lastDigits=''
                        Insert.MI_Comments=comment
                        Insert.M_Patient_MPID=patient
                        Insert.MPP_Prefix=Prefix
                        Insert.MI_lastDigits=cardno
                        Insert.MPP_PaymentType=mod
                        
                        Insert.MPIA_PaymentMode='Credit/Advance'
                        Insert.MPIA_UsedSession=''
                        Insert.MPIA_TotalSessions=''
                        Insert.MI_AppointmentId=0
                        Insert.MI_ServiceName=''
                        Insert.MPP_PackageName=''
                        Insert.M_PartnerOrgName=''
                        Insert.MI_PaidByPartner=0

                        Insert.MI_AddUser= data['id']
                        Insert.MI_AddDate = datetime.datetime.now()
                        Insert.MI_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        
                        T_CreditID= session.query(Model.models.Application.T_Credit.TCID).order_by(Model.models.Application.T_Credit.TCID.desc()).first()
                        
                        Insert=Model.models.Application.T_CreditMaster()
                        Insert.t_Credit_TCID=T_CreditID[0]
                        Insert.TC_Date=datetime.datetime.now()
                        Insert.TC_Amount=totalamt
                        Insert.TC_CreditType=credtype
                        Insert.TC_PatientID=patient
                        Insert.TC_Comment='Recharge'
                        Insert.TC_Description='Advance'
                        
                        Insert.TC_AddIP= flask.request.remote_addr
                        Insert.TC_AddUser = data['id']
                        Insert.TC_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        
                        prepaiddata = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                                    Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount
                                    ).filter_by(TP_PatientID=patient,TP_IsActive=1,TP_IsDeleted=0).all()
                        
                        if(len(prepaiddata)==0):
                            Insert=Model.models.Application.T_PrepaidAmt()
                            Insert.t_Credit_TCID=T_CreditID[0]
                            Insert.TP_Date=datetime.datetime.now()
                            Insert.TP_PrepaidAmount=totalamt
                            Insert.TP_PatientID=patient
                            
                            Insert.TP_AddIP= flask.request.remote_addr
                            Insert.TP_AddUser = data['id']
                            Insert.TP_AddDate = datetime.datetime.now()
                            session.add(Insert)
                            session.commit()
                        else:
                            PrepaidAm = prepaiddata[0].TP_PrepaidAmount
                            amountnow = PrepaidAm + float(totalamt)
                            session.query(Model.models.Application.T_PrepaidAmt
                                    ).filter(Model.models.Application.T_PrepaidAmt.TP_PatientID==patient
                                             ).update({Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount:amountnow,
                                                       Model.models.Application.T_PrepaidAmt.TP_ModUser:data['id'],
                                                       Model.models.Application.T_PrepaidAmt.TP_ModDate:datetime.datetime.now()})
                            session.commit()
                        return jsonify({'msg':'Credit Added Successfully'})
                    else:
                        branchId= request.headers.get('branchId')
                        request_json = request.get_json(force = True)
                        credtype = request_json.get('credtype')
                        patient = request_json.get('patient')
                        # org = request_json.get('org')
                        # clinic = request_json.get('clinic')
                        paymode = request_json.get('paymode')
                        date = request_json.get('date')
                        # service = request_json.get('service')
                        totalamt = request_json.get('totalamt')
                        bank = request_json.get('bank')
                        cardtype = request_json.get('cardtype')
                        cardno = request_json.get('cardno')
                        comment = request_json.get('comment')

                        Insert=session.query(Model.models.Application.M_Credit).get(ID)
                        Insert.MC_CreditType=credtype
                        Insert.M_Patient_MPID=patient
                        # Insert.M_Organisation_MOID=org
                        Insert.M_Branch_MBID=branchId
                        Insert.MC_TotalAmount=totalamt
                        Insert.MC_Date=date
                        Insert.MC_AddIP= flask.request.remote_addr
                        Insert.MC_ModUser = data['id']
                        Insert.MC_ModDate = datetime.datetime.now()
                        session.commit()

                        M_CreditID= session.query(Model.models.Application.M_Credit.MCID).order_by(Model.models.Application.M_Credit.MCID.desc()).first()

                        Insert=session.query(Model.models.Application.T_Credit).get(ID)
                        #Insert.M_Credit_MCID=M_CreditID[0]
                        Insert.TC_CreditType=credtype
                        Insert.TC_PatientID=patient
                        # Insert.M_Organisation_MOID=org
                        Insert.M_Branch_MBID=branchId
                        Insert.TC_PaymentMode=paymode
                        Insert.TC_Date=date
                        # Insert.TC_ServiceID=service
                        Insert.TC_Amount=totalamt
                        Insert.TC_BankName = bank
                        Insert.TC_CardType=cardtype
                        Insert.TC_Comment=comment
                        Insert.TC_CardNumber=cardno
                        Insert.TC_AddIP= flask.request.remote_addr
                        Insert.TC_ModUser = data['id']
                        Insert.TC_ModDate = datetime.datetime.now()
                        session.commit()
                        print("success")

                        return jsonify({'msg':'Credit Updated Successfully'})
                #     return jsonify({'token': data, 'msg':'username is not valid','About':about,'TokenUser':data['user']})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()


@app.route('/getPatientCredit', methods=['GET','POST'])
def getPatientCredit():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    PId= request.data
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPatientCreditnew,
                                session.query(Model.models.Application.T_CreditMaster.TCID.label('ID'),
                                Model.models.Application.T_CreditMaster.TC_Description.label('Description'),
                                            Model.models.Application.T_CreditMaster.TC_Comment.label('Type'),
                                            sqlalchemy.func.date_format(Model.models.Application.T_CreditMaster.TC_Date,'%d-%b-%Y').label('Date'),
                                            Model.models.Application.T_CreditMaster.TC_Amount.label('Total Amount'),
                                            Model.models.Application.T_CreditMaster.t_Credit_TCID.label('Receipt No'),
                                                ).filter_by(TC_PatientID=PId,TC_IsActive=1,TC_IsDeleted=0
                                ).order_by(Model.models.Application.T_CreditMaster.TCID.desc()).all())
                    
                    prepaid = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                            Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount,
                                            ).filter_by(TP_PatientID=PId,TP_IsActive=1,TP_IsDeleted=0
                                ).all()
                    output = []
                    if(len(prepaid)>0):
                    
                        output.append({'Tabdata':queryresult,'Prepaid':prepaid[0].TP_PrepaidAmount})
                    else:
                        output.append({'Tabdata':queryresult,'Prepaid':0})
                    return jsonify(result=output)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DeletePatientCredit', methods=['GET','POST'])
def DeletePatientCredit():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    Id=request.get_json()
                    #Id=request.data
                    if(Id != '' and Id != None):
                        Creditdata = session.query(Model.models.Application.T_CreditMaster.TCID,
                                      Model.models.Application.T_CreditMaster.TC_PatientID,
                                      Model.models.Application.T_CreditMaster.TC_Amount,
                                    ).filter(Model.models.Application.T_CreditMaster.TCID==Id
                                             ).all()
                        session.commit()
                        Pid = Creditdata[0].TC_PatientID
                        Amt = Creditdata[0].TC_Amount
                        prepaiddata = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                        Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount
                                    ).filter_by(TP_PatientID=Pid,TP_IsActive=1,TP_IsDeleted=0).all()
                        curAmount= prepaiddata[0].TP_PrepaidAmount
                        nowAmt = int(curAmount) - int(Amt)
                        session.query(Model.models.Application.T_PrepaidAmt
                            ).filter(Model.models.Application.T_PrepaidAmt.TP_PatientID==Pid
                                        ).update({Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount:nowAmt,
                                                Model.models.Application.T_PrepaidAmt.TP_ModDate:datetime.datetime.now()})
                        session.commit()
                        
                        session.query(Model.models.Application.T_CreditMaster
                                    ).filter(Model.models.Application.T_CreditMaster.TCID==Id
                                             ).update({Model.models.Application.T_CreditMaster.TC_IsDeleted:1,
                                                       Model.models.Application.T_CreditMaster.TC_ModUser:data['id'],
                                                       Model.models.Application.T_CreditMaster.TC_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Credit Cancelled Successfully'})
                    else:
                        return jsonify({'msg':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getCreditEditForm',methods=['POST','GET'])
def getCreditEditForm():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    content_type = request.headers.get('Content-Type')
                    PId= request.data

                    queryresult= session.query(Model.models.Application.T_Credit.TCID.label('ID'),
                                    Model.models.Application.T_Credit.M_Credit_MCID.label('CreditID'),
                                    Model.models.Application.T_Credit.M_Organisation_MOID.label('Org'),
                                    Model.models.Application.T_Credit.M_Branch_MBID.label('clinic'),
                                    Model.models.Application.T_Credit.TC_PaymentMode.label('paymode'),
                                    Model.models.Application.T_Credit.TC_Date.label('date'),
                                    Model.models.Application.T_Credit.TC_ServiceID.label('serviceID'),
                                    Model.models.Application.T_Credit.TC_Amount.label('Amount'),
                                    Model.models.Application.T_Credit.TC_BankName.label('bank'),
                                    Model.models.Application.T_Credit.TC_CardType.label('cardtype'),
                                    Model.models.Application.T_Credit.TC_CardNumber.label('cardno'),
                                    Model.models.Application.T_Credit.TC_CreditType.label('credittype'),
                                    Model.models.Application.T_Credit.TC_PatientID.label('patient'),
                                    Model.models.Application.T_Credit.TC_Comment.label('comment')

                                        ).filter_by(TCID=PId,TC_IsActive=1,TC_IsDeleted=0).all()

                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getCreditEditForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddCreditForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    session.commit()
                    getClinic= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getClinics,
                        session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                    Model.models.Application.M_Branch.MB_Name.label('label')
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                )
                    session.commit()
                    getOrg= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getOrg,
                        session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                                    Model.models.Application.M_Organisation.MO_Name.label('label')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                                )
                    session.commit()
                    getCredit= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getCredit,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=13,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
                    session.commit()
                    getPayType= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getPayType,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=14,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
                    session.commit()
                    getPatient= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPatients,
                                session.query(Model.models.Application.M_Patient.MPID.label('key'),
                                            Model.models.Application.M_Patient.MP_Name.label('label')
                                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0).order_by(Model.models.Application.M_Patient.MP_Name).all()
                                        )
                    session.commit()

                    getService= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getService,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=15,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
                    session.commit()
                    getCardType= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getCardType,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=18,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
                    session.commit()
                    getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())
                    getTextField[3]['options'] = getClinic
                    getTextField[2]['options'] = getOrg

                    getTextField[0]['options'] = getCredit
                    getTextField[1]['options'] = getPatient
                    getTextField[4]['options'] = getPayType
                    getTextField[6]['options'] = getServiceDtl
                    getTextField[9]['options'] = getCardType

                    getTextField[0]['value'] = queryresult[0].credittype
                    getTextField[1]['value'] = queryresult[0].patient
                    getTextField[2]['value'] = queryresult[0].Org
                    getTextField[3]['value'] = queryresult[0].clinic
                    getTextField[4]['value'] = queryresult[0].paymode
                    getTextField[5]['value'] = queryresult[0].date.strftime('%Y-%m-%d')
                    getTextField[6]['value'] = queryresult[0].serviceID
                    getTextField[7]['value'] = queryresult[0].Amount
                    getTextField[8]['value'] = queryresult[0].bank
                    getTextField[9]['value'] = queryresult[0].cardtype
                    getTextField[10]['value'] = queryresult[0].cardno
                    getTextField[11]['value'] = queryresult[0].comment

                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/searchCreditForm',methods=['POST','GET'])
def searchCreditForm():
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()

                    # getTextField= Common_Function.CommonFun.convertToJson(
                    #         Constant.constant.constant.searchCreditForm,session.query(Model.models.Application.M_FormControl,
                    #                 sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                    #                 sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                    #                 sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                    #                 sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                    #                 Model.models.Application.M_FormControl.MFC_Align.label('align'),
                    #                 sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                    #     ).filter_by(MFC_FormName='searchCreditForm',MFC_IsActive=1,MFC_IsDeleted=0
                    #                 ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                    #                     ).all()
                    # )
                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.searchCreditForm,session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='searchCreditForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    getClinic= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getClinics,
                        session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                    Model.models.Application.M_Branch.MB_Name.label('label')
                                    ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                )
                    getOrg= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getOrg,
                        session.query(Model.models.Application.M_Organisation.MOID.label('key'),
                                    Model.models.Application.M_Organisation.MO_Name.label('label')
                                        ).filter_by(MO_IsActive=1,MO_IsDeleted=0).order_by(Model.models.Application.M_Organisation.MO_Name).all()
                                )
                    getCredit= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getCredit,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=13,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
                    getService= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getService,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=15,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
                    ServiceNames= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.ServiceNamess,
                    session.query(Model.models.Application.M_Service.MSID.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MS_IsDeleted=0).all()
                            )
                    session.commit()

                    getTextField[2]['options'] = ServiceNames

                    getTextField[0]['options'] = getCredit
                    getTextField[1]['options'] = getClinic


                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/searchCreditDtl', methods=['POST'])
def searchCreditDtl():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):

                    request_json = request.get_json(force = True)
                    credittype = request_json.get('credittype')
                    clinic = request_json.get('clinic')
                    service = request_json.get('service')
                    PId = request_json.get('PID')

                    apply = []

                    if(service !='' and service !=None):
                        apply.append(Model.models.Application.T_Credit.TC_ServiceID == service)
                    if(credittype !='' and credittype !=None):
                        apply.append(Model.models.Application.T_Credit.TC_CreditType.contains(credittype))
                    if(clinic !='' and clinic !=None):
                        apply.append(Model.models.Application.T_Credit.M_Branch_MBID == clinic)

                    if((service!='' and service !='') or (credittype!='' and credittype !='') or (clinic!='' and clinic !='')):
                        queryresult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getPatientCredit,
                        session.query(Model.models.Application.T_Credit.TCID.label('ID'),
                                    Model.models.Application.T_Credit.TC_ServiceID.label('Service'),
                                    sqlalchemy.func.date_format(Model.models.Application.T_Credit.TC_Date,'%d-%b-%Y').label('Date'),
                                    Model.models.Application.T_Credit.TC_Amount.label('Total Amount')
                                        ).filter_by(TC_IsActive=1,TC_IsDeleted=0,TC_PatientID=PId
                        ).filter(*apply).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getConcentForm', methods=['POST','GET'])
def getConcentForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    # PId= str(request.data)
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getConcentForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='UploadConsentForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/addConsentForm',methods=['GET','POST'])
def addConsentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    content_type = request.headers.get('Content-Type')
                    files= request.files.getlist(str('files[]'))
                    data= request.form.get('PID')

                    FilePath = 'static/Patient_Consent_Form'
                    for file in files:
                        if(file.filename!='' and file.filename!= None):
                            date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                            name, ext = os.path.splitext(file.filename)
                            files = 'ConsentForm'+ '_'+ name +'_' + date  + ext
                            fileName=files
                            if(os.path.exists(FilePath)):
                                file.save(os.path.join(FilePath, fileName))
                                print(file.filename)
                            else:
                                os.makedirs(FilePath)
                                file.save(os.path.join(FilePath, fileName))

                        Insert=Model.models.Application.M_PatientConsentForm()
                        Insert.MPCF_PatientID=data
                        Insert.MPCF_Name=fileName
                        Insert.MPCF_FilePath=FilePath
                        Insert.MPCF_FileType='ConsentForm'
                        Insert.MPCF_AddIP= flask.request.remote_addr
                        Insert.MPCF_AddUser = data['id']
                        Insert.MPCF_AddDate = datetime.datetime.now(0)
                        session.add(Insert)
                        session.commit()
                    return jsonify({'msg':'Consent Form Uploaded Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/getUploadedConsentForm', methods=['POST','GET'])
def getUploadedConsentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    PId= request.data
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getUploadedConsentForm,
                                    session.query(Model.models.Application.M_PatientConsentForm,
                                            Model.models.Application.M_PatientConsentForm.MPCFID.label('ID'),
                                            Model.models.Application.M_Patient.MP_Name.label('Patient Name'),

                                            func.concat('http://127.0.0.1:5000/',Model.models.Application.M_PatientConsentForm.MPCF_FilePath, '/', Model.models.Application.M_PatientConsentForm.MPCF_Name).label('Path'),
                                            Model.models.Application.M_PatientConsentForm.MPCF_Name.label('File Name'),
                                            Model.models.Application.M_PatientConsentForm.MPCF_AddDate.label('Add Date')
                                            ).filter_by(MPCF_IsActive=1 ,MPCF_IsDeleted=0,MPCF_PatientID=PId).join(Model.models.Application.M_Patient,
                                                Model.models.Application.M_Patient.MPID==Model.models.Application.M_PatientConsentForm.MPCF_PatientID
                                                ).all()
                            )
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/DownloadUploadConsentFile', methods=['POST','GET'])
def DownloadUploadConsentFile():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    PId= request.data
                    getTextField= session.query(Model.models.Application.M_PatientConsentForm,
                                            func.concat(Model.models.Application.M_PatientConsentForm.MPCF_FilePath, '/', Model.models.Application.M_PatientConsentForm.MPCF_Name).label('Path'),
                                            (Model.models.Application.M_PatientConsentForm.MPCF_Name).label('Fname')
                                            ).filter_by(MPCF_IsActive=1 ,MPCF_IsDeleted=0,MPCFID=PId).all()
                    value = getTextField[0].Path
                    Name = getTextField[0].Fname
                    name, ext = os.path.splitext(Name)

                    with open(value, "rb") as encofile:
                        encoded_string = base64.b64encode(encofile.read())

                    fname=name
                    fext=ext[1:]
                    fbstring=str(encoded_string)
                    #print(encoded_string)
                    return jsonify({'fname':fname,'fext': fext,'fbstring':fbstring[2:-1]})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/DeleteConsentForm',methods=['POST'])
def DeleteConsentForm():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    Id=request.get_json()
                    #Id=request.data
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_PatientConsentForm
                                    ).filter(Model.models.Application.M_PatientConsentForm.MPCFID==Id
                                             ).update({Model.models.Application.M_PatientConsentForm.MPCF_IsDeleted:1,
                                                       Model.models.Application.M_PatientConsentForm.MPCF_ModUser:data['id'],
                                                       Model.models.Application.M_PatientConsentForm.MPCF_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Consent Form Deleted Successfully'})
                    else:
                        return jsonify({'msg':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getHistoryPage', methods=['POST','GET'])
def getHistoryPage():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    # PId= str(request.data)
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getHistoryPage,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddHistoryPage',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getVisitReasonForm', methods=['POST','GET'])
def getVisitReasonForm():

    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    PastHistory= session.query(Model.models.Application.M_ReasonForVisit.MRVID
                                        ).filter_by(M_AppointmentID=Aid,M_Patient_MPID=PID,MRV_IsActive=1,MRV_IsDeleted=0
                                        ).all()


                    getTextField= Common_Function.CommonFun.convertToJson(
                                        Constant.constant.constant.getVisitReasonForm,
                                        session.query(Model.models.Application.M_FormControl,
                                                sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                                Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                    ).filter_by(MFC_FormName='AddVisitReasonForm',MFC_IsActive=1,MFC_IsDeleted=0
                                                ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                    ).order_by(Model.models.Application.M_FormControl.MFC_preference).all()
                                )
                    if(len(PastHistory)==0):
                        return jsonify(result=getTextField)
                    else:
                        queryResult= session.query(Model.models.Application.M_ReasonForVisit.MRVID.label('Id'),
                            Model.models.Application.M_ReasonForVisit.MRV_PresentConcerns.label('MRV_PresentConcerns'),
                            Model.models.Application.M_ReasonForVisit.MRV_InformedBy.label('MRV_InformedBy'),
                            Model.models.Application.M_ReasonForVisit.MRV_AgeWhenNoticed.label('MRV_AgeWhenNoticed')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MRV_IsActive=1,MRV_IsDeleted=0
                                ).order_by(Model.models.Application.M_ReasonForVisit.MRVID.desc()).first()
                        getTextField[1]['value'] = queryResult.MRV_PresentConcerns
                        getTextField[0]['value'] = queryResult.MRV_InformedBy
                        # getTextField[2]['value'] = queryResult.MRV_AgeWhenNoticed
                        return jsonify({'result':getTextField , 'Id':queryResult.Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    
    finally:
        session.close()

@app.route('/submitVisitReasonForm',methods=['GET','POST'])
def submitVisitReasonForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):

                    request_json = request.get_json()
                    presentconcerns = request_json.get('presentconcerns')
                    informedby = request_json.get('informedby')
                    concernnoticeAge = request_json.get('concernnoticeAge')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_ReasonForVisit()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MRV_PresentConcerns=presentconcerns
                        Insert.MRV_InformedBy=informedby
                        Insert.MRV_AgeWhenNoticed=concernnoticeAge
                        Insert.MRV_AddIP= flask.request.remote_addr
                        Insert.MRV_AddUser= data['id']
                        Insert.MRV_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Visit Reason saved Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_ReasonForVisit).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MRV_PresentConcerns=presentconcerns
                        Insert.MRV_InformedBy=informedby
                        Insert.MRV_AgeWhenNoticed=concernnoticeAge
                        Insert.MRV_AddIP= flask.request.remote_addr
                        Insert.MRV_AddUser= data['id']
                        Insert.MRV_ModDate = datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'Visit Reason Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewVisitReasonForm', methods=['GET','POST'])
def viewVisitReasonForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewVisitReasonForm,
                                session.query(Model.models.Application.M_ReasonForVisit.MRVID.label('ID'),
                                            Model.models.Application.M_ReasonForVisit.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ReasonForVisit.MRV_PresentConcerns.label('Present Concerns'),
                                            Model.models.Application.M_ReasonForVisit.MRV_InformedBy.label('Informed By'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MRV_IsActive=1,MRV_IsDeleted=0
                                ).order_by(Model.models.Application.M_ReasonForVisit.MRVID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPastHistoryForm', methods=['POST','GET'])
def getPastHistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PastHistory.MPHID.label('Id'),
                            Model.models.Application.M_PastHistory.MPH_PastMedications.label('MPH_PastMedications')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPH_IsActive=1,MPH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PastHistory.MPHID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getPastHistoryForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddPastHistoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        # getTextField[0]['value'] = queryResult[0].MPH_PastInvestigations
                        # getTextField[1]['value'] = queryResult[0].MPH_PastTreatments
                        getTextField[0]['value'] = queryResult[0].MPH_PastMedications
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPastHistoryForm',methods=['GET','POST'])
def submitPastHistoryForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    PID = request.form.get('PID')
                    Id = request.form.get('Id')
                    Aid = request.form.get('Aid')
                    # request_json = request.get_json()
                    # Aid = request_json.get('Aid')
                    # PID = request_json.get('PID')
                    # Id = request_json.get('Id')

                    pastinvestigations = request.form.get('pastinvestigations')
                    pasttreatments = request.form.get('pasttreatments')
                    pastmedications = request.form.get('pastmedications')
                    files= request.files.getlist(str('files[]'))
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PastHistory()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPH_PastInvestigations=pastinvestigations
                        Insert.MPH_PastTreatments=pasttreatments
                        Insert.MPH_PastMedications=pastmedications
                        Insert.MPH_AddIP= flask.request.remote_addr
                        Insert.MPH_AddUser= data['id']
                        Insert.MPH_AddDate = datetime.datetime.now()

                        session.add(Insert)
                        session.commit()

                        PastHistory= session.query(Model.models.Application.M_PastHistory.MPHID).order_by(Model.models.Application.M_PastHistory.MPHID.desc()).first()
                        FilePath = 'static/Patient_PastHistory_File'
                        for file in files:
                            if(file.filename!='' and file.filename!= None):
                                date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                                name, ext = os.path.splitext(file.filename)
                                files = PID+'PastHistory_'+ name +'_' + date  + ext
                                fileName=files
                                if(os.path.exists(FilePath)):
                                    file.save(os.path.join(FilePath, fileName))
                                    print(file.filename)
                                else:
                                    os.makedirs(FilePath)
                                    file.save(os.path.join(FilePath, fileName))


                            Insert=Model.models.Application.M_PastHistoryFiles()
                            Insert.M_Patient_MPID=PID
                            Insert.M_PastHistory_MPHID=PastHistory[0]
                            Insert.MPHF_PastFiles=fileName
                            Insert.MPHF_PastFilePath=FilePath
                            Insert.MPHF_AddIP= flask.request.remote_addr
                            Insert.MPHF_AddUser= data['id']
                            Insert.MPHF_AddDate = datetime.datetime.now()

                            session.add(Insert)
                            session.commit()

                        return jsonify({'msg':'Past History Uploaded Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PastHistory).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPH_PastInvestigations=pastinvestigations
                        Insert.MPH_PastTreatments=pasttreatments
                        Insert.MPH_PastMedications=pastmedications
                        Insert.MPH_AddIP= flask.request.remote_addr
                        Insert.MPH_AddUser= data['id']
                        Insert.MPH_AddDate = datetime.datetime.now()

                        session.commit()

                        PastHistory= session.query(Model.models.Application.M_PastHistory.MPHID).order_by(Model.models.Application.M_PastHistory.MPHID.desc()).first()
                        FilePath = 'static/Patient_PastHistory_File'
                        for file in files:
                            if(file.filename!='' and file.filename!= None):
                                date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                                name, ext = os.path.splitext(file.filename)
                                files = PID+'PastHistory_'+ name +'_' + date  + ext
                                fileName=files
                                if(os.path.exists(FilePath)):
                                    file.save(os.path.join(FilePath, fileName))
                                    print(file.filename)
                                else:
                                    os.makedirs(FilePath)
                                    file.save(os.path.join(FilePath, fileName))


                            Insert=session.query(Model.models.Application.M_PastHistoryFiles).get(Id)
                            Insert.M_Patient_MPID=PID
                            Insert.M_PastHistory_MPHID=PastHistory[0]
                            Insert.MPHF_PastFiles=fileName
                            Insert.MPHF_PastFilePath=FilePath
                            Insert.MPHF_AddIP= flask.request.remote_addr
                            Insert.MPHF_AddUser= data['id']
                            Insert.MPHF_AddDate = datetime.datetime.now()

                            session.commit()

                        return jsonify({'msg':'Past History Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPastHistoryForm', methods=['GET','POST'])
def viewPastHistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPastHistoryForm,
                                session.query(Model.models.Application.M_PastHistory.MPHID.label('ID'),
                                            Model.models.Application.M_PastHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PastHistory.MPH_PastMedications.label('Past Medications')
                                            
                                                ).filter_by(M_Patient_MPID=pid,MPH_IsActive=1,MPH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PastHistory.MPHID.desc()).all())

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()


@app.route('/getPrenatalHistoryForm', methods=['POST','GET'])
def getPrenatalHistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PrenatalHistory.MPHID.label('Id'),
                            Model.models.Application.M_PrenatalHistory.MPH_MotheraAgeAtConception.label('MPH_MotheraAgeAtConception'),
                            Model.models.Application.M_PrenatalHistory.MPH_MotherHealthAtPregnancy.label('MPH_MotherHealthAtPregnancy'),
                            Model.models.Application.M_PrenatalHistory.MPH_HistoryofAbortions.label('MPH_HistoryofAbortions'),
                            Model.models.Application.M_PrenatalHistory.MPH_GestationalDiabetes.label('MPH_GestationalDiabetes'),
                            Model.models.Application.M_PrenatalHistory.MPH_NeurologicalDisorder.label('MPH_NeurologicalDisorder'),
                            Model.models.Application.M_PrenatalHistory.MPH_PhysicalEmotionalTrauma.label('MPH_PhysicalEmotionalTrauma'),
                            Model.models.Application.M_PrenatalHistory.MPH_RhInompatibility.label('MPH_RhInompatibility'),
                            Model.models.Application.M_PrenatalHistory.MPH_Jaundice.label('MPH_Jaundice'),
                            Model.models.Application.M_PrenatalHistory.MPH_Seizures.label('MPH_Seizures'),
                            Model.models.Application.M_PrenatalHistory.MPH_TraumaInjury.label('MPH_TraumaInjury'),
                            Model.models.Application.M_PrenatalHistory.MPH_Bleedinginlatepregnancy.label('MPH_Bleedinginlatepregnancy'),
                            Model.models.Application.M_PrenatalHistory.MPH_AdequateNutrition.label('MPH_AdequateNutrition'),
                            Model.models.Application.M_PrenatalHistory.MPH_Infections.label('MPH_Infections'),
                            Model.models.Application.M_PrenatalHistory.MPH_Smoking.label('MPH_Smoking'),
                            Model.models.Application.M_PrenatalHistory.MPH_Observations.label('MPH_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPH_IsActive=1,MPH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PrenatalHistory.MPHID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getPrenatalHistoryForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddPrenatalHistoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    YesNo= Common_Function.CommonFun.yesno()

                    getTextField[2]['options']= YesNo
                    getTextField[3]['options']= YesNo
                    getTextField[4]['options']= YesNo
                    getTextField[5]['options']= YesNo
                    getTextField[6]['options']= YesNo
                    getTextField[7]['options']= YesNo
                    getTextField[8]['options']= YesNo
                    getTextField[9]['options']= YesNo
                    getTextField[10]['options']= YesNo
                    getTextField[11]['options']= YesNo
                    getTextField[12]['options']= YesNo
                    getTextField[13]['options']= YesNo

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:

                        getTextField[0]['value'] = queryResult[0].MPH_MotheraAgeAtConception
                        getTextField[1]['value'] = queryResult[0].MPH_MotherHealthAtPregnancy
                        getTextField[2]['value'] = queryResult[0].MPH_HistoryofAbortions
                        getTextField[3]['value'] = queryResult[0].MPH_GestationalDiabetes
                        getTextField[4]['value'] = queryResult[0].MPH_NeurologicalDisorder
                        getTextField[5]['value'] = queryResult[0].MPH_PhysicalEmotionalTrauma
                        getTextField[6]['value'] = queryResult[0].MPH_RhInompatibility
                        getTextField[7]['value'] = queryResult[0].MPH_Jaundice
                        getTextField[8]['value'] = queryResult[0].MPH_Seizures
                        getTextField[9]['value'] = queryResult[0].MPH_TraumaInjury
                        getTextField[10]['value'] = queryResult[0].MPH_Bleedinginlatepregnancy
                        getTextField[11]['value'] = queryResult[0].MPH_AdequateNutrition
                        getTextField[12]['value'] = queryResult[0].MPH_Infections
                        getTextField[13]['value'] = queryResult[0].MPH_Smoking
                        getTextField[14]['value'] = queryResult[0].MPH_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitPrenatalHistoryForm',methods=['GET','POST'])
def submitPrenatalHistoryForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    ageatconception = request_json.get('ageatconception')
                    healthonpregnancy = request_json.get('healthonpregnancy')
                    abortion = request_json.get('abortion')
                    diabetes = request_json.get('diabetes')
                    Disorder = request_json.get('Disorder')
                    Hypertension = request_json.get('Hypertension')
                    Inompatibility = request_json.get('Inompatibility')
                    Jaundice = request_json.get('Jaundice')
                    Seizures = request_json.get('Seizures')
                    Trauma = request_json.get('Trauma')
                    Bleeding = request_json.get('Bleeding')
                    Adequate = request_json.get('Adequate')
                    Infections = request_json.get('Infections')
                    Smoking = request_json.get('Smoking')
                    Observations = request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PrenatalHistory()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPH_MotheraAgeAtConception=ageatconception
                        Insert.MPH_MotherHealthAtPregnancy=healthonpregnancy
                        Insert.MPH_HistoryofAbortions=abortion
                        Insert.MPH_GestationalDiabetes=diabetes
                        Insert.MPH_NeurologicalDisorder=Disorder
                        Insert.MPH_PhysicalEmotionalTrauma=Hypertension
                        Insert.MPH_RhInompatibility=Inompatibility
                        Insert.MPH_Jaundice=Jaundice
                        Insert.MPH_Seizures=Seizures
                        Insert.MPH_TraumaInjury=Trauma
                        Insert.MPH_Bleedinginlatepregnancy=Bleeding
                        Insert.MPH_AdequateNutrition=Adequate
                        Insert.MPH_Infections=Infections
                        Insert.MPH_Smoking=Smoking
                        Insert.MPH_Observations=Observations
                        Insert.MPH_AddIP= flask.request.remote_addr
                        Insert.MPH_AddUser= data['id']
                        Insert.MPH_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Prenatal History Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PrenatalHistory).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPH_MotheraAgeAtConception=ageatconception
                        Insert.MPH_MotherHealthAtPregnancy=healthonpregnancy
                        Insert.MPH_HistoryofAbortions=abortion
                        Insert.MPH_GestationalDiabetes=diabetes
                        Insert.MPH_NeurologicalDisorder=Disorder
                        Insert.MPH_PhysicalEmotionalTrauma=Hypertension
                        Insert.MPH_RhInompatibility=Inompatibility
                        Insert.MPH_Jaundice=Jaundice
                        Insert.MPH_Seizures=Seizures
                        Insert.MPH_TraumaInjury=Trauma
                        Insert.MPH_Bleedinginlatepregnancy=Bleeding
                        Insert.MPH_AdequateNutrition=Adequate
                        Insert.MPH_Infections=Infections
                        Insert.MPH_Smoking=Smoking
                        Insert.MPH_Observations=Observations
                        Insert.MPH_AddIP= flask.request.remote_addr
                        Insert.MPH_AddUser= data['id']
                        Insert.MPH_AddDate = datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'Prenatal History Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPrenatalHistoryForm', methods=['GET','POST'])
def viewPrenatalHistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPrenatalHistoryForm,
                                session.query(Model.models.Application.M_PrenatalHistory.MPHID.label('ID'),
                                            Model.models.Application.M_PrenatalHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PrenatalHistory.MPH_MotheraAgeAtConception.label('Mother Conception'),
                                            Model.models.Application.M_PrenatalHistory.MPH_MotherHealthAtPregnancy.label('Mother Pregnancy'),
                                            Model.models.Application.M_PrenatalHistory.MPH_HistoryofAbortions.label('History Abortions'),
                                            Model.models.Application.M_PrenatalHistory.MPH_GestationalDiabetes.label('Gestational Diabetes'),
                                            Model.models.Application.M_PrenatalHistory.MPH_NeurologicalDisorder.label('Neurological Disorder'),
                                            Model.models.Application.M_PrenatalHistory.MPH_PhysicalEmotionalTrauma.label('Physical Emotional'),
                                            Model.models.Application.M_PrenatalHistory.MPH_RhInompatibility.label('Inompatibility'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Jaundice.label('Jaundice'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Seizures.label('Seizures'),
                                            Model.models.Application.M_PrenatalHistory.MPH_TraumaInjury.label('TraumaInjury'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Bleedinginlatepregnancy.label('Bleeding pregnancy'),
                                            Model.models.Application.M_PrenatalHistory.MPH_AdequateNutrition.label('Adequate Nutrition'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Infections.label('Infections'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Smoking.label('Smoking'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MPH_IsActive=1,MPH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PrenatalHistory.MPHID.desc()).all())

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPatientBirthHistoryForm', methods=['POST','GET'])
def getPatientBirthHistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PatientBirthHistory.MPBHID.label('Id'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_MotherHealth.label('MPBH_MotherHealth'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_DeliveryType.label('MPBH_DeliveryType'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_typeofdelivery.label('MPBH_typeofdelivery'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_DeliveryLocationh.label('MPBH_DeliveryLocationh'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_MultiplePregnancies.label('MPBH_MultiplePregnancies'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_ComplicationDuringPregnancy.label('MPBH_ComplicationDuringPregnancy'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_ChildBirth.label('MPBH_ChildBirth'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_ChildBirthWeek.label('MPBH_ChildBirthWeek'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_BirthWeight.label('MPBH_BirthWeight'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_BirthCry.label('MPBH_BirthCry'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_NeonatalConditionint.label('MPBH_NeonatalConditionint'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_SpecialCareAny.label('MPBH_SpecialCareAny'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_AnyMedicalEvents.label('MPBH_AnyMedicalEvents'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_Congenital.label('MPBH_Congenital'),
                            Model.models.Application.M_PatientBirthHistory.MPBH_Observations.label('MPBH_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPBH_IsActive=1,MPBH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PatientBirthHistory.MPBHID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getPatientBirthHistoryForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddBirthHistoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )


                    getTextField[1]['options']= Common_Function.CommonFun.Delivery()
                    getTextField[3]['options']= Common_Function.CommonFun.DeliveryLocation()
                    getTextField[4]['options']= Common_Function.CommonFun.Pregnancies()
                    getTextField[6]['options']= Common_Function.CommonFun.ChildBirth()
                    getTextField[9]['options']= Common_Function.CommonFun.BirthCry()
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MPBH_MotherHealth
                        getTextField[1]['value'] = queryResult[0].MPBH_DeliveryType
                        getTextField[2]['value'] = queryResult[0].MPBH_typeofdelivery
                        getTextField[3]['value'] = queryResult[0].MPBH_DeliveryLocationh
                        getTextField[4]['value'] = queryResult[0].MPBH_MultiplePregnancies
                        getTextField[5]['value'] = queryResult[0].MPBH_ComplicationDuringPregnancy
                        getTextField[6]['value'] = queryResult[0].MPBH_ChildBirth
                        getTextField[7]['value'] = queryResult[0].MPBH_ChildBirthWeek
                        getTextField[8]['value'] = queryResult[0].MPBH_BirthWeight
                        getTextField[9]['value'] = queryResult[0].MPBH_BirthCry
                        getTextField[10]['value'] = queryResult[0].MPBH_NeonatalConditionint
                        getTextField[11]['value'] = queryResult[0].MPBH_SpecialCareAny
                        getTextField[12]['value'] = queryResult[0].MPBH_AnyMedicalEvents
                        getTextField[13]['value'] = queryResult[0].MPBH_Congenital
                        getTextField[14]['value'] = queryResult[0].MPBH_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPatientBirthHistoryForm',methods=['GET','POST'])
def submitPatientBirthHistoryForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Motherhealth = request_json.get('Motherhealth')
                    deliverytype = request_json.get('deliverytype')
                    typeofdelivery = request_json.get('typeofdelivery')
                    deliverylocation = request_json.get('deliverylocation')
                    multiplepregnancies = request_json.get('multiplepregnancies')
                    complicationduringpregnancy = request_json.get('complicationduringpregnancy')
                    chiildbirth = request_json.get('chiildbirth')
                    childbirthweek = request_json.get('childbirthweek')
                    birthweight = request_json.get('birthweight')
                    birthcry = request_json.get('birthcry')
                    neonatalcondition = request_json.get('neonatalcondition')
                    specialcareany = request_json.get('specialcareany')
                    anymedicalevents = request_json.get('anymedicalevents')
                    congenital = request_json.get('congenital')
                    Observations = request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_PatientBirthHistory()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    Insert.MPBH_MotherHealth=Motherhealth
                    Insert.MPBH_DeliveryType=deliverytype
                    Insert.MPBH_typeofdelivery=typeofdelivery
                    Insert.MPBH_DeliveryLocationh=deliverylocation
                    Insert.MPBH_MultiplePregnancies=multiplepregnancies
                    Insert.MPBH_ComplicationDuringPregnancy=complicationduringpregnancy
                    Insert.MPBH_ChildBirth=chiildbirth
                    Insert.MPBH_ChildBirthWeek=childbirthweek
                    Insert.MPBH_BirthWeight=birthweight
                    Insert.MPBH_BirthCry=birthcry
                    Insert.MPBH_NeonatalConditionint=neonatalcondition
                    Insert.MPBH_SpecialCareAny=specialcareany
                    Insert.MPBH_AnyMedicalEvents=anymedicalevents
                    Insert.MPBH_Congenital=congenital
                    Insert.MPBH_Observations=Observations
                    Insert.MPBH_AddIP= flask.request.remote_addr
                    Insert.MPBH_AddUser= data['id']
                    Insert.MPBH_AddDate = datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'Birth History Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})


    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPatientBirthHistoryForm', methods=['GET','POST'])
def viewPatientBirthHistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPatientBirthHistoryForm,
                                session.query(Model.models.Application.M_PatientBirthHistory.MPBHID.label('ID'),
                                            Model.models.Application.M_PatientBirthHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_MotherHealth.label('Mother Health'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_DeliveryType.label('Delivery Type'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_typeofdelivery.label('Type of Delivery'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_DeliveryLocationh.label('Delivery Location'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_MultiplePregnancies.label('Multiple Pregnancies'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_ComplicationDuringPregnancy.label('Complication Pregnancy'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_ChildBirth.label('Child Birth'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_ChildBirthWeek.label('Child Birth Week'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_BirthWeight.label('Birth Weight'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_BirthCry.label('Birth Cry'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_NeonatalConditionint.label('Neonatal Condition'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_SpecialCareAny.label('Special CareAny'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_AnyMedicalEvents.label('Any Medical Events'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_Congenital.label('Congenital'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MPBH_IsActive=1,MPBH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PatientBirthHistory.MPBHID.desc()).all())

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDevelopmentalHistoryForm', methods=['POST','GET'])
def getDevelopmentalHistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_DevelopmentalHistory.MDHID.label('Id'),
                            Model.models.Application.M_DevelopmentalHistory.MDH_HoldUpHeadAge.label('MDH_HoldUpHeadAge'),
                            Model.models.Application.M_DevelopmentalHistory.MDH_Rolloverage.label('MDH_Rolloverage'),
                            Model.models.Application.M_DevelopmentalHistory.MDH_SitAge.label('MDH_SitAge'),
                            Model.models.Application.M_DevelopmentalHistory.MDH_StandAloneAge.label('MDH_StandAloneAge'),
                            Model.models.Application.M_DevelopmentalHistory.MDH_WalkAge.label('MDH_WalkAge'),
                            Model.models.Application.M_DevelopmentalHistory.MDH_TalkAge.label('MDH_TalkAge'),
                            Model.models.Application.M_DevelopmentalHistory.MDH_ToiletTrainAge.label('MDH_ToiletTrainAge'),
                            Model.models.Application.M_DevelopmentalHistory.MDH_FeedAge.label('MDH_FeedAge'),
                            Model.models.Application.M_DevelopmentalHistory.MDH_DresshimAge.label('MDH_DresshimAge'),
                            Model.models.Application.M_DevelopmentalHistory.MDH_Observations.label('MDH_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MDH_IsActive=1,MDH_IsDeleted=0
                                ).order_by(Model.models.Application.M_DevelopmentalHistory.MDHID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getDevelopmentalHistoryForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='getDevelopmentalHistoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MDH_HoldUpHeadAge
                        getTextField[1]['value'] = queryResult[0].MDH_Rolloverage
                        getTextField[2]['value'] = queryResult[0].MDH_SitAge
                        getTextField[3]['value'] = queryResult[0].MDH_StandAloneAge
                        getTextField[4]['value'] = queryResult[0].MDH_WalkAge
                        getTextField[5]['value'] = queryResult[0].MDH_TalkAge
                        getTextField[6]['value'] = queryResult[0].MDH_ToiletTrainAge
                        getTextField[7]['value'] = queryResult[0].MDH_FeedAge
                        getTextField[8]['value'] = queryResult[0].MDH_DresshimAge
                        getTextField[9]['value'] = queryResult[0].MDH_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitDevelopmentalHistoryForm',methods=['GET','POST'])
def submitDevelopmentalHistoryForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    holdupheadage = request_json.get('holdupheadage')
                    Rolloverage = request_json.get('Rolloverage')
                    sitage = request_json.get('sitage')
                    standaloneage = request_json.get('standaloneage')
                    walkage = request_json.get('walkage')
                    talkage = request_json.get('talkage')
                    ToilettrainAge = request_json.get('ToilettrainAge')
                    FeedAge = request_json.get('FeedAge')
                    DresshimAge = request_json.get('DresshimAge')
                    Observations = request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_DevelopmentalHistory()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MDH_HoldUpHeadAge=holdupheadage
                        Insert.MDH_Rolloverage=Rolloverage
                        Insert.MDH_SitAge=sitage
                        Insert.MDH_StandAloneAge=standaloneage
                        Insert.MDH_WalkAge=walkage
                        Insert.MDH_TalkAge=talkage
                        Insert.MDH_ToiletTrainAge=ToilettrainAge
                        Insert.MDH_FeedAge=FeedAge
                        Insert.MDH_DresshimAge=DresshimAge
                        Insert.MDH_Observations=Observations
                        Insert.MDH_AddIP= flask.request.remote_addr
                        Insert.MDH_AddUser= data['id']
                        Insert.MDH_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Developmental History Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_DevelopmentalHistory).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MDH_HoldUpHeadAge=holdupheadage
                        Insert.MDH_Rolloverage=Rolloverage
                        Insert.MDH_SitAge=sitage
                        Insert.MDH_StandAloneAge=standaloneage
                        Insert.MDH_WalkAge=walkage
                        Insert.MDH_TalkAge=talkage
                        Insert.MDH_ToiletTrainAge=ToilettrainAge
                        Insert.MDH_FeedAge=FeedAge
                        Insert.MDH_DresshimAge=DresshimAge
                        Insert.MDH_Observations=Observations
                        Insert.MDH_AddIP= flask.request.remote_addr
                        Insert.MDH_AddUser= data['id']
                        Insert.MDH_AddDate = datetime.datetime.now()

                        session.commit()
                        return jsonify({'msg':'Developmental History Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewDevelopmentalHistoryForm', methods=['GET','POST'])
def viewDevelopmentalHistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewDevelopmentalHistoryForm,
                                session.query(Model.models.Application.M_DevelopmentalHistory.MDHID.label('ID'),
                                            Model.models.Application.M_DevelopmentalHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_HoldUpHeadAge.label('HoldUp HeadAge'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_Rolloverage.label('Rollover age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_SitAge.label('Sit Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_StandAloneAge.label('Stand Alone Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_WalkAge.label('Walk Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_TalkAge.label('Talk Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_ToiletTrainAge.label('Toilet Train Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_FeedAge.label('Feed Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_DresshimAge.label('Dresshim Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MDH_IsActive=1,MDH_IsDeleted=0
                                ).order_by(Model.models.Application.M_DevelopmentalHistory.MDHID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSpeechDevelopmentHistoryForm', methods=['POST','GET'])
def getSpeechDevelopmentHistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_SpeechDevelopmentalHistory.MSDHID.label('Id'),
                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Vocalization.label('MSDH_Vocalization'),
                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Babbling.label('MSDH_Babbling'),
                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_FirstWord.label('MSDH_FirstWord'),
                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Phrases.label('MSDH_Phrases'),
                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_SimpleSentences.label('MSDH_SimpleSentences'),
                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Observations.label('MSDH_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSDH_IsActive=1,MSDH_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpeechDevelopmentalHistory.MSDHID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getSpeechDevelopmentHistoryForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='getSpeechDevelopmentHistoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSDH_Vocalization
                        getTextField[1]['value'] = queryResult[0].MSDH_Babbling
                        getTextField[2]['value'] = queryResult[0].MSDH_FirstWord
                        getTextField[3]['value'] = queryResult[0].MSDH_Phrases
                        getTextField[4]['value'] = queryResult[0].MSDH_SimpleSentences
                        getTextField[5]['value'] = queryResult[0].MSDH_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSpeechDevelopmentHistoryForm',methods=['GET','POST'])
def submitSpeechDevelopmentHistoryForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Vocalization = request_json.get('Vocalization')
                    Babbling = request_json.get('Babbling')
                    FirstWord = request_json.get('FirstWord')
                    Phrases = request_json.get('Phrases')
                    SimpleSentences = request_json.get('SimpleSentences')
                    Observations = request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_SpeechDevelopmentalHistory()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSDH_Vocalization=Vocalization
                        Insert.MSDH_Babbling=Babbling
                        Insert.MSDH_FirstWord=FirstWord
                        Insert.MSDH_Phrases=Phrases
                        Insert.MSDH_SimpleSentences=SimpleSentences
                        Insert.MSDH_Observations=Observations
                        Insert.MSDH_AddUser= data['id']
                        Insert.MSDH_AddDate = datetime.datetime.now()
                        Insert.MSDH_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Speech Developmental History Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_SpeechDevelopmentalHistory).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSDH_Vocalization=Vocalization
                        Insert.MSDH_Babbling=Babbling
                        Insert.MSDH_FirstWord=FirstWord
                        Insert.MSDH_Phrases=Phrases
                        Insert.MSDH_SimpleSentences=SimpleSentences
                        Insert.MSDH_Observations=Observations
                        Insert.MSDH_AddUser= data['id']
                        Insert.MSDH_AddDate = datetime.datetime.now()
                        Insert.MSDH_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Speech Developmental History Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSpeechDevelopmentHistoryForm', methods=['GET','POST'])
def viewSpeechDevelopmentHistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSpeechDevelopmentHistoryForm,
                                session.query(Model.models.Application.M_SpeechDevelopmentalHistory.MSDHID.label('ID'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Vocalization.label('Vocalization'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Babbling.label('Babbling'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_FirstWord.label('First Word'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Phrases.label('Phrases'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_SimpleSentences.label('Simple Sentences'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSDH_IsActive=1,MSDH_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpeechDevelopmentalHistory.MSDHID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getsocialhistoryForm', methods=['POST','GET'])
def getsocialhistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_SocialHistory.MSHID.label('Id'),
                            Model.models.Application.M_SocialHistory.MSH_Aggressive.label('MSH_Aggressive')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSH_IsActive=1,MSH_IsDeleted=0
                                ).order_by(Model.models.Application.M_SocialHistory.MSHID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getsocialhistoryForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='getsocialhistoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )


                    yesno = Common_Function.CommonFun.yesno()
                    # getTextField[0]['options']= yesno
                    # getTextField[1]['options']= yesno
                    # getTextField[2]['options']= yesno
                    # getTextField[3]['options']= yesno
                    # getTextField[4]['options']= yesno
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        # getTextField[0]['value'] = queryResult[0].MSH_Recognises
                        # getTextField[1]['value'] = queryResult[0].MSH_Socialises
                        # getTextField[2]['value'] = queryResult[0].MSH_Irritable
                        # getTextField[3]['value'] = queryResult[0].MSH_Distractible
                        getTextField[0]['value'] = queryResult[0].MSH_Aggressive
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitsocialhistoryForm',methods=['GET','POST'])
def submitsocialhistoryForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Recognises = request_json.get('Recognises')
                    Socialises = request_json.get('Socialises')
                    Irritable = request_json.get('Irritable')
                    Distractible = request_json.get('Distractible')
                    Aggressive = request_json.get('Aggressive')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_SocialHistory()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSH_Recognises=Recognises
                        Insert.MSH_Socialises=Socialises
                        Insert.MSH_Irritable=Irritable
                        Insert.MSH_Distractible=Distractible
                        Insert.MSH_Aggressive=Aggressive
                        Insert.MSH_AddUser= data['id']
                        Insert.MSH_AddDate = datetime.datetime.now()
                        Insert.MSH_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Social History Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_SocialHistory).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSH_Recognises=Recognises
                        Insert.MSH_Socialises=Socialises
                        Insert.MSH_Irritable=Irritable
                        Insert.MSH_Distractible=Distractible
                        Insert.MSH_Aggressive=Aggressive
                        Insert.MSH_AddUser= data['id']
                        Insert.MSH_AddDate = datetime.datetime.now()
                        Insert.MSH_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Social History Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewsocialhistoryForm', methods=['GET','POST'])
def viewsocialhistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewsocialhistoryForm,
                                session.query(Model.models.Application.M_SocialHistory.MSHID.label('ID'),
                                            Model.models.Application.M_SocialHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_SocialHistory.MSH_Aggressive.label('Social History'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSH_IsActive=1,MSH_IsDeleted=0
                                ).order_by(Model.models.Application.M_SocialHistory.MSHID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getmedicalhistoryForm', methods=['POST','GET'])
def getmedicalhistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_MedicalHistory.MSHID.label('Id'),
                            Model.models.Application.M_MedicalHistory.MMH_observations.label('MMH_observations'),
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MMH_IsActive=1,MMH_IsDeleted=0
                                ).order_by(Model.models.Application.M_MedicalHistory.MSHID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getmedicalhistoryForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='getmedicalhistoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MMH_observations
                        # getTextField[1]['value'] = queryResult[0].MMH_CurrentMedication
                        # getTextField[2]['value'] = queryResult[0].MMH_InvestigationsConducted
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitmedicalhistoryForm',methods=['GET','POST'])
def submitmedicalhistoryForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    observations = request_json.get('observations')
                    currentmedication = request_json.get('currentmedication')
                    investigationsconducted = request_json.get('investigationsconducted')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_MedicalHistory()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MMH_observations=observations
                        Insert.MMH_CurrentMedication=currentmedication
                        Insert.MMH_InvestigationsConducted=investigationsconducted
                        Insert.MMH_AddUser= data['id']
                        Insert.MMH_AddDate = datetime.datetime.now()
                        Insert.MMH_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Medical History Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_MedicalHistory).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MMH_observations=observations
                        Insert.MMH_CurrentMedication=currentmedication
                        Insert.MMH_InvestigationsConducted=investigationsconducted
                        Insert.MMH_AddUser= data['id']
                        Insert.MMH_AddDate = datetime.datetime.now()
                        Insert.MMH_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Medical History Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewmedicalhistoryForm', methods=['GET','POST'])
def viewmedicalhistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewmedicalhistoryForm,
                                session.query(Model.models.Application.M_MedicalHistory.MSHID.label('ID'),
                                            Model.models.Application.M_MedicalHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_MedicalHistory.MMH_observations.label('Medical History'),

                                                ).filter_by(M_Patient_MPID=pid,MMH_IsActive=1,MMH_IsDeleted=0
                                ).order_by(Model.models.Application.M_MedicalHistory.MSHID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getfamilyhistoryForm', methods=['POST','GET'])
def getfamilyhistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_FamilyHistory.MFHID.label('Id'),
                            Model.models.Application.M_FamilyHistory.MFH_Familytype.label('MFH_Familytype'),
                            Model.models.Application.M_FamilyHistory.MFH_Consanguinity.label('MFH_Consanguinity'),
                            Model.models.Application.M_FamilyHistory.MFH_Observations.label('MFH_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MFH_IsActive=1,MFH_IsDeleted=0
                                ).order_by(Model.models.Application.M_FamilyHistory.MFHID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getfamilyhistoryForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='getfamilyhistoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )


                    getTextField[0]['options']= Common_Function.CommonFun.familyType()
                    # getTextField[6]['options']= Common_Function.CommonFun.yesno()

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        # getTextField[0]['value'] = queryResult[0].MFH_fatherage
                        # getTextField[1]['value'] = queryResult[0].MFH_fatherhealth
                        # getTextField[2]['value'] = queryResult[0].MFH_motherage
                        # getTextField[3]['value'] = queryResult[0].MFH_motherhealth
                        getTextField[0]['value'] = queryResult[0].MFH_Familytype
                        getTextField[1]['value'] = queryResult[0].MFH_Consanguinity
                        # getTextField[6]['value'] = queryResult[0].MFH_deafness
                        # getTextField[7]['value'] = queryResult[0].MFH_Bloodrelative
                        getTextField[2]['value'] = queryResult[0].MFH_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitfamilyhistoryForm',methods=['GET','POST'])
def submitfamilyhistoryForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    fatherage = request_json.get('fatherage')
                    fatherhealth = request_json.get('fatherhealth')
                    motherage = request_json.get('motherage')
                    motherhealth = request_json.get('motherhealth')
                    Familytype = request_json.get('Familytype')
                    Consanguinity = request_json.get('Consanguinity')
                    deafness = request_json.get('deafness')
                    Bloodrelative = request_json.get('Bloodrelative')

                    Observations = request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_FamilyHistory()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MFH_fatherage=fatherage
                        Insert.MFH_fatherhealth=fatherhealth
                        Insert.MFH_motherage=motherage
                        Insert.MFH_motherhealth=motherhealth
                        Insert.MFH_Familytype=Familytype
                        Insert.MFH_Consanguinity=Consanguinity
                        Insert.MFH_deafness=deafness
                        Insert.MFH_Bloodrelative=Bloodrelative

                        Insert.MFH_Observations=Observations
                        Insert.MFH_AddUser= data['id']
                        Insert.MFH_AddDate = datetime.datetime.now()
                        Insert.MFH_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Family History Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_FamilyHistory).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MFH_fatherage=fatherage
                        Insert.MFH_fatherhealth=fatherhealth
                        Insert.MFH_motherage=motherage
                        Insert.MFH_motherhealth=motherhealth
                        Insert.MFH_Familytype=Familytype
                        Insert.MFH_Consanguinity=Consanguinity
                        Insert.MFH_deafness=deafness
                        Insert.MFH_Bloodrelative=Bloodrelative

                        Insert.MFH_Observations=Observations
                        Insert.MFH_AddUser= data['id']
                        Insert.MFH_AddDate = datetime.datetime.now()
                        Insert.MFH_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Family History Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewfamilyhistoryForm', methods=['GET','POST'])
def viewfamilyhistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewfamilyhistoryForm,
                                session.query(Model.models.Application.M_FamilyHistory.MFHID.label('ID'),
                                            Model.models.Application.M_FamilyHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_FamilyHistory.MFH_Familytype.label('Family type'),
                                            Model.models.Application.M_FamilyHistory.MFH_Consanguinity.label('Consanguinity'),
                                            Model.models.Application.M_FamilyHistory.MFH_Observations.label('Family History'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MFH_IsActive=1,MFH_IsDeleted=0
                                ).order_by(Model.models.Application.M_FamilyHistory.MFHID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/geteducationhistoryForm', methods=['POST','GET'])
def geteducationhistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_EducationHistory.MEHID.label('Id'),
                            Model.models.Application.M_EducationHistory.MEH_CommunicationMode.label('MEH_CommunicationMode')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MEH_IsActive=1,MEH_IsDeleted=0
                                ).order_by(Model.models.Application.M_EducationHistory.MEHID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.geteducationhistoryForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='geteducationhistoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    getTextField[0]['options']= Common_Function.CommonFun.education()

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MEH_CommunicationMode
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submiteducationhistoryForm',methods=['GET','POST'])
def submiteducationhistoryForm():

    session=Session()
    try:

        if(request.method == "POST"):

            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    schooltype = request_json.get('schooltype')
                    admsnage = request_json.get('admsnage')
                    communicationmode = request_json.get('communicationmode')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_EducationHistory()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MEH_SchoolType=schooltype
                        Insert.MEH_AdmsnAge=admsnage
                        Insert.MEH_CommunicationMode=communicationmode
                        Insert.MEH_AddUser= data['id']
                        Insert.MEH_AddDate = datetime.datetime.now()
                        Insert.MEH_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Education History Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_EducationHistory).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MEH_SchoolType=schooltype
                        Insert.MEH_AdmsnAge=admsnage
                        Insert.MEH_CommunicationMode=communicationmode
                        Insert.MEH_AddUser= data['id']
                        Insert.MEH_AddDate = datetime.datetime.now()
                        Insert.MEH_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Education History Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/vieweducationhistoryForm', methods=['GET','POST'])
def vieweducationhistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.vieweducationhistoryForm,
                                session.query(Model.models.Application.M_EducationHistory.MEHID.label('ID'),
                                            Model.models.Application.M_EducationHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_EducationHistory.MEH_CommunicationMode.label('Education History'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MEH_IsActive=1,MEH_IsDeleted=0
                                ).order_by(Model.models.Application.M_EducationHistory.MEHID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

#####################
@app.route('/getstutteringhistoryForm', methods=['POST','GET'])
def getstutteringhistoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(
                        Model.models.Application.M_stutteringhistory.MPID,
                        Model.models.Application.M_stutteringhistory.persistent,
                        Model.models.Application.M_stutteringhistory.recovered,
                        Model.models.Application.M_stutteringhistory.startedstuttering,
                        Model.models.Application.M_stutteringhistory.phraserepititions,
                        Model.models.Application.M_stutteringhistory.wordrepitions,
                        Model.models.Application.M_stutteringhistory.Syllablerepitions,
                        Model.models.Application.M_stutteringhistory.Blockslike,
                        Model.models.Application.M_stutteringhistory.Interjections,
                        Model.models.Application.M_stutteringhistory.demonstrated,
                        Model.models.Application.M_stutteringhistory.phsyicaltension,
                        Model.models.Application.M_stutteringhistory.frustrationabout,
                        Model.models.Application.M_stutteringhistory.Complaints,
                        Model.models.Application.M_stutteringhistory.childeverbeenteased,
                        Model.models.Application.M_stutteringhistory.childeverdiscussed,
                        Model.models.Application.M_stutteringhistory.childseemstostutter,
                        Model.models.Application.M_stutteringhistory.stutterinyoursecondary,
                        Model.models.Application.M_stutteringhistory.childstartedlearning,
                        Model.models.Application.M_stutteringhistory.remarkableduringpregnancy,
                        Model.models.Application.M_stutteringhistory.remarkableconditionatbirth,
                        Model.models.Application.M_stutteringhistory.currenthealthmedicalconcerns,
                        Model.models.Application.M_stutteringhistory.takinganymedications,
                        Model.models.Application.M_stutteringhistory.allergies,
                        Model.models.Application.M_stutteringhistory.developmentalconcerns,
                        Model.models.Application.M_stutteringhistory.hearingtested,
                        Model.models.Application.M_stutteringhistory.behavioursoccur,
                        Model.models.Application.M_stutteringhistory.Inattentiveness,
                        Model.models.Application.M_stutteringhistory.Hyperactivity,
                        Model.models.Application.M_stutteringhistory.Nervousness,
                        Model.models.Application.M_stutteringhistory.sensitivity,
                        Model.models.Application.M_stutteringhistory.perfectionism,
                        Model.models.Application.M_stutteringhistory.excitability,
                        Model.models.Application.M_stutteringhistory.frustration,
                        Model.models.Application.M_stutteringhistory.strongfears,
                        Model.models.Application.M_stutteringhistory.excessiveneatness,
                        Model.models.Application.M_stutteringhistory.excessiveshyness,
                        Model.models.Application.M_stutteringhistory.lackofconfidence,
                        Model.models.Application.M_stutteringhistory.competitiveness,
                        Model.models.Application.M_stutteringhistory.speakfluentlyathome,
                        Model.models.Application.M_stutteringhistory.speakfluentlyatschool,
                        Model.models.Application.M_stutteringhistory.speakfluentlyinnewsituation,
                        Model.models.Application.M_stutteringhistory.speakwithoutstutteringathome,
                        Model.models.Application.M_stutteringhistory.speakwithoutstutteringatschool,
                        Model.models.Application.M_stutteringhistory.speakwithoutstutteringinanycondition,
                        Model.models.Application.M_stutteringhistory.stutteringaffectacademicperformance,
                        Model.models.Application.M_stutteringhistory.participationinschool,
                        Model.models.Application.M_stutteringhistory.interactionwithother,
                        Model.models.Application.M_stutteringhistory.interactionwithfamily,
                        Model.models.Application.M_stutteringhistory.willingnesstotalk,
                        Model.models.Application.M_stutteringhistory.selfesteemorattitude,
                        Model.models.Application.M_stutteringhistory.teachernoticedyourchild

                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_stutteringhistory.MPID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddStrutteringForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddStrutteringForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].persistent
                        getTextField[1]['value'] = queryResult[0].recovered
                        getTextField[2]['value'] = queryResult[0].startedstuttering
                        getTextField[3]['value'] = queryResult[0].phraserepititions
                        getTextField[4]['value'] = queryResult[0].wordrepitions
                        getTextField[5]['value'] = queryResult[0].Syllablerepitions
                        getTextField[6]['value'] = queryResult[0].Blockslike
                        getTextField[7]['value'] = queryResult[0].Interjections
                        getTextField[8]['value'] = queryResult[0].demonstrated
                        getTextField[9]['value'] = queryResult[0].phsyicaltension
                        getTextField[10]['value'] = queryResult[0].frustrationabout
                        getTextField[11]['value'] = queryResult[0].Complaints
                        getTextField[12]['value'] = queryResult[0].childeverbeenteased
                        getTextField[13]['value'] = queryResult[0].childeverdiscussed
                        getTextField[14]['value'] = queryResult[0].childseemstostutter
                        getTextField[15]['value'] = queryResult[0].stutterinyoursecondary
                        getTextField[16]['value'] = queryResult[0].childstartedlearning
                        getTextField[17]['value'] = queryResult[0].remarkableduringpregnancy
                        getTextField[18]['value'] = queryResult[0].remarkableconditionatbirth
                        getTextField[19]['value'] = queryResult[0].currenthealthmedicalconcerns
                        getTextField[20]['value'] = queryResult[0].takinganymedications
                        getTextField[21]['value'] = queryResult[0].allergies
                        getTextField[22]['value'] = queryResult[0].developmentalconcerns
                        getTextField[23]['value'] = queryResult[0].hearingtested
                        getTextField[24]['value'] = queryResult[0].behavioursoccur
                        getTextField[25]['value'] = queryResult[0].Inattentiveness
                        getTextField[26]['value'] = queryResult[0].Hyperactivity
                        getTextField[27]['value'] = queryResult[0].Nervousness
                        getTextField[28]['value'] = queryResult[0].sensitivity
                        getTextField[29]['value'] = queryResult[0].perfectionism
                        getTextField[30]['value'] = queryResult[0].excitability
                        getTextField[31]['value'] = queryResult[0].frustration
                        getTextField[32]['value'] = queryResult[0].strongfears
                        getTextField[33]['value'] = queryResult[0].excessiveneatness
                        getTextField[34]['value'] = queryResult[0].excessiveshyness
                        getTextField[35]['value'] = queryResult[0].lackofconfidence
                        getTextField[36]['value'] = queryResult[0].competitiveness
                        getTextField[37]['value'] = queryResult[0].speakfluentlyathome
                        getTextField[38]['value'] = queryResult[0].speakfluentlyatschool
                        getTextField[39]['value'] = queryResult[0].speakfluentlyinnewsituation
                        getTextField[40]['value'] = queryResult[0].speakwithoutstutteringathome
                        getTextField[41]['value'] = queryResult[0].speakwithoutstutteringatschool
                        getTextField[42]['value'] = queryResult[0].speakwithoutstutteringinanycondition
                        getTextField[43]['value'] = queryResult[0].stutteringaffectacademicperformance
                        getTextField[44]['value'] = queryResult[0].participationinschool
                        getTextField[45]['value'] = queryResult[0].interactionwithother
                        getTextField[46]['value'] = queryResult[0].interactionwithfamily
                        getTextField[47]['value'] = queryResult[0].willingnesstotalk
                        getTextField[48]['value'] = queryResult[0].selfesteemorattitude
                        getTextField[49]['value'] = queryResult[0].teachernoticedyourchild
                        return jsonify({'result':getTextField , 'Id':queryResult[0].MPID})
                    
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
       session.close()

@app.route('/submitstutteringhistoryForm',methods=['GET','POST'])
def submitstutteringhistoryForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    persistent	 = request_json.get('persistent')
                    recovered	 = request_json.get('recovered')
                    startedstuttering	 = request_json.get('startedstuttering')
                    phraserepititions	 = request_json.get('phraserepititions')
                    wordrepitions	 = request_json.get('wordrepitions')
                    Syllablerepitions	 = request_json.get('Syllablerepitions')
                    Blockslike	 = request_json.get('Blockslike')
                    Interjections	 = request_json.get('Interjections')
                    demonstrated	 = request_json.get('demonstrated')
                    phsyicaltension	 = request_json.get('phsyicaltension')
                    frustrationabout	 = request_json.get('frustrationabout')
                    Complaints	 = request_json.get('Complaints')
                    childeverbeenteased	 = request_json.get('childeverbeenteased')
                    childeverdiscussed	 = request_json.get('childeverdiscussed')
                    childseemstostutter	 = request_json.get('childseemstostutter')
                    stutterinyoursecondary	 = request_json.get('stutterinyoursecondary')
                    childstartedlearning	 = request_json.get('childstartedlearning')
                    remarkableduringpregnancy	 = request_json.get('remarkableduringpregnancy')
                    remarkableconditionatbirth	 = request_json.get('remarkableconditionatbirth')
                    currenthealthmedicalconcerns	 = request_json.get('currenthealthmedicalconcerns')
                    takinganymedications	 = request_json.get('takinganymedications')
                    allergies	 = request_json.get('allergies')
                    developmentalconcerns	 = request_json.get('developmentalconcerns')
                    hearingtested	 = request_json.get('hearingtested')
                    behavioursoccur	 = request_json.get('behavioursoccur')
                    Inattentiveness	 = request_json.get('Inattentiveness')
                    Hyperactivity	 = request_json.get('Hyperactivity')
                    Nervousness	 = request_json.get('Nervousness')
                    sensitivity	 = request_json.get('sensitivity')
                    perfectionism	 = request_json.get('perfectionism')
                    excitability	 = request_json.get('excitability')
                    frustration	 = request_json.get('frustration')
                    strongfears	 = request_json.get('strongfears')
                    excessiveneatness	 = request_json.get('excessiveneatness')
                    excessiveshyness	 = request_json.get('excessiveshyness')
                    lackofconfidence	 = request_json.get('lackofconfidence')
                    competitiveness	 = request_json.get('competitiveness')
                    speakfluentlyathome	 = request_json.get('speakfluentlyathome')
                    speakfluentlyatschool	 = request_json.get('speakfluentlyatschool')
                    speakfluentlyinnewsituation	 = request_json.get('speakfluentlyinnewsituation')
                    speakwithoutstutteringathome	 = request_json.get('speakwithoutstutteringathome')
                    speakwithoutstutteringatschool	 = request_json.get('speakwithoutstutteringatschool')
                    speakwithoutstutteringinanycondition	 = request_json.get('speakwithoutstutteringinanycondition')
                    stutteringaffectacademicperformance	 = request_json.get('stutteringaffectacademicperformance')
                    participationinschool	 = request_json.get('participationinschool')
                    interactionwithother	 = request_json.get('interactionwithother')
                    interactionwithfamily	 = request_json.get('interactionwithfamily')
                    willingnesstotalk	 = request_json.get('willingnesstotalk')
                    selfesteemorattitude	 = request_json.get('selfesteemorattitude')
                    teachernoticedyourchild	 = request_json.get('teachernoticedyourchild')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id==None):
                        Insert=Model.models.Application.M_stutteringhistory()
                        Insert.M_Patient_MPID	=PID
                        Insert.M_AppointmentID	=Aid
                        
                        Insert.persistent	=persistent
                        Insert.recovered	=recovered
                        Insert.startedstuttering	=startedstuttering
                        Insert.phraserepititions	=phraserepititions
                        Insert.wordrepitions	=wordrepitions
                        Insert.Syllablerepitions	=Syllablerepitions
                        Insert.Blockslike	=Blockslike
                        Insert.Interjections	=Interjections
                        Insert.demonstrated	=demonstrated
                        Insert.phsyicaltension	=phsyicaltension
                        Insert.frustrationabout	=frustrationabout
                        Insert.Complaints	=Complaints
                        Insert.childeverbeenteased	=childeverbeenteased
                        Insert.childeverdiscussed	=childeverdiscussed
                        Insert.childseemstostutter	=childseemstostutter
                        Insert.stutterinyoursecondary	=stutterinyoursecondary
                        Insert.childstartedlearning	=childstartedlearning
                        Insert.remarkableduringpregnancy	=remarkableduringpregnancy
                        Insert.remarkableconditionatbirth	=remarkableconditionatbirth
                        Insert.currenthealthmedicalconcerns	=currenthealthmedicalconcerns
                        Insert.takinganymedications	=takinganymedications
                        Insert.allergies	=allergies
                        Insert.developmentalconcerns	=developmentalconcerns
                        Insert.hearingtested	=hearingtested
                        Insert.behavioursoccur	=behavioursoccur
                        Insert.Inattentiveness	=Inattentiveness
                        Insert.Hyperactivity	=Hyperactivity
                        Insert.Nervousness	=Nervousness
                        Insert.sensitivity	=sensitivity
                        Insert.perfectionism	=perfectionism
                        Insert.excitability	=excitability
                        Insert.frustration	=frustration
                        Insert.strongfears	=strongfears
                        Insert.excessiveneatness	=excessiveneatness
                        Insert.excessiveshyness	=excessiveshyness
                        Insert.lackofconfidence	=lackofconfidence
                        Insert.competitiveness	=competitiveness
                        Insert.speakfluentlyathome	=speakfluentlyathome
                        Insert.speakfluentlyatschool	=speakfluentlyatschool
                        Insert.speakfluentlyinnewsituation	=speakfluentlyinnewsituation
                        Insert.speakwithoutstutteringathome	=speakwithoutstutteringathome
                        Insert.speakwithoutstutteringatschool	=speakwithoutstutteringatschool
                        Insert.speakwithoutstutteringinanycondition	=speakwithoutstutteringinanycondition
                        Insert.stutteringaffectacademicperformance	=stutteringaffectacademicperformance
                        Insert.participationinschool	=participationinschool
                        Insert.interactionwithother	=interactionwithother
                        Insert.interactionwithfamily	=interactionwithfamily
                        Insert.willingnesstotalk	=willingnesstotalk
                        Insert.selfesteemorattitude	=selfesteemorattitude
                        Insert.teachernoticedyourchild	=teachernoticedyourchild
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Stuttering History Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_stutteringhistory).get(Id)
                        Insert.M_Patient_MPID	=PID
                        Insert.M_AppointmentID	=Aid
                        
                        Insert.persistent	=persistent
                        Insert.recovered	=recovered
                        Insert.startedstuttering	=startedstuttering
                        Insert.phraserepititions	=phraserepititions
                        Insert.wordrepitions	=wordrepitions
                        Insert.Syllablerepitions	=Syllablerepitions
                        Insert.Blockslike	=Blockslike
                        Insert.Interjections	=Interjections
                        Insert.demonstrated	=demonstrated
                        Insert.phsyicaltension	=phsyicaltension
                        Insert.frustrationabout	=frustrationabout
                        Insert.Complaints	=Complaints
                        Insert.childeverbeenteased	=childeverbeenteased
                        Insert.childeverdiscussed	=childeverdiscussed
                        Insert.childseemstostutter	=childseemstostutter
                        Insert.stutterinyoursecondary	=stutterinyoursecondary
                        Insert.childstartedlearning	=childstartedlearning
                        Insert.remarkableduringpregnancy	=remarkableduringpregnancy
                        Insert.remarkableconditionatbirth	=remarkableconditionatbirth
                        Insert.currenthealthmedicalconcerns	=currenthealthmedicalconcerns
                        Insert.takinganymedications	=takinganymedications
                        Insert.allergies	=allergies
                        Insert.developmentalconcerns	=developmentalconcerns
                        Insert.hearingtested	=hearingtested
                        Insert.behavioursoccur	=behavioursoccur
                        Insert.Inattentiveness	=Inattentiveness
                        Insert.Hyperactivity	=Hyperactivity
                        Insert.Nervousness	=Nervousness
                        Insert.sensitivity	=sensitivity
                        Insert.perfectionism	=perfectionism
                        Insert.excitability	=excitability
                        Insert.frustration	=frustration
                        Insert.strongfears	=strongfears
                        Insert.excessiveneatness	=excessiveneatness
                        Insert.excessiveshyness	=excessiveshyness
                        Insert.lackofconfidence	=lackofconfidence
                        Insert.competitiveness	=competitiveness
                        Insert.speakfluentlyathome	=speakfluentlyathome
                        Insert.speakfluentlyatschool	=speakfluentlyatschool
                        Insert.speakfluentlyinnewsituation	=speakfluentlyinnewsituation
                        Insert.speakwithoutstutteringathome	=speakwithoutstutteringathome
                        Insert.speakwithoutstutteringatschool	=speakwithoutstutteringatschool
                        Insert.speakwithoutstutteringinanycondition	=speakwithoutstutteringinanycondition
                        Insert.stutteringaffectacademicperformance	=stutteringaffectacademicperformance
                        Insert.participationinschool	=participationinschool
                        Insert.interactionwithother	=interactionwithother
                        Insert.interactionwithfamily	=interactionwithfamily
                        Insert.willingnesstotalk	=willingnesstotalk
                        Insert.selfesteemorattitude	=selfesteemorattitude
                        Insert.teachernoticedyourchild	=teachernoticedyourchild
                        session.commit()
                        return jsonify({'msg':'Stuttering History Updateed Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/stutteringhistoryReport', methods=['GET','POST'])
def stutteringhistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    PID = request1.get('PID')
                    apply = []
            
                    if(AID=='' or AID==None):
                        apply.append(Model.models.Application.M_stutteringhistory.M_Patient_MPID==PID)
                    if(PID=='' or PID==None):
                        apply.append(Model.models.Application.M_stutteringhistory.M_AppointmentID==AID)
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.stutteringhistoryReport,
                                session.query(Model.models.Application.M_stutteringhistory.MPID,
                                    Model.models.Application.M_stutteringhistory.persistent,
                                    Model.models.Application.M_stutteringhistory.recovered,
                                    Model.models.Application.M_stutteringhistory.startedstuttering,
                                    Model.models.Application.M_stutteringhistory.phraserepititions,
                                    Model.models.Application.M_stutteringhistory.wordrepitions,
                                    Model.models.Application.M_stutteringhistory.Syllablerepitions,
                                    Model.models.Application.M_stutteringhistory.Blockslike,
                                    Model.models.Application.M_stutteringhistory.Interjections,
                                    Model.models.Application.M_stutteringhistory.demonstrated,
                                    Model.models.Application.M_stutteringhistory.phsyicaltension,
                                    Model.models.Application.M_stutteringhistory.frustrationabout,
                                    Model.models.Application.M_stutteringhistory.Complaints,
                                    Model.models.Application.M_stutteringhistory.childeverbeenteased,
                                    Model.models.Application.M_stutteringhistory.childeverdiscussed,
                                    Model.models.Application.M_stutteringhistory.childseemstostutter,
                                    Model.models.Application.M_stutteringhistory.stutterinyoursecondary,
                                    Model.models.Application.M_stutteringhistory.childstartedlearning,
                                    Model.models.Application.M_stutteringhistory.remarkableduringpregnancy,
                                    Model.models.Application.M_stutteringhistory.remarkableconditionatbirth,
                                    Model.models.Application.M_stutteringhistory.currenthealthmedicalconcerns,
                                    Model.models.Application.M_stutteringhistory.takinganymedications,
                                    Model.models.Application.M_stutteringhistory.allergies,
                                    Model.models.Application.M_stutteringhistory.developmentalconcerns,
                                    Model.models.Application.M_stutteringhistory.hearingtested,
                                    Model.models.Application.M_stutteringhistory.behavioursoccur,
                                    Model.models.Application.M_stutteringhistory.Inattentiveness,
                                    Model.models.Application.M_stutteringhistory.Hyperactivity,
                                    Model.models.Application.M_stutteringhistory.Nervousness,
                                    Model.models.Application.M_stutteringhistory.sensitivity,
                                    Model.models.Application.M_stutteringhistory.perfectionism,
                                    Model.models.Application.M_stutteringhistory.excitability,
                                    Model.models.Application.M_stutteringhistory.frustration,
                                    Model.models.Application.M_stutteringhistory.strongfears,
                                    Model.models.Application.M_stutteringhistory.excessiveneatness,
                                    Model.models.Application.M_stutteringhistory.excessiveshyness,
                                    Model.models.Application.M_stutteringhistory.lackofconfidence,
                                    Model.models.Application.M_stutteringhistory.competitiveness,
                                    Model.models.Application.M_stutteringhistory.speakfluentlyathome,
                                    Model.models.Application.M_stutteringhistory.speakfluentlyatschool,
                                    Model.models.Application.M_stutteringhistory.speakfluentlyinnewsituation,
                                    Model.models.Application.M_stutteringhistory.speakwithoutstutteringathome,
                                    Model.models.Application.M_stutteringhistory.speakwithoutstutteringatschool,
                                    Model.models.Application.M_stutteringhistory.speakwithoutstutteringinanycondition,
                                    Model.models.Application.M_stutteringhistory.stutteringaffectacademicperformance,
                                    Model.models.Application.M_stutteringhistory.participationinschool,
                                    Model.models.Application.M_stutteringhistory.interactionwithother,
                                    Model.models.Application.M_stutteringhistory.interactionwithfamily,
                                    Model.models.Application.M_stutteringhistory.willingnesstotalk,
                                    Model.models.Application.M_stutteringhistory.selfesteemorattitude,
                                    Model.models.Application.M_stutteringhistory.teachernoticedyourchild
                                            ).filter_by(MP_IsActive=1,MP_IsDeleted=0
                                            ).filter(*apply
                                ).order_by(Model.models.Application.M_stutteringhistory.MPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()



@app.route('/getExaminationPage', methods=['POST','GET'])
def getExaminationPage():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    # PId= str(request.data)
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getExaminationPage,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddExaminationForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    return jsonify(result=getTextField)

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getSpeechTherapyPage', methods=['POST','GET'])
def getSpeechTherapyPage():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    # PId= str(request.data)
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getExaminationPage,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_preference,'').label('value')
                                ).filter_by(MFC_FormName='AddSpeechForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                            ).order_by(Model.models.Application.M_FormControl.MFC_preference
                                                ).all()
                            )
                    return jsonify(result=getTextField)

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getLanguagePage', methods=['POST','GET'])
def getLanguagePage():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    # PId= str(request.data)
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getExaminationPage,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddLanguageForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    return jsonify(result=getTextField)

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getOTTherapyPage', methods=['POST','GET'])
def getOTTherapyPage():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    # PId= str(request.data)
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getExaminationPage,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddOTForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    return jsonify(result=getTextField)

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getPTTherapyPage', methods=['POST','GET'])
def getPTTherapyPage():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    # PId= str(request.data)
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getExaminationPage,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddPTForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    return jsonify(result=getTextField)

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getGeneralExamForm', methods=['POST','GET'])
def getGeneralExamForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_GeneralExamForm.MGEFID.label('Id'),
                            Model.models.Application.M_GeneralExamForm.MGEF_Height.label('MGEF_Height'),
                            Model.models.Application.M_GeneralExamForm.MGEF_Weight.label('MGEF_Weight'),
                            Model.models.Application.M_GeneralExamForm.MGEF_HeadCircumference.label('MGEF_HeadCircumference'),
                            Model.models.Application.M_GeneralExamForm.MGEF_Observations.label('MGEF_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MGEF_IsActive=1,MGEF_IsDeleted=0
                                ).order_by(Model.models.Application.M_GeneralExamForm.MGEFID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getGeneralExamForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddGeneralExamForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MGEF_Height
                        getTextField[1]['value'] = queryResult[0].MGEF_Weight
                        getTextField[2]['value'] = queryResult[0].MGEF_HeadCircumference
                        getTextField[3]['value'] = queryResult[0].MGEF_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitGeneralExamForm',methods=['GET','POST'])
def submitGeneralExamForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Height = request_json.get('Height')
                    Weight = request_json.get('Weight')
                    HeadCircumference = request_json.get('HeadCircumference')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):

                        Insert=Model.models.Application.M_GeneralExamForm()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MGEF_Height=Height
                        Insert.MGEF_Weight=Weight
                        Insert.MGEF_HeadCircumference=HeadCircumference
                        Insert.MGEF_Observations=Observations
                        Insert.MGEF_AddIP= flask.request.remote_addr
                        Insert.MGEF_AddUser= data['id']
                        Insert.MGEF_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'General exam Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_GeneralExamForm).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MGEF_Height=Height
                        Insert.MGEF_Weight=Weight
                        Insert.MGEF_HeadCircumference=HeadCircumference
                        Insert.MGEF_Observations=Observations
                        Insert.MGEF_AddIP= flask.request.remote_addr
                        Insert.MGEF_AddUser= data['id']
                        Insert.MGEF_AddDate = datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'General exam Update Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewGeneralExamForm', methods=['GET','POST'])
def viewGeneralExamForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewGeneralExamForm,
                                session.query(Model.models.Application.M_GeneralExamForm.MGEFID.label('ID'),
                                            Model.models.Application.M_GeneralExamForm.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_Height.label('Height'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_Weight.label('Weight'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_HeadCircumference.label('Head Circumference'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_Observations.label('Observations'),

                                                ).filter_by(M_Patient_MPID=pid,MGEF_IsActive=1,MGEF_IsDeleted=0
                                ).order_by(Model.models.Application.M_GeneralExamForm.MGEFID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getVitalsExamForm', methods=['POST','GET'])
def getVitalsExamForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_VitalsExamForm.MVEFID.label('Id'),
                            Model.models.Application.M_VitalsExamForm.MVEF_BloodPressure.label('MVEF_BloodPressure'),
                            Model.models.Application.M_VitalsExamForm.MVEF_PulseRate.label('MVEF_PulseRate'),
                            Model.models.Application.M_VitalsExamForm.MVEF_RespiratoryRate.label('MVEF_RespiratoryRate'),
                            Model.models.Application.M_VitalsExamForm.MVEF_Temperator.label('MVEF_Temperator')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MVEF_IsActive=1,MVEF_IsDeleted=0
                                ).order_by(Model.models.Application.M_VitalsExamForm.MVEFID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddVitalsExamForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddVitalsExamForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MVEF_BloodPressure
                        getTextField[1]['value'] = queryResult[0].MVEF_PulseRate
                        getTextField[2]['value'] = queryResult[0].MVEF_RespiratoryRate
                        getTextField[3]['value'] = queryResult[0].MVEF_Temperator
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitVitalsExamForm',methods=['GET','POST'])
def submitVitalsExamForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    BloodPressure = request_json.get('BloodPressure')
                    PulseRate = request_json.get('PulseRate')
                    RespiratoryRate = request_json.get('RespiratoryRate')
                    Temperator = request_json.get('Temperator')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):

                        Insert=Model.models.Application.M_VitalsExamForm()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MVEF_BloodPressure=BloodPressure
                        Insert.MVEF_PulseRate=PulseRate
                        Insert.MVEF_RespiratoryRate=RespiratoryRate
                        Insert.MVEF_Temperator=Temperator
                        Insert.MVEF_AddIP= flask.request.remote_addr
                        Insert.MVEF_AddUser= data['id']
                        Insert.MVEF_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Vitals Exam Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_VitalsExamForm).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MVEF_BloodPressure=BloodPressure
                        Insert.MVEF_PulseRate=PulseRate
                        Insert.MVEF_RespiratoryRate=RespiratoryRate
                        Insert.MVEF_Temperator=Temperator
                        Insert.MVEF_AddIP= flask.request.remote_addr
                        Insert.Mod_AddUser= data['id']
                        Insert.MVEF_ModDate = datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'Vitals Exam Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewVitalsExamForm', methods=['GET','POST'])
def viewVitalsExamForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewVitalsExamForm,
                                session.query(Model.models.Application.M_VitalsExamForm.MVEFID.label('ID'),
                                            Model.models.Application.M_VitalsExamForm.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_BloodPressure.label('Blood Pressure'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_PulseRate.label('Pulse Rate'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_RespiratoryRate.label('Respiratory Rate'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_Temperator.label('Temperature'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MVEF_IsActive=1,MVEF_IsDeleted=0
                                ).order_by(Model.models.Application.M_VitalsExamForm.MVEFID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getSystemicExamForm', methods=['POST','GET'])
def getSystemicExamForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_SystemicExam.MSEID.label('Id'),
                            Model.models.Application.M_SystemicExam.MSE_Observations.label('MSE_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSE_IsActive=1,MSE_IsDeleted=0
                                ).order_by(Model.models.Application.M_SystemicExam.MSEID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddSystemicExamForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddSystemicExamForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSE_Observations

                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSystemicExamForm',methods=['GET','POST'])
def submitSystemicExamForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()

                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_SystemicExam()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSE_Observations=Observations
                        Insert.MSE_AddIP= flask.request.remote_addr
                        Insert.MSE_AddUser= data['id']
                        Insert.MSE_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Systemic Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_SystemicExam).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSE_Observations=Observations
                        Insert.MSE_AddIP= flask.request.remote_addr
                        Insert.Mod_AddUser= data['id']
                        Insert.MSE_ModDate = datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'Systemic Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSystemicExamForm', methods=['GET','POST'])
def viewSystemicExamForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSystemicExamForm,
                                session.query(Model.models.Application.M_SystemicExam.MSEID.label('ID'),
                                            Model.models.Application.M_SystemicExam.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SystemicExam.MSE_Observations.label('Observations'),
                                                ).filter_by(M_Patient_MPID=pid,MSE_IsActive=1,MSE_IsDeleted=0
                                ).order_by(Model.models.Application.M_SystemicExam.MSEID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getPragmaticSkillsForm', methods=['POST','GET'])
def getPragmaticSkillsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PragmaticSkills.MSEID.label('Id'),
                            Model.models.Application.M_PragmaticSkills.MPS_InitiationSkills.label('MPS_InitiationSkills'),
                            Model.models.Application.M_PragmaticSkills.MPS_RespondingSkills.label('MPS_RespondingSkills'),
                            Model.models.Application.M_PragmaticSkills.MPS_MaintenanceSkills.label('MPS_MaintenanceSkills'),
                            Model.models.Application.M_PragmaticSkills.MPS_TerminationSkills.label('MPS_TerminationSkills'),
                            Model.models.Application.M_PragmaticSkills.MPS_Observations.label('MPS_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPS_IsActive=1,MPS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PragmaticSkills.MSEID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddPragmaticSkillsForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddPragmaticSkillsForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MPS_InitiationSkills
                        getTextField[1]['value'] = queryResult[0].MPS_RespondingSkills
                        getTextField[2]['value'] = queryResult[0].MPS_MaintenanceSkills
                        getTextField[2]['value'] = queryResult[0].MPS_TerminationSkills
                        getTextField[2]['value'] = queryResult[0].MPS_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPragmaticSkillsForm',methods=['GET','POST'])
def submitPragmaticSkillsForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    InitiationSkills = request_json.get('InitiationSkills')
                    RespondingSkills = request_json.get('RespondingSkills')
                    MaintenanceSkills = request_json.get('MaintenanceSkills')
                    TerminationSkills = request_json.get('TerminationSkills')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PragmaticSkills()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPS_InitiationSkills=InitiationSkills
                        Insert.MPS_RespondingSkills=RespondingSkills
                        Insert.MPS_MaintenanceSkills=MaintenanceSkills
                        Insert.MPS_TerminationSkills=TerminationSkills
                        Insert.MPS_Observations=Observations
                        Insert.MPS_AddIP= flask.request.remote_addr
                        Insert.MPS_AddUser= data['id']
                        Insert.MPS_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Pragmatic Skills Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PragmaticSkills).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPS_InitiationSkills=InitiationSkills
                        Insert.MPS_RespondingSkills=RespondingSkills
                        Insert.MPS_MaintenanceSkills=MaintenanceSkills
                        Insert.MPS_TerminationSkills=TerminationSkills
                        Insert.MPS_Observations=Observations
                        Insert.MPS_AddIP= flask.request.remote_addr
                        Insert.MPS_ModUser= data['id']
                        Insert.MPS_ModDate = datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'Pragmatic Skills Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/getSTOroperipheralExamForm', methods=['POST','GET'])
def getSTOroperipheralExamForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_STOroperipheralExam.MSPEID.label('Id'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_LipsAppearance.label('MSPE_LipsAppearance'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_LipsMovements.label('MSPE_LipsMovements'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_TongueAppearance.label('MSPE_TongueAppearance'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_TongueMovements.label('MSPE_TongueMovements'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_TeethAppearance.label('MSPE_TeethAppearance'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_TeethMovements.label('MSPE_TeethMovements'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_HardPalateAppearance.label('MSPE_HardPalateAppearance'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_SoftPalateAppearance.label('MSPE_SoftPalateAppearance'),

                            Model.models.Application.M_STOroperipheralExam.MSPE_SoftPalateMovements.label('MSPE_SoftPalateMovements'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_UvulaAppearance.label('MSPE_UvulaAppearance'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_UvulaMovements.label('MSPE_UvulaMovements'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_MandibleAppearance.label('MSPE_MandibleAppearance'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_MandibleMovements.label('MSPE_MandibleMovements'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_Drooling.label('MSPE_Drooling'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_Blowing.label('MSPE_Blowing'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_Biting.label('MSPE_Biting'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_Sucking.label('MSPE_Sucking'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_Swallowing.label('MSPE_Swallowing'),
                            Model.models.Application.M_STOroperipheralExam.MSPE_Observations.label('MSPE_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSPE_IsActive=1,MSPE_IsDeleted=0
                                ).order_by(Model.models.Application.M_STOroperipheralExam.MSPEID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.STOroperipheralExamForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='STOroperipheralExamForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    LipsMovements=Common_Function.CommonFun.LipsMovements()
                    TongueAppearance=Common_Function.CommonFun.TongueAppearance()
                    TongueMovements=Common_Function.CommonFun.TongueMovements()
                    TeethAppearance=Common_Function.CommonFun.TeethAppearance()
                    TeethMovements=Common_Function.CommonFun.TeethMovements()
                    HardPalateAppearance=Common_Function.CommonFun.HardPalateAppearance()
                    SoftPalateAppearance=Common_Function.CommonFun.SoftPalateAppearance()
                    SoftPalateMovements=Common_Function.CommonFun.SoftPalateMovements()
                    UvulaAppearance=Common_Function.CommonFun.UvulaAppearance()
                    UvulaMovements=Common_Function.CommonFun.UvulaMovements()

                    MandibleAppearance=Common_Function.CommonFun.MandibleAppearance()
                    MandibleMovements=Common_Function.CommonFun.MandibleMovements()
                    Drooling=Common_Function.CommonFun.Drooling()

                    getTextField[1]['options']= LipsMovements
                    getTextField[2]['options']= TongueAppearance
                    getTextField[3]['options']= TongueMovements
                    getTextField[4]['options']= TeethAppearance
                    getTextField[5]['options']= TeethMovements
                    getTextField[6]['options']= HardPalateAppearance

                    getTextField[7]['options']= SoftPalateAppearance
                    getTextField[8]['options']= SoftPalateMovements
                    getTextField[9]['options']= UvulaAppearance
                    getTextField[10]['options']= UvulaMovements
                    getTextField[11]['options']= MandibleAppearance
                    getTextField[12]['options']= MandibleMovements
                    getTextField[13]['options']= Drooling
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSPE_LipsAppearance
                        getTextField[1]['value'] = queryResult[0].MSPE_LipsMovements
                        getTextField[2]['value'] = queryResult[0].MSPE_TongueAppearance
                        getTextField[3]['value'] = queryResult[0].MSPE_TongueMovements
                        getTextField[4]['value'] = queryResult[0].MSPE_TeethAppearance
                        getTextField[5]['value'] = queryResult[0].MSPE_TeethMovements
                        getTextField[6]['value'] = queryResult[0].MSPE_HardPalateAppearance
                        getTextField[7]['value'] = queryResult[0].MSPE_SoftPalateAppearance
                        getTextField[8]['value'] = queryResult[0].MSPE_SoftPalateMovements
                        getTextField[9]['value'] = queryResult[0].MSPE_UvulaAppearance
                        getTextField[10]['value'] = queryResult[0].MSPE_UvulaMovements
                        getTextField[11]['value'] = queryResult[0].MSPE_MandibleAppearance
                        getTextField[12]['value'] = queryResult[0].MSPE_MandibleMovements
                        getTextField[13]['value'] = queryResult[0].MSPE_Drooling
                        getTextField[14]['value'] = queryResult[0].MSPE_Blowing
                        getTextField[15]['value'] = queryResult[0].MSPE_Biting
                        getTextField[16]['value'] = queryResult[0].MSPE_Sucking
                        getTextField[17]['value'] = queryResult[0].MSPE_Swallowing
                        getTextField[18]['value'] = queryResult[0].MSPE_Observations

                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSTOroperipheralExamForm',methods=['GET','POST'])
def submitSTOroperipheralExamForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    LipsAppearance = request_json.get('LipsAppearance')
                    LipsMovements = request_json.get('LipsMovements')
                    TongueAppearance = request_json.get('TongueAppearance')
                    TongueMovements = request_json.get('TongueMovements')

                    TeethAppearance = request_json.get('TeethAppearance')
                    TeethMovements = request_json.get('TeethMovements')
                    HardPalateAppearance = request_json.get('HardPalateAppearance')
                    SoftPalateAppearance = request_json.get('SoftPalateAppearance')
                    SoftPalateMovements = request_json.get('SoftPalateMovements')
                    UvulaAppearance = request_json.get('UvulaAppearance')
                    UvulaMovements = request_json.get('UvulaMovements')
                    MandibleAppearance = request_json.get('MandibleAppearance')
                    MandibleMovements = request_json.get('MandibleMovements')
                    Drooling = request_json.get('Drooling')
                    Blowing = request_json.get('Blowing')
                    Biting = request_json.get('Biting')
                    Sucking = request_json.get('Sucking')
                    Swallowing = request_json.get('Swallowing')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):

                        Insert=Model.models.Application.M_STOroperipheralExam()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSPE_LipsAppearance=LipsAppearance
                        Insert.MSPE_LipsMovements=LipsMovements
                        Insert.MSPE_TongueAppearance=TongueAppearance
                        Insert.MSPE_TongueMovements=TongueMovements
                        Insert.MSPE_TeethAppearance=TeethAppearance
                        Insert.MSPE_TeethMovements=TeethMovements
                        Insert.MSPE_HardPalateAppearance=HardPalateAppearance
                        Insert.MSPE_SoftPalateAppearance=SoftPalateAppearance
                        Insert.MSPE_SoftPalateMovements=SoftPalateMovements
                        Insert.MSPE_UvulaAppearance=UvulaAppearance
                        Insert.MSPE_UvulaMovements=UvulaMovements
                        Insert.MSPE_MandibleAppearance=MandibleAppearance
                        Insert.MSPE_MandibleMovements=MandibleMovements
                        Insert.MSPE_Drooling=Drooling
                        Insert.MSPE_Blowing=Blowing
                        Insert.MSPE_Biting=Biting
                        Insert.MSPE_Sucking=Sucking
                        Insert.MSPE_Swallowing=Swallowing
                        Insert.MSPE_Observations=Observations
                        Insert.MSPE_AddIP= flask.request.remote_addr
                        Insert.MSPE_AddUser= data['id']
                        Insert.MSPE_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'ST Oroperipheral Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_STOroperipheralExam).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSPE_LipsAppearance=LipsAppearance
                        Insert.MSPE_LipsMovements=LipsMovements
                        Insert.MSPE_TongueAppearance=TongueAppearance
                        Insert.MSPE_TongueMovements=TongueMovements
                        Insert.MSPE_TeethAppearance=TeethAppearance
                        Insert.MSPE_TeethMovements=TeethMovements
                        Insert.MSPE_HardPalateAppearance=HardPalateAppearance
                        Insert.MSPE_SoftPalateAppearance=SoftPalateAppearance
                        Insert.MSPE_SoftPalateMovements=SoftPalateMovements
                        Insert.MSPE_UvulaAppearance=UvulaAppearance
                        Insert.MSPE_UvulaMovements=UvulaMovements
                        Insert.MSPE_MandibleAppearance=MandibleAppearance
                        Insert.MSPE_MandibleMovements=MandibleMovements
                        Insert.MSPE_Drooling=Drooling
                        Insert.MSPE_Blowing=Blowing
                        Insert.MSPE_Biting=Biting
                        Insert.MSPE_Sucking=Sucking
                        Insert.MSPE_Swallowing=Swallowing
                        Insert.MSPE_Observations=Observations
                        Insert.MSPE_AddIP= flask.request.remote_addr
                        Insert.MSPE_ModUser= data['id']
                        Insert.MSPE_ModDate = datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'ST Oroperipheral Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSTOroperipheralExamForm', methods=['GET','POST'])
def viewSTOroperipheralExamForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSTOroperipheralExamForm,
                                session.query(Model.models.Application.M_STOroperipheralExam.MSPEID.label('ID'),
                                            Model.models.Application.M_STOroperipheralExam.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_LipsAppearance.label('Lips Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_LipsMovements.label('Lips Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TongueAppearance.label('Tongue Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TongueMovements.label('Tongue Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TeethAppearance.label('Teeth Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TeethMovements.label('Teeth Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_HardPalateAppearance.label('Hard Palate Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_SoftPalateAppearance.label('Soft Palate Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_SoftPalateMovements.label('Soft Palate Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_UvulaAppearance.label('Uvula Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_UvulaMovements.label('Uvula Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_MandibleAppearance.label('Mandible Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_MandibleMovements.label('Mandible Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Drooling.label('Drooling'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Blowing.label('Blowing'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Biting.label('Biting'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Sucking.label('Sucking'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Swallowing.label('Swallowing'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSPE_IsActive=1,MSPE_IsDeleted=0
                                ).order_by(Model.models.Application.M_STOroperipheralExam.MSPEID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSTArticulationSpeechIntelligibilityForm', methods=['POST','GET'])
def getSTArticulationSpeechIntelligibilityForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_STArticulationSpeechIntelligibility.MSSIID.label('Id'),
                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Noonecan.label('MSSI_Noonecan'),
                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_memberscan.label('MSSI_memberscan'),
                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Strangerscan.label('MSSI_Strangerscan'),
                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Observations.label('MSSI_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSSI_IsActive=1,MSSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_STArticulationSpeechIntelligibility.MSSIID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddSTArticulationSpeechIntelligibilityForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddSTArticulationSpeechIntelligibilityForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    Articulation=Common_Function.CommonFun.Articulation()
                    getTextField[1]['options']= Articulation
                    getTextField[2]['options']= Articulation
                    getTextField[3]['options']= Articulation

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSSI_Noonecan
                        getTextField[1]['value'] = queryResult[0].MSSI_memberscan
                        getTextField[2]['value'] = queryResult[0].MSSI_Strangerscan
                        getTextField[3]['value'] = queryResult[0].MSSI_Observations

                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSTArticulationSpeechIntelligibilityForm',methods=['GET','POST'])
def submitSTArticulationSpeechIntelligibilityForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Noonecan = request_json.get('Noonecan')
                    memberscan = request_json.get('memberscan')
                    Strangerscan = request_json.get('Strangerscan')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_STArticulationSpeechIntelligibility()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSSI_Noonecan=Noonecan
                        Insert.MSSI_memberscan=memberscan
                        Insert.MSSI_Strangerscan=Strangerscan
                        Insert.MSSI_Observations=Observations
                        Insert.MSSI_AddIP= flask.request.remote_addr
                        Insert.MSSi_AddUser= data['id']
                        Insert.MSSI_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Articulation-Speech Intelligibility Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_STArticulationSpeechIntelligibility).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSSI_Noonecan=Noonecan
                        Insert.MSSI_memberscan=memberscan
                        Insert.MSSI_Strangerscan=Strangerscan
                        Insert.MSSI_Observations=Observations
                        Insert.MSSI_AddIP= flask.request.remote_addr
                        Insert.MSSi_ModUser= data['id']
                        Insert.MSSI_ModDate = datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'Articulation-Speech Intelligibility Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSTArticulationSpeechIntelligibilityForm', methods=['GET','POST'])
def viewSTArticulationSpeechIntelligibilityForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSTArticulationSpeechIntelligibilityForm,
                                session.query(Model.models.Application.M_STArticulationSpeechIntelligibility.MSSIID.label('ID'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Noonecan.label('Noonecan'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_memberscan.label('memberscan'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Strangerscan.label('Strangerscan'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSSI_IsActive=1,MSSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_STArticulationSpeechIntelligibility.MSSIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAddSTArticulationVoiceForm', methods=['POST','GET'])
def getAddSTArticulationVoiceForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_STArticulationVoice.MSAVID.label('Id'),
                            Model.models.Application.M_STArticulationVoice.MSAV_Pitch.label('MSAV_Pitch'),
                            Model.models.Application.M_STArticulationVoice.MSAV_Loudness.label('MSAV_Loudness'),
                            Model.models.Application.M_STArticulationVoice.MSAV_Quality.label('MSAV_Quality'),
                            Model.models.Application.M_STArticulationVoice.MSAV_Observations.label('MSAV_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSAV_IsActive=1,MSAV_IsDeleted=0
                                ).order_by(Model.models.Application.M_STArticulationVoice.MSAVID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddSTArticulationVoice,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddSTArticulationVoice',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    Quality=Common_Function.CommonFun.Quality()
                    Loudness=Common_Function.CommonFun.Loudness()
                    Observation=Common_Function.CommonFun.Observation()
                    getTextField[1]['options']= Loudness
                    getTextField[2]['options']= Quality
                    getTextField[3]['options']= Observation

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSAV_Pitch
                        getTextField[1]['value'] = queryResult[0].MSAV_Loudness
                        getTextField[2]['value'] = queryResult[0].MSAV_Quality
                        getTextField[3]['value'] = queryResult[0].MSAV_Observations

                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSTArticulationVoiceForm',methods=['GET','POST'])
def submitSTArticulationVoiceForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Pitch = request_json.get('Pitch')
                    Loudness = request_json.get('Loudness')
                    Quality = request_json.get('Quality')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_STArticulationVoice()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSAV_Pitch=Pitch
                        Insert.MSAV_Loudness=Loudness
                        Insert.MSAV_Quality=Quality
                        Insert.MSAV_Observations=Observations
                        Insert.MSAV_AddIP= flask.request.remote_addr
                        Insert.MSAV_AddUser= data['id']
                        Insert.MSAV_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Articulation Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_STArticulationVoice).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSAV_Pitch=Pitch
                        Insert.MSAV_Loudness=Loudness
                        Insert.MSAV_Quality=Quality
                        Insert.MSAV_Observations=Observations
                        Insert.MSAV_AddIP= flask.request.remote_addr
                        Insert.MSAV_ModUser= data['id']
                        Insert.MSAV_ModDate = datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'Articulation Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSTArticulationVoiceForm', methods=['GET','POST'])
def viewSTArticulationVoiceForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSTArticulationVoiceForm,
                                session.query(Model.models.Application.M_STArticulationVoice.MSAVID.label('ID'),
                                            Model.models.Application.M_STArticulationVoice.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Pitch.label('Pitch'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Loudness.label('Loudness'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Quality.label('Quality'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSAV_IsActive=1,MSAV_IsDeleted=0
                                ).order_by(Model.models.Application.M_STArticulationVoice.MSAVID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getCognitivePrerequitesForm', methods=['POST','GET'])
def getCognitivePrerequitesForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_CognitivePrerequites.MCPID.label('Id'),
                            Model.models.Application.M_CognitivePrerequites.MCP_Imitation.label('MCP_Imitation'),
                            Model.models.Application.M_CognitivePrerequites.MCP_Objectpermanence.label('MCP_Objectpermanence'),
                            Model.models.Application.M_CognitivePrerequites.MCP_Timeconcept.label('MCP_Timeconcept'),
                            Model.models.Application.M_CognitivePrerequites.MCP_Colourconcept.label('MCP_Colourconcept'),
                            Model.models.Application.M_CognitivePrerequites.MCP_Moneyconcept.label('MCP_Moneyconcept'),
                            Model.models.Application.M_CognitivePrerequites.MCP_Sequencing.label('MCP_Sequencing'),
                            Model.models.Application.M_CognitivePrerequites.MCP_Matching.label('MCP_Matching'),
                            Model.models.Application.M_CognitivePrerequites.MCP_Meanendrelationship.label('MCP_Meanendrelationship'),
                            Model.models.Application.M_CognitivePrerequites.MCP_Observations.label('MCP_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MCP_IsActive=1,MCP_IsDeleted=0
                                ).order_by(Model.models.Application.M_CognitivePrerequites.MCPID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.CognitivePrerequitesform,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='CognitivePrerequitesform',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    Cognitive = Common_Function.CommonFun.Cognitive()
                    getTextField[1]['options']= Cognitive
                    getTextField[2]['options']= Cognitive
                    getTextField[3]['options']= Cognitive
                    getTextField[4]['options']= Cognitive
                    getTextField[5]['options']= Cognitive
                    getTextField[6]['options']= Cognitive
                    getTextField[7]['options']= Cognitive
                    getTextField[8]['options']= Cognitive


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MCP_Imitation
                        getTextField[1]['value'] = queryResult[0].MCP_Objectpermanence
                        getTextField[2]['value'] = queryResult[0].MCP_Timeconcept
                        getTextField[3]['value'] = queryResult[0].MCP_Colourconcept
                        getTextField[4]['value'] = queryResult[0].MCP_Moneyconcept
                        getTextField[5]['value'] = queryResult[0].MCP_Sequencing
                        getTextField[6]['value'] = queryResult[0].MCP_Matching
                        getTextField[7]['value'] = queryResult[0].MCP_Meanendrelationship
                        getTextField[8]['value'] = queryResult[0].MCP_Observations

                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitCognitivePrerequitesForm',methods=['GET','POST'])
def submitCognitivePrerequitesForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Imitation = request_json.get('Imitation')
                    Objectpermanence = request_json.get('Objectpermanence')
                    Timeconcept = request_json.get('Timeconcept')
                    Colourconcept = request_json.get('Colourconcept')
                    Moneyconcept = request_json.get('Moneyconcept')
                    Sequencing = request_json.get('Sequencing')
                    Matching = request_json.get('Matching')
                    Meanendrelationship = request_json.get('Meanendrelationship')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_CognitivePrerequites()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MCP_Imitation=Imitation
                        Insert.MCP_Objectpermanence=Objectpermanence
                        Insert.MCP_Timeconcept=Timeconcept
                        Insert.MCP_Colourconcept=Colourconcept
                        Insert.MCP_Moneyconcept=Moneyconcept
                        Insert.MCP_Sequencing=Sequencing
                        Insert.MCP_Matching=Matching
                        Insert.MCP_Meanendrelationship=Meanendrelationship
                        Insert.MCP_Observations=Observations
                        Insert.MCP_AddIP= flask.request.remote_addr
                        Insert.MCP_AddUser= data['id']
                        Insert.MCP_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Cognitive Prerequites Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_CognitivePrerequites).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MCP_Imitation=Imitation
                        Insert.MCP_Objectpermanence=Objectpermanence
                        Insert.MCP_Timeconcept=Timeconcept
                        Insert.MCP_Colourconcept=Colourconcept
                        Insert.MCP_Moneyconcept=Moneyconcept
                        Insert.MCP_Sequencing=Sequencing
                        Insert.MCP_Matching=Matching
                        Insert.MCP_Meanendrelationship=Meanendrelationship
                        Insert.MCP_Observations=Observations
                        Insert.MCP_AddIP= flask.request.remote_addr
                        Insert.MCP_ModUser= data['id']
                        Insert.MCP_ModDate = datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'Cognitive Prerequites Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewCognitivePrerequitesForm', methods=['GET','POST'])
def viewCognitivePrerequitesForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewCognitivePrerequitesForm,
                                session.query(Model.models.Application.M_CognitivePrerequites.MCPID.label('ID'),
                                            Model.models.Application.M_CognitivePrerequites.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Imitation.label('Imitation'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Objectpermanence.label('Objectpermanence'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Timeconcept.label('Timeconcept'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Colourconcept.label('Colourconcept'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Moneyconcept.label('Moneyconcept'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Sequencing.label('Sequencing'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Matching.label('Matching'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Meanendrelationship.label('Meanendrelationship'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Observations.label('Observations'),

                                                ).filter_by(M_Patient_MPID=pid,MCP_IsActive=1,MCP_IsDeleted=0
                                ).order_by(Model.models.Application.M_CognitivePrerequites.MCPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSTVerbalCommunicationForm', methods=['POST','GET'])
def getSTVerbalCommunicationForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_STVerbalCommunication.MVCID.label('Id'),
                            Model.models.Application.M_STVerbalCommunication.MVC_Expression.label('MVC_Expression'),
                            Model.models.Application.M_STVerbalCommunication.MVC_Comprehension.label('MVC_Comprehension'),
                            Model.models.Application.M_STVerbalCommunication.MVC_Observations.label('MVC_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MVC_IsActive=1,MVC_IsDeleted=0
                                ).order_by(Model.models.Application.M_STVerbalCommunication.MVCID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.STVerbalCommunicationForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='STVerbalCommunicationForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    verbalComm = Common_Function.CommonFun.verbalComm()
                    getTextField[0]['options']= verbalComm
                    getTextField[1]['options']= verbalComm
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MVC_Expression
                        getTextField[1]['value'] = queryResult[0].MVC_Comprehension
                        getTextField[2]['value'] = queryResult[0].MVC_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSTVerbalCommunicationForm',methods=['GET','POST'])
def submitSTVerbalCommunicationForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Expression = request_json.get('Expression')
                    Comprehension = request_json.get('Comprehension')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_STVerbalCommunication()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MVC_Expression=Expression
                        Insert.MVC_Comprehension=Comprehension
                        Insert.MVC_Observations=Observations
                        Insert.MVC_AddUser= data['id']
                        Insert.MVC_AddDate = datetime.datetime.now()
                        Insert.MVC_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Verbal Communication Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_STVerbalCommunication).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MVC_Expression=Expression
                        Insert.MVC_Comprehension=Comprehension
                        Insert.MVC_Observations=Observations
                        Insert.MVC_AddUser= data['id']
                        Insert.MVC_ModDate = datetime.datetime.now()
                        Insert.MVC_ModIP= flask.request.remote_addr
                        session.commit()
                        return jsonify({'msg':'Verbal Communication Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSTVerbalCommunicationForm', methods=['GET','POST'])
def viewSTVerbalCommunicationForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSTVerbalCommunicationForm,
                                session.query(Model.models.Application.M_STVerbalCommunication.MVCID.label('ID'),
                                            Model.models.Application.M_STVerbalCommunication.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STVerbalCommunication.MVC_Expression.label('Expression'),
                                            Model.models.Application.M_STVerbalCommunication.MVC_Comprehension.label('Comprehension'),
                                            Model.models.Application.M_STVerbalCommunication.MVC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MVC_IsActive=1,MVC_IsDeleted=0
                                ).order_by(Model.models.Application.M_STVerbalCommunication.MVCID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSTNonVerbalCommunicationForm', methods=['POST','GET'])
def getSTNonVerbalCommunicationForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_STNonVerbalCommunication.MNVCID.label('Id'),
                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Expression.label('MNVC_Expression'),
                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Comprehension.label('MNVC_Comprehension'),
                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Observations.label('MNVC_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MNVC_IsActive=1,MNVC_IsDeleted=0
                                ).order_by(Model.models.Application.M_STNonVerbalCommunication.MNVCID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.STNonVerbalCommunicationForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='STNonVerbalCommunicationForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    Expression=Common_Function.CommonFun.Expression()
                    Comprehension=Common_Function.CommonFun.Comprehension()

                    getTextField[0]['options']= Expression
                    getTextField[1]['options']= Comprehension

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MNVC_Expression
                        getTextField[1]['value'] = queryResult[0].MNVC_Comprehension
                        getTextField[2]['value'] = queryResult[0].MNVC_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSTNonVerbalCommunicationForm',methods=['GET','POST'])
def submitSTNonVerbalCommunicationForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Expression = request_json.get('Expression')
                    Comprehension = request_json.get('Comprehension')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')

                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_STNonVerbalCommunication()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MNVC_Expression=Expression
                        Insert.MNVC_Comprehension=Comprehension
                        Insert.MNVC_Observations=Observations
                        Insert.MNVC_AddUser= data['id']
                        Insert.MNVC_AddDate = datetime.datetime.now()
                        Insert.MNVC_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Non Verbal Communication Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_STNonVerbalCommunication).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MNVC_Expression=Expression
                        Insert.MNVC_Comprehension=Comprehension
                        Insert.MNVC_Observations=Observations
                        Insert.MNVC_AddUser= data['id']
                        Insert.MNVC_ModDate = datetime.datetime.now()
                        Insert.MNVC_ModIP= flask.request.remote_addr
                        session.commit()
                        return jsonify({'msg':'Non Verbal Communication Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSTNonVerbalCommunicationForm', methods=['GET','POST'])
def viewSTNonVerbalCommunicationForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSTNonVerbalCommunicationForm,
                                session.query(Model.models.Application.M_STNonVerbalCommunication.MNVCID.label('ID'),
                                            Model.models.Application.M_STNonVerbalCommunication.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Expression.label('Expression'),
                                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Comprehension.label('Comprehension'),
                                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MNVC_IsActive=1,MNVC_IsDeleted=0
                                ).order_by(Model.models.Application.M_STNonVerbalCommunication.MNVCID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

###################################################
@app.route('/getOTHandFunctionsForm', methods=['POST','GET'])
def getOTHandFunctionsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_OTHandFunctions.MHFID.label('Id'),
                            Model.models.Application.M_OTHandFunctions.MHF_HandDominance.label('MHF_HandDominance'),
                            Model.models.Application.M_OTHandFunctions.MHF_HandPreference.label('MHF_HandPreference'),
                            Model.models.Application.M_OTHandFunctions.MHF_ReachForward.label('MHF_ReachForward'),
                            Model.models.Application.M_OTHandFunctions.MHF_ReachBackward.label('MHF_ReachBackward'),
                            Model.models.Application.M_OTHandFunctions.MHF_ReachLateral.label('MHF_ReachLateral'),
                            Model.models.Application.M_OTHandFunctions.MHF_ReachDownward.label('MHF_ReachDownward'),
                            Model.models.Application.M_OTHandFunctions.MHF_GraspUlnarPalmar.label('MHF_GraspUlnarPalmar'),
                            Model.models.Application.M_OTHandFunctions.MHF_GraspPalmar.label('MHF_GraspPalmar'),
                            Model.models.Application.M_OTHandFunctions.MHF_GraspRadialPalmar.label('MHF_GraspRadialPalmar'),
                            Model.models.Application.M_OTHandFunctions.MHF_GraspRadialDigital.label('MHF_GraspRadialDigital'),
                            Model.models.Application.M_OTHandFunctions.MHF_GraspInferiorPincer.label('MHF_GraspInferiorPincer'),
                            Model.models.Application.M_OTHandFunctions.MHF_ReachUpward.label('MHF_ReachUpward'),
                            Model.models.Application.M_OTHandFunctions.MHF_GraspNeatPincer.label('MHF_GraspNeatPincer'),
                            Model.models.Application.M_OTHandFunctions.MHF_GraspPalmarsupinate.label('MHF_GraspPalmarsupinate'),
                            Model.models.Application.M_OTHandFunctions.MHF_GraspDigitalpronate.label('MHF_GraspDigitalpronate'),
                            Model.models.Application.M_OTHandFunctions.MHF_GraspStatictripod.label('MHF_GraspStatictripod'),
                            Model.models.Application.M_OTHandFunctions.MHF_GraspDynamictripod.label('MHF_GraspDynamictripod'),
                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionPadtoPad.label('MHF_PrehensionPadtoPad'),
                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionTiptoTip.label('MHF_PrehensionTiptoTip'),
                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionPadtoSide.label('MHF_PrehensionPadtoSide'),
                            Model.models.Application.M_OTHandFunctions.MHF_InHandManipulationFingertoPalmTranslation.label('MHF_InHandManipulationFingertoPalmTranslation'),
                            Model.models.Application.M_OTHandFunctions.MHF_InHandManipulationPalmtoFingerTranslation.label('MHF_InHandManipulationPalmtoFingerTranslation'),
                            Model.models.Application.M_OTHandFunctions.MHF_InHandManipulationShift.label('MHF_InHandManipulationShift'),
                            Model.models.Application.M_OTHandFunctions.MHF_InHandManipulationSimpleRotation.label('MHF_InHandManipulationSimpleRotation'),
                            Model.models.Application.M_OTHandFunctions.MHF_InHandComplexRotation.label('MHF_InHandComplexRotation'),
                            Model.models.Application.M_OTHandFunctions.MHF_Observations.label('MHF_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MHF_IsActive=1,MHF_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTHandFunctions.MHFID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.OTHandFunctionsform,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='OTHandFunctionsform',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    yesno = Common_Function.CommonFun.yesno()
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MHF_HandDominance
                        getTextField[1]['value'] = queryResult[0].MHF_HandPreference
                        getTextField[2]['value'] = queryResult[0].MHF_ReachForward
                        getTextField[3]['value'] = queryResult[0].MHF_ReachBackward
                        getTextField[4]['value'] = queryResult[0].MHF_ReachLateral
                        getTextField[5]['value'] = queryResult[0].MHF_ReachDownward
                        getTextField[6]['value'] = queryResult[0].MHF_GraspUlnarPalmar
                        getTextField[7]['value'] = queryResult[0].MHF_GraspPalmar
                        getTextField[8]['value'] = queryResult[0].MHF_GraspRadialPalmar
                        getTextField[9]['value'] = queryResult[0].MHF_GraspRadialDigital
                        getTextField[10]['value'] = queryResult[0].MHF_GraspInferiorPincer
                        getTextField[11]['value'] = queryResult[0].MHF_ReachUpward
                        getTextField[12]['value'] = queryResult[0].MHF_GraspNeatPincer
                        getTextField[13]['value'] = queryResult[0].MHF_GraspPalmarsupinate
                        getTextField[14]['value'] = queryResult[0].MHF_GraspDigitalpronate
                        getTextField[15]['value'] = queryResult[0].MHF_GraspStatictripod
                        getTextField[16]['value'] = queryResult[0].MHF_GraspDynamictripod
                        getTextField[17]['value'] = queryResult[0].MHF_PrehensionPadtoPad
                        getTextField[18]['value'] = queryResult[0].MHF_PrehensionTiptoTip
                        getTextField[19]['value'] = queryResult[0].MHF_PrehensionPadtoSide
                        getTextField[20]['value'] = queryResult[0].MHF_InHandManipulationFingertoPalmTranslation
                        getTextField[21]['value'] = queryResult[0].MHF_InHandManipulationPalmtoFingerTranslation
                        getTextField[22]['value'] = queryResult[0].MHF_InHandManipulationShift
                        getTextField[23]['value'] = queryResult[0].MHF_InHandManipulationSimpleRotation
                        getTextField[24]['value'] = queryResult[0].MHF_InHandComplexRotation
                        getTextField[25]['value'] = queryResult[0].MHF_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitOTHandFunctionsForm',methods=['GET','POST'])
def submitOTHandFunctionsForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    HandDominance = request_json.get('HandDominance')
                    HandPreference = request_json.get('HandPreference')
                    ReachForward = request_json.get('ReachForward')
                    ReachBackward = request_json.get('ReachBackward')
                    ReachLateral = request_json.get('ReachLateral')
                    ReachUpward = request_json.get('ReachUpward')
                    ReachDownward = request_json.get('ReachDownward')
                    GraspUlnarPalmar = request_json.get('GraspUlnarPalmar')
                    GraspPalmar = request_json.get('GraspPalmar')
                    GraspRadialPalmar = request_json.get('GraspRadialPalmar')
                    GraspRadialDigital = request_json.get('GraspRadialDigital')
                    GraspInferiorPincer = request_json.get('GraspInferiorPincer')
                    GraspNeatPincer = request_json.get('GraspNeatPincer')
                    GraspPalmarsupinate = request_json.get('GraspPalmarsupinate')
                    GraspDigitalpronate = request_json.get('GraspDigitalpronate')
                    GraspStatictripod = request_json.get('GraspStatictripod')
                    GraspDynamictripod = request_json.get('GraspDynamictripod')
                    PrehensionPadtoPad = request_json.get('PrehensionPadtoPad')
                    PrehensionTiptoTip = request_json.get('PrehensionTiptoTip')
                    PrehensionPadtoSide = request_json.get('PrehensionPadtoSide')
                    InHandManipulationFingertoPalmTranslation = request_json.get('InHandManipulationFingertoPalmTranslation')

                    InHandManipulationPalmtoFingerTranslation = request_json.get('InHandManipulationPalmtoFingerTranslation')
                    InHandManipulationShift = request_json.get('InHandManipulationShift')
                    InHandManipulationSimpleRotation = request_json.get('InHandManipulationSimpleRotation')
                    InHandComplexRotation = request_json.get('InHandComplexRotation')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_OTHandFunctions()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MHF_HandDominance=HandDominance
                        Insert.MHF_HandPreference=HandPreference
                        Insert.MHF_ReachForward=ReachForward
                        Insert.MHF_ReachBackward=ReachBackward
                        Insert.MHF_ReachLateral=ReachLateral
                        Insert.MHF_ReachUpward=ReachUpward
                        Insert.MHF_ReachDownward=ReachDownward
                        Insert.MHF_GraspUlnarPalmar=GraspUlnarPalmar
                        Insert.MHF_GraspPalmar=GraspPalmar
                        Insert.MHF_GraspRadialPalmar=GraspRadialPalmar
                        Insert.MHF_GraspRadialDigital=GraspRadialDigital
                        Insert.MHF_GraspInferiorPincer=GraspInferiorPincer
                        Insert.MHF_GraspNeatPincer=GraspNeatPincer
                        Insert.MHF_GraspPalmarsupinate=GraspPalmarsupinate
                        Insert.MHF_GraspDigitalpronate=GraspDigitalpronate
                        Insert.MHF_GraspStatictripod=GraspStatictripod
                        Insert.MHF_GraspDynamictripod=GraspDynamictripod
                        Insert.MHF_PrehensionPadtoPad=PrehensionPadtoPad
                        Insert.MHF_PrehensionTiptoTip=PrehensionTiptoTip
                        Insert.MHF_PrehensionPadtoSide=PrehensionPadtoSide
                        Insert.MHF_InHandManipulationFingertoPalmTranslation=InHandManipulationFingertoPalmTranslation
                        Insert.MHF_InHandManipulationPalmtoFingerTranslation=InHandManipulationPalmtoFingerTranslation
                        Insert.MHF_InHandManipulationShift=InHandManipulationShift
                        Insert.MHF_InHandManipulationSimpleRotation=InHandManipulationSimpleRotation
                        Insert.MHF_InHandComplexRotation=InHandComplexRotation
                        Insert.MHF_Observations=Observations
                        Insert.MHF_AddUser= data['id']
                        Insert.MHF_AddDate = datetime.datetime.now()
                        Insert.MHF_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Hand Functions Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_OTHandFunctions).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MHF_HandDominance=HandDominance
                        Insert.MHF_HandPreference=HandPreference
                        Insert.MHF_ReachForward=ReachForward
                        Insert.MHF_ReachBackward=ReachBackward
                        Insert.MHF_ReachLateral=ReachLateral
                        Insert.MHF_ReachUpward=ReachUpward
                        Insert.MHF_ReachDownward=ReachDownward
                        Insert.MHF_GraspUlnarPalmar=GraspUlnarPalmar
                        Insert.MHF_GraspPalmar=GraspPalmar
                        Insert.MHF_GraspRadialPalmar=GraspRadialPalmar
                        Insert.MHF_GraspRadialDigital=GraspRadialDigital
                        Insert.MHF_GraspInferiorPincer=GraspInferiorPincer
                        Insert.MHF_GraspNeatPincer=GraspNeatPincer
                        Insert.MHF_GraspPalmarsupinate=GraspPalmarsupinate
                        Insert.MHF_GraspDigitalpronate=GraspDigitalpronate
                        Insert.MHF_GraspStatictripod=GraspStatictripod
                        Insert.MHF_GraspDynamictripod=GraspDynamictripod
                        Insert.MHF_PrehensionPadtoPad=PrehensionPadtoPad
                        Insert.MHF_PrehensionTiptoTip=PrehensionTiptoTip
                        Insert.MHF_PrehensionPadtoSide=PrehensionPadtoSide
                        Insert.MHF_InHandManipulationFingertoPalmTranslation=InHandManipulationFingertoPalmTranslation
                        Insert.MHF_InHandManipulationPalmtoFingerTranslation=InHandManipulationPalmtoFingerTranslation
                        Insert.MHF_InHandManipulationShift=InHandManipulationShift
                        Insert.MHF_InHandManipulationSimpleRotation=InHandManipulationSimpleRotation
                        Insert.MHF_InHandComplexRotation=InHandComplexRotation
                        Insert.MHF_Observations=Observations
                        Insert.MHF_ModUser= data['id']
                        Insert.MHF_ModDate = datetime.datetime.now()
                        Insert.MHF_AddIP= flask.request.remote_addr
                        session.commit()
                        return jsonify({'msg':'Hand Functions Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewOTHandFunctionsForm', methods=['GET','POST'])
def viewOTHandFunctionsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewOTHandFunctionsForm,
                                session.query(Model.models.Application.M_OTHandFunctions.MHFID.label('ID'),
                                            Model.models.Application.M_OTHandFunctions.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTHandFunctions.MHF_HandDominance.label('Hand Dominance'),
                                            Model.models.Application.M_OTHandFunctions.MHF_HandPreference.label('Hand Preference'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachForward.label('Reach Forward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachBackward.label('Reach Backward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachLateral.label('Reach Lateral'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachDownward.label('Reach Downward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspUlnarPalmar.label('Grasp UlnarPalmar'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspPalmar.label('Grasp Palmar'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspRadialPalmar.label('Grasp RadialPalmar'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspRadialDigital.label('Grasp RadialDigital'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspInferiorPincer.label('Grasp InferiorPincer'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachUpward.label('Reach Upward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspNeatPincer.label('Grasp NeatPincer'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspPalmarsupinate.label('Grasp Palmarsupinate'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspDigitalpronate.label('Grasp Digitalpronate'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspStatictripod.label('Grasp Statictripod'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspDynamictripod.label('Grasp Dynamictripod'),
                                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionPadtoPad.label('Prehension PadtoPad'),
                                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionTiptoTip.label('Prehension TiptoTip'),
                                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionPadtoSide.label('Prehension PadtoSide'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MHF_IsActive=1,MHF_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTHandFunctions.MHFID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


####################################################
@app.route('/getOTNonEquilibriumCoordinationForm', methods=['POST','GET'])
def getOTNonEquilibriumCoordinationForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_NonEquilibrium.MNEID.label('Id'),
                            Model.models.Application.M_NonEquilibrium.MNE_Fingertonose.label('MNE_Fingertonose'),
                            Model.models.Application.M_NonEquilibrium.MNE_Fingertotherapistfinger.label('MNE_Fingertotherapistfinger'),
                            Model.models.Application.M_NonEquilibrium.MNE_Fingertofinger.label('MNE_Fingertofinger'),
                            Model.models.Application.M_NonEquilibrium.MNE_Alternatnosefinger.label('MNE_Alternatnosefinger'),
                            Model.models.Application.M_NonEquilibrium.MNE_Fingeropposition.label('MNE_Fingeropposition'),
                            Model.models.Application.M_NonEquilibrium.MNE_Massgrasp.label('MNE_Massgrasp'),
                            Model.models.Application.M_NonEquilibrium.MNE_Pronationsupination.label('MNE_Pronationsupination'),
                            Model.models.Application.M_NonEquilibrium.MNE_Reboundtest.label('MNE_Reboundtest'),
                            Model.models.Application.M_NonEquilibrium.MNE_Tappinghand.label('MNE_Tappinghand'),
                            Model.models.Application.M_NonEquilibrium.MNE_Tappingfeet.label('MNE_Tappingfeet'),
                            Model.models.Application.M_NonEquilibrium.MNE_Pointingandpastpointing.label('MNE_Pointingandpastpointing'),
                            Model.models.Application.M_NonEquilibrium.MNE_Alternateheeltokneeheeltoe.label('MNE_Alternateheeltokneeheeltoe'),
                            Model.models.Application.M_NonEquilibrium.MNE_Toetoexaminersfinger.label('MNE_Toetoexaminersfinger'),
                            Model.models.Application.M_NonEquilibrium.MNE_Heeltoshin.label('MNE_Heeltoshin'),
                            Model.models.Application.M_NonEquilibrium.MNE_Drawingacircle.label('MNE_Drawingacircle'),
                            Model.models.Application.M_NonEquilibrium.MNE_Fixationorpositionholding.label('MNE_Fixationorpositionholding')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MNE_IsActive=1,MNE_IsDeleted=0
                                ).order_by(Model.models.Application.M_NonEquilibrium.MNEID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.OTNonEquilibriumCoordinationForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='OTNonEquilibriumCoordinationForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    yesno = Common_Function.CommonFun.yesno()


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MNE_Fingertonose
                        getTextField[1]['value'] = queryResult[0].MNE_Fingertotherapistfinger
                        getTextField[2]['value'] = queryResult[0].MNE_Fingertofinger
                        getTextField[3]['value'] = queryResult[0].MNE_Alternatnosefinger
                        getTextField[4]['value'] = queryResult[0].MNE_Fingeropposition
                        getTextField[5]['value'] = queryResult[0].MNE_Massgrasp
                        getTextField[6]['value'] = queryResult[0].MNE_Pronationsupination
                        getTextField[7]['value'] = queryResult[0].MNE_Reboundtest
                        getTextField[8]['value'] = queryResult[0].MNE_Tappinghand
                        getTextField[9]['value'] = queryResult[0].MNE_Tappingfeet
                        getTextField[10]['value'] = queryResult[0].MNE_Pointingandpastpointing
                        getTextField[11]['value'] = queryResult[0].MNE_Alternateheeltokneeheeltoe
                        getTextField[12]['value'] = queryResult[0].MNE_Toetoexaminersfinger
                        getTextField[13]['value'] = queryResult[0].MNE_Heeltoshin
                        getTextField[14]['value'] = queryResult[0].MNE_Drawingacircle
                        getTextField[15]['value'] = queryResult[0].MNE_Fixationorpositionholding
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitOTNonEquilibriumCoordinationForm',methods=['GET','POST'])
def submitOTNonEquilibriumCoordinationForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Fingertonose = request_json.get('Fingertonose')
                    Fingertotherapistfinger = request_json.get('Fingertotherapistfinger')
                    Fingertofinger = request_json.get('Fingertofinger')
                    Alternatnosefinger = request_json.get('Alternatnosefinger')
                    Fingeropposition = request_json.get('Fingeropposition')
                    Massgrasp = request_json.get('Massgrasp')
                    Pronationsupination = request_json.get('Pronationsupination')
                    Reboundtest = request_json.get('Reboundtest')
                    Tappinghand = request_json.get('Tappinghand')
                    Tappingfeet = request_json.get('Tappingfeet')
                    Pointingandpastpointing = request_json.get('Pointingandpastpointing')
                    Alternateheeltokneeheeltoe = request_json.get('Alternateheeltokneeheeltoe')
                    Toetoexaminersfinger = request_json.get('Toetoexaminersfinger')
                    Heeltoshin = request_json.get('Heeltoshin')
                    Drawingacircle = request_json.get('Drawingacircle')
                    Fixationorpositionholding = request_json.get('Fixationorpositionholding')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_NonEquilibrium()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MNE_Fingertonose = Fingertonose
                        Insert.MNE_Fingertotherapistfinger=Fingertotherapistfinger
                        Insert.MNE_Fingertofinger=Fingertofinger
                        Insert.MNE_Alternatnosefinger=Alternatnosefinger
                        Insert.MNE_Fingeropposition=Fingeropposition
                        Insert.MNE_Massgrasp=Massgrasp
                        Insert.MNE_Pronationsupination=Pronationsupination
                        Insert.MNE_Reboundtest=Reboundtest
                        Insert.MNE_Tappinghand=Tappinghand
                        Insert.MNE_Tappingfeet=Tappingfeet
                        Insert.MNE_Pointingandpastpointing=Pointingandpastpointing
                        Insert.MNE_Alternateheeltokneeheeltoe=Alternateheeltokneeheeltoe
                        Insert.MNE_Toetoexaminersfinger=Toetoexaminersfinger
                        Insert.MNE_Heeltoshin=Heeltoshin
                        Insert.MNE_Drawingacircle=Drawingacircle
                        Insert.MNE_Fixationorpositionholding=Fixationorpositionholding
                        Insert.MNE_AddUser= data['id']
                        Insert.MNE_AddDate = datetime.datetime.now()
                        Insert.MNE_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Non Equilibrium Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_NonEquilibrium).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MNE_Fingertonose = Fingertonose
                        Insert.MNE_Fingertotherapistfinger=Fingertotherapistfinger
                        Insert.MNE_Fingertofinger=Fingertofinger
                        Insert.MNE_Alternatnosefinger=Alternatnosefinger
                        Insert.MNE_Fingeropposition=Fingeropposition
                        Insert.MNE_Massgrasp=Massgrasp
                        Insert.MNE_Pronationsupination=Pronationsupination
                        Insert.MNE_Reboundtest=Reboundtest
                        Insert.MNE_Tappinghand=Tappinghand
                        Insert.MNE_Tappingfeet=Tappingfeet
                        Insert.MNE_Pointingandpastpointing=Pointingandpastpointing
                        Insert.MNE_Alternateheeltokneeheeltoe=Alternateheeltokneeheeltoe
                        Insert.MNE_Toetoexaminersfinger=Toetoexaminersfinger
                        Insert.MNE_Heeltoshin=Heeltoshin
                        Insert.MNE_Drawingacircle=Drawingacircle
                        Insert.MNE_Fixationorpositionholding=Fixationorpositionholding
                        Insert.MNE_AddUser= data['id']
                        Insert.MNE_ModDate = datetime.datetime.now()
                        Insert.MNE_ModIP= flask.request.remote_addr
                        session.commit()
                        return jsonify({'msg':'Non Equilibrium Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewOTNonEquilibriumCoordinationForm', methods=['GET','POST'])
def viewOTNonEquilibriumCoordinationForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewOTNonEquilibriumCoordinationForm,
                                session.query(Model.models.Application.M_NonEquilibrium.MNEID.label('ID'),
                                            Model.models.Application.M_NonEquilibrium.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingertonose.label('Fingertonose'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingertotherapistfinger.label('Fingertotherapistfinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingertofinger.label('Fingertofinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Alternatnosefinger.label('Alternatnosefinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingeropposition.label('Fingeropposition'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Massgrasp.label('Massgrasp'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Pronationsupination.label('Pronationsupination'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Reboundtest.label('Reboundtest'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Tappinghand.label('Tappinghand'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Tappingfeet.label('Tappingfeet'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Pointingandpastpointing.label('Pointingandpastpointing'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Alternateheeltokneeheeltoe.label('Alternateheeltokneeheeltoe'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Toetoexaminersfinger.label('Toetoexaminersfinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Heeltoshin.label('Heeltoshin'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Drawingacircle.label('Drawingacircle'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fixationorpositionholding.label('Fixationorpositionholding'),

                                                ).filter_by(M_Patient_MPID=pid,MNE_IsActive=1,MNE_IsDeleted=0
                                ).order_by(Model.models.Application.M_NonEquilibrium.MNEID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

#############################
@app.route('/getOTEquilibriumCoOrdinationForm', methods=['POST','GET'])
def getOTEquilibriumCoOrdinationForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_Equilibrium.MNEID.label('Id'),
                            Model.models.Application.M_Equilibrium.MNE_Standingwithnormalbaseofsupport.label('MNE_Standingwithnormalbaseofsupport'),
                            Model.models.Application.M_Equilibrium.MNE_Standingwithnarrowbaseofsupport.label('MNE_Standingwithnarrowbaseofsupport'),
                            Model.models.Application.M_Equilibrium.MNE_Standingintandemposition.label('MNE_Standingintandemposition'),
                            Model.models.Application.M_Equilibrium.MNE_Standingononefeet.label('MNE_Standingononefeet'),
                            Model.models.Application.M_Equilibrium.MNE_Perturbation.label('MNE_Perturbation'),
                            Model.models.Application.M_Equilibrium.MNE_Standinginfunctionalreach.label('MNE_Standinginfunctionalreach'),
                            Model.models.Application.M_Equilibrium.MNE_Standinglateralflexionofthetrunktoeachside.label('MNE_Standinglateralflexionofthetrunktoeachside'),
                            Model.models.Application.M_Equilibrium.MNE_Tandemwalking.label('MNE_Tandemwalking'),
                            Model.models.Application.M_Equilibrium.MNE_WalkingInastraightline.label('MNE_WalkingInastraightline'),
                            Model.models.Application.M_Equilibrium.MNE_Walksidewaysbackwards.label('MNE_Walksidewaysbackwards'),
                            Model.models.Application.M_Equilibrium.MNE_Walkinhorizontalvertical.label('MNE_Walkinhorizontalvertical'),
                            Model.models.Application.M_Equilibrium.MNE_Marchinplace.label('MNE_Marchinplace'),
                            Model.models.Application.M_Equilibrium.MNE_Startstopabruptly.label('MNE_Startstopabruptly'),
                            Model.models.Application.M_Equilibrium.MNE_Walkandpivotincommand.label('MNE_Walkandpivotincommand'),
                            Model.models.Application.M_Equilibrium.MNE_Walkincircle.label('MNE_Walkincircle'),
                            Model.models.Application.M_Equilibrium.MNE_Walkonheelsandtoes.label('MNE_Walkonheelsandtoes'),
                            Model.models.Application.M_Equilibrium.MNE_Turnsoncommand.label('MNE_Turnsoncommand'),
                            Model.models.Application.M_Equilibrium.MNE_Stepoveraroundobstacles.label('MNE_Stepoveraroundobstacles'),
                            Model.models.Application.M_Equilibrium.MNE_Stairclimbingwithhandrails.label('MNE_Stairclimbingwithhandrails'),
                            Model.models.Application.M_Equilibrium.MNE_Jumpingjacks.label('MNE_Jumpingjacks'),
                            Model.models.Application.M_Equilibrium.MNE_Sittingontherapybal.label('MNE_Sittingontherapybal')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MNE_IsActive=1,MNE_IsDeleted=0
                                ).order_by(Model.models.Application.M_Equilibrium.MNEID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.OTEquilibriumCoOrdinationForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='OTEquilibriumCoOrdinationForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    yesno = Common_Function.CommonFun.yesno()


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MNE_Standingwithnormalbaseofsupport
                        getTextField[1]['value'] = queryResult[0].MNE_Standingwithnarrowbaseofsupport
                        getTextField[2]['value'] = queryResult[0].MNE_Standingintandemposition
                        getTextField[3]['value'] = queryResult[0].MNE_Standingononefeet
                        getTextField[4]['value'] = queryResult[0].MNE_Perturbation
                        getTextField[5]['value'] = queryResult[0].MNE_Standinginfunctionalreach
                        getTextField[6]['value'] = queryResult[0].MNE_Standinglateralflexionofthetrunktoeachside
                        getTextField[7]['value'] = queryResult[0].MNE_Tandemwalking
                        getTextField[8]['value'] = queryResult[0].MNE_WalkingInastraightline
                        getTextField[9]['value'] = queryResult[0].MNE_Walksidewaysbackwards
                        getTextField[10]['value'] = queryResult[0].MNE_Walkinhorizontalvertical
                        getTextField[11]['value'] = queryResult[0].MNE_Marchinplace
                        getTextField[12]['value'] = queryResult[0].MNE_Startstopabruptly
                        getTextField[13]['value'] = queryResult[0].MNE_Walkandpivotincommand
                        getTextField[14]['value'] = queryResult[0].MNE_Walkincircle
                        getTextField[15]['value'] = queryResult[0].MNE_Walkonheelsandtoes
                        getTextField[16]['value'] = queryResult[0].MNE_Turnsoncommand
                        getTextField[17]['value'] = queryResult[0].MNE_Stepoveraroundobstacles
                        getTextField[18]['value'] = queryResult[0].MNE_Stairclimbingwithhandrails
                        getTextField[19]['value'] = queryResult[0].MNE_Jumpingjacks
                        getTextField[20]['value'] = queryResult[0].MNE_Sittingontherapybal
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitOTEquilibriumCoordinationForm',methods=['GET','POST'])
def submitOTEquilibriumCoordinationForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Standingwithnormalbaseofsupport = request_json.get('Standingwithnormalbaseofsupport')
                    Standingwithnarrowbaseofsupport = request_json.get('Standingwithnarrowbaseofsupport')
                    Standingintandemposition = request_json.get('Standingintandemposition')
                    Standingononefeet = request_json.get('Standingononefeet')
                    Perturbation = request_json.get('Perturbation')
                    Standinginfunctionalreach = request_json.get('Standinginfunctionalreach')
                    Standinglateralflexionofthetrunktoeachside = request_json.get('Standinglateralflexionofthetrunktoeachside')
                    Tandemwalking = request_json.get('Tandemwalking')
                    WalkingInastraightline = request_json.get('WalkingInastraightline')
                    Walksidewaysbackwards = request_json.get('Walksidewaysbackwards')
                    Marchinplace = request_json.get('Marchinplace')
                    Startstopabruptly = request_json.get('Startstopabruptly')
                    Walkandpivotincommand = request_json.get('Walkandpivotincommand')
                    Walkincircle = request_json.get('Walkincircle')
                    Walkonheelsandtoes = request_json.get('Walkonheelsandtoes')
                    Walkinhorizontalvertical = request_json.get('Walkinhorizontalvertical')
                    Turnsoncommand= request_json.get('Turnsoncommand')
                    Stepoveraroundobstacles = request_json.get('Stepoveraroundobstacles')
                    Stairclimbingwithhandrails = request_json.get('Stairclimbingwithhandrails')
                    Jumpingjacks = request_json.get('Jumpingjacks')
                    Sittingontherapybal = request_json.get('Sittingontherapybal')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_Equilibrium()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MNE_Standingwithnormalbaseofsupport = Standingwithnormalbaseofsupport
                        Insert.MNE_Standingwithnarrowbaseofsupport=Standingwithnarrowbaseofsupport
                        Insert.MNE_Standingintandemposition=Standingintandemposition
                        Insert.MNE_Standingononefeet=Standingononefeet
                        Insert.MNE_Perturbation=Perturbation
                        Insert.MNE_Standinginfunctionalreach=Standinginfunctionalreach
                        Insert.MNE_Standinglateralflexionofthetrunktoeachside=Standinglateralflexionofthetrunktoeachside
                        Insert.MNE_Tandemwalking=Tandemwalking
                        Insert.MNE_WalkingInastraightline=WalkingInastraightline
                        Insert.MNE_Walksidewaysbackwards=Walksidewaysbackwards
                        Insert.MNE_Marchinplace=Marchinplace
                        Insert.MNE_Startstopabruptly=Startstopabruptly
                        Insert.MNE_Walkandpivotincommand=Walkandpivotincommand
                        Insert.MNE_Walkincircle=Walkincircle
                        Insert.MNE_Walkonheelsandtoes=Walkonheelsandtoes
                        Insert.MNE_Walkinhorizontalvertical=Walkinhorizontalvertical
                        Insert.MNE_Turnsoncommand=Turnsoncommand
                        Insert.MNE_Stepoveraroundobstacles=Stepoveraroundobstacles
                        Insert.MNE_Stairclimbingwithhandrails=Stairclimbingwithhandrails
                        Insert.MNE_Jumpingjacks=Jumpingjacks
                        Insert.MNE_Sittingontherapybal=Sittingontherapybal
                        Insert.MNE_AddUser= data['id']
                        Insert.MNE_AddDate = datetime.datetime.now()
                        Insert.MNE_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'OT Equilibrium Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_Equilibrium).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MNE_Standingwithnormalbaseofsupport = Standingwithnormalbaseofsupport
                        Insert.MNE_Standingwithnarrowbaseofsupport=Standingwithnarrowbaseofsupport
                        Insert.MNE_Standingintandemposition=Standingintandemposition
                        Insert.MNE_Standingononefeet=Standingononefeet
                        Insert.MNE_Perturbation=Perturbation
                        Insert.MNE_Standinginfunctionalreach=Standinginfunctionalreach
                        Insert.MNE_Standinglateralflexionofthetrunktoeachside=Standinglateralflexionofthetrunktoeachside
                        Insert.MNE_Tandemwalking=Tandemwalking
                        Insert.MNE_WalkingInastraightline=WalkingInastraightline
                        Insert.MNE_Walksidewaysbackwards=Walksidewaysbackwards
                        Insert.MNE_Marchinplace=Marchinplace
                        Insert.MNE_Startstopabruptly=Startstopabruptly
                        Insert.MNE_Walkandpivotincommand=Walkandpivotincommand
                        Insert.MNE_Walkincircle=Walkincircle
                        Insert.MNE_Walkonheelsandtoes=Walkonheelsandtoes
                        Insert.MNE_Walkinhorizontalvertical=Walkinhorizontalvertical
                        Insert.MNE_Turnsoncommand=Turnsoncommand
                        Insert.MNE_Stepoveraroundobstacles=Stepoveraroundobstacles
                        Insert.MNE_Stairclimbingwithhandrails=Stairclimbingwithhandrails
                        Insert.MNE_Jumpingjacks=Jumpingjacks
                        Insert.MNE_Sittingontherapybal=Sittingontherapybal
                        Insert.MNE_AddUser= data['id']
                        Insert.MNE_AddDate = datetime.datetime.now()
                        Insert.MNE_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'OT Equilibrium Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewOTEquilibriumCoordinationForm', methods=['GET','POST'])
def viewOTEquilibriumCoordinationForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewOTEquilibriumCoordinationForm,
                                session.query(Model.models.Application.M_Equilibrium.MNEID.label('ID'),
                                            Model.models.Application.M_Equilibrium.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingwithnormalbaseofsupport.label('Standingwithnormalbaseofsupport'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingwithnarrowbaseofsupport.label('Standingwithnarrowbaseofsupport'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingintandemposition.label('Standingintandemposition'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingononefeet.label('Standingononefeet'),
                                            Model.models.Application.M_Equilibrium.MNE_Perturbation.label('Perturbation'),
                                            Model.models.Application.M_Equilibrium.MNE_Standinginfunctionalreach.label('Standinginfunctionalreach'),
                                            Model.models.Application.M_Equilibrium.MNE_Standinglateralflexionofthetrunktoeachside.label('Standinglateralflexionofthetrunktoeachside'),
                                            Model.models.Application.M_Equilibrium.MNE_Tandemwalking.label('Tandemwalking'),
                                            Model.models.Application.M_Equilibrium.MNE_WalkingInastraightline.label('WalkingInastraightline'),
                                            Model.models.Application.M_Equilibrium.MNE_Walksidewaysbackwards.label('Walksidewaysbackwards'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkinhorizontalvertical.label('Walkinhorizontalvertical'),
                                            Model.models.Application.M_Equilibrium.MNE_Marchinplace.label('Marchinplace'),
                                            Model.models.Application.M_Equilibrium.MNE_Startstopabruptly.label('Startstopabruptly'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkandpivotincommand.label('Walkandpivotincommand'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkincircle.label('Walkincircle'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkonheelsandtoes.label('Walkonheelsandtoes'),
                                            Model.models.Application.M_Equilibrium.MNE_Turnsoncommand.label('Turnsoncommand'),
                                            Model.models.Application.M_Equilibrium.MNE_Stepoveraroundobstacles.label('Stepoveraroundobstacles'),
                                            Model.models.Application.M_Equilibrium.MNE_Stairclimbingwithhandrails.label('Stairclimbingwithhandrails'),
                                            Model.models.Application.M_Equilibrium.MNE_Jumpingjacks.label('Jumpingjacks'),
                                            Model.models.Application.M_Equilibrium.MNE_Sittingontherapybal.label('Sittingontherapybal'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MNE_IsActive=1,MNE_IsDeleted=0
                                ).order_by(Model.models.Application.M_Equilibrium.MNEID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

#######################################
@app.route('/getOTCognitionAndPerceptionSkillsForm', methods=['POST','GET'])
def getOTCognitionAndPerceptionSkillsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_OTCognition.MOCID.label('Id'),
                            Model.models.Application.M_OTCognition.MOC_Praxis.label('MOC_Praxis'),
                            Model.models.Application.M_OTCognition.MOC_Rightleftdiscrimination.label('MOC_Rightleftdiscrimination'),
                            Model.models.Application.M_OTCognition.MOC_Fingerindentification.label('MOC_Fingerindentification'),
                            Model.models.Application.M_OTCognition.MOC_Orientationtoperson.label('MOC_Orientationtoperson'),
                            Model.models.Application.M_OTCognition.MOC_Orientationtoplace.label('MOC_Orientationtoplace'),
                            Model.models.Application.M_OTCognition.MOC_Conceputalseriescompletion.label('MOC_Conceputalseriescompletion'),
                            Model.models.Application.M_OTCognition.MOC_Selectiveattention.label('MOC_Selectiveattention'),
                            Model.models.Application.M_OTCognition.MOC_Focusedattention.label('MOC_Focusedattention'),
                            Model.models.Application.M_OTCognition.MOC_Spatialperception.label('MOC_Spatialperception'),
                            Model.models.Application.M_OTCognition.MOC_Visualmemory.label('MOC_Visualmemory'),
                            Model.models.Application.M_OTCognition.MOC_Verbalmemory.label('MOC_Verbalmemory'),
                            Model.models.Application.M_OTCognition.MOC_Identificationofobjects.label('MOC_Identificationofobjects'),
                            Model.models.Application.M_OTCognition.MOC_Proverbinterpretation.label('MOC_Proverbinterpretation'),
                            Model.models.Application.M_OTCognition.MOC_Randomlettertest.label('MOC_Randomlettertest'),
                            Model.models.Application.M_OTCognition.MOC_Overlappingfigures.label('MOC_Overlappingfigures')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MOC_IsActive=1,MOC_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTCognition.MOCID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.OTCognitionAndPerceptionSkillsForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='OTCognitionAndPerceptionSkillsForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    yesno = Common_Function.CommonFun.yesno()


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MOC_Praxis
                        getTextField[1]['value'] = queryResult[0].MOC_Rightleftdiscrimination
                        getTextField[2]['value'] = queryResult[0].MOC_Fingerindentification
                        getTextField[3]['value'] = queryResult[0].MOC_Orientationtoperson
                        getTextField[4]['value'] = queryResult[0].MOC_Orientationtoplace
                        getTextField[5]['value'] = queryResult[0].MOC_Conceputalseriescompletion
                        getTextField[6]['value'] = queryResult[0].MOC_Selectiveattention
                        getTextField[7]['value'] = queryResult[0].MOC_Focusedattention
                        getTextField[8]['value'] = queryResult[0].MOC_Spatialperception
                        getTextField[9]['value'] = queryResult[0].MOC_Visualmemory
                        getTextField[10]['value'] = queryResult[0].MOC_Verbalmemory
                        getTextField[11]['value'] = queryResult[0].MOC_Identificationofobjects
                        getTextField[12]['value'] = queryResult[0].MOC_Proverbinterpretation
                        getTextField[13]['value'] = queryResult[0].MOC_Randomlettertest
                        getTextField[14]['value'] = queryResult[0].MOC_Overlappingfigures
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitOTCognitionAndPerceptionForm',methods=['GET','POST'])
def submitOTCognitionAndPerceptionForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Praxis = request_json.get('Praxis')
                    Rightleftdiscrimination = request_json.get('Rightleftdiscrimination')
                    Fingerindentification = request_json.get('Fingerindentification')
                    Orientationtoperson = request_json.get('Orientationtoperson')
                    Orientationtoplace = request_json.get('Orientationtoplace')
                    Conceputalseriescompletion = request_json.get('Conceputalseriescompletion')
                    Selectiveattention = request_json.get('Selectiveattention')
                    Focusedattention = request_json.get('Focusedattention')
                    Spatialperception = request_json.get('Spatialperception')
                    Visualmemory = request_json.get('Visualmemory')
                    Verbalmemory = request_json.get('Verbalmemory')
                    Identificationofobjects = request_json.get('Identificationofobjects')
                    Proverbinterpretation = request_json.get('Proverbinterpretation')
                    Randomlettertest = request_json.get('Randomlettertest')
                    Overlappingfigures = request_json.get('Overlappingfigures')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_OTCognition()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MOC_Praxis = Praxis
                        Insert.MOC_Rightleftdiscrimination=Rightleftdiscrimination
                        Insert.MOC_Fingerindentification=Fingerindentification
                        Insert.MOC_Orientationtoperson=Orientationtoperson
                        Insert.MOC_Orientationtoplace=Orientationtoplace
                        Insert.MOC_Conceputalseriescompletion=Conceputalseriescompletion
                        Insert.MOC_Selectiveattention=Selectiveattention
                        Insert.MOC_Focusedattention=Focusedattention
                        Insert.MOC_Spatialperception=Spatialperception
                        Insert.MOC_Visualmemory=Visualmemory
                        Insert.MOC_Verbalmemory=Verbalmemory
                        Insert.MOC_Identificationofobjects=Identificationofobjects
                        Insert.MOC_Proverbinterpretation=Proverbinterpretation
                        Insert.MOC_Randomlettertest=Randomlettertest
                        Insert.MOC_Overlappingfigures=Overlappingfigures
                        Insert.MOC_AddUser= data['id']
                        Insert.MOC_AddDate = datetime.datetime.now()
                        Insert.MOC_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'OT Cognition And Perception Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_OTCognition).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MOC_Praxis = Praxis
                        Insert.MOC_Rightleftdiscrimination=Rightleftdiscrimination
                        Insert.MOC_Fingerindentification=Fingerindentification
                        Insert.MOC_Orientationtoperson=Orientationtoperson
                        Insert.MOC_Orientationtoplace=Orientationtoplace
                        Insert.MOC_Conceputalseriescompletion=Conceputalseriescompletion
                        Insert.MOC_Selectiveattention=Selectiveattention
                        Insert.MOC_Focusedattention=Focusedattention
                        Insert.MOC_Spatialperception=Spatialperception
                        Insert.MOC_Visualmemory=Visualmemory
                        Insert.MOC_Verbalmemory=Verbalmemory
                        Insert.MOC_Identificationofobjects=Identificationofobjects
                        Insert.MOC_Proverbinterpretation=Proverbinterpretation
                        Insert.MOC_Randomlettertest=Randomlettertest
                        Insert.MOC_Overlappingfigures=Overlappingfigures
                        Insert.MOC_AddUser= data['id']
                        Insert.MOC_AddDate = datetime.datetime.now()
                        Insert.MOC_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'OT Cognition And Perception Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewOTCognitionAndPerceptionForm', methods=['GET','POST'])
def viewOTCognitionAndPerceptionForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewOTCognitionAndPerceptionForm,
                                session.query(Model.models.Application.M_OTCognition.MOCID.label('ID'),
                                            Model.models.Application.M_OTCognition.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTCognition.MOC_Praxis.label('Praxis'),
                                            Model.models.Application.M_OTCognition.MOC_Rightleftdiscrimination.label('Rightleftdiscrimination'),
                                            Model.models.Application.M_OTCognition.MOC_Fingerindentification.label('Fingerindentification'),
                                            Model.models.Application.M_OTCognition.MOC_Orientationtoperson.label('Orientationtoperson'),
                                            Model.models.Application.M_OTCognition.MOC_Orientationtoplace.label('Orientationtoplace'),
                                            Model.models.Application.M_OTCognition.MOC_Conceputalseriescompletion.label('Conceputalseriescompletion'),
                                            Model.models.Application.M_OTCognition.MOC_Selectiveattention.label('Selectiveattention'),
                                            Model.models.Application.M_OTCognition.MOC_Focusedattention.label('Focusedattention'),
                                            Model.models.Application.M_OTCognition.MOC_Spatialperception.label('Spatialperception'),
                                            Model.models.Application.M_OTCognition.MOC_Visualmemory.label('Visualmemory'),
                                            Model.models.Application.M_OTCognition.MOC_Verbalmemory.label('Verbalmemory'),
                                            Model.models.Application.M_OTCognition.MOC_Identificationofobjects.label('Identificationofobjects'),
                                            Model.models.Application.M_OTCognition.MOC_Proverbinterpretation.label('Proverbinterpretation'),
                                            Model.models.Application.M_OTCognition.MOC_Randomlettertest.label('Randomlettertest'),
                                            Model.models.Application.M_OTCognition.MOC_Overlappingfigures.label('Overlappingfigures'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MOC_IsActive=1,MOC_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTCognition.MOCID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getOTSensoryExamForm', methods=['POST','GET'])
def getOTSensoryExamForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_OTSensoryExam.MSEID.label('Id'),
                            Model.models.Application.M_OTSensoryExam.MSE_Visualtracking.label('MSE_Visualtracking'),
                            Model.models.Application.M_OTSensoryExam.MSE_Choreiformmovements.label('MSE_Choreiformmovements'),
                            Model.models.Application.M_OTSensoryExam.MSE_Tremor.label('MSE_Tremor'),
                            Model.models.Application.M_OTSensoryExam.MSE_Exaggeratedassociated.label('MSE_Exaggeratedassociated'),
                            Model.models.Application.M_OTSensoryExam.MSE_Graphesthesis.label('MSE_Graphesthesis'),
                            Model.models.Application.M_OTSensoryExam.MSE_Stereognosis.label('MSE_Stereognosis'),
                            Model.models.Application.M_OTSensoryExam.MSE_Weightbearinghands.label('MSE_Weightbearinghands'),
                            Model.models.Application.M_OTSensoryExam.MSE_Proneextensionpattern.label('MSE_Proneextensionpattern')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSE_IsActive=1,MSE_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTSensoryExam.MSEID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.OTSensoryExamForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='OTSensoryExamForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    Attendance = Common_Function.CommonFun.Attendance()
                    getTextField[1]['options']= Attendance
                    getTextField[2]['options']= Attendance
                    getTextField[3]['options']= Attendance
                    getTextField[4]['options']= Attendance
                    getTextField[5]['options']= Attendance
                    getTextField[6]['options']= Attendance
                    getTextField[7]['options']= Attendance


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSE_Visualtracking
                        getTextField[1]['value'] = queryResult[0].MSE_Choreiformmovements
                        getTextField[2]['value'] = queryResult[0].MSE_Exaggeratedassociated
                        getTextField[3]['value'] = queryResult[0].MSE_Graphesthesis
                        getTextField[4]['value'] = queryResult[0].MSE_Stereognosis
                        getTextField[5]['value'] = queryResult[0].MSE_Weightbearinghands
                        getTextField[6]['value'] = queryResult[0].MSE_Proneextensionpattern
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitOTSensoryExamForm',methods=['GET','POST'])
def submitOTSensoryExamForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Visualtracking = request_json.get('Visualtracking')
                    Choreiformmovements = request_json.get('Choreiformmovements')
                    Tremor = request_json.get('Tremor')
                    Exaggeratedassociated= request_json.get('Exaggeratedassociated')
                    Graphesthesis= request_json.get('Graphesthesis')
                    Stereognosis= request_json.get('Stereognosis')
                    Weightbearinghands= request_json.get('Weightbearinghands')
                    Proneextensionpattern= request_json.get('Proneextensionpattern')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_OTSensoryExam()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSE_Visualtracking=Visualtracking
                        Insert.MSE_Choreiformmovements=Choreiformmovements
                        Insert.MSE_Tremor=Tremor
                        Insert.MSE_Exaggeratedassociated=Exaggeratedassociated
                        Insert.MSE_Graphesthesis=Graphesthesis
                        Insert.MSE_Stereognosis=Stereognosis
                        Insert.MSE_Weightbearinghands=Weightbearinghands
                        Insert.MSE_Proneextensionpattern=Proneextensionpattern
                        Insert.MSE_AddUser= data['id']
                        Insert.MSE_AddDate = datetime.datetime.now()
                        Insert.MSE_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Sensory Exam Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_OTSensoryExam).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSE_Visualtracking=Visualtracking
                        Insert.MSE_Choreiformmovements=Choreiformmovements
                        Insert.MSE_Tremor=Tremor
                        Insert.MSE_Exaggeratedassociated=Exaggeratedassociated
                        Insert.MSE_Graphesthesis=Graphesthesis
                        Insert.MSE_Stereognosis=Stereognosis
                        Insert.MSE_Weightbearinghands=Weightbearinghands
                        Insert.MSE_Proneextensionpattern=Proneextensionpattern
                        Insert.MSE_AddUser= data['id']
                        Insert.MSE_AddDate = datetime.datetime.now()
                        Insert.MSE_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Sensory Exam Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewOTSensoryExamForm', methods=['GET','POST'])
def viewOTSensoryExamForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewOTSensoryExamForm,
                                session.query(Model.models.Application.M_OTSensoryExam.MSEID.label('ID'),
                                            Model.models.Application.M_OTSensoryExam.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Visualtracking.label('Visual tracking'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Choreiformmovements.label('Choreiform movements'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Tremor.label('Tremor'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Exaggeratedassociated.label('Exaggerated associated'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Graphesthesis.label('Graphesthesis'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Stereognosis.label('Stereognosis'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Weightbearinghands.label('Weight bearing hands'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Proneextensionpattern.label('Prone extension pattern'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSE_IsActive=1,MSE_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTSensoryExam.MSEID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


#######################    Till Here    #################################################################################
@app.route('/getOTSensoryProfileForm', methods=['POST','GET'])
def getOTSensoryProfileForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_OTSensoryProfile.MSPID.label('Id'),
                            Model.models.Application.M_OTSensoryProfile.MSP_Observations.label('MSP_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSP_IsActive=1,MSP_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTSensoryProfile.MSPID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.OTSensoryProfileForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='OTSensoryProfileForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    Attendance = Common_Function.CommonFun.Attendance()
                    getTextField[0]['options']= Attendance
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSP_Observations

                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitOTSensoryProfileForm',methods=['GET','POST'])
def submitOTSensoryProfileForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Observations = request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_OTSensoryProfile()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSP_Observations=Observations
                        Insert.MSP_AddUser= data['id']
                        Insert.MSP_AddDate = datetime.datetime.now()
                        Insert.MSP_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Sensory Profile Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_OTSensoryProfile).get()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSP_Observations=Observations
                        Insert.MSP_AddUser= data['id']
                        Insert.MSP_AddDate = datetime.datetime.now()
                        Insert.MSP_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Sensory Profile Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewOTSensoryProfileForm', methods=['GET','POST'])
def viewOTSensoryProfileForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewOTSensoryProfileForm,
                                session.query(Model.models.Application.M_OTSensoryProfile.MSPID.label('ID'),
                                            Model.models.Application.M_OTSensoryProfile.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTSensoryProfile.MSP_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSP_IsActive=1,MSP_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTSensoryProfile.MSPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAddtionalinfoForm', methods=['POST','GET'])
def getAddtionalinfoForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_Addtionalinfo.MAIID.label('Id'),
                            Model.models.Application.M_Addtionalinfo.MAI_Observations.label('MAI_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MAI_IsActive=1,MAI_IsDeleted=0
                                ).order_by(Model.models.Application.M_Addtionalinfo.MAIID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddtionalinfoForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddtionalinfoForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MAI_Observations

                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitAddtionalinfoForm',methods=['GET','POST'])
def submitAddtionalinfoForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Observations = request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_Addtionalinfo()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    Insert.MAI_Observations=Observations
                    Insert.MAI_AddUser= data['id']
                    Insert.MAI_AddDate = datetime.datetime.now()
                    Insert.MAI_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'Addtional Info Added Successfully'})

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewAddtionalinfoForm', methods=['GET','POST'])
def viewAddtionalinfoForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewAddtionalinfoForm,
                                session.query(Model.models.Application.M_Addtionalinfo.MAIID.label('ID'),
                                            Model.models.Application.M_Addtionalinfo.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_Addtionalinfo.MAI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MAI_IsActive=1,MAI_IsDeleted=0
                                ).order_by(Model.models.Application.M_Addtionalinfo.MAIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPTFunctionalAbilitiesform', methods=['POST','GET'])
def getPTFunctionalAbilitiesform():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTFunctionalAbilities.MFAID.label('Id'),
                            Model.models.Application.M_PTFunctionalAbilities.MFA_GrossMotor.label('MFA_GrossMotor'),
                            Model.models.Application.M_PTFunctionalAbilities.MFA_FineMotor.label('MFA_FineMotor'),
                            Model.models.Application.M_PTFunctionalAbilities.MFA_CommunicationSpeech.label('MFA_CommunicationSpeech'),
                            Model.models.Application.M_PTFunctionalAbilities.MFA_Feeding.label('MFA_Feeding'),
                            Model.models.Application.M_PTFunctionalAbilities.MFA_Playskills.label('MFA_Playskills'),
                            Model.models.Application.M_PTFunctionalAbilities.MFA_ADL.label('MFA_ADL')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MFA_IsActive=1,MFA_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTFunctionalAbilities.MFAID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTFunctionalAbilitiesform,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTFunctionalAbilitiesform',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MFA_GrossMotor
                        getTextField[1]['value'] = queryResult[0].MFA_FineMotor
                        getTextField[2]['value'] = queryResult[0].MFA_CommunicationSpeech
                        getTextField[3]['value'] = queryResult[0].MFA_Feeding
                        getTextField[4]['value'] = queryResult[0].MFA_Playskills
                        getTextField[5]['value'] = queryResult[0].MFA_ADL
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTFunctionalAbilitiesForm',methods=['GET','POST'])
def submitPTFunctionalAbilitiesForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    GrossMotor = request_json.get('GrossMotor')
                    FineMotor = request_json.get('FineMotor')
                    CommunicationSpeech = request_json.get('CommunicationSpeech')
                    Feeding= request_json.get('Feeding')
                    Playskills= request_json.get('Playskills')
                    ADL= request_json.get('ADL')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTFunctionalAbilities()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MFA_GrossMotor=GrossMotor
                        Insert.MFA_FineMotor=FineMotor
                        Insert.MFA_CommunicationSpeech=CommunicationSpeech
                        Insert.MFA_Feeding= Feeding
                        Insert.MFA_Playskills=Playskills
                        Insert.MFA_ADL=ADL
                        Insert.MFA_AddUser= data['id']
                        Insert.MFA_AddDate = datetime.datetime.now()
                        Insert.MFA_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Functional Abilities Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTFunctionalAbilities).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MFA_GrossMotor=GrossMotor
                        Insert.MFA_FineMotor=FineMotor
                        Insert.MFA_CommunicationSpeech=CommunicationSpeech
                        Insert.MFA_Feeding= Feeding
                        Insert.MFA_Playskills=Playskills
                        Insert.MFA_ADL=ADL
                        Insert.MFA_AddUser= data['id']
                        Insert.MFA_AddDate = datetime.datetime.now()
                        Insert.MFA_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Functional Abilities Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTFunctionalAbilitiesForm', methods=['GET','POST'])
def viewPTFunctionalAbilitiesForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTFunctionalAbilitiesForm,
                                session.query(Model.models.Application.M_PTFunctionalAbilities.MFAID.label('ID'),
                                            Model.models.Application.M_PTFunctionalAbilities.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_GrossMotor.label('Gross Motor'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_FineMotor.label('Fine Motor'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_CommunicationSpeech.label('Communication Speech'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_Feeding.label('Feeding'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_Playskills.label('Playskills'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_ADL.label('ADL'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MFA_IsActive=1,MFA_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTFunctionalAbilities.MFAID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getPTFunctionalLimitationsform', methods=['POST','GET'])
def getPTFunctionalLimitationsform():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTFunctionalLimitations.MFLID.label('Id'),
                            Model.models.Application.M_PTFunctionalLimitations.MFL_GrossMotor.label('MFL_GrossMotor'),
                            Model.models.Application.M_PTFunctionalLimitations.MFL_FineMotor.label('MFL_FineMotor'),
                            Model.models.Application.M_PTFunctionalLimitations.MFL_CommunicationSpeech.label('MFL_CommunicationSpeech'),
                            Model.models.Application.M_PTFunctionalLimitations.MFL_Feeding.label('MFL_Feeding'),
                            Model.models.Application.M_PTFunctionalLimitations.MFL_Playskills.label('MFL_Playskills'),
                            Model.models.Application.M_PTFunctionalLimitations.MFL_ADL.label('MFL_ADL')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MFL_IsActive=1,MFL_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTFunctionalLimitations.MFLID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTFunctionalLimitationsform,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTFunctionalLimitationsform',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MFL_GrossMotor
                        getTextField[1]['value'] = queryResult[0].MFL_FineMotor
                        getTextField[2]['value'] = queryResult[0].MFL_CommunicationSpeech
                        getTextField[3]['value'] = queryResult[0].MFL_Feeding
                        getTextField[4]['value'] = queryResult[0].MFL_Playskills
                        getTextField[5]['value'] = queryResult[0].MFL_ADL
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTFunctionalLimitationsForm',methods=['GET','POST'])
def submitPTFunctionalLimitationsForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    GrossMotor = request_json.get('GrossMotor')
                    FineMotor = request_json.get('FineMotor')
                    CommunicationSpeech = request_json.get('CommunicationSpeech')
                    Feeding= request_json.get('Feeding')
                    Playskills= request_json.get('Playskills')
                    ADL= request_json.get('ADL')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTFunctionalLimitations()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MFL_GrossMotor=GrossMotor
                        Insert.MFL_FineMotor=FineMotor
                        Insert.MFL_CommunicationSpeech=CommunicationSpeech
                        Insert.MFL_Feeding= Feeding
                        Insert.MFL_Playskills=Playskills
                        Insert.MFL_ADL=ADL
                        Insert.MFL_AddUser= data['id']
                        Insert.MFL_AddDate = datetime.datetime.now()
                        Insert.MFL_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Functional Limitations Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTFunctionalLimitations).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MFL_GrossMotor=GrossMotor
                        Insert.MFL_FineMotor=FineMotor
                        Insert.MFL_CommunicationSpeech=CommunicationSpeech
                        Insert.MFL_Feeding= Feeding
                        Insert.MFL_Playskills=Playskills
                        Insert.MFL_ADL=ADL
                        Insert.MFL_AddUser= data['id']
                        Insert.MFL_AddDate = datetime.datetime.now()
                        Insert.MFL_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Functional Limitations Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTFunctionalLimitationsForm', methods=['GET','POST'])
def viewPTFunctionalLimitationsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTFunctionalLimitationsForm,
                                session.query(Model.models.Application.M_PTFunctionalLimitations.MFLID.label('ID'),
                                            Model.models.Application.M_PTFunctionalLimitations.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_GrossMotor.label('Gross Motor'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_FineMotor.label('Fine Motor'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_CommunicationSpeech.label('Communication Speech'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_Feeding.label('Feeding'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_Playskills.label('Playskills'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_ADL.label('ADL'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MFL_IsActive=1,MFL_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTFunctionalLimitations.MFLID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


###########################################################
@app.route('/getPTPosturalSystemAlignmentForm', methods=['POST','GET'])
def getPTPosturalSystemAlignmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PosturalSystemAlignments.MPSAID.label('Id'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HeadNeck.label('MPSA_HeadNeck'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShoulderScapular.label('MPSA_ShoulderScapular'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShoulderandScapular.label('MPSA_ShoulderandScapular'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShouldernScapular.label('MPSA_ShouldernScapular'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_RibcageandChest.label('MPSA_RibcageandChest'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Trunk.label('MPSA_Trunk'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Trunks.label('MPSA_Trunks'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_PelvicComplexRight.label('MPSA_PelvicComplexRight'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_PelvicComplexLeft.label('MPSA_PelvicComplexLeft'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointAbduction.label('MPSA_HipjointAbduction'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointAdduction.label('MPSA_HipjointAdduction'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointRotation.label('MPSA_HipjointRotation'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Symmetrical.label('MPSA_Symmetrical'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Assymetrical.label('MPSA_Assymetrical'),
                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Observations.label('MPSA_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPSA_IsActive=1,MPSA_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemAlignments.MPSAID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTPosturalSystemAlignmentForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTPosturalSystemAlignmentForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    yesno = Common_Function.CommonFun.yesno()
                    ShoulderScapular = Common_Function.CommonFun.ShoulderScapular()
                    ShoulderandScapular = Common_Function.CommonFun.ShoulderandScapular()
                    ShouldernScapular = Common_Function.CommonFun.ShouldernScapular()
                    RibcageandChest = Common_Function.CommonFun.RibcageandChest()
                    Trunk = Common_Function.CommonFun.Trunk()
                    Trunks = Common_Function.CommonFun.Trunks()
                    PelvicComplexRight = Common_Function.CommonFun.PelvicComplexRight()
                    PelvicComplexLeft = Common_Function.CommonFun.PelvicComplexLeft()
                    HipjointRotation= Common_Function.CommonFun.HipjointRotation()

                    getTextField[1]['options']= ShoulderScapular
                    getTextField[2]['options']= ShoulderandScapular
                    getTextField[3]['options']= ShouldernScapular
                    getTextField[4]['options']= RibcageandChest
                    getTextField[5]['options']= Trunk
                    getTextField[6]['options']= Trunks
                    getTextField[7]['options']= PelvicComplexRight
                    getTextField[8]['options']= PelvicComplexLeft

                    getTextField[9]['options']= yesno
                    getTextField[10]['options']= yesno
                    getTextField[11]['options']= HipjointRotation
                    getTextField[12]['options']= yesno
                    getTextField[13]['options']= yesno
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MPSA_HeadNeck
                        getTextField[1]['value'] = queryResult[0].MPSA_ShoulderScapular
                        getTextField[2]['value'] = queryResult[0].MPSA_ShoulderandScapular
                        getTextField[3]['value'] = queryResult[0].MPSA_ShouldernScapular
                        getTextField[4]['value'] = queryResult[0].MPSA_RibcageandChest
                        getTextField[5]['value'] = queryResult[0].MPSA_Trunk
                        getTextField[6]['value'] = queryResult[0].MPSA_Trunks
                        getTextField[7]['value'] = queryResult[0].MPSA_PelvicComplexRight
                        getTextField[8]['value'] = queryResult[0].MPSA_PelvicComplexLeft
                        getTextField[9]['value'] = queryResult[0].MPSA_HipjointAbduction
                        getTextField[10]['value'] = queryResult[0].MPSA_HipjointAdduction
                        getTextField[11]['value'] = queryResult[0].MPSA_HipjointRotation
                        getTextField[12]['value'] = queryResult[0].MPSA_Symmetrical
                        getTextField[13]['value'] = queryResult[0].MPSA_Assymetrical
                        getTextField[14]['value'] = queryResult[0].MPSA_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTPosturalSystemAlignmentForm',methods=['GET','POST'])
def submitPTPosturalSystemAlignmentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    HeadNeck = request_json.get('HeadNeck')
                    ShoulderScapular = request_json.get('ShoulderScapular')
                    ShoulderandScapular = request_json.get('ShoulderandScapular')
                    ShouldernScapular= request_json.get('ShouldernScapular')
                    RibcageandChest= request_json.get('RibcageandChest')
                    Trunk= request_json.get('Trunk')
                    Trunks = request_json.get('Trunks')
                    PelvicComplexRight = request_json.get('PelvicComplexRight')
                    PelvicComplexLeft = request_json.get('PelvicComplexLeft')
                    HipjointAbduction= request_json.get('HipjointAbduction')
                    HipjointAdduction= request_json.get('HipjointAdduction')

                    HipjointRotation = request_json.get('HipjointRotation')
                    Symmetrical= request_json.get('Symmetrical')
                    Assymetrical= request_json.get('Assymetrical')
                    Observations= request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PosturalSystemAlignments()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPSA_HeadNeck=HeadNeck
                        Insert.MPSA_ShoulderScapular=ShoulderScapular
                        Insert.MPSA_ShoulderandScapular=ShoulderandScapular
                        Insert.MPSA_ShouldernScapular= ShouldernScapular
                        Insert.MPSA_RibcageandChest=RibcageandChest
                        Insert.MPSA_Trunk=Trunk
                        Insert.MPSA_Trunks=Trunks
                        Insert.MPSA_PelvicComplexRight=PelvicComplexRight
                        Insert.MPSA_PelvicComplexLeft= PelvicComplexLeft
                        Insert.MPSA_HipjointAbduction=HipjointAbduction
                        Insert.MPSA_HipjointAdduction=HipjointAdduction
                        Insert.MPSA_HipjointRotation = HipjointRotation
                        Insert.MPSA_Symmetrical= Symmetrical
                        Insert.MPSA_Assymetrical=Assymetrical
                        Insert.MPSA_Observations=Observations
                        Insert.MPSA_AddUser= data['id']
                        Insert.MPSA_AddDate = datetime.datetime.now()
                        Insert.MPSA_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Postural System Alignment Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PosturalSystemAlignments).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPSA_HeadNeck=HeadNeck
                        Insert.MPSA_ShoulderScapular=ShoulderScapular
                        Insert.MPSA_ShoulderandScapular=ShoulderandScapular
                        Insert.MPSA_ShouldernScapular= ShouldernScapular
                        Insert.MPSA_RibcageandChest=RibcageandChest
                        Insert.MPSA_Trunk=Trunk
                        Insert.MPSA_Trunks=Trunks
                        Insert.MPSA_PelvicComplexRight=PelvicComplexRight
                        Insert.MPSA_PelvicComplexLeft= PelvicComplexLeft
                        Insert.MPSA_HipjointAbduction=HipjointAbduction
                        Insert.MPSA_HipjointAdduction=HipjointAdduction
                        Insert.MPSA_HipjointRotation = HipjointRotation
                        Insert.MPSA_Symmetrical= Symmetrical
                        Insert.MPSA_Assymetrical=Assymetrical
                        Insert.MPSA_Observations=Observations
                        Insert.MPSA_AddUser= data['id']
                        Insert.MPSA_AddDate = datetime.datetime.now()
                        Insert.MPSA_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Postural System Alignment Updated Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTPosturalSystemAlignmentForm', methods=['GET','POST'])
def viewPTPosturalSystemAlignmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTPosturalSystemAlignmentForm,
                                session.query(Model.models.Application.M_PosturalSystemAlignments.MPSAID.label('ID'),
                                            Model.models.Application.M_PosturalSystemAlignments.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HeadNeck.label('Head Neck'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShoulderScapular.label('Shoulder Scapular'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShoulderandScapular.label('Shoulder and Scapular'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShouldernScapular.label('Shouldern Scapular'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_RibcageandChest.label('Ribcage and Chest'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Trunk.label('Trunk'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Trunks.label('Trunks'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_PelvicComplexRight.label('Pelvic Complex Right'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_PelvicComplexLeft.label('Pelvic Complex Left'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointAbduction.label('Hipjoint Abduction'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointAdduction.label('Hipjoint Adduction'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointRotation.label('Hipjoint Rotation'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Symmetrical.label('Symmetrical'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Assymetrical.label('Assymetrical'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MPSA_IsActive=1,MPSA_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemAlignments.MPSAID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPTPosturalSystemBOSForm', methods=['POST','GET'])
def getPTPosturalSystemBOSForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PosturalSystemBOS.MPSBID.label('Id'),
                            Model.models.Application.M_PosturalSystemBOS.MPSB_BaseofSupport.label('MPSB_BaseofSupport')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPSB_IsActive=1,MPSB_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemBOS.MPSBID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTPosturalSystemBOSForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTPosturalSystemBOSForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    BaseofSupport= Common_Function.CommonFun.BaseofSupport()
                    getTextField[0]['options']= BaseofSupport
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MPSB_BaseofSupport
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTPosturalSystemBOSForm',methods=['GET','POST'])
def submitPTPosturalSystemBOSForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    BaseofSupport = request_json.get('BaseofSupport')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PosturalSystemBOS()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPSB_BaseofSupport=BaseofSupport
                        Insert.MPSB_AddUser= data['id']
                        Insert.MPSB_AddDate = datetime.datetime.now()
                        Insert.MPSB_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Postural System BOS Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PosturalSystemBOS).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPSB_BaseofSupport=BaseofSupport
                        Insert.MPSB_AddUser= data['id']
                        Insert.MPSB_AddDate = datetime.datetime.now()
                        Insert.MPSB_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Postural System BOS Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTPosturalSystemBOSForm', methods=['GET','POST'])
def viewPTPosturalSystemBOSForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTPosturalSystemBOSForm,
                                session.query(Model.models.Application.M_PosturalSystemBOS.MPSBID.label('ID'),
                                            Model.models.Application.M_PosturalSystemBOS.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemBOS.MPSB_BaseofSupport.label('Base of Support'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MPSB_IsActive=1,MPSB_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemBOS.MPSBID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getPTPosturalSystemCOMForm', methods=['POST','GET'])
def getPTPosturalSystemCOMForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PosturalSystemCOM.MPSCID.label('Id'),
                            Model.models.Application.M_PosturalSystemCOM.MPSC_CenterofMass.label('MPSC_CenterofMass'),
                            Model.models.Application.M_PosturalSystemCOM.MPSC_Withinsupport.label('MPSC_Withinsupport'),
                            Model.models.Application.M_PosturalSystemCOM.MPSC_Strategiesposture.label('MPSC_Strategiesposture')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPSC_IsActive=1,MPSC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemCOM.MPSCID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTPosturalSystemCOMForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTPosturalSystemCOMForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    yesno = Common_Function.CommonFun.yesno()
                    CenterofMass = Common_Function.CommonFun.CenterofMass()
                    Strategiesposture = Common_Function.CommonFun.Strategiesposture()
                    getTextField[1]['options']= yesno
                    getTextField[0]['options']= CenterofMass
                    getTextField[2]['options']= Strategiesposture

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MPSC_CenterofMass
                        getTextField[1]['value'] = queryResult[0].MPSC_Withinsupport
                        getTextField[2]['value'] = queryResult[0].MPSC_Strategiesposture
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTPosturalSystemCOMForm',methods=['GET','POST'])
def submitPTPosturalSystemCOMForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    CenterofMass = request_json.get('CenterofMass')
                    Withinsupport = request_json.get('Withinsupport')
                    Strategiesposture = request_json.get('Strategiesposture')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PosturalSystemCOM()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPSC_CenterofMass=CenterofMass
                        Insert.MPSC_Withinsupport=Withinsupport
                        Insert.MPSC_Strategiesposture = Strategiesposture
                        Insert.MPSC_AddUser= data['id']
                        Insert.MPSC_AddDate = datetime.datetime.now()
                        Insert.MPSC_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Postural System COM Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PosturalSystemCOM).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPSC_CenterofMass=CenterofMass
                        Insert.MPSC_Withinsupport=Withinsupport
                        Insert.MPSC_Strategiesposture = Strategiesposture
                        Insert.MPSC_AddUser= data['id']
                        Insert.MPSC_AddDate = datetime.datetime.now()
                        Insert.MPSC_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Postural System COM Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTPosturalSystemCOMForm', methods=['GET','POST'])
def viewPTPosturalSystemCOMForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTPosturalSystemCOMForm,
                                session.query(Model.models.Application.M_PosturalSystemCOM.MPSCID.label('ID'),
                                            Model.models.Application.M_PosturalSystemCOM.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemCOM.MPSC_CenterofMass.label('Center of Mass'),
                                            Model.models.Application.M_PosturalSystemCOM.MPSC_Withinsupport.label('Within support'),
                                            Model.models.Application.M_PosturalSystemCOM.MPSC_Strategiesposture.label('Strategies posture'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MPSC_IsActive=1,MPSC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemCOM.MPSCID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getPTAnticipatoryControlFrom', methods=['POST','GET'])
def getPTAnticipatoryControlFrom():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTAnticipatoryControl.MACID.label('Id'),
                            Model.models.Application.M_PTAnticipatoryControl.MAC_Canchildanti.label('MAC_Canchildanti'),
                            Model.models.Application.M_PTAnticipatoryControl.MAC_Observations.label('MAC_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MAC_IsActive=1,MAC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTAnticipatoryControl.MACID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTAnticipatoryControlFrom,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTAnticipatoryControlFrom',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    yesno = Common_Function.CommonFun.yesno()
                    getTextField[0]['options']= yesno
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MAC_Canchildanti
                        getTextField[1]['value'] = queryResult[0].MAC_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTAnticipatoryControlForm',methods=['GET','POST'])
def submitPTAnticipatoryControlForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Observations = request_json.get('Observations')
                    Canchildanti = request_json.get('Canchildanti')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTAnticipatoryControl()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MAC_Canchildanti=Canchildanti
                        Insert.MAC_Observations=Observations
                        Insert.MAC_AddUser= data['id']
                        Insert.MAC_AddDate = datetime.datetime.now()
                        Insert.MAC_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Anticipatory Control Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTAnticipatoryControl).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MAC_Canchildanti=Canchildanti
                        Insert.MAC_Observations=Observations
                        Insert.MAC_AddUser= data['id']
                        Insert.MAC_AddDate = datetime.datetime.now()
                        Insert.MAC_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Anticipatory Control Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTAnticipatoryControlForm', methods=['GET','POST'])
def viewPTAnticipatoryControlForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTAnticipatoryControlForm,
                                session.query(Model.models.Application.M_PTAnticipatoryControl.MACID.label('ID'),
                                            Model.models.Application.M_PTAnticipatoryControl.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTAnticipatoryControl.MAC_Canchildanti.label('Canchildanti'),
                                            Model.models.Application.M_PTAnticipatoryControl.MAC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MAC_IsActive=1,MAC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTAnticipatoryControl.MACID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPTPosturalCounterbalance', methods=['POST','GET'])
def getPTPosturalCounterbalance():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTPosturalCounterbalance.MPCID.label('Id'),
                            Model.models.Application.M_PTPosturalCounterbalance.MPC_Observations.label('MPC_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPC_IsActive=1,MPC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTPosturalCounterbalance.MPCID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTPosturalCounterbalance,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTPosturalCounterbalance',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MPC_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTPosturalCounterbalanceForm',methods=['GET','POST'])
def submitPTPosturalCounterbalanceForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Observations = request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTPosturalCounterbalance()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPC_Observations=Observations
                        Insert.MPC_AddUser= data['id']
                        Insert.MPC_AddDate = datetime.datetime.now()
                        Insert.MPC_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Postural Counter Balance Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTPosturalCounterbalance).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPC_Observations=Observations
                        Insert.MPC_AddUser= data['id']
                        Insert.MPC_AddDate = datetime.datetime.now()
                        Insert.MPC_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Postural Counter Balance Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTPosturalCounterbalanceForm', methods=['GET','POST'])
def viewPTPosturalCounterbalanceForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTPosturalCounterbalanceForm,
                                session.query(Model.models.Application.M_PTPosturalCounterbalance.MPCID.label('ID'),
                                            Model.models.Application.M_PTPosturalCounterbalance.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTPosturalCounterbalance.MPC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MPC_IsActive=1,MPC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTPosturalCounterbalance.MPCID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPTPosturalImpairments', methods=['POST','GET'])
def getPTPosturalImpairments():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PosturalSystemImpairments.MPSIID.label('Id'),
                            Model.models.Application.M_PosturalSystemImpairments.MPSI_MuscleArchitecture.label('MPSI_MuscleArchitecture'),
                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Anycallosities.label('MPSI_Anycallosities'),
                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Anyotherspecificposture.label('MPSI_Anyotherspecificposture'),
                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Observations.label('MPSI_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPSI_IsActive=1,MPSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemImpairments.MPSIID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTPosturalImpairments,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTPosturalImpairments',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    yesno = Common_Function.CommonFun.yesno()
                    MuscleArchitecture= Common_Function.CommonFun.MuscleArchitecture()
                    getTextField[1]['options']= yesno
                    getTextField[0]['options']= MuscleArchitecture
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MPSI_MuscleArchitecture
                        getTextField[1]['value'] = queryResult[0].MPSI_Anycallosities
                        getTextField[2]['value'] = queryResult[0].MPSI_Anyotherspecificposture
                        getTextField[3]['value'] = queryResult[0].MPSI_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitPTPosturalSystemImpairments',methods=['GET','POST'])
def submitPTPosturalSystemImpairments():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    MuscleArchitecture = request_json.get('MuscleArchitecture')
                    Anycallosities = request_json.get('Anycallosities')
                    Anyotherspecificposture = request_json.get('Anyotherspecificposture')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PosturalSystemImpairments()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPSI_MuscleArchitecture=MuscleArchitecture
                        Insert.MPSI_Anycallosities=Anycallosities
                        Insert.MPSI_Anyotherspecificposture = Anyotherspecificposture
                        Insert.MPSI_Observations = Observations
                        Insert.MPSI_AddUser= data['id']
                        Insert.MPSI_AddDate = datetime.datetime.now()
                        Insert.MPSI_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Postural System Impairments Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PosturalSystemImpairments).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPSI_MuscleArchitecture=MuscleArchitecture
                        Insert.MPSI_Anycallosities=Anycallosities
                        Insert.MPSI_Anyotherspecificposture = Anyotherspecificposture
                        Insert.MPSI_Observations = Observations
                        Insert.MPSI_AddUser= data['id']
                        Insert.MPSI_AddDate = datetime.datetime.now()
                        Insert.MPSI_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Postural System Impairments Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTPosturalSystemImpairments', methods=['GET','POST'])
def viewPTPosturalSystemImpairments():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTPosturalSystemImpairments,
                                session.query(Model.models.Application.M_PosturalSystemImpairments.MPSIID.label('ID'),
                                            Model.models.Application.M_PosturalSystemImpairments.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_MuscleArchitecture.label('Muscle Architecture'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Anycallosities.label('Anycallosities'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Anyotherspecificposture.label('Anyother specific posture'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MPSI_IsActive=1,MPSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemImpairments.MPSIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPTMovementSystemForm', methods=['POST','GET'])
def getPTMovementSystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTMovementSystem.MPMSID.label('Id'),
                            Model.models.Application.M_PTMovementSystem.MPMS_Cantheyovercome.label('MPMS_Cantheyovercome'),
                            Model.models.Application.M_PTMovementSystem.MPMS_Howdoesthe.label('MPMS_Howdoesthe'),
                            Model.models.Application.M_PTMovementSystem.MPMS_Strategiesused.label('MPMS_Strategiesused')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPMS_IsActive=1,MPMS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementSystem.MPMSID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTMovementSystem,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTMovementSystem',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    yesno = Common_Function.CommonFun.yesno()
                    Howdoesthe= Common_Function.CommonFun.Howdoesthe()
                    getTextField[0]['options']= yesno
                    getTextField[1]['options']= Howdoesthe
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MPMS_Cantheyovercome
                        getTextField[1]['value'] = queryResult[0].MPMS_Howdoesthe
                        getTextField[2]['value'] = queryResult[0].MPMS_Strategiesused
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTMovementSystemForm',methods=['GET','POST'])
def submitPTMovementSystemForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Cantheyovercome = request_json.get('Cantheyovercome')
                    Howdoesthe = request_json.get('Howdoesthe')
                    Strategiesused = request_json.get('Strategiesused')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTMovementSystem()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPMS_Cantheyovercome=Cantheyovercome
                        Insert.MPMS_Howdoesthe=Howdoesthe
                        Insert.MPMS_Strategiesused = Strategiesused
                        Insert.MPMS_AddUser= data['id']
                        Insert.MPMS_AddDate = datetime.datetime.now()
                        Insert.MPMS_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Movement System Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTMovementSystem).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPMS_Cantheyovercome=Cantheyovercome
                        Insert.MPMS_Howdoesthe=Howdoesthe
                        Insert.MPMS_Strategiesused = Strategiesused
                        Insert.MPMS_AddUser= data['id']
                        Insert.MPMS_AddDate = datetime.datetime.now()
                        Insert.MPMS_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Movement System Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTMovementSystemForm', methods=['GET','POST'])
def viewPTMovementSystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTMovementSystemForm,
                                session.query(Model.models.Application.M_PTMovementSystem.MPMSID.label('ID'),
                                            Model.models.Application.M_PTMovementSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMovementSystem.MPMS_Cantheyovercome.label('Canthey overcome'),
                                            Model.models.Application.M_PTMovementSystem.MPMS_Howdoesthe.label('How do'),
                                            Model.models.Application.M_PTMovementSystem.MPMS_Strategiesused.label('Strategies used'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MPMS_IsActive=1,MPMS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementSystem.MPMSID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

###################################################################################
@app.route('/getPTMovementStrategiesForm', methods=['POST','GET'])
def getPTMovementStrategiesForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTMovementStrategies.MMSID.label('Id'),
                            Model.models.Application.M_PTMovementStrategies.MMS_Childgenerallyperformsactivitie.label('MMS_Childgenerallyperformsactivitie'),
                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformLateralweightshifts.label('MMS_CanperformLateralweightshifts'),
                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformLateralweightshiftsleft.label('MMS_CanperformLateralweightshiftsleft'),
                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformDiagonalweightRight.label('MMS_CanperformDiagonalweightRight'),
                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformDiagonalweightLeft.label('MMS_CanperformDiagonalweightLeft'),
                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformneckthoracicspineRight.label('MMS_CanperformneckthoracicspineRight'),
                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformneckthoracicspineLeft.label('MMS_CanperformneckthoracicspineLeft'),
                            Model.models.Application.M_PTMovementStrategies.MMS_HowarethedissociationsPelvicfemoral.label('MMS_HowarethedissociationsPelvicfemoral'),
                            Model.models.Application.M_PTMovementStrategies.MMS_HowaredissociationsInterlimb.label('MMS_HowaredissociationsInterlimb'),
                            Model.models.Application.M_PTMovementStrategies.MMS_HowthedissociationsScapulohumeral.label('MMS_HowthedissociationsScapulohumeral'),
                            Model.models.Application.M_PTMovementStrategies.MMS_HowthedissociationsUpperLowerbody.label('MMS_HowthedissociationsUpperLowerbody'),
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MMS_IsActive=1,MMS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementStrategies.MMSID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTMovementStrategies,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTMovementStrategies',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    yesno = Common_Function.CommonFun.yesno()
                    Childgenerallyperformsactivitie= Common_Function.CommonFun.Childgenerallyperformsactivitie()
                    getTextField[0]['options']= Childgenerallyperformsactivitie
                    getTextField[1]['options']= yesno
                    getTextField[2]['options']= yesno
                    getTextField[3]['options']= yesno
                    getTextField[4]['options']= yesno
                    getTextField[5]['options']= yesno
                    getTextField[6]['options']= yesno
                    getTextField[7]['options']= yesno
                    getTextField[8]['options']= yesno
                    getTextField[9]['options']= yesno
                    getTextField[10]['options']= yesno
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MMS_Childgenerallyperformsactivitie
                        getTextField[1]['value'] = queryResult[0].MMS_CanperformLateralweightshifts
                        getTextField[2]['value'] = queryResult[0].MMS_CanperformLateralweightshiftsleft
                        getTextField[3]['value'] = queryResult[0].MMS_CanperformDiagonalweightRight
                        getTextField[4]['value'] = queryResult[0].MMS_CanperformDiagonalweightLeft
                        getTextField[5]['value'] = queryResult[0].MMS_CanperformneckthoracicspineRight
                        getTextField[6]['value'] = queryResult[0].MMS_CanperformneckthoracicspineLeft
                        getTextField[7]['value'] = queryResult[0].MMS_HowarethedissociationsPelvicfemoral
                        getTextField[8]['value'] = queryResult[0].MMS_HowaredissociationsInterlimb
                        getTextField[9]['value'] = queryResult[0].MMS_HowthedissociationsScapulohumeral
                        getTextField[10]['value'] = queryResult[0].MMS_HowthedissociationsUpperLowerbody
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTMovementStrategiesForm',methods=['GET','POST'])
def submitPTMovementStrategiesForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Childgenerallyperformsactivitie = request_json.get('Childgenerallyperformsactivitie')
                    CanperformLateralweightshifts = request_json.get('CanperformLateralweightshifts')
                    CanperformLateralweightshiftsleft = request_json.get('CanperformLateralweightshiftsleft')
                    CanperformDiagonalweightRight = request_json.get('CanperformDiagonalweightRight')
                    CanperformDiagonalweightLeft = request_json.get('CanperformDiagonalweightLeft')
                    CanperformneckthoracicspineRight = request_json.get('CanperformneckthoracicspineRight')

                    CanperformneckthoracicspineLeft = request_json.get('CanperformneckthoracicspineLeft')
                    HowarethedissociationsPelvicfemoral = request_json.get('HowarethedissociationsPelvicfemoral')
                    HowaredissociationsInterlimb = request_json.get('HowaredissociationsInterlimb')
                    HowthedissociationsScapulohumeral = request_json.get('HowthedissociationsScapulohumeral')
                    HowthedissociationsUpperLowerbody = request_json.get('HowthedissociationsUpperLowerbody')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTMovementStrategies()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MMS_Childgenerallyperformsactivitie=Childgenerallyperformsactivitie
                        Insert.MMS_CanperformLateralweightshifts=CanperformLateralweightshifts
                        Insert.MMS_CanperformLateralweightshiftsleft = CanperformLateralweightshiftsleft
                        Insert.MMS_CanperformDiagonalweightRight=CanperformDiagonalweightRight
                        Insert.MMS_CanperformDiagonalweightLeft=CanperformDiagonalweightLeft
                        Insert.MMS_CanperformneckthoracicspineRight = CanperformneckthoracicspineRight
                        Insert.MMS_CanperformneckthoracicspineLeft=CanperformneckthoracicspineLeft
                        Insert.MMS_HowarethedissociationsPelvicfemoral=HowarethedissociationsPelvicfemoral
                        Insert.MMS_HowaredissociationsInterlimb = HowaredissociationsInterlimb
                        Insert.MMS_HowthedissociationsScapulohumeral=HowthedissociationsScapulohumeral
                        Insert.MMS_HowthedissociationsUpperLowerbody = HowthedissociationsUpperLowerbody
                        Insert.MMS_AddUser= data['id']
                        Insert.MMS_AddDate = datetime.datetime.now()
                        Insert.MMS_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Movement Strategies Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTMovementStrategies).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MMS_Childgenerallyperformsactivitie=Childgenerallyperformsactivitie
                        Insert.MMS_CanperformLateralweightshifts=CanperformLateralweightshifts
                        Insert.MMS_CanperformLateralweightshiftsleft = CanperformLateralweightshiftsleft
                        Insert.MMS_CanperformDiagonalweightRight=CanperformDiagonalweightRight
                        Insert.MMS_CanperformDiagonalweightLeft=CanperformDiagonalweightLeft
                        Insert.MMS_CanperformneckthoracicspineRight = CanperformneckthoracicspineRight
                        Insert.MMS_CanperformneckthoracicspineLeft=CanperformneckthoracicspineLeft
                        Insert.MMS_HowarethedissociationsPelvicfemoral=HowarethedissociationsPelvicfemoral
                        Insert.MMS_HowaredissociationsInterlimb = HowaredissociationsInterlimb
                        Insert.MMS_HowthedissociationsScapulohumeral=HowthedissociationsScapulohumeral
                        Insert.MMS_HowthedissociationsUpperLowerbody = HowthedissociationsUpperLowerbody
                        Insert.MMS_AddUser= data['id']
                        Insert.MMS_AddDate = datetime.datetime.now()
                        Insert.MMS_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Movement Strategies Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTMovementStrategiesForm', methods=['GET','POST'])
def viewPTMovementStrategiesForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTMovementStrategiesForm,
                                session.query(Model.models.Application.M_PTMovementStrategies.MMSID.label('ID'),
                                            Model.models.Application.M_PTMovementStrategies.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_Childgenerallyperformsactivitie.label('Childgenerallyperformsactivitie'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformLateralweightshifts.label('CanperformLateralweightshifts'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformLateralweightshiftsleft.label('CanperformLateralweightshiftsleft'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformDiagonalweightRight.label('CanperformDiagonalweightRight'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformDiagonalweightLeft.label('CanperformDiagonalweightLeft'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformneckthoracicspineRight.label('CanperformneckthoracicspineRight'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformneckthoracicspineLeft.label('CanperformneckthoracicspineLeft'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowarethedissociationsPelvicfemoral.label('HowarethedissociationsPelvicfemoral'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowaredissociationsInterlimb.label('HowaredissociationsInterlimb'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowthedissociationsScapulohumeral.label('HowthedissociationsScapulohumeral'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowthedissociationsUpperLowerbody.label('HowthedissociationsUpperLowerbody'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MMS_IsActive=1,MMS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementStrategies.MMSID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPTRangeSpeedofMovementForm', methods=['POST','GET'])
def getPTRangeSpeedofMovementForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTRangeSpeed.MPMSID.label('Id'),
                            Model.models.Application.M_PTRangeSpeed.MRS_Rangespeedmovement.label('MRS_Rangespeedmovement'),
                            Model.models.Application.M_PTRangeSpeed.MRS_atTrunk.label('MRS_atTrunk'),
                            Model.models.Application.M_PTRangeSpeed.MRS_HowisitatExtremities.label('MRS_HowisitatExtremities')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MRS_IsActive=1,MRS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTRangeSpeed.MPMSID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTRangeSpeedofMovement,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTRangeSpeedofMovement',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    Rangespeedmovement = Common_Function.CommonFun.Rangespeedmovement()
                    getTextField[0]['options']= Rangespeedmovement
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MRS_Rangespeedmovement
                        getTextField[1]['value'] = queryResult[0].MRS_atTrunk
                        getTextField[2]['value'] = queryResult[0].MRS_HowisitatExtremities
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTRangeSpeedofMovementForm',methods=['GET','POST'])
def submitPTRangeSpeedofMovementForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Rangespeedmovement = request_json.get('Rangespeedmovement')
                    atTrunk = request_json.get('atTrunk')
                    HowisitatExtremities = request_json.get('HowisitatExtremities')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTRangeSpeed()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MRS_Rangespeedmovement=Rangespeedmovement
                        Insert.MRS_atTrunk=atTrunk
                        Insert.MRS_HowisitatExtremities = HowisitatExtremities
                        Insert.MRS_AddUser= data['id']
                        Insert.MRS_AddDate = datetime.datetime.now()
                        Insert.MRS_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Range Speed of Movement Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTRangeSpeed).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MRS_Rangespeedmovement=Rangespeedmovement
                        Insert.MRS_atTrunk=atTrunk
                        Insert.MRS_HowisitatExtremities = HowisitatExtremities
                        Insert.MRS_AddUser= data['id']
                        Insert.MRS_AddDate = datetime.datetime.now()
                        Insert.MRS_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Range Speed of Movement Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTRangeSpeedofMovementForm', methods=['GET','POST'])
def viewPTRangeSpeedofMovementForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTRangeSpeedofMovementForm,
                                session.query(Model.models.Application.M_PTRangeSpeed.MPMSID.label('ID'),
                                            Model.models.Application.M_PTRangeSpeed.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTRangeSpeed.MRS_Rangespeedmovement.label('Range Speed Movement'),
                                            Model.models.Application.M_PTRangeSpeed.MRS_atTrunk.label('at Trunk'),
                                            Model.models.Application.M_PTRangeSpeed.MRS_HowisitatExtremities.label('Extremities'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MRS_IsActive=1,MRS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTRangeSpeed.MPMSID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPTStabilityMobilityForm', methods=['POST','GET'])
def getPTStabilityMobilityForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTStabilityMobility.MSMID.label('Id'),
                            Model.models.Application.M_PTStabilityMobility.MSM_StrategiesforStabilityMobility.label('MSM_StrategiesforStabilityMobility')
                           ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSM_IsActive=1,MSM_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTStabilityMobility.MSMID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTStabilityMobility,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTStabilityMobility',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    StabilityMobility= Common_Function.CommonFun.StabilityMobility()
                    getTextField[0]['options']= StabilityMobility

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSM_StrategiesforStabilityMobility
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTStabilityMobilityForm',methods=['GET','POST'])
def submitPTStabilityMobilityForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    StrategiesforStabilityMobility = request_json.get('StrategiesforStabilityMobility')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTStabilityMobility()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSM_StrategiesforStabilityMobility=StrategiesforStabilityMobility
                        Insert.MSM_AddUser= data['id']
                        Insert.MSM_AddDate = datetime.datetime.now()
                        Insert.MSM_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Stability Mobility Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTStabilityMobility).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSM_StrategiesforStabilityMobility=StrategiesforStabilityMobility
                        Insert.MSM_AddUser= data['id']
                        Insert.MSM_AddDate = datetime.datetime.now()
                        Insert.MSM_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Stability Mobility Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTStabilityMobilityForm', methods=['GET','POST'])
def viewPTStabilityMobilityForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTStabilityMobilityForm,
                                session.query(Model.models.Application.M_PTStabilityMobility.MSMID.label('ID'),
                                            Model.models.Application.M_PTStabilityMobility.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTStabilityMobility.MSM_StrategiesforStabilityMobility.label('Mobility Strategies'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSM_IsActive=1,MSM_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTStabilityMobility.MSMID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getPTMovementSystemImpairmentForm', methods=['POST','GET'])
def getPTMovementSystemImpairmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTMovementSystemImpairment.MSIID.label('Id'),
                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Excessivemovementfortasks.label('MSI_Excessivemovementfortasks'),
                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Lackofmovementstaticpostures.label('MSI_Lackofmovementstaticpostures'),
                            Model.models.Application.M_PTMovementSystemImpairment.MSI_IntegrationofPostureMovement.label('MSI_IntegrationofPostureMovement'),
                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Howdoeschildmaintainbalanceintransitions.label('MSI_Howdoeschildmaintainbalanceintransitions'),
                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Accuracyofmovements.label('MSI_Accuracyofmovements'),
                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Observations.label('MSI_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSI_IsActive=1,MSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementSystemImpairment.MSIID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTMovementSystemImpairment,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTMovementSystemImpairment',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSI_Excessivemovementfortasks
                        getTextField[1]['value'] = queryResult[0].MSI_Lackofmovementstaticpostures
                        getTextField[2]['value'] = queryResult[0].MSI_IntegrationofPostureMovement
                        getTextField[3]['value'] = queryResult[0].MSI_Howdoeschildmaintainbalanceintransitions
                        getTextField[4]['value'] = queryResult[0].MSI_Accuracyofmovements
                        getTextField[5]['value'] = queryResult[0].MSI_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTMovementSystemImpairmentForm',methods=['GET','POST'])
def submitPTMovementSystemImpairmentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Lackofmovementstaticpostures = request_json.get('Lackofmovementstaticpostures')
                    Excessivemovementfortasks = request_json.get('Excessivemovementfortasks')
                    IntegrationofPostureMovement = request_json.get('IntegrationofPostureMovement')
                    Howdoeschildmaintainbalanceintransitions= request_json.get('Howdoeschildmaintainbalanceintransitions')
                    Accuracyofmovements= request_json.get('Accuracyofmovements')
                    Observations= request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTMovementSystemImpairment()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSI_Excessivemovementfortasks=Excessivemovementfortasks
                        Insert.MSI_Lackofmovementstaticpostures=Lackofmovementstaticpostures
                        Insert.MSI_Observations=Observations
                        Insert.MSI_IntegrationofPostureMovement= IntegrationofPostureMovement
                        Insert.MSI_Howdoeschildmaintainbalanceintransitions=Howdoeschildmaintainbalanceintransitions
                        Insert.MSI_Accuracyofmovements=Accuracyofmovements
                        Insert.MSI_AddUser= data['id']
                        Insert.MSI_AddDate = datetime.datetime.now()
                        Insert.MSI_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Movement System Impairment Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTMovementSystemImpairment).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSI_Excessivemovementfortasks=Excessivemovementfortasks
                        Insert.MSI_Lackofmovementstaticpostures=Lackofmovementstaticpostures
                        Insert.MSI_Observations=Observations
                        Insert.MSI_IntegrationofPostureMovement= IntegrationofPostureMovement
                        Insert.MSI_Howdoeschildmaintainbalanceintransitions=Howdoeschildmaintainbalanceintransitions
                        Insert.MSI_Accuracyofmovements=Accuracyofmovements
                        Insert.MSI_AddUser= data['id']
                        Insert.MSI_AddDate = datetime.datetime.now()
                        Insert.MSI_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Movement System Impairment Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTMovementSystemImpairmentForm', methods=['GET','POST'])
def viewPTMovementSystemImpairmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTMovementSystemImpairmentForm,
                                session.query(Model.models.Application.M_PTMovementSystemImpairment.MSIID.label('ID'),
                                            Model.models.Application.M_PTMovementSystemImpairment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Excessivemovementfortasks.label('Excessive movement'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Lackofmovementstaticpostures.label('movement StaticPostures'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_IntegrationofPostureMovement.label('Integration of PostureMovement'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Howdoeschildmaintainbalanceintransitions.label('Balance Transitions'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Accuracyofmovements.label('Accuracy of Movements'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSI_IsActive=1,MSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementSystemImpairment.MSIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPTRegulatorySystemForm', methods=['POST','GET'])
def getPTRegulatorySystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTRegulatorySystem.MRSID.label('Id'),
                            Model.models.Application.M_PTRegulatorySystem.MRS_Affect.label('MRS_Affect'),
                            Model.models.Application.M_PTRegulatorySystem.MRS_Arousal.label('MRS_Arousal'),
                            Model.models.Application.M_PTRegulatorySystem.MRS_Attention.label('MRS_Attention'),
                            Model.models.Application.M_PTRegulatorySystem.MRS_Action.label('MRS_Action'),
                            Model.models.Application.M_PTRegulatorySystem.MRS_Observations.label('MRS_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MRS_IsActive=1,MRS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTRegulatorySystem.MRSID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTRegulatorySystemForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTRegulatorySystemForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    Aroused = Common_Function.CommonFun.Aroused()
                    getTextField[0]['options']= Aroused
                    getTextField[1]['options']= Aroused
                    getTextField[2]['options']= Aroused
                    getTextField[3]['options']= Aroused
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MRS_Affect
                        getTextField[1]['value'] = queryResult[0].MRS_Arousal
                        getTextField[2]['value'] = queryResult[0].MRS_Attention
                        getTextField[3]['value'] = queryResult[0].MRS_Action
                        getTextField[4]['value'] = queryResult[0].MRS_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTRegulatorySystemForm',methods=['GET','POST'])
def submitPTRegulatorySystemForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Affect = request_json.get('Affect')
                    Attention = request_json.get('Attention')
                    Action = request_json.get('Action')
                    Arousal= request_json.get('Arousal')
                    Observations= request_json.get('Observations')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTRegulatorySystem()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MRS_Affect=Affect
                        Insert.MRS_Attention=Attention
                        Insert.MRS_Action=Action
                        Insert.MRS_Arousal= Arousal
                        Insert.MRS_Observations=Observations
                        Insert.MRS_AddUser= data['id']
                        Insert.MRS_AddDate = datetime.datetime.now()
                        Insert.MRS_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Regulatory System Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTRegulatorySystem).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MRS_Affect=Affect
                        Insert.MRS_Attention=Attention
                        Insert.MRS_Action=Action
                        Insert.MRS_Arousal= Arousal
                        Insert.MRS_Observations=Observations
                        Insert.MRS_AddUser= data['id']
                        Insert.MRS_AddDate = datetime.datetime.now()
                        Insert.MRS_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Regulatory System Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTRegulatorySystemForm', methods=['GET','POST'])
def viewPTRegulatorySystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTRegulatorySystemForm,
                                session.query(Model.models.Application.M_PTRegulatorySystem.MRSID.label('ID'),
                                            Model.models.Application.M_PTRegulatorySystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Affect.label('Affect'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Arousal.label('Arousal'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Attention.label('Attention'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Action.label('Action'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MRS_IsActive=1,MRS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTRegulatorySystem.MRSID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

#######################################
@app.route('/getPTNeurometerSystemForm', methods=['POST','GET'])
def getPTNeurometerSystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTNeurometerSystem.MPSBID.label('Id'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_Initiation.label('MNS_Initiation'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_Sustenance.label('MNS_Sustenance'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_Termination.label('MNS_Termination'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_Controlandgradation.label('MNS_Controlandgradation'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionConcentric.label('MNS_ContractionConcentric'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionIsometric.label('MNS_ContractionIsometric'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionEccentric.label('MNS_ContractionEccentric'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_CoactivationReciprocalinhibition.label('MNS_CoactivationReciprocalinhibition'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_MasssynergyIsolatedwork.label('MNS_MasssynergyIsolatedwork'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_Dynamicstiffness.label('MNS_Dynamicstiffness'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_Extraneousmovement.label('MNS_Extraneousmovement'),
                            Model.models.Application.M_PTNeurometerSystem.MNS_Observations.label('MNS_Observations'),
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MNS_IsActive=1,MNS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTNeurometerSystem.MPSBID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTNeurometerSystemForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTNeurometerSystemForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    Initiation= Common_Function.CommonFun.Initiation()
                    Sustenance= Common_Function.CommonFun.Sustenance()
                    Termination= Common_Function.CommonFun.Termination()
                    ContractionConcentric= Common_Function.CommonFun.ContractionConcentric()
                    ContractionIsometric= Common_Function.CommonFun.ContractionIsometric()
                    ContractionEccentric= Common_Function.CommonFun.ContractionEccentric()
                    getTextField[0]['options']= Initiation
                    getTextField[1]['options']= Sustenance
                    getTextField[2]['options']= Termination
                    getTextField[4]['options']= ContractionConcentric
                    getTextField[5]['options']= ContractionIsometric
                    getTextField[6]['options']= ContractionEccentric
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MNS_Initiation
                        getTextField[1]['value'] = queryResult[0].MNS_Sustenance
                        getTextField[2]['value'] = queryResult[0].MNS_Termination
                        getTextField[3]['value'] = queryResult[0].MNS_Controlandgradation
                        getTextField[4]['value'] = queryResult[0].MNS_ContractionConcentric
                        getTextField[5]['value'] = queryResult[0].MNS_ContractionIsometric
                        getTextField[6]['value'] = queryResult[0].MNS_ContractionEccentric
                        getTextField[7]['value'] = queryResult[0].MNS_CoactivationReciprocalinhibition
                        getTextField[8]['value'] = queryResult[0].MNS_MasssynergyIsolatedwork
                        getTextField[9]['value'] = queryResult[0].MNS_Dynamicstiffness
                        getTextField[10]['value'] = queryResult[0].MNS_Extraneousmovement
                        getTextField[11]['value'] = queryResult[0].MNS_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTNeurometerSystemForm',methods=['GET','POST'])
def submitPTNeurometerSystemForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Initiation = request_json.get('Initiation')
                    Sustenance = request_json.get('Sustenance')
                    Termination = request_json.get('Termination')
                    Controlandgradation= request_json.get('Controlandgradation')
                    ContractionConcentric= request_json.get('ContractionConcentric')
                    ContractionIsometric= request_json.get('ContractionIsometric')
                    ContractionEccentric= request_json.get('ContractionEccentric')
                    CoactivationReciprocalinhibition= request_json.get('CoactivationReciprocalinhibition')
                    MasssynergyIsolatedwork= request_json.get('MasssynergyIsolatedwork')

                    Dynamicstiffness= request_json.get('Dynamicstiffness')
                    Extraneousmovement= request_json.get('Extraneousmovement')
                    Observations= request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTNeurometerSystem()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MNS_Initiation=Initiation
                        Insert.MNS_Sustenance=Sustenance
                        Insert.MNS_Termination=Termination
                        Insert.MNS_Controlandgradation= Controlandgradation
                        Insert.MNS_ContractionConcentric=ContractionConcentric
                        Insert.MNS_ContractionIsometric=ContractionIsometric
                        Insert.MNS_ContractionEccentric= ContractionEccentric
                        Insert.MNS_CoactivationReciprocalinhibition=CoactivationReciprocalinhibition
                        Insert.MNS_MasssynergyIsolatedwork=MasssynergyIsolatedwork
                        Insert.MNS_Dynamicstiffness= Dynamicstiffness
                        Insert.MNS_Extraneousmovement=Extraneousmovement
                        Insert.MNS_Observations=Observations
                        Insert.MNS_AddUser= data['id']
                        Insert.MNS_AddDate = datetime.datetime.now()
                        Insert.MNS_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Neurometer System Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTNeurometerSystem).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MNS_Initiation=Initiation
                        Insert.MNS_Sustenance=Sustenance
                        Insert.MNS_Termination=Termination
                        Insert.MNS_Controlandgradation= Controlandgradation
                        Insert.MNS_ContractionConcentric=ContractionConcentric
                        Insert.MNS_ContractionIsometric=ContractionIsometric
                        Insert.MNS_ContractionEccentric= ContractionEccentric
                        Insert.MNS_CoactivationReciprocalinhibition=CoactivationReciprocalinhibition
                        Insert.MNS_MasssynergyIsolatedwork=MasssynergyIsolatedwork
                        Insert.MNS_Dynamicstiffness= Dynamicstiffness
                        Insert.MNS_Extraneousmovement=Extraneousmovement
                        Insert.MNS_Observations=Observations
                        Insert.MNS_AddUser= data['id']
                        Insert.MNS_AddDate = datetime.datetime.now()
                        Insert.MNS_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Neurometer System Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewPTNeurometerSystemForm', methods=['GET','POST'])
def viewPTNeurometerSystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTNeurometerSystemForm,
                                session.query(Model.models.Application.M_PTNeurometerSystem.MPSBID.label('ID'),
                                            Model.models.Application.M_PTNeurometerSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Initiation.label('Initiation'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Sustenance.label('Sustenance'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Termination.label('Termination'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Controlandgradation.label('Control and Gradation'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionConcentric.label('Contraction Concentric'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionIsometric.label('Contraction Isometric'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionEccentric.label('Contraction Eccentric'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_CoactivationReciprocalinhibition.label('Reciprocal Inhibition'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_MasssynergyIsolatedwork.label('Isolated work'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Dynamicstiffness.label('Dynamic stiffness'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Extraneousmovement.label('Extraneous Movement'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MNS_IsActive=1,MNS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTNeurometerSystem.MPSBID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()



@app.route('/getPTMusculoskeletalSystemForm', methods=['POST','GET'])
def getPTMusculoskeletalSystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTMusculoskeletalSystem.MKSID.label('Id'),
                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Muscleendurance.label('MKS_Muscleendurance'),
                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Skeletalcomments.label('MKS_Skeletalcomments'),
                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR1.label('MKS_TardieuScaleTR1'),
                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR2.label('MKS_TardieuScaleTR2'),
                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR3.label('MKS_TardieuScaleTR3'),
                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuscaleHamsR1.label('MKS_TardieuscaleHamsR1'),
                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuscaleHamsR2.label('MKS_TardieuscaleHamsR2'),
                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Observations.label('MKS_Observations'),
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MKS_IsActive=1,MKS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMusculoskeletalSystem.MKSID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTMusculoskeletalSystem,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTMusculoskeletalSystem',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    RightLeft= Common_Function.CommonFun.RightLeft()
                    PoorGood= Common_Function.CommonFun.PoorGood()
                    Skeletalcomments= Common_Function.CommonFun.Skeletalcomments()
                    getTextField[0]['options']= PoorGood
                    getTextField[2]['options']= RightLeft
                    getTextField[3]['options']= RightLeft
                    getTextField[4]['options']= RightLeft
                    getTextField[5]['options']= RightLeft
                    getTextField[6]['options']= RightLeft
                    getTextField[1]['options']= Skeletalcomments
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MKS_Muscleendurance
                        getTextField[1]['value'] = queryResult[0].MKS_Skeletalcomments
                        getTextField[2]['value'] = queryResult[0].MKS_TardieuScaleTR1
                        getTextField[3]['value'] = queryResult[0].MKS_TardieuScaleTR2
                        getTextField[4]['value'] = queryResult[0].MKS_TardieuScaleTR3
                        getTextField[5]['value'] = queryResult[0].MKS_TardieuscaleHamsR1
                        getTextField[6]['value'] = queryResult[0].MKS_TardieuscaleHamsR2
                        getTextField[7]['value'] = queryResult[0].MKS_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTMusculoskeletalSystemForm',methods=['GET','POST'])
def submitPTMusculoskeletalSystemForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Muscleendurance = request_json.get('Muscleendurance')
                    Skeletalcomments = request_json.get('Skeletalcomments')
                    TardieuScaleTR1 = request_json.get('TardieuScaleTR1')
                    TardieuScaleTR2= request_json.get('TardieuScaleTR2')
                    TardieuScaleTR3= request_json.get('TardieuScaleTR3')
                    TardieuscaleHamsR1= request_json.get('TardieuscaleHamsR1')
                    TardieuscaleHamsR2= request_json.get('TardieuscaleHamsR2')
                    Observations= request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTMusculoskeletalSystem()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MKS_Muscleendurance=Muscleendurance
                        Insert.MKS_Skeletalcomments=Skeletalcomments
                        Insert.MKS_TardieuScaleTR1=TardieuScaleTR1
                        Insert.MKS_TardieuScaleTR2= TardieuScaleTR2
                        Insert.MKS_TardieuScaleTR3=TardieuScaleTR3
                        Insert.MKS_TardieuscaleHamsR1 = TardieuscaleHamsR1
                        Insert.MKS_TardieuscaleHamsR2= TardieuscaleHamsR2
                        Insert.MKS_Observations=Observations
                        Insert.MKS_AddUser= data['id']
                        Insert.MKS_AddDate = datetime.datetime.now()
                        Insert.MKS_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'PT Musculoskeletal Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTMusculoskeletalSystem).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MKS_Muscleendurance=Muscleendurance
                        Insert.MKS_Skeletalcomments=Skeletalcomments
                        Insert.MKS_TardieuScaleTR1=TardieuScaleTR1
                        Insert.MKS_TardieuScaleTR2= TardieuScaleTR2
                        Insert.MKS_TardieuScaleTR3=TardieuScaleTR3
                        Insert.MKS_TardieuscaleHamsR1 = TardieuscaleHamsR1
                        Insert.MKS_TardieuscaleHamsR2= TardieuscaleHamsR2
                        Insert.MKS_Observations=Observations
                        Insert.MKS_AddUser= data['id']
                        Insert.MKS_AddDate = datetime.datetime.now()
                        Insert.MKS_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'PT Musculoskeletal Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTMusculoskeletalSystemForm', methods=['GET','POST'])
def viewPTMusculoskeletalSystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTMusculoskeletalSystemForm,
                                session.query(Model.models.Application.M_PTMusculoskeletalSystem.MKSID.label('ID'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Muscleendurance.label('Muscle Endurance'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Skeletalcomments.label('Skeletal Comments'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR1.label('Tardieu ScaleTR1'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR2.label('Tardieu ScaleTR2'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR3.label('Tardieu ScaleTR3'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuscaleHamsR1.label('Tardieu ScaleHamsR1'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuscaleHamsR2.label('Tardieu ScaleHamsR2'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MKS_IsActive=1,MKS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMusculoskeletalSystem.MKSID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getPTSensorySystemForm', methods=['POST','GET'])
def getPTSensorySystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTSensorySystem.MSSID.label('Id'),
                            Model.models.Application.M_PTSensorySystem.MSS_sensorymodulationissues.label('MSS_sensorymodulationissues'),
                            Model.models.Application.M_PTSensorySystem.MSS_Visualsystem.label('MSS_Visualsystem'),
                            Model.models.Application.M_PTSensorySystem.MSS_Auditorysystem.label('MSS_Auditorysystem'),
                            Model.models.Application.M_PTSensorySystem.MSS_AuditorysystemResponse.label('MSS_AuditorysystemResponse'),
                            Model.models.Application.M_PTSensorySystem.MSS_Vestibularsystem.label('MSS_Vestibularsystem'),
                            Model.models.Application.M_PTSensorySystem.MSS_Somatosensorysystem.label('MSS_Somatosensorysystem'),
                            Model.models.Application.M_PTSensorySystem.MSS_Oromotorsystem.label('MSS_Oromotorsystem'),
                            Model.models.Application.M_PTSensorySystem.MSS_Olfactorysystem.label('MSS_Olfactorysystem'),
                            Model.models.Application.M_PTSensorySystem.MSS_Observations.label('MSS_Observations'),
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSS_IsActive=1,MSS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTSensorySystem.MSSID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTSensorySystem,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTSensorySystem',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    modulationissues= Common_Function.CommonFun.modulationissues()
                    Visualsystem= Common_Function.CommonFun.Visualsystem()
                    Oromotorsystem= Common_Function.CommonFun.Oromotorsystem()
                    yesno= Common_Function.CommonFun.yesno()
                    Oromotorsystem= Common_Function.CommonFun.Oromotorsystem()
                    Postivenegative= Common_Function.CommonFun.Postivenegative()

                    Couldnotresist= Common_Function.CommonFun.Couldnotresist()

                    getTextField[0]['options']= modulationissues
                    getTextField[1]['options']= Visualsystem
                    getTextField[2]['options']= Postivenegative
                    getTextField[3]['options']= Postivenegative

                    getTextField[6]['options']= Oromotorsystem
                    getTextField[7]['options']= Couldnotresist
                    getTextField[4]['options']=yesno
                    getTextField[5]['options']=yesno
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSS_sensorymodulationissues
                        getTextField[1]['value'] = queryResult[0].MSS_Visualsystem
                        getTextField[2]['value'] = queryResult[0].MSS_Auditorysystem
                        getTextField[3]['value'] = queryResult[0].MSS_AuditorysystemResponse
                        getTextField[4]['value'] = queryResult[0].MSS_Vestibularsystem
                        getTextField[5]['value'] = queryResult[0].MSS_Somatosensorysystem
                        getTextField[6]['value'] = queryResult[0].MSS_Oromotorsystem
                        getTextField[7]['value'] = queryResult[0].MSS_Olfactorysystem
                        getTextField[8]['value'] = queryResult[0].MSS_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTSensorySystemForm',methods=['GET','POST'])
def submitPTSensorySystemForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    sensorymodulationissues = request_json.get('sensorymodulationissues')
                    Visualsystem = request_json.get('Visualsystem')
                    Auditorysystem = request_json.get('Auditorysystem')
                    AuditorysystemResponse= request_json.get('AuditorysystemResponse')
                    Vestibularsystem= request_json.get('Vestibularsystem')
                    Somatosensorysystem= request_json.get('Somatosensorysystem')
                    Oromotorsystem= request_json.get('Oromotorsystem')
                    Olfactorysystem= request_json.get('Olfactorysystem')
                    Observations = request_json.get('Observations')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTSensorySystem()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSS_sensorymodulationissues=sensorymodulationissues
                        Insert.MSS_Visualsystem=Visualsystem
                        Insert.MSS_Auditorysystem=Auditorysystem
                        Insert.MSS_AuditorysystemResponse= AuditorysystemResponse
                        Insert.MSS_Vestibularsystem=Vestibularsystem
                        Insert.MSS_Somatosensorysystem = Somatosensorysystem
                        Insert.MSS_Oromotorsystem= Oromotorsystem
                        Insert.MSS_Olfactorysystem=Olfactorysystem
                        Insert.MSS_Observations = Observations
                        Insert.MSS_AddUser= data['id']
                        Insert.MSS_AddDate = datetime.datetime.now()
                        Insert.MSS_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Sensory System Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTSensorySystem).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSS_sensorymodulationissues=sensorymodulationissues
                        Insert.MSS_Visualsystem=Visualsystem
                        Insert.MSS_Auditorysystem=Auditorysystem
                        Insert.MSS_AuditorysystemResponse= AuditorysystemResponse
                        Insert.MSS_Vestibularsystem=Vestibularsystem
                        Insert.MSS_Somatosensorysystem = Somatosensorysystem
                        Insert.MSS_Oromotorsystem= Oromotorsystem
                        Insert.MSS_Olfactorysystem=Olfactorysystem
                        Insert.MSS_Observations = Observations
                        Insert.MSS_AddUser= data['id']
                        Insert.MSS_AddDate = datetime.datetime.now()
                        Insert.MSS_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Sensory System Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTSensorySystemForm', methods=['GET','POST'])
def viewPTSensorySystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTSensorySystemForm,
                                session.query(Model.models.Application.M_PTSensorySystem.MSSID.label('ID'),
                                            Model.models.Application.M_PTSensorySystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTSensorySystem.MSS_sensorymodulationissues.label('Modulation Issues'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Visualsystem.label('Visual system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Auditorysystem.label('Auditory system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_AuditorysystemResponse.label('Auditory system Response'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Vestibularsystem.label('Vestibular system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Somatosensorysystem.label('Somatosensory system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Oromotorsystem.label('Oromotor system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Olfactorysystem.label('Olfactory system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSS_IsActive=1,MSS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTSensorySystem.MSSID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPTCognitiveSystemForm', methods=['POST','GET'])
def getPTCognitiveSystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PTCognitiveSystem.MCSID.label('Id'),
                            Model.models.Application.M_PTCognitiveSystem.MCS_Intelligence.label('MCS_Intelligence'),
                            Model.models.Application.M_PTCognitiveSystem.MCS_Memory.label('MCS_Memory'),
                            Model.models.Application.M_PTCognitiveSystem.MCS_Adaptability.label('MCS_Adaptability'),
                            Model.models.Application.M_PTCognitiveSystem.MCS_MotorPlanning.label('MCS_MotorPlanning'),
                            Model.models.Application.M_PTCognitiveSystem.MCS_Observations.label('MCS_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MCS_IsActive=1,MCS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTCognitiveSystem.MCSID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.PTCognitiveSystem,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='PTCognitiveSystem',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MCS_Intelligence
                        getTextField[1]['value'] = queryResult[0].MCS_Memory
                        getTextField[2]['value'] = queryResult[0].MCS_Adaptability
                        getTextField[3]['value'] = queryResult[0].MCS_MotorPlanning
                        getTextField[4]['value'] = queryResult[0].MCS_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPTCognitiveSystemForm',methods=['GET','POST'])
def submitPTCognitiveSystemForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Intelligence = request_json.get('Intelligence')
                    Memory = request_json.get('Memory')
                    Adaptability = request_json.get('Adaptability')
                    MotorPlanning= request_json.get('MotorPlanning')
                    Observations= request_json.get('Observations')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PTCognitiveSystem()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MCS_Intelligence=Intelligence
                        Insert.MCS_Memory=Memory
                        Insert.MCS_Adaptability=Adaptability
                        Insert.MCS_MotorPlanning= MotorPlanning
                        Insert.MCS_Observations=Observations
                        Insert.MCS_AddUser= data['id']
                        Insert.MCS_AddDate = datetime.datetime.now()
                        Insert.MCS_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Cognitive System Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PTCognitiveSystem).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MCS_Intelligence=Intelligence
                        Insert.MCS_Memory=Memory
                        Insert.MCS_Adaptability=Adaptability
                        Insert.MCS_MotorPlanning= MotorPlanning
                        Insert.MCS_Observations=Observations
                        Insert.MCS_ModUser= data['id']
                        Insert.MCS_ModDate = datetime.datetime.now()
                        Insert.MCS_AddIP= flask.request.remote_addr
                        
                        session.commit()
                        return jsonify({'msg':'Cognitive System Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPTCognitiveSystemForm', methods=['GET','POST'])
def viewPTCognitiveSystemForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTCognitiveSystemForm,
                                session.query(Model.models.Application.M_PTCognitiveSystem.MCSID.label('ID'),
                                            Model.models.Application.M_PTCognitiveSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Intelligence.label('Intelligence'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Memory.label('Memory'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Adaptability.label('Adaptability'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_MotorPlanning.label('Motor Planning'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MCS_IsActive=1,MCS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTCognitiveSystem.MCSID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getNICHQVanderbiltADHDParentForm', methods=['POST','GET'])
def getNICHQVanderbiltADHDParentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_NICHQVanderbiltADHDParent.MVAID.label('Id'),
                            Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_Score.label('MVA_Score'),
                            Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_Interpretation.label('MVA_Interpretation')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MVA_IsActive=1,MVA_IsDeleted=0
                                ).order_by(Model.models.Application.M_NICHQVanderbiltADHDParent.MVAID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.NICHQVanderbiltADHDParentForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='NICHQVanderbiltADHDParentForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MVA_Score
                        getTextField[1]['value'] = queryResult[0].MVA_Interpretation
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitNICHQVanderbiltADHDParentForm',methods=['GET','POST'])
def submitNICHQVanderbiltADHDParentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Score = request_json.get('Score')
                    Interpretation = request_json.get('Interpretation')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_NICHQVanderbiltADHDParent()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MVA_Score=Score
                        Insert.MVA_Interpretation=Interpretation
                        Insert.MVA_AddUser= data['id']
                        Insert.MVA_AddDate = datetime.datetime.now()
                        Insert.MVA_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'NICHQ Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_NICHQVanderbiltADHDParent).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MVA_Score=Score
                        Insert.MVA_Interpretation=Interpretation
                        Insert.MVA_ModUser= data['id']
                        Insert.MVA_ModDate = datetime.datetime.now()
                        Insert.MVA_AddIP= flask.request.remote_addr
                        
                        session.commit()
                        return jsonify({'msg':'NICHQ Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewNICHQVanderbiltADHDParentForm', methods=['GET','POST'])
def viewNICHQVanderbiltADHDParentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewNICHQVanderbiltADHDParentForm,
                                session.query(Model.models.Application.M_NICHQVanderbiltADHDParent.MVAID.label('ID'),
                                            Model.models.Application.M_NICHQVanderbiltADHDParent.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_Score.label('Score'),
                                            Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_Interpretation.label('Interpretation'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MVA_IsActive=1,MVA_IsDeleted=0
                                ).order_by(Model.models.Application.M_NICHQVanderbiltADHDParent.MVAID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSequinFormBoardTestForm', methods=['POST','GET'])
def getSequinFormBoardTestForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_SequinFormBoardTest.MSFBID.label('Id'),
                            Model.models.Application.M_SequinFormBoardTest.MSFB_MentalAge.label('MSFB_MentalAge'),
                            Model.models.Application.M_SequinFormBoardTest.MSFB_IQ.label('MSFB_IQ'),
                            Model.models.Application.M_SequinFormBoardTest.MSFB_Observations.label('MSFB_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSFB_IsActive=1,MSFB_IsDeleted=0
                                ).order_by(Model.models.Application.M_SequinFormBoardTest.MSFBID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.SequinFormBoardTest,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='SequinFormBoardTest',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSFB_MentalAge
                        getTextField[1]['value'] = queryResult[0].MSFB_IQ
                        getTextField[2]['value'] = queryResult[0].MSFB_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSequinFormBoardTestForm',methods=['GET','POST'])
def submitSequinFormBoardTestForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    MentalAge = request_json.get('MentalAge')
                    IQ = request_json.get('IQ')
                    ShortestTime = request_json.get('ShortestTime')
                    TotalTime = request_json.get('TotalTime')
                    CorrespondsMentalAge = request_json.get('CorrespondsMentalAge')
                    suggestingIntellectualfunctioning = request_json.get('suggestingIntellectualfunctioning')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_SequinFormBoardTest()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSFB_MentalAge=MentalAge
                        Insert.MSFB_IQ=IQ
                        Insert.MSFB_ShortestTime=ShortestTime
                        Insert.MSFB_TotalTime=TotalTime
                        Insert.MSFB_CorrespondsMentalAge=CorrespondsMentalAge
                        Insert.MSFB_suggestingIntellectualfunctioning=suggestingIntellectualfunctioning
                        Insert.MSFB_AddUser= data['id']
                        Insert.MSFB_AddDate = datetime.datetime.now()
                        Insert.MSFB_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Sequine Form Board Test Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_SequinFormBoardTest).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSFB_MentalAge=MentalAge
                        Insert.MSFB_IQ=IQ
                        Insert.MSFB_ShortestTime=ShortestTime
                        Insert.MSFB_TotalTime=TotalTime
                        Insert.MSFB_CorrespondsMentalAge=CorrespondsMentalAge
                        Insert.MSFB_suggestingIntellectualfunctioning=suggestingIntellectualfunctioning
                        Insert.MSFB_ModUser= data['id']
                        Insert.MSFB_ModDate = datetime.datetime.now()
                        Insert.MSFB_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Sequine Form Board Test Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSequinFormBoardTestForm', methods=['GET','POST'])
def viewSequinFormBoardTestForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSequinFormBoardTestForm,
                                session.query(Model.models.Application.M_SequinFormBoardTest.MSFBID.label('ID'),
                                            Model.models.Application.M_SequinFormBoardTest.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SequinFormBoardTest.MSFB_MentalAge.label('Mental Age'),
                                            Model.models.Application.M_SequinFormBoardTest.MSFB_IQ.label('IQ'),
                                            Model.models.Application.M_SequinFormBoardTest.MSFB_ShortestTime.label('Shortest Time'),
                                            Model.models.Application.M_SequinFormBoardTest.MSFB_TotalTime.label('Total Time'),
                                            Model.models.Application.M_SequinFormBoardTest.MSFB_CorrespondsMentalAge.label('Corresponds Mental Age'),
                                            Model.models.Application.M_SequinFormBoardTest.MSFB_suggestingIntellectualfunctioning.label('Suggesting Intellectual Functioning'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSFB_IsActive=1,MSFB_IsDeleted=0
                                ).order_by(Model.models.Application.M_SequinFormBoardTest.MSFBID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getChildhoodAutismRatingScaleForm', methods=['POST','GET'])
def getChildhoodAutismRatingScaleForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_ChildhoodAutismRatingScale.MCARID.label('Id'),
                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Scores.label('MCAR_Scores'),
                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Observations.label('MCAR_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MCAR_IsActive=1,MCAR_IsDeleted=0
                                ).order_by(Model.models.Application.M_ChildhoodAutismRatingScale.MCARID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.ChildhoodAutismRatingScale,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='ChildhoodAutismRatingScale',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MCAR_Scores
                        getTextField[1]['value'] = queryResult[0].MCAR_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitChildhoodAutismRatingScaleForm',methods=['GET','POST'])
def submitChildhoodAutismRatingScaleForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    RelatingtoPeople = request_json.get('RelatingtoPeople')
                    Imitation = request_json.get('Imitation')
                    EmotionalResponse = request_json.get('EmotionalResponse')
                    BodyUse = request_json.get('BodyUse')
                    ObjectUse = request_json.get('ObjectUse')
                    AdaptationtoChange = request_json.get('AdaptationtoChange')
                    VisualResponse = request_json.get('VisualResponse')
                    ListeningResponse = request_json.get('ListeningResponse')
                    TasteSmellUse = request_json.get('TasteSmellUse')
                    Fearornervousness = request_json.get('Fearornervousness')
                    VerbalCommunication = request_json.get('VerbalCommunication')
                    NonverbalCommunication = request_json.get('NonverbalCommunication')
                    ActivityLevel = request_json.get('ActivityLevel')
                    Consistencyresponse = request_json.get('Consistencyresponse')
                    GeneralImpression = request_json.get('GeneralImpression')
                    Concludinremark = request_json.get('Concludinremark')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_ChildhoodAutismRatingScale()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MCAR_RelatingtoPeople=RelatingtoPeople
                        Insert.MCAR_Imitation=Imitation
                        Insert.MCAR_EmotionalResponse=EmotionalResponse
                        Insert.MCAR_BodyUse=BodyUse
                        Insert.MCAR_ObjectUse=ObjectUse
                        Insert.MCAR_AdaptationChange=AdaptationtoChange
                        Insert.MCAR_VisualResponse=VisualResponse
                        Insert.MCAR_ListeningResponse=ListeningResponse
                        Insert.MCAR_TasteSmellUse=TasteSmellUse
                        Insert.MCAR_Fearornervousness=Fearornervousness
                        Insert.MCAR_Verbal=VerbalCommunication
                        Insert.MCAR_Nonverbal=NonverbalCommunication
                        Insert.MCAR_ActivityLevel=ActivityLevel
                        Insert.MCAR_Consistencyresponse=Consistencyresponse
                        Insert.MCAR_GeneralImpression=GeneralImpression
                        Insert.MCAR_Concludinremark=Concludinremark
                        Insert.MCAR_AddUser = data['id']
                        Insert.MCAR_AddDate = datetime.datetime.now()
                        Insert.MCAR_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Childhood Autism Rating Scale Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_ChildhoodAutismRatingScale).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MCAR_RelatingtoPeople=RelatingtoPeople
                        Insert.MCAR_Imitation=Imitation
                        Insert.MCAR_EmotionalResponse=EmotionalResponse
                        Insert.MCAR_BodyUse=BodyUse
                        Insert.MCAR_ObjectUse=ObjectUse
                        Insert.MCAR_AdaptationChange=AdaptationtoChange
                        Insert.MCAR_VisualResponse=VisualResponse
                        Insert.MCAR_ListeningResponse=ListeningResponse
                        Insert.MCAR_TasteSmellUse=TasteSmellUse
                        Insert.MCAR_Fearornervousness=Fearornervousness
                        Insert.MCAR_Verbal=VerbalCommunication
                        Insert.MCAR_Nonverbal=NonverbalCommunication
                        Insert.MCAR_ActivityLevel=ActivityLevel
                        Insert.MCAR_Consistencyresponse=Consistencyresponse
                        Insert.MCAR_GeneralImpression=GeneralImpression
                        Insert.MCAR_Concludinremark=Concludinremark
                        Insert.MCAR_AddUser= data['id']
                        Insert.MCAR_AddDate = datetime.datetime.now()
                        Insert.MCAR_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Childhood Autism Rating Scale Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewChildhoodAutismRatingScaleForm', methods=['GET','POST'])
def viewChildhoodAutismRatingScaleForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewChildhoodAutismRatingScaleForm,
                                session.query(Model.models.Application.M_ChildhoodAutismRatingScale.MCARID.label('ID'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_RelatingtoPeople.label('Relating to People'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Imitation.label('Imitation'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_EmotionalResponse.label('Emotional Response'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_BodyUse.label('Body Use'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_ObjectUse.label('Object Use'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_AdaptationChange.label('Daptation Change'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_VisualResponse.label('Visual Response'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_ListeningResponse.label('Listening Response'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_TasteSmellUse.label('Taste Smell Use'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Fearornervousness.label('Fear or Nervousness'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Verbal.label('Verbal'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Nonverbal.label('Non Verbal'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_ActivityLevel.label('Activity Level'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Consistencyresponse.label('Consistency Response'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_GeneralImpression.label('General Impression'),
                                            Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Concludinremark.label('Concluding Remark')
                                            
                                                ).filter_by(M_Patient_MPID=pid,MCAR_IsActive=1,MCAR_IsDeleted=0
                                ).order_by(Model.models.Application.M_ChildhoodAutismRatingScale.MCARID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()



@app.route('/getVinelandSocialMaturityScaleForm', methods=['POST','GET'])
def getVinelandSocialMaturityScaleForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_VinelandSocialMaturityScale.MVAMID.label('Id'),
                            Model.models.Application.M_VinelandSocialMaturityScale.MVAM_SocialAge.label('MVAM_SocialAge'),
                            Model.models.Application.M_VinelandSocialMaturityScale.MVAM_IQ.label('MVAM_IQ'),
                            Model.models.Application.M_VinelandSocialMaturityScale.MVAM_Observations.label('MVAM_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MVAM_IsActive=1,MVAM_IsDeleted=0
                                ).order_by(Model.models.Application.M_VinelandSocialMaturityScale.MVAMID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.VinelandSocialMaturityScale,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='VinelandSocialMaturityScale',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MVAM_SocialAge
                        getTextField[1]['value'] = queryResult[0].MVAM_IQ
                        getTextField[2]['value'] = queryResult[0].MVAM_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitVinelandSocialMaturityScaleForm',methods=['GET','POST'])
def submitVinelandSocialMaturityScaleForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    SocialAge = request_json.get('SocialAge')
                    IQ = request_json.get('IQ')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_VinelandSocialMaturityScale()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MVAM_SocialAge=SocialAge
                        Insert.MVAM_IQ=IQ
                        Insert.MVAM_Observations=Observations
                        Insert.MVAM_AddUser= data['id']
                        Insert.MVAM_AddDate = datetime.datetime.now()
                        Insert.MVAM_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Vinel and Social Maturity Scale Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_VinelandSocialMaturityScale).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MVAM_SocialAge=SocialAge
                        Insert.MVAM_IQ=IQ
                        Insert.MVAM_Observations=Observations
                        Insert.MVAM_AddUser= data['id']
                        Insert.MVAM_AddDate = datetime.datetime.now()
                        Insert.MVAM_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Vinel and Social Maturity Scale Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewVinelandSocialMaturityScaleForm', methods=['GET','POST'])
def viewVinelandSocialMaturityScaleForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewVinelandSocialMaturityScaleForm,
                                session.query(Model.models.Application.M_VinelandSocialMaturityScale.MVAMID.label('ID'),
                                            Model.models.Application.M_VinelandSocialMaturityScale.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_VinelandSocialMaturityScale.MVAM_SocialAge.label('Social Age'),
                                            Model.models.Application.M_VinelandSocialMaturityScale.MVAM_IQ.label('IQ'),
                                            Model.models.Application.M_VinelandSocialMaturityScale.MVAM_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MVAM_IsActive=1,MVAM_IsDeleted=0
                                ).order_by(Model.models.Application.M_VinelandSocialMaturityScale.MVAMID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getGeselsDrawingTestofintelligenceForm', methods=['POST','GET'])
def getGeselsDrawingTestofintelligenceForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_GeselsDrawingTestofintelligence.MGDIID.label('Id'),
                            Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_MentalAge.label('MGDI_MentalAge'),
                            Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_IQ.label('MGDI_IQ'),
                            Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_Observations.label('MGDI_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MGDI_IsActive=1,MGDI_IsDeleted=0
                                ).order_by(Model.models.Application.M_GeselsDrawingTestofintelligence.MGDIID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.GeselsDrawingTestofintelligence,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='GeselsDrawingTestofintelligence',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MGDI_MentalAge
                        getTextField[1]['value'] = queryResult[0].MGDI_IQ
                        getTextField[2]['value'] = queryResult[0].MGDI_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitGeselsDrawingTestofintelligenceForm',methods=['GET','POST'])
def submitGeselsDrawingTestofintelligenceForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    MentalAge = request_json.get('MentalAge')
                    IQ = request_json.get('IQ')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_GeselsDrawingTestofintelligence()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MGDI_MentalAge=MentalAge
                        Insert.MGDI_IQ=IQ
                        Insert.MGDI_Observations=Observations
                        Insert.MGDI_AddUser= data['id']
                        Insert.MGDI_AddDate = datetime.datetime.now()
                        Insert.MGDI_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Gesels Drawing Test of Intelligence Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_GeselsDrawingTestofintelligence).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MGDI_MentalAge=MentalAge
                        Insert.MGDI_IQ=IQ
                        Insert.MGDI_Observations=Observations
                        Insert.MGDI_AddUser= data['id']
                        Insert.MGDI_AddDate = datetime.datetime.now()
                        Insert.MGDI_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Gesels Drawing Test of Intelligence Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewGeselsDrawingTestofintelligenceForm', methods=['GET','POST'])
def viewGeselsDrawingTestofintelligenceForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewGeselsDrawingTestofintelligenceForm,
                                session.query(Model.models.Application.M_GeselsDrawingTestofintelligence.MGDIID.label('ID'),
                                            Model.models.Application.M_GeselsDrawingTestofintelligence.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_MentalAge.label('Mental Age'),
                                            Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_IQ.label('IQ'),
                                            Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MGDI_IsActive=1,MGDI_IsDeleted=0
                                ).order_by(Model.models.Application.M_GeselsDrawingTestofintelligence.MGDIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

########################  After this done by abhishek ############################################

@app.route('/getMalinIntelligenceScaleforIndianChildrenForm', methods=['POST','GET'])
def getMalinIntelligenceScaleforIndianChildrenForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISIID.label('Id'),
                            Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_VerbalQuotient.label('MISI_VerbalQuotient'),
                            Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_PerformanceQuotient.label('MISI_PerformanceQuotient'),
                            Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_Observations.label('MISI_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MISI_IsActive=1,MISI_IsDeleted=0
                                ).order_by(Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISIID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.MalinIntelligenceScaleforIndianChildren,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='MalinIntelligenceScaleforIndianChildren',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MISI_VerbalQuotient
                        getTextField[1]['value'] = queryResult[0].MISI_PerformanceQuotient
                        getTextField[2]['value'] = queryResult[0].MISI_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitMalinIntelligenceScaleforIndianChildrenForm',methods=['GET','POST'])
def submitMalinIntelligenceScaleforIndianChildrenForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    VerbalQuotient = request_json.get('VerbalQuotient')
                    PerformanceQuotient = request_json.get('PerformanceQuotient')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_MalinIntelligenceScaleforIndianChildren()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MISI_VerbalQuotient=VerbalQuotient
                        Insert.MISI_PerformanceQuotient=PerformanceQuotient
                        Insert.MISI_Observations=Observations
                        Insert.MISI_AddUser= data['id']
                        Insert.MISI_AddDate = datetime.datetime.now()
                        Insert.MISI_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Malin Intelligence Scale Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_MalinIntelligenceScaleforIndianChildren).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MISI_VerbalQuotient=VerbalQuotient
                        Insert.MISI_PerformanceQuotient=PerformanceQuotient
                        Insert.MISI_Observations=Observations
                        Insert.MISI_AddUser= data['id']
                        Insert.MISI_AddDate = datetime.datetime.now()
                        Insert.MISI_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Malin Intelligence Scale Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewMalinIntelligenceScaleforIndianChildrenForm', methods=['GET','POST'])
def viewMalinIntelligenceScaleforIndianChildrenForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewMalinIntelligenceScaleforIndianChildrenForm,
                                session.query(Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISIID.label('ID'),
                                            Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_VerbalQuotient.label('Verbal Quotient'),
                                            Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_PerformanceQuotient.label('Performance Quotient'),
                                            Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MISI_IsActive=1,MISI_IsDeleted=0
                                ).order_by(Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDevelopmentalProfileForm', methods=['POST','GET'])
def getDevelopmentalProfileForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_DevelopmentalProfile.MDPID.label('Id'),
                            Model.models.Application.M_DevelopmentalProfile.MDP_StandardScore.label('MDP_StandardScore'),
                            Model.models.Application.M_DevelopmentalProfile.MDP_confidenceband.label('MDP_confidenceband'),
                            Model.models.Application.M_DevelopmentalProfile.MDP_Descriptivecategory.label('MDP_Descriptivecategory'),
                            Model.models.Application.M_DevelopmentalProfile.MDP_Ageequivalent.label('MDP_Ageequivalent'),
                            Model.models.Application.M_DevelopmentalProfile.MDP_Observations.label('MDP_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MDP_IsActive=1,MDP_IsDeleted=0
                                ).order_by(Model.models.Application.M_DevelopmentalProfile.MDPID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.DevelopmentalProfile,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='DevelopmentalProfile3',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MDP_StandardScore
                        getTextField[1]['value'] = queryResult[0].MDP_confidenceband
                        getTextField[2]['value'] = queryResult[0].MDP_Descriptivecategory
                        getTextField[3]['value'] = queryResult[0].MDP_Ageequivalent
                        getTextField[4]['value'] = queryResult[0].MDP_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitDevelopmentalProfileForm',methods=['GET','POST'])
def submitDevelopmentalProfileForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    physicalStandardScore = request_json.get('physicalStandardScore')
                    physicalDescriptiveCategory = request_json.get('physicalDescriptiveCategory')
                    physicalAgeEquivalent = request_json.get('physicalAgeEquivalent')
                    adaptiveBehaviorStandardScore = request_json.get('adaptiveBehaviorStandardScore')
                    adaptiveBehaviorDescriptiveCategory = request_json.get('adaptiveBehaviorDescriptiveCategory')
                    adaptiveBehaviorAgeEquivalent = request_json.get('adaptiveBehaviorAgeEquivalent')
                    socialEmotionalStandardScore = request_json.get('socialEmotionalStandardScore')
                    socialEmotionalDescriptiveCategory = request_json.get('socialEmotionalDescriptiveCategory')
                    socialEmotionalAgeEquivalent = request_json.get('socialEmotionalAgeEquivalent')
                    cognitiveStandardScore = request_json.get('cognitiveStandardScore')
                    cognitiveDescriptiveCategory = request_json.get('cognitiveDescriptiveCategory')
                    cognitiveAgeEquivalent = request_json.get('cognitiveAgeEquivalent')
                    communicationStandardScore = request_json.get('communicationStandardScore')
                    communicationDescriptiveCategory = request_json.get('communicationDescriptiveCategory')
                    communicationAgeEquivalent = request_json.get('communicationAgeEquivalent')
                    generalDevelopmentScoreStandardScore = request_json.get('generalDevelopmentScoreStandardScore')
                    generalDevelopmentScoreDescriptiveCategory = request_json.get('generalDevelopmentScoreDescriptiveCategory')
                    generalDevelopmentScoreAgeEquivalent = request_json.get('generalDevelopmentScoreAgeEquivalent')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_DevelopmentalProfile()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MDP_PhysicalStandardScore=physicalStandardScore
                        Insert.MDP_PhysicalDescCategory=physicalDescriptiveCategory
                        Insert.MDP_PhysicalAgeEquivalent=physicalAgeEquivalent
                        Insert.MDP_AdaptiveBehaviorStandardScore=adaptiveBehaviorStandardScore
                        Insert.MDP_AdaptiveBehaviorDescCategory=adaptiveBehaviorDescriptiveCategory
                        Insert.MDP_AdaptiveBehaviorAgeEquivalent=adaptiveBehaviorAgeEquivalent
                        Insert.MDP_SocialEmoStandardScore=socialEmotionalStandardScore
                        Insert.MDP_SocialEmoDescCategory=socialEmotionalDescriptiveCategory
                        Insert.MDP_SocialEmoAgeEquivalent=socialEmotionalAgeEquivalent
                        Insert.MDP_CognitiveStandardScore=cognitiveStandardScore
                        Insert.MDP_CognitiveDescCategory=cognitiveDescriptiveCategory
                        Insert.MDP_CognitiveAgeEquivalent=cognitiveAgeEquivalent
                        Insert.MDP_CommStandardScore=communicationStandardScore
                        Insert.MDP_CommDescCategory=communicationDescriptiveCategory
                        Insert.MDP_CommAgeEquivalent=communicationAgeEquivalent
                        Insert.MDP_GeneralDevScoreStandardScore=generalDevelopmentScoreStandardScore
                        Insert.MDP_GeneralDevScoreDescCategory=generalDevelopmentScoreDescriptiveCategory
                        Insert.MDP_GeneralDevScoreAgeEquivalent=generalDevelopmentScoreAgeEquivalent
                        Insert.MDP_AddUser= data['id']
                        Insert.MDP_AddDate = datetime.datetime.now()
                        Insert.MDP_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Developmental Profile Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_DevelopmentalProfile).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MDP_PhysicalStandardScore=physicalStandardScore
                        Insert.MDP_PhysicalDescCategory=physicalDescriptiveCategory
                        Insert.MDP_PhysicalAgeEquivalent=physicalAgeEquivalent
                        Insert.MDP_AdaptiveBehaviorStandardScore=adaptiveBehaviorStandardScore
                        Insert.MDP_AdaptiveBehaviorDescCategory=adaptiveBehaviorDescriptiveCategory
                        Insert.MDP_AdaptiveBehaviorAgeEquivalent=adaptiveBehaviorAgeEquivalent
                        Insert.MDP_SocialEmoStandardScore=socialEmotionalStandardScore
                        Insert.MDP_SocialEmoDescCategory=socialEmotionalDescriptiveCategory
                        Insert.MDP_SocialEmoAgeEquivalent=socialEmotionalAgeEquivalent
                        Insert.MDP_CognitiveStandardScore=cognitiveStandardScore
                        Insert.MDP_CognitiveDescCategory=cognitiveDescriptiveCategory
                        Insert.MDP_CognitiveAgeEquivalent=cognitiveAgeEquivalent
                        Insert.MDP_CommStandardScore=communicationStandardScore
                        Insert.MDP_CommDescCategory=communicationDescriptiveCategory
                        Insert.MDP_CommAgeEquivalent=communicationAgeEquivalent
                        Insert.MDP_GeneralDevScoreStandardScore=generalDevelopmentScoreStandardScore
                        Insert.MDP_GeneralDevScoreDescCategory=generalDevelopmentScoreDescriptiveCategory
                        Insert.MDP_GeneralDevScoreAgeEquivalent=generalDevelopmentScoreAgeEquivalent
                        Insert.MDP_ModUser= data['id']
                        Insert.MDP_ModDate = datetime.datetime.now()
                        Insert.MDP_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Developmental Profile Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewDevelopmentalProfileForm', methods=['GET','POST'])
def viewDevelopmentalProfileForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewDevelopmentalProfileForm,
                                session.query(Model.models.Application.M_DevelopmentalProfile.MDPID.label('ID'),
                                            Model.models.Application.M_DevelopmentalProfile.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_PhysicalStandardScore.label('Physical Score'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_PhysicalDescCategory.label('Physical Category'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_PhysicalAgeEquivalent.label('Physical Age Equivalent'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_AdaptiveBehaviorStandardScore.label('Adaptive Behavior Score'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_AdaptiveBehaviorDescCategory.label('Adaptive Behavior Category'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_AdaptiveBehaviorAgeEquivalent.label('Adaptive Behavior Age Equivalent'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_SocialEmoStandardScore.label('Social Score'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_SocialEmoDescCategory.label('Social Category'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_SocialEmoAgeEquivalent.label('Social Equivalent'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_CognitiveStandardScore.label('Cognitive Score'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_CognitiveDescCategory.label('Cognitive Category'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_CognitiveAgeEquivalent.label('Cognitive Age Equivalent'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_CommStandardScore.label('Comm Standard Score'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_CommDescCategory.label('Comm Category'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_CommAgeEquivalent.label('Comm Age Equivalent'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_GeneralDevScoreStandardScore.label('General Dev Score'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_GeneralDevScoreDescCategory.label('General Dev Category'),
                                            Model.models.Application.M_DevelopmentalProfile.MDP_GeneralDevScoreAgeEquivalent.label('General Age Equivalent')
                                            
                                                ).filter_by(M_Patient_MPID=pid,MDP_IsActive=1,MDP_IsDeleted=0
                                ).order_by(Model.models.Application.M_DevelopmentalProfile.MDPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getChildBehaviorChecklistForm', methods=['POST','GET'])
def getChildBehaviorChecklistForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_ChildBehaviorChecklist.MCBCID.label('Id'),
                            Model.models.Application.M_ChildBehaviorChecklist.MCBC_Scores.label('MCBC_Scores'),
                            Model.models.Application.M_ChildBehaviorChecklist.MCBC_Tscores.label('MCBC_Tscores'),
                            Model.models.Application.M_ChildBehaviorChecklist.MCBC_Range.label('MCBC_Range'),
                            Model.models.Application.M_ChildBehaviorChecklist.MCBC_Observations.label('MCBC_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MCBC_IsActive=1,MCBC_IsDeleted=0
                                ).order_by(Model.models.Application.M_ChildBehaviorChecklist.MCBCID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.ChildBehaviorChecklist,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='ChildBehaviorChecklist',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MCBC_Scores
                        getTextField[1]['value'] = queryResult[0].MCBC_Tscores
                        getTextField[2]['value'] = queryResult[0].MCBC_Range
                        getTextField[3]['value'] = queryResult[0].MCBC_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitChildBehaviorChecklistForm',methods=['GET','POST'])
def submitChildBehaviorChecklistForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    
                    AnxiousScores = request_json.get('anxiousScores')
                    AnxiousTscore = request_json.get('anxiousTscore')
                    AnxiousRange = request_json.get('anxiousRange')
                    WithdrawnScores = request_json.get('withdrawnScores')
                    WithdrawnTscore = request_json.get('withdrawnTscore')
                    WithdrawnRange = request_json.get('withdrawnRange')
                    SomaticComplaintScores = request_json.get('somaticComplaintScores')
                    SomaticComplaintTscore = request_json.get('somaticComplaintTscore')
                    SomaticComplaintRange = request_json.get('somaticComplaintRange')
                    SocialProblemScores = request_json.get('socialProblemScores')
                    SocialProblemTscore = request_json.get('socialProblemTscore')
                    SocialProblemRange = request_json.get('socialProblemRange')
                    ThoughtProblemScore = request_json.get('thoughtProblemScore')
                    ThoughtProblemTscore = request_json.get('thoughtProblemTscore')
                    ThoughtProblemRange = request_json.get('thoughtProblemRange')
                    AttentionProblemScore = request_json.get('attentionProblemScore')
                    AttentionProblemTscore = request_json.get('attentionProblemTscore')
                    AttentionProblemRange = request_json.get('attentionProblemRange')
                    RuleBreakingBehaviorScore = request_json.get('ruleBreakingBehaviorScore')
                    RuleBreakingBehaviorTscore = request_json.get('ruleBreakingBehaviorTscore')
                    RuleBreakingBehaviorRange = request_json.get('ruleBreakingBehaviorRange')
                    AggressiveBehaviorScores = request_json.get('aggressiveBehaviorScores')
                    AggressiveBehaviorTscore = request_json.get('aggressiveBehaviorTscore')
                    AggressiveBehaviorRange = request_json.get('aggressiveBehaviorRange')
                    Comment = request_json.get('comment')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_ChildBehaviorChecklist()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid

                        Insert.AnxiousScores=AnxiousScores
                        Insert.AnxiousTscore=AnxiousTscore
                        Insert.AnxiousRange=AnxiousRange
                        Insert.WithdrawnScores=WithdrawnScores
                        Insert.WithdrawnTscore=WithdrawnTscore
                        Insert.WithdrawnRange=WithdrawnRange
                        Insert.SomaticComplaintScores=SomaticComplaintScores
                        Insert.SomaticComplaintTscore=SomaticComplaintTscore
                        Insert.SomaticComplaintRange=SomaticComplaintRange
                        Insert.SocialProblemScores=SocialProblemScores
                        Insert.SocialProblemTscore=SocialProblemTscore
                        Insert.SocialProblemRange=SocialProblemRange
                        Insert.ThoughtProblemScore=ThoughtProblemScore
                        Insert.ThoughtProblemTscore=ThoughtProblemTscore
                        Insert.ThoughtProblemRange=ThoughtProblemRange
                        Insert.AttentionProblemScore=AttentionProblemScore
                        Insert.AttentionProblemTscore=AttentionProblemTscore
                        Insert.AttentionProblemRange=AttentionProblemRange
                        Insert.RuleBreakingBehaviorScore=RuleBreakingBehaviorScore
                        Insert.RuleBreakingBehaviorTscore=RuleBreakingBehaviorTscore
                        Insert.RuleBreakingBehaviorRange=RuleBreakingBehaviorRange
                        Insert.AggressiveBehaviorScores=AggressiveBehaviorScores
                        Insert.AggressiveBehaviorTscore=AggressiveBehaviorTscore
                        Insert.AggressiveBehaviorRange=AggressiveBehaviorRange
                        Insert.Comment=Comment

                        Insert.MCBC_AddUser= data['id']
                        Insert.MCBC_AddDate = datetime.datetime.now()
                        Insert.MCBC_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Child Behavior Check list Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_ChildBehaviorChecklist).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid

                        Insert.AnxiousScores=AnxiousScores
                        Insert.AnxiousTscore=AnxiousTscore
                        Insert.AnxiousRange=AnxiousRange
                        Insert.WithdrawnScores=WithdrawnScores
                        Insert.WithdrawnTscore=WithdrawnTscore
                        Insert.WithdrawnRange=WithdrawnRange
                        Insert.SomaticComplaintScores=SomaticComplaintScores
                        Insert.SomaticComplaintTscore=SomaticComplaintTscore
                        Insert.SomaticComplaintRange=SomaticComplaintRange
                        Insert.SocialProblemScores=SocialProblemScores
                        Insert.SocialProblemTscore=SocialProblemTscore
                        Insert.SocialProblemRange=SocialProblemRange
                        Insert.ThoughtProblemScore=ThoughtProblemScore
                        Insert.ThoughtProblemTscore=ThoughtProblemTscore
                        Insert.ThoughtProblemRange=ThoughtProblemRange
                        Insert.AttentionProblemScore=AttentionProblemScore
                        Insert.AttentionProblemTscore=AttentionProblemTscore
                        Insert.AttentionProblemRange=AttentionProblemRange
                        Insert.RuleBreakingBehaviorScore=RuleBreakingBehaviorScore
                        Insert.RuleBreakingBehaviorTscore=RuleBreakingBehaviorTscore
                        Insert.RuleBreakingBehaviorRange=RuleBreakingBehaviorRange
                        Insert.AggressiveBehaviorScores=AggressiveBehaviorScores
                        Insert.AggressiveBehaviorTscore=AggressiveBehaviorTscore
                        Insert.AggressiveBehaviorRange=AggressiveBehaviorRange
                        Insert.Comment=Comment

                        Insert.MCBC_AddUser= data['id']
                        Insert.MCBC_AddDate = datetime.datetime.now()
                        Insert.MCBC_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Child Behavior Check list Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()
        

@app.route('/viewChildBehaviorChecklistForm', methods=['GET','POST'])
def viewChildBehaviorChecklistForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewChildBehaviorChecklistForm,
                                session.query(Model.models.Application.M_ChildBehaviorChecklist.MCBCID.label('ID'),
                                            Model.models.Application.M_ChildBehaviorChecklist.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ChildBehaviorChecklist.AnxiousScores.label('AnxiousScores'),
                                            Model.models.Application.M_ChildBehaviorChecklist.AnxiousTscore.label('AnxiousTscore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.AnxiousRange.label('AnxiousRange'),
                                            Model.models.Application.M_ChildBehaviorChecklist.WithdrawnScores.label('WithdrawnScores'),
                                            Model.models.Application.M_ChildBehaviorChecklist.WithdrawnTscore.label('WithdrawnTscore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.WithdrawnRange.label('WithdrawnRange'),
                                            Model.models.Application.M_ChildBehaviorChecklist.SomaticComplaintScores.label('SomaticComplaintScores'),
                                            Model.models.Application.M_ChildBehaviorChecklist.SomaticComplaintTscore.label('SomaticComplaintTscore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.SomaticComplaintRange.label('SomaticComplaintRange'),
                                            Model.models.Application.M_ChildBehaviorChecklist.SocialProblemScores.label('SocialProblemScores'),
                                            Model.models.Application.M_ChildBehaviorChecklist.SocialProblemTscore.label('SocialProblemTscore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.SocialProblemRange.label('SocialProblemRange'),
                                            Model.models.Application.M_ChildBehaviorChecklist.ThoughtProblemScore.label('ThoughtProblemScore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.ThoughtProblemTscore.label('ThoughtProblemTscore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.ThoughtProblemRange.label('ThoughtProblemRange'),
                                            Model.models.Application.M_ChildBehaviorChecklist.AttentionProblemScore.label('AttentionProblemScore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.AttentionProblemTscore.label('AttentionProblemTscore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.AttentionProblemRange.label('AttentionProblemRange'),
                                            Model.models.Application.M_ChildBehaviorChecklist.RuleBreakingBehaviorScore.label('RuleBreakingBehaviorScore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.RuleBreakingBehaviorTscore.label('RuleBreakingBehaviorTscore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.RuleBreakingBehaviorRange.label('RuleBreakingBehaviorRange'),
                                            Model.models.Application.M_ChildBehaviorChecklist.AggressiveBehaviorScores.label('AggressiveBehaviorScores'),
                                            Model.models.Application.M_ChildBehaviorChecklist.AggressiveBehaviorTscore.label('AggressiveBehaviorTscore'),
                                            Model.models.Application.M_ChildBehaviorChecklist.AggressiveBehaviorRange.label('AggressiveBehaviorRange'),
                                            Model.models.Application.M_ChildBehaviorChecklist.Comment.label('Comment')

                                            ).filter_by(M_Patient_MPID=pid,MCBC_IsActive=1,MCBC_IsDeleted=0
                                ).order_by(Model.models.Application.M_ChildBehaviorChecklist.MCBCID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getConnersParentRatingScaleForm', methods=['POST','GET'])
def getConnersParentRatingScaleForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_ConnersParentRatingScale.MCPRID.label('Id'),
                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Scores.label('MCPR_Scores'),
                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Tscores.label('MCPR_Tscores'),
                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Range.label('MCPR_Range'),
                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Observations.label('MCPR_Observations')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MCPR_IsActive=1,MCPR_IsDeleted=0
                                ).order_by(Model.models.Application.M_ConnersParentRatingScale.MCPRID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.ConnersParentRatingScale,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='ConnersParentRatingScale',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MCPR_Scores
                        getTextField[1]['value'] = queryResult[0].MCPR_Tscores
                        getTextField[2]['value'] = queryResult[0].MCPR_Range
                        getTextField[3]['value'] = queryResult[0].MCPR_Observations
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitConnersParentRatingScaleForm',methods=['GET','POST'])
def submitConnersParentRatingScaleForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Scores = request_json.get('Scores')
                    Tscores = request_json.get('Tscores')
                    Range = request_json.get('Range')
                    Observations = request_json.get('Observations')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_ConnersParentRatingScale()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MCPR_Scores=Scores
                        Insert.MCPR_Tscores=Tscores
                        Insert.MCPR_Range=Range
                        Insert.MCPR_Observations=Observations
                        Insert.MCPR_AddUser= data['id']
                        Insert.MCPR_AddDate = datetime.datetime.now()
                        Insert.MCPR_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Conners Parent Rating Scale Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_ConnersParentRatingScale).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MCPR_Scores=Scores
                        Insert.MCPR_Tscores=Tscores
                        Insert.MCPR_Range=Range
                        Insert.MCPR_Observations=Observations
                        Insert.MCPR_AddUser= data['id']
                        Insert.MCPR_AddDate = datetime.datetime.now()
                        Insert.MCPR_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Conners Parent Rating Scale Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewConnersParentRatingScaleForm', methods=['GET','POST'])
def viewConnersParentRatingScaleForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewConnersParentRatingScaleForm,
                                session.query(Model.models.Application.M_ConnersParentRatingScale.MCPRID.label('ID'),
                                            Model.models.Application.M_ConnersParentRatingScale.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Scores.label('Scores'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Tscores.label('Tscores'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Range.label('Range'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Observations.label('Observations'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MCPR_IsActive=1,MCPR_IsDeleted=0
                                ).order_by(Model.models.Application.M_ConnersParentRatingScale.MCPRID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getRavenStandardProgressiveMatricesForm', methods=['POST','GET'])
def getRavenStandardProgressiveMatricesForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_RavenStandardProgressiveMatrices.MRSPID.label('Id'),
                            Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_RawScore.label('MRSP_RawScore'),
                            Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Percentile.label('MRSP_Percentile'),
                            Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Grade.label('MRSP_Grade'),
                            Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Interpretation.label('MRSP_Interpretation')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MRSP_IsActive=1,MRSP_IsDeleted=0
                                ).order_by(Model.models.Application.M_RavenStandardProgressiveMatrices.MRSPID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.RavenStandardProgressiveMatrices,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='RavenStandardProgressiveMatrices',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MRSP_RawScore
                        getTextField[1]['value'] = queryResult[0].MRSP_Percentile
                        getTextField[2]['value'] = queryResult[0].MRSP_Grade
                        getTextField[3]['value'] = queryResult[0].MRSP_Interpretation
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitRavenStandardProgressiveMatricesForm',methods=['GET','POST'])
def submitRavenStandardProgressiveMatricesForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    RawScore = request_json.get('RawScore')
                    Percentile = request_json.get('Percentile')
                    Grade = request_json.get('Grade')
                    Interpretation = request_json.get('Interpretation')
                    CorrespondsTo = request_json.get('CorrespondsTo')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    # RawScore = 'testRawScore'
                    # Percentile = 'testPercentile'
                    # Grade = 'testGrade'
                    # Interpretation= 'testInterpretation'
                    # newRow = 'testing Row'
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_RavenStandardProgressiveMatrices()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MRSP_RawScore=RawScore
                        Insert.MRSP_Percentile=Percentile
                        Insert.MRSP_Grade=Grade
                        Insert.MRSP_Interpretation=Interpretation
                        Insert.MRSP_CorrespondsTo=CorrespondsTo
                        Insert.MRSP_AddUser= data['id']
                        Insert.MRSP_AddDate = datetime.datetime.now()
                        Insert.MRSP_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Raven Standard Progressive Matrices Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_RavenStandardProgressiveMatrices).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MRSP_RawScore=RawScore
                        Insert.MRSP_Percentile=Percentile
                        Insert.MRSP_Grade=Grade
                        Insert.MRSP_Interpretation=Interpretation
                        Insert.MRSP_CorrespondsTo=CorrespondsTo
                        Insert.MRSP_AddUser= data['id']
                        Insert.MRSP_AddDate = datetime.datetime.now()
                        Insert.MRSP_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Raven Standard Progressive Matrices Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewRavenStandardProgressiveMatricesForm', methods=['GET','POST'])
def viewRavenStandardProgressiveMatricesForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewRavenStandardProgressiveMatricesForm,
                                session.query(Model.models.Application.M_RavenStandardProgressiveMatrices.MRSPID.label('ID'),
                                            Model.models.Application.M_RavenStandardProgressiveMatrices.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_RawScore.label('Raw Score'),
                                            Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Percentile.label('Percentile'),
                                            Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Grade.label('Grade'),
                                            Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Interpretation.label('Interpretation'),
                                            Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_CorrespondsTo.label('Corresponds To'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MRSP_IsActive=1,MRSP_IsDeleted=0
                                ).order_by(Model.models.Application.M_RavenStandardProgressiveMatrices.MRSPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getReceptiveLanguageAssessmentForm', methods=['POST','GET'])
def getReceptiveLanguageAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_ReceptiveLanguageAssessment.MRLAID.label('Id'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendssounds.label('MRLA_Comprehendssounds'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsloud.label('MRLA_Comprehendsloud'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendscategorizesounds.label('MRLA_Comprehendscategorizesounds'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsanimalsounds.label('MRLA_Comprehendsanimalsounds'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsfruitsname.label('MRLA_Comprehendsfruitsname'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendscolorsname.label('MRLA_Comprehendscolorsname'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsanimalname.label('MRLA_Comprehendsanimalname'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsvegetablename.label('MRLA_Comprehendsvegetablename'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsshapesname.label('MRLA_Comprehendsshapesname'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsbodyparts.label('MRLA_Comprehendsbodyparts'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsvehiclenames.label('MRLA_Comprehendsvehiclenames'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understandingrhymes.label('MRLA_Understandingrhymes'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Respondscorrectly.label('MRLA_Respondscorrectly'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Identifiessounds.label('MRLA_Identifiessounds'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Actsoutcommands.label('MRLA_Actsoutcommands'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsstepscommands.label('MRLA_Comprehendsstepscommands'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understandinggreeting.label('MRLA_Understandinggreeting'),
                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understanding.label('MRLA_Understanding')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MRLA_IsActive=1,MRLA_IsDeleted=0
                                ).order_by(Model.models.Application.M_ReceptiveLanguageAssessment.MRLAID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.ReceptiveLanguageAssessment,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='ReceptiveLanguageAssessment',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    achievement = Common_Function.CommonFun.achievement()
                    getTextField[0]['options']= achievement
                    getTextField[1]['options']= achievement
                    getTextField[2]['options']= achievement
                    getTextField[3]['options']= achievement
                    getTextField[4]['options']= achievement
                    getTextField[5]['options']= achievement
                    getTextField[6]['options']= achievement
                    getTextField[7]['options']= achievement
                    getTextField[8]['options']= achievement
                    getTextField[9]['options']= achievement
                    getTextField[10]['options']= achievement
                    getTextField[11]['options']= achievement
                    getTextField[12]['options']= achievement
                    getTextField[13]['options']= achievement
                    getTextField[14]['options']= achievement
                    getTextField[15]['options']= achievement
                    getTextField[16]['options']= achievement
                    getTextField[17]['options']= achievement


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MRLA_Comprehendssounds
                        getTextField[1]['value'] = queryResult[0].MRLA_Comprehendsloud
                        getTextField[2]['value'] = queryResult[0].MRLA_Comprehendscategorizesounds
                        getTextField[3]['value'] = queryResult[0].MRLA_Comprehendsanimalsounds
                        getTextField[4]['value'] = queryResult[0].MRLA_Comprehendsfruitsname
                        getTextField[5]['value'] = queryResult[0].MRLA_Comprehendscolorsname
                        getTextField[6]['value'] = queryResult[0].MRLA_Comprehendsanimalname
                        getTextField[7]['value'] = queryResult[0].MRLA_Comprehendsvegetablename
                        getTextField[8]['value'] = queryResult[0].MRLA_Comprehendsshapesname
                        getTextField[9]['value'] = queryResult[0].MRLA_Comprehendsbodyparts
                        getTextField[10]['value'] = queryResult[0].MRLA_Comprehendsvehiclenames
                        getTextField[11]['value'] = queryResult[0].MRLA_Understandingrhymes
                        getTextField[12]['value'] = queryResult[0].MRLA_Respondscorrectly
                        getTextField[13]['value'] = queryResult[0].MRLA_Identifiessounds
                        getTextField[14]['value'] = queryResult[0].MRLA_Actsoutcommands
                        getTextField[15]['value'] = queryResult[0].MRLA_Comprehendsstepscommands
                        getTextField[16]['value'] = queryResult[0].MRLA_Understandinggreeting
                        getTextField[17]['value'] = queryResult[0].MRLA_Understanding
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitReceptiveLanguageAssessmentForm',methods=['GET','POST'])
def submitReceptiveLanguageAssessmentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Comprehendssounds = request_json.get('Comprehendssounds')
                    Comprehendsloud = request_json.get('Comprehendsloud')
                    Comprehendscategorizesounds = request_json.get('Comprehendscategorizesounds')
                    Comprehendsanimalsounds = request_json.get('Comprehendsanimalsounds')
                    Comprehendsfruitsname = request_json.get('Comprehendsfruitsname')
                    Comprehendscolorsname = request_json.get('Comprehendscolorsname')
                    Comprehendsanimalname = request_json.get('Comprehendsanimalname')
                    Comprehendsvegetablename = request_json.get('Comprehendsvegetablename')
                    Comprehendsshapesname = request_json.get('Comprehendsshapesname')
                    Comprehendsbodyparts = request_json.get('Comprehendsbodyparts')
                    Comprehendsvehiclenames = request_json.get('Comprehendsvehiclenames')
                    Understandingrhymes = request_json.get('Understandingrhymes')
                    Respondscorrectly = request_json.get('Respondscorrectly')
                    Identifiessounds = request_json.get('Identifiessounds')
                    Actsoutcommands = request_json.get('Actsoutcommands')
                    Comprehendsstepscommands = request_json.get('Comprehendsstepscommands')
                    Understandinggreeting = request_json.get('Understandinggreeting')
                    Understanding = request_json.get('Understanding')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_ReceptiveLanguageAssessment()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    Insert.MRLA_Comprehendssounds=Comprehendssounds
                    Insert.MRLA_Comprehendsloud=Comprehendsloud
                    Insert.MRLA_Comprehendscategorizesounds=Comprehendscategorizesounds
                    Insert.MRLA_Comprehendsanimalsounds=Comprehendsanimalsounds
                    Insert.MRLA_Comprehendsfruitsname=Comprehendsfruitsname
                    Insert.MRLA_Comprehendscolorsname=Comprehendscolorsname
                    Insert.MRLA_Comprehendsanimalname=Comprehendsanimalname
                    Insert.MRLA_Comprehendsvegetablename=Comprehendsvegetablename
                    Insert.MRLA_Comprehendsshapesname=Comprehendsshapesname
                    Insert.MRLA_Comprehendsbodyparts=Comprehendsbodyparts
                    Insert.MRLA_Comprehendsvehiclenames=Comprehendsvehiclenames
                    Insert.MRLA_Understandingrhymes=Understandingrhymes

                    Insert.MRLA_Respondscorrectly=Respondscorrectly
                    Insert.MRLA_Identifiessounds=Identifiessounds
                    Insert.MRLA_Actsoutcommands=Actsoutcommands
                    Insert.MRLA_Comprehendsstepscommands=Comprehendsstepscommands
                    Insert.MRLA_Understandinggreeting=Understandinggreeting
                    Insert.MRLA_Understanding=Understanding
                    Insert.MRLA_AddUser= data['id']
                    Insert.MRLA_AddDate = datetime.datetime.now()
                    Insert.MRLA_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'Receptive Language Assessment Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewReceptiveLanguageAssessmentForm', methods=['GET','POST'])
def viewReceptiveLanguageAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewReceptiveLanguageAssessmentForm,
                                session.query(Model.models.Application.M_ReceptiveLanguageAssessment.MRLAID.label('ID'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendssounds.label('Comprehends sounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsloud.label('Comprehends loud'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendscategorizesounds.label('Comprehends categorizesounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsanimalsounds.label('Comprehends animalsounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsfruitsname.label('Comprehends fruitsname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendscolorsname.label('Comprehends colorsname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsanimalname.label('Comprehends animalname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsvegetablename.label('Comprehends vegetablename'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsshapesname.label('Comprehends shapesname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsbodyparts.label('Comprehends bodyparts'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsvehiclenames.label('Comprehends vehiclenames'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understandingrhymes.label('Understandingrhymes'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Respondscorrectly.label('Respondscorrectly'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Identifiessounds.label('Identifiessounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Actsoutcommands.label('Actsoutcommands'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsstepscommands.label('Comprehends stepscommands'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understandinggreeting.label('Understandinggreeting'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understanding.label('Understanding'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MRLA_IsActive=1,MRLA_IsDeleted=0
                                ).order_by(Model.models.Application.M_ReceptiveLanguageAssessment.MRLAID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getExpressiveLanguageAssessmentForm', methods=['POST','GET'])
def getExpressiveLanguageAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_ExpressiveLanguageAssessment.MELAID.label('Id'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesenvironmentalsounds.label('MELA_Imitatesenvironmentalsounds'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesloudandsoftsounds.label('MELA_Imitatesloudandsoftsounds'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitateslexicalcategories.label('MELA_Imitateslexicalcategories'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescolorsname.label('MELA_Imitatescolorsname'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesbodyparts.label('MELA_Imitatesbodyparts'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatessingingandphrases.label('MELA_Imitatessingingandphrases'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_ImitatesalphabetsAtoZ.label('MELA_ImitatesalphabetsAtoZ'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Usesnounwitharticles.label('MELA_Usesnounwitharticles'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Watchesfaceandbody.label('MELA_Watchesfaceandbody'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescounting.label('MELA_Imitatescounting'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Clapstobeatoffamiliarsongs.label('MELA_Clapstobeatoffamiliarsongs'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Respondstosinglesigns.label('MELA_Respondstosinglesigns'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatessocialgreetings.label('MELA_Imitatessocialgreetings'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Occassionallytrytoimitate.label('MELA_Occassionallytrytoimitate'),
                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescommonsyllables.label('MELA_Imitatescommonsyllables')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MELA_IsActive=1,MELA_IsDeleted=0
                                ).order_by(Model.models.Application.M_ExpressiveLanguageAssessment.MELAID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.ExpressiveLanguageAssessment,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='ExpressiveLanguageAssessment',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    consistancy= Common_Function.CommonFun.consistancy()
                    getTextField[0]['options']= consistancy
                    getTextField[1]['options']= consistancy
                    getTextField[2]['options']= consistancy
                    getTextField[3]['options']= consistancy
                    getTextField[4]['options']= consistancy
                    getTextField[5]['options']= consistancy
                    getTextField[6]['options']= consistancy
                    getTextField[7]['options']= consistancy
                    getTextField[8]['options']= consistancy
                    getTextField[9]['options']= consistancy
                    getTextField[10]['options']= consistancy
                    getTextField[11]['options']= consistancy
                    getTextField[12]['options']= consistancy
                    getTextField[13]['options']= consistancy
                    getTextField[14]['options']= consistancy

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MELA_Imitatesenvironmentalsounds
                        getTextField[1]['value'] = queryResult[0].MELA_Imitatesloudandsoftsounds
                        getTextField[2]['value'] = queryResult[0].MELA_Imitateslexicalcategories
                        getTextField[3]['value'] = queryResult[0].MELA_Imitatescolorsname
                        getTextField[4]['value'] = queryResult[0].MELA_Imitatesbodyparts
                        getTextField[5]['value'] = queryResult[0].MELA_Imitatessingingandphrases
                        getTextField[6]['value'] = queryResult[0].MELA_ImitatesalphabetsAtoZ
                        getTextField[7]['value'] = queryResult[0].MELA_Usesnounwitharticles
                        getTextField[8]['value'] = queryResult[0].MELA_Watchesfaceandbody
                        getTextField[9]['value'] = queryResult[0].MELA_Imitatescounting
                        getTextField[10]['value'] = queryResult[0].MELA_Clapstobeatoffamiliarsongs
                        getTextField[11]['value'] = queryResult[0].MELA_Respondstosinglesigns
                        getTextField[12]['value'] = queryResult[0].MELA_Imitatessocialgreetings
                        getTextField[13]['value'] = queryResult[0].MELA_Occassionallytrytoimitate
                        getTextField[14]['value'] = queryResult[0].MELA_Imitatescommonsyllables
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitExpressiveLanguageAssessmentForm',methods=['GET','POST'])
def submitExpressiveLanguageAssessmentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Imitatesenvironmentalsounds = request_json.get('Imitatesenvironmentalsounds')
                    Imitatesloudandsoftsounds = request_json.get('Imitatesloudandsoftsounds')
                    Imitateslexicalcategories = request_json.get('Imitateslexicalcategories')
                    Imitatescolorsname = request_json.get('Imitatescolorsname')

                    Imitatesbodyparts = request_json.get('Imitatesbodyparts')
                    Imitatessingingandphrases = request_json.get('Imitatessingingandphrases')
                    ImitatesalphabetsAtoZ = request_json.get('ImitatesalphabetsAtoZ')
                    Usesnounwitharticles = request_json.get('Usesnounwitharticles')
                    Watchesfaceandbody = request_json.get('Watchesfaceandbody')
                    Imitatescounting = request_json.get('Imitatescounting')
                    Clapstobeatoffamiliarsongs = request_json.get('Clapstobeatoffamiliarsongs')
                    Respondstosinglesigns = request_json.get('Respondstosinglesigns')
                    Imitatessocialgreetings = request_json.get('Imitatessocialgreetings')
                    Occassionallytrytoimitate = request_json.get('Occassionallytrytoimitate')
                    Imitatescommonsyllables = request_json.get('Imitatescommonsyllables')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_ExpressiveLanguageAssessment()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MELA_Imitatesenvironmentalsounds=Imitatesenvironmentalsounds
                        Insert.MELA_Imitatesloudandsoftsounds=Imitatesloudandsoftsounds
                        Insert.MELA_Imitateslexicalcategories=Imitateslexicalcategories
                        Insert.MELA_Imitatescolorsname=Imitatescolorsname
                        Insert.MELA_Imitatesbodyparts=Imitatesbodyparts
                        Insert.MELA_Imitatessingingandphrases=Imitatessingingandphrases
                        Insert.MELA_ImitatesalphabetsAtoZ=ImitatesalphabetsAtoZ
                        Insert.MELA_Usesnounwitharticles=Usesnounwitharticles
                        Insert.MELA_Watchesfaceandbody=Watchesfaceandbody
                        Insert.MELA_Imitatescounting = Imitatescounting
                        Insert.MELA_Clapstobeatoffamiliarsongs=Clapstobeatoffamiliarsongs
                        Insert.MELA_Respondstosinglesigns=Respondstosinglesigns

                        Insert.MELA_Imitatessocialgreetings=Imitatessocialgreetings
                        Insert.MELA_Occassionallytrytoimitate=Occassionallytrytoimitate
                        Insert.MELA_Imitatescommonsyllables=Imitatescommonsyllables
                        Insert.MELA_AddUser= data['id']
                        Insert.MELA_AddDate = datetime.datetime.now()
                        Insert.MELA_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Expressive Language Assessment Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_ExpressiveLanguageAssessment).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MELA_Imitatesenvironmentalsounds=Imitatesenvironmentalsounds
                        Insert.MELA_Imitatesloudandsoftsounds=Imitatesloudandsoftsounds
                        Insert.MELA_Imitateslexicalcategories=Imitateslexicalcategories
                        Insert.MELA_Imitatescolorsname=Imitatescolorsname
                        Insert.MELA_Imitatesbodyparts=Imitatesbodyparts
                        Insert.MELA_Imitatessingingandphrases=Imitatessingingandphrases
                        Insert.MELA_ImitatesalphabetsAtoZ=ImitatesalphabetsAtoZ
                        Insert.MELA_Usesnounwitharticles=Usesnounwitharticles
                        Insert.MELA_Watchesfaceandbody=Watchesfaceandbody
                        Insert.MELA_Imitatescounting = Imitatescounting
                        Insert.MELA_Clapstobeatoffamiliarsongs=Clapstobeatoffamiliarsongs
                        Insert.MELA_Respondstosinglesigns=Respondstosinglesigns

                        Insert.MELA_Imitatessocialgreetings=Imitatessocialgreetings
                        Insert.MELA_Occassionallytrytoimitate=Occassionallytrytoimitate
                        Insert.MELA_Imitatescommonsyllables=Imitatescommonsyllables
                        Insert.MELA_AddUser= data['id']
                        Insert.MELA_AddDate = datetime.datetime.now()
                        Insert.MELA_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Expressive Language Assessment Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewExpressiveLanguageAssessmentForm', methods=['GET','POST'])
def viewExpressiveLanguageAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewExpressiveLanguageAssessmentForm,
                                session.query(Model.models.Application.M_ExpressiveLanguageAssessment.MELAID.label('ID'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesenvironmentalsounds.label('Imitates environmental sounds'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesloudandsoftsounds.label('Imitates loud and softsounds'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitateslexicalcategories.label('Imitates lexical categories'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescolorsname.label('Imitates colors name'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesbodyparts.label('Imitates body parts'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatessingingandphrases.label('Imitates singing and phrases'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_ImitatesalphabetsAtoZ.label('Imitates alphabets AtoZ'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Usesnounwitharticles.label('articles'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Watchesfaceandbody.label('Watches'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescounting.label('Imitates counting'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Clapstobeatoffamiliarsongs.label('Claps'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Respondstosinglesigns.label('Respondstosinglesigns'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatessocialgreetings.label('Imitates socialgreetings'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Occassionallytrytoimitate.label('Occassionallytrytoimitate'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescommonsyllables.label('Imitates commonsyllables'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MELA_IsActive=1,MELA_IsDeleted=0
                                ).order_by(Model.models.Application.M_ExpressiveLanguageAssessment.MELAID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getStutteringAssessmentForm', methods=['POST','GET'])
def getStutteringAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_StutteringAssessment.MSAID.label('Id'),
                            Model.models.Application.M_StutteringAssessment.MSA_Behaviouralassessment.label('MSA_Behaviouralassessment'),
                            Model.models.Application.M_StutteringAssessment.MSA_Cognitiveassessment.label('MSA_Cognitiveassessment'),
                            Model.models.Application.M_StutteringAssessment.MSA_Impacteducationalparticipation.label('MSA_Impacteducationalparticipation'),
                            Model.models.Application.M_StutteringAssessment.MSA_thechildlikelytoachieve.label('MSA_thechildlikelytoachieve'),
                            Model.models.Application.M_StutteringAssessment.MSA_prognosisforeffect.label('MSA_prognosisforeffect'),
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSA_IsActive=1,MSA_IsDeleted=0
                                ).order_by(Model.models.Application.M_StutteringAssessment.MSAID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.StutteringAssessment,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='StutteringAssessment',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    review= Common_Function.CommonFun.review()
                    getTextField[4]['options']= review
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSA_Behaviouralassessment
                        getTextField[1]['value'] = queryResult[0].MSA_Cognitiveassessment
                        getTextField[2]['value'] = queryResult[0].MSA_Impacteducationalparticipation
                        getTextField[3]['value'] = queryResult[0].MSA_thechildlikelytoachieve
                        getTextField[4]['value'] = queryResult[0].MSA_prognosisforeffect
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitStutteringAssessmentForm',methods=['GET','POST'])
def submitStutteringAssessmentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Behaviouralassessment = request_json.get('Behaviouralassessment')
                    Cognitiveassessment = request_json.get('Cognitiveassessment')
                    Impacteducationalparticipation = request_json.get('Impacteducationalparticipation')
                    thechildlikelytoachieve = request_json.get('thechildlikelytoachieve')
                    prognosisforeffect = request_json.get('prognosisforeffect')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_StutteringAssessment()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSA_Behaviouralassessment=Behaviouralassessment
                        Insert.MSA_Cognitiveassessment=Cognitiveassessment
                        Insert.MSA_Impacteducationalparticipation=Impacteducationalparticipation
                        Insert.MSA_thechildlikelytoachieve=thechildlikelytoachieve
                        Insert.MSA_prognosisforeffect=prognosisforeffect
                        Insert.MSA_AddUser= data['id']
                        Insert.MSA_AddDate = datetime.datetime.now()
                        Insert.MSA_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Stuttering Assessment Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_StutteringAssessment).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSA_Behaviouralassessment=Behaviouralassessment
                        Insert.MSA_Cognitiveassessment=Cognitiveassessment
                        Insert.MSA_Impacteducationalparticipation=Impacteducationalparticipation
                        Insert.MSA_thechildlikelytoachieve=thechildlikelytoachieve
                        Insert.MSA_prognosisforeffect=prognosisforeffect
                        Insert.MSA_AddUser= data['id']
                        Insert.MSA_AddDate = datetime.datetime.now()
                        Insert.MSA_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Stuttering Assessment Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewStutteringAssessmentForm', methods=['GET','POST'])
def viewStutteringAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewStutteringAssessmentForm,
                                session.query(Model.models.Application.M_StutteringAssessment.MSAID.label('ID'),
                                            Model.models.Application.M_StutteringAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_StutteringAssessment.MSA_Behaviouralassessment.label('Behavioural assessment'),
                                            Model.models.Application.M_StutteringAssessment.MSA_Cognitiveassessment.label('Cognitive assessment'),
                                            Model.models.Application.M_StutteringAssessment.MSA_Impacteducationalparticipation.label('Impact educational participation'),
                                            Model.models.Application.M_StutteringAssessment.MSA_thechildlikelytoachieve.label('Likely to Achieve'),
                                            Model.models.Application.M_StutteringAssessment.MSA_prognosisforeffect.label('Prognosis Effect'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSA_IsActive=1,MSA_IsDeleted=0
                                ).order_by(Model.models.Application.M_StutteringAssessment.MSAID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSpecialEdassessmenttwoyearsForm', methods=['POST','GET'])
def getSpecialEdassessmenttwoyearsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_SpecialEdassessmenttwoyears.MSATWID.label('Id'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Respondstoname.label('MSATW_Respondstoname'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Makeseyecontact.label('MSATW_Makeseyecontact'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Respondstolightandsoundtoys.label('MSATW_Respondstolightandsoundtoys'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmoveeyesupanddown.label('MSATW_canmoveeyesupanddown'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmoveeyesleftandright.label('MSATW_canmoveeyesleftandright'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_repeatswords.label('MSATW_repeatswords'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsidentificationofnumber.label('MSATW_knowsidentificationofnumber'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canrollpoundandsqueezeclay.label('MSATW_canrollpoundandsqueezeclay'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyMom.label('MSATW_vocabularyMom'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyDad.label('MSATW_vocabularyDad'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Vocabularydog.label('MSATW_Vocabularydog'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycat.label('MSATW_vocabularycat'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularytree.label('MSATW_vocabularytree'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularytable.label('MSATW_vocabularytable'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularychair.label('MSATW_vocabularychair'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycow.label('MSATW_vocabularycow'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycrayons.label('MSATW_vocabularycrayons'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybus.label('MSATW_vocabularybus'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycar.label('MSATW_vocabularycar'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybook.label('MSATW_vocabularybook'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyapple.label('MSATW_vocabularyapple'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybanana.label('MSATW_vocabularybanana'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybottle.label('MSATW_vocabularybottle'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Candostacking.label('MSATW_Candostacking'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmaketower.label('MSATW_canmaketower'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_respondstobubbles.label('MSATW_respondstobubbles'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Identifieshappyandsad.label('MSATW_Identifieshappyandsad'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Knowsshapes.label('MSATW_Knowsshapes'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowscolors.label('MSATW_knowscolors'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsanimals.label('MSATW_knowsanimals'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsvehicles.label('MSATW_knowsvehicles'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsbodyparts.label('MSATW_knowsbodyparts'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsidentificationofalphabets.label('MSATW_knowsidentificationofalphabets'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsmoreorless.label('MSATW_knowsmoreorless'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsbigandsmall.label('MSATW_knowsbigandsmall'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsnearandfar.label('MSATW_knowsnearandfar'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifhisorher.label('MSATW_canidentifhisorher'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifybag.label('MSATW_canidentifybag'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifyshoes.label('MSATW_canidentifyshoes'),
                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifybottle.label('MSATW_canidentifybottle')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialEdassessmenttwoyears.MSATWID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.SpecialEdassessmenttwoyears,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='SpecialEdassessmenttwoyears',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    achievement = Common_Function.CommonFun.achievement()
                    getTextField[0]['options']= achievement
                    getTextField[1]['options']= achievement
                    getTextField[2]['options']= achievement
                    getTextField[3]['options']= achievement
                    getTextField[4]['options']= achievement
                    getTextField[5]['options']= achievement
                    getTextField[6]['options']= achievement
                    getTextField[7]['options']= achievement
                    getTextField[8]['options']= achievement
                    getTextField[9]['options']= achievement
                    getTextField[10]['options']= achievement
                    getTextField[11]['options']= achievement
                    getTextField[12]['options']= achievement
                    getTextField[13]['options']= achievement
                    getTextField[14]['options']= achievement
                    getTextField[15]['options']= achievement
                    getTextField[16]['options']= achievement
                    getTextField[17]['options']= achievement
                    getTextField[18]['options']= achievement
                    getTextField[19]['options']= achievement
                    getTextField[20]['options']= achievement
                    getTextField[21]['options']= achievement
                    getTextField[22]['options']= achievement
                    getTextField[23]['options']= achievement
                    getTextField[24]['options']= achievement
                    getTextField[25]['options']= achievement
                    getTextField[26]['options']= achievement
                    getTextField[27]['options']= achievement
                    getTextField[28]['options']= achievement
                    getTextField[29]['options']= achievement
                    getTextField[30]['options']= achievement
                    getTextField[31]['options']= achievement
                    getTextField[32]['options']= achievement
                    getTextField[33]['options']= achievement
                    getTextField[34]['options']= achievement
                    getTextField[35]['options']= achievement
                    getTextField[36]['options']= achievement
                    getTextField[37]['options']= achievement
                    getTextField[38]['options']= achievement
                    getTextField[39]['options']= achievement


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSATW_Respondstoname
                        getTextField[1]['value'] = queryResult[0].MSATW_Makeseyecontact
                        getTextField[2]['value'] = queryResult[0].MSATW_Respondstolightandsoundtoys
                        getTextField[3]['value'] = queryResult[0].MSATW_canmoveeyesupanddown
                        getTextField[4]['value'] = queryResult[0].MSATW_canmoveeyesleftandright
                        getTextField[5]['value'] = queryResult[0].MSATW_repeatswords
                        getTextField[6]['value'] = queryResult[0].MSATW_knowsidentificationofnumber
                        getTextField[7]['value'] = queryResult[0].MSATW_canrollpoundandsqueezeclay
                        getTextField[8]['value'] = queryResult[0].MSATW_vocabularyMom
                        getTextField[9]['value'] = queryResult[0].MSATW_vocabularyDad
                        getTextField[10]['value'] = queryResult[0].MSATW_Vocabularydog
                        getTextField[11]['value'] = queryResult[0].MSATW_vocabularycat
                        getTextField[12]['value'] = queryResult[0].MSATW_vocabularytree
                        getTextField[13]['value'] = queryResult[0].MSATW_vocabularytable
                        getTextField[14]['value'] = queryResult[0].MSATW_vocabularychair
                        getTextField[15]['value'] = queryResult[0].MSATW_vocabularycow
                        getTextField[16]['value'] = queryResult[0].MSATW_vocabularycrayons
                        getTextField[17]['value'] = queryResult[0].MSATW_vocabularybus
                        getTextField[18]['value'] = queryResult[0].MSATW_vocabularycar
                        getTextField[19]['value'] = queryResult[0].MSATW_vocabularybook
                        getTextField[20]['value'] = queryResult[0].MSATW_vocabularyapple
                        getTextField[21]['value'] = queryResult[0].MSATW_vocabularybanana
                        getTextField[22]['value'] = queryResult[0].MSATW_vocabularybottle
                        getTextField[23]['value'] = queryResult[0].MSATW_Candostacking
                        getTextField[24]['value'] = queryResult[0].MSATW_canmaketower
                        getTextField[25]['value'] = queryResult[0].MSATW_respondstobubbles
                        getTextField[26]['value'] = queryResult[0].MSATW_Identifieshappyandsad
                        getTextField[27]['value'] = queryResult[0].MSATW_Knowsshapes
                        getTextField[28]['value'] = queryResult[0].MSATW_knowscolors
                        getTextField[29]['value'] = queryResult[0].MSATW_knowsanimals
                        getTextField[30]['value'] = queryResult[0].MSATW_knowsvehicles
                        getTextField[31]['value'] = queryResult[0].MSATW_knowsbodyparts
                        getTextField[32]['value'] = queryResult[0].MSATW_knowsidentificationofalphabets
                        getTextField[33]['value'] = queryResult[0].MSATW_knowsmoreorless
                        getTextField[34]['value'] = queryResult[0].MSATW_knowsbigandsmall
                        getTextField[35]['value'] = queryResult[0].MSATW_knowsnearandfar
                        getTextField[36]['value'] = queryResult[0].MSATW_canidentifhisorher
                        getTextField[37]['value'] = queryResult[0].MSATW_canidentifybag
                        getTextField[38]['value'] = queryResult[0].MSATW_canidentifyshoes
                        getTextField[39]['value'] = queryResult[0].MSATW_canidentifybottle
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSpecialEdassessmenttwoyearsFForm',methods=['GET','POST'])
def submitSpecialEdassessmenttwoyearsFForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Respondstoname = request_json.get('Respondstoname')
                    Makeseyecontact = request_json.get('Makeseyecontact')
                    Respondstolightandsoundtoys = request_json.get('Respondstolightandsoundtoys')
                    canmoveeyesupanddown = request_json.get('canmoveeyesupanddown')
                    canmoveeyesleftandright = request_json.get('canmoveeyesleftandright')
                    repeatswords = request_json.get('repeatswords')
                    canrollpoundandsqueezeclay = request_json.get('canrollpoundandsqueezeclay')
                    vocabularyMom = request_json.get('vocabularyMom')
                    vocabularyDad = request_json.get('vocabularyDad')
                    Vocabularydog = request_json.get('Vocabularydog')
                    vocabularycat = request_json.get('vocabularycat')
                    vocabularytree = request_json.get('vocabularytree')
                    vocabularytable = request_json.get('vocabularytable')
                    vocabularychair = request_json.get('vocabularychair')
                    vocabularycow = request_json.get('vocabularycow')
                    vocabularycrayons = request_json.get('vocabularycrayons')
                    vocabularybus = request_json.get('vocabularybus')
                    vocabularycar = request_json.get('vocabularycar')
                    vocabularybook = request_json.get('vocabularybook')
                    vocabularyapple= request_json.get('vocabularyapple')
                    vocabularybanana = request_json.get('vocabularybanana')
                    vocabularybottle = request_json.get('vocabularybottle')
                    Candostacking = request_json.get('Candostacking')
                    canmaketower = request_json.get('canmaketower')
                    respondstobubbles = request_json.get('respondstobubbles')
                    Identifieshappyandsad = request_json.get('Identifieshappyandsad')
                    Knowsshapes= request_json.get('Knowsshapes')
                    knowscolors = request_json.get('knowscolors')
                    knowsanimals = request_json.get('knowsanimals')
                    knowsvehicles = request_json.get('knowsvehicles')
                    knowsidentificationofnumber = request_json.get('knowsidentificationofnumber')
                    knowsbodyparts = request_json.get('knowsbodyparts')
                    knowsidentificationofnumber= request_json.get('knowsidentificationofnumber')
                    knowsidentificationofalphabets = request_json.get('knowsidentificationofalphabets')
                    knowsmoreorless = request_json.get('knowsmoreorless')
                    knowsbigandsmall = request_json.get('knowsbigandsmall')
                    knowsnearandfar = request_json.get('knowsnearandfar')
                    canidentifhisorher = request_json.get('canidentifhisorher')
                    canidentifybag = request_json.get('canidentifybag')
                    canidentifyshoes= request_json.get('canidentifyshoes')
                    canidentifybottle = request_json.get('canidentifybottle')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_SpecialEdassessmenttwoyears()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSATW_Respondstoname=Respondstoname
                        Insert.MSATW_Makeseyecontact=Makeseyecontact
                        Insert.MSATW_Respondstolightandsoundtoys=Respondstolightandsoundtoys
                        Insert.MSATW_canmoveeyesupanddown=canmoveeyesupanddown
                        Insert.MSATW_canmoveeyesleftandright=canmoveeyesleftandright
                        Insert.MSATW_repeatswords=repeatswords
                        Insert.MSATW_canrollpoundandsqueezeclay=canrollpoundandsqueezeclay
                        Insert.MSATW_vocabularyMom=vocabularyMom
                        Insert.MSATW_vocabularyDad=vocabularyDad
                        Insert.MSATW_Vocabularydog = Vocabularydog
                        Insert.MSATW_vocabularycat=vocabularycat
                        Insert.MSATW_vocabularytree=vocabularytree

                        Insert.MSATW_vocabularytable=vocabularytable
                        Insert.MSATW_vocabularychair=vocabularychair
                        Insert.MSATW_vocabularycow=vocabularycow
                        Insert.MSATW_vocabularycrayons=vocabularycrayons
                        Insert.MSATW_vocabularybus=vocabularybus
                        Insert.MSATW_vocabularycar=vocabularycar
                        Insert.MSATW_vocabularybook=vocabularybook
                        Insert.MSATW_vocabularyapple=vocabularyapple
                        Insert.MSATW_vocabularybanana=vocabularybanana
                        Insert.MSATW_vocabularybottle=vocabularybottle
                        Insert.MSATW_Candostacking=Candostacking
                        Insert.MSATW_canmaketower=canmaketower
                        Insert.MSATW_respondstobubbles=respondstobubbles
                        Insert.MSATW_Identifieshappyandsad=Identifieshappyandsad
                        Insert.MSATW_Knowsshapes=Knowsshapes
                        Insert.MSATW_knowscolors=knowscolors
                        Insert.MSATW_knowsanimals=knowsanimals
                        Insert.MSATW_knowsvehicles=knowsvehicles
                        Insert.MSATW_knowsidentificationofnumber=knowsidentificationofnumber
                        Insert.MSATW_knowsbodyparts=knowsbodyparts
                        Insert.MSATW_knowsidentificationofalphabets=knowsidentificationofalphabets
                        Insert.MSATW_knowsmoreorless=knowsmoreorless
                        Insert.MSATW_knowsbigandsmall=knowsbigandsmall
                        Insert.MSATW_knowsnearandfar=knowsnearandfar
                        Insert.MSATW_canidentifhisorher=canidentifhisorher
                        Insert.MSATW_canidentifybag=canidentifybag
                        Insert.MSATW_canidentifyshoes=canidentifyshoes
                        Insert.MSATW_canidentifybottle=canidentifybottle
                        Insert.MSATW_AddUser= data['id']
                        Insert.MSATW_AddDate = datetime.datetime.now()
                        Insert.MSATW_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Special Ed Assessment two years Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_SpecialEdassessmenttwoyears).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSATW_Respondstoname=Respondstoname
                        Insert.MSATW_Makeseyecontact=Makeseyecontact
                        Insert.MSATW_Respondstolightandsoundtoys=Respondstolightandsoundtoys
                        Insert.MSATW_canmoveeyesupanddown=canmoveeyesupanddown
                        Insert.MSATW_canmoveeyesleftandright=canmoveeyesleftandright
                        Insert.MSATW_repeatswords=repeatswords
                        Insert.MSATW_canrollpoundandsqueezeclay=canrollpoundandsqueezeclay
                        Insert.MSATW_vocabularyMom=vocabularyMom
                        Insert.MSATW_vocabularyDad=vocabularyDad
                        Insert.MSATW_Vocabularydog = Vocabularydog
                        Insert.MSATW_vocabularycat=vocabularycat
                        Insert.MSATW_vocabularytree=vocabularytree

                        Insert.MSATW_vocabularytable=vocabularytable
                        Insert.MSATW_vocabularychair=vocabularychair
                        Insert.MSATW_vocabularycow=vocabularycow
                        Insert.MSATW_vocabularycrayons=vocabularycrayons
                        Insert.MSATW_vocabularybus=vocabularybus
                        Insert.MSATW_vocabularycar=vocabularycar
                        Insert.MSATW_vocabularybook=vocabularybook
                        Insert.MSATW_vocabularyapple=vocabularyapple
                        Insert.MSATW_vocabularybanana=vocabularybanana
                        Insert.MSATW_vocabularybottle=vocabularybottle
                        Insert.MSATW_Candostacking=Candostacking
                        Insert.MSATW_canmaketower=canmaketower
                        Insert.MSATW_respondstobubbles=respondstobubbles
                        Insert.MSATW_Identifieshappyandsad=Identifieshappyandsad
                        Insert.MSATW_Knowsshapes=Knowsshapes
                        Insert.MSATW_knowscolors=knowscolors
                        Insert.MSATW_knowsanimals=knowsanimals
                        Insert.MSATW_knowsvehicles=knowsvehicles
                        Insert.MSATW_knowsidentificationofnumber=knowsidentificationofnumber
                        Insert.MSATW_knowsbodyparts=knowsbodyparts
                        Insert.MSATW_knowsidentificationofalphabets=knowsidentificationofalphabets
                        Insert.MSATW_knowsmoreorless=knowsmoreorless
                        Insert.MSATW_knowsbigandsmall=knowsbigandsmall
                        Insert.MSATW_knowsnearandfar=knowsnearandfar
                        Insert.MSATW_canidentifhisorher=canidentifhisorher
                        Insert.MSATW_canidentifybag=canidentifybag
                        Insert.MSATW_canidentifyshoes=canidentifyshoes
                        Insert.MSATW_canidentifybottle=canidentifybottle
                        Insert.MSATW_AddUser= data['id']
                        Insert.MSATW_AddDate = datetime.datetime.now()
                        Insert.MSATW_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Special Ed Assessment two years Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSpecialEdassessmenttwoyearsFForm', methods=['GET','POST'])
def viewSpecialEdassessmenttwoyearsFForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSpecialEdassessmenttwoyearsFForm,
                                session.query(Model.models.Application.M_SpecialEdassessmenttwoyears.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Respondstoname.label('Respondstoname'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Makeseyecontact.label('Makeseyecontact'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Respondstolightandsoundtoys.label('Respondstolightandsoundtoys'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmoveeyesupanddown.label('canmoveeyesupanddown'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmoveeyesleftandright.label('canmoveeyesleftandright'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_repeatswords.label('repeatswords'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsidentificationofnumber.label('knowsidentificationofnumber'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canrollpoundandsqueezeclay.label('canrollpoundandsqueezeclay'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyMom.label('vocabularyMom'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyDad.label('vocabularyDad'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Vocabularydog.label('Vocabularydog'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycat.label('vocabularycat'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularytree.label('vocabularytree'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularytable.label('vocabularytable'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularychair.label('vocabularychair'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycow.label('vocabularycow'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycrayons.label('vocabularycrayons'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybus.label('vocabularybus'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycar.label('vocabularycar'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybook.label('vocabularybook'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyapple.label('vocabularyapple'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybanana.label('vocabularybanana'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybottle.label('vocabularybottle'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Candostacking.label('Candostacking'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmaketower.label('canmaketower'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_respondstobubbles.label('respondstobubbles'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Identifieshappyandsad.label('Identifieshappyandsad'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Knowsshapes.label('Knowsshapes'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowscolors.label('knowscolors'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsanimals.label('knowsanimals'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsvehicles.label('knowsvehicles'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsbodyparts.label('knowsbodyparts'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsidentificationofalphabets.label('knowsidentificationofalphabets'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsmoreorless.label('knowsmoreorless'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsbigandsmall.label('knowsbigandsmall'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsnearandfar.label('knowsnearandfar'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifhisorher.label('canidentifhisorher'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifybag.label('canidentifybag'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifyshoes.label('canidentifyshoes'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifybottle.label('canidentifybottle'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialEdassessmenttwoyears.MSATWID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSpecialEdassessmentthreeyearsForm', methods=['POST','GET'])
def getSpecialEdassessmentthreeyearsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_SpecialEdassessmentThreeyears.MSATWID.label('Id'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_respondstoname.label('MSATW_respondstoname'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_makeseyecontact.label('MSATW_makeseyecontact'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cansitformins.label('MSATW_cansitformins'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canmoveeyesupanddown.label('MSATW_canmoveeyesupanddown'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canmoveeyesleftandright.label('MSATW_canmoveeyesleftandright'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerfullname.label('MSATW_cananswerfullname'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularybodyparts.label('MSATW_vocabularybodyparts'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfollowstepsinstruction.label('MSATW_canfollowstepsinstruction'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerold.label('MSATW_cananswerold'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerwhatsyourmothersname.label('MSATW_cananswerwhatsyourmothersname'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerwhichisyoufavoritecolour.label('MSATW_cananswerwhichisyoufavoritecolour'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfixpiecepuzzle.label('MSATW_canfixpiecepuzzle'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularyshapescircle.label('MSATW_vocabularyshapescircle'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularycolors.label('MSATW_vocabularycolors'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularywild.label('MSATW_vocabularywild'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_Vocabularyfruits.label('MSATW_Vocabularyfruits'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfollowstepinstruction.label('MSATW_canfollowstepinstruction'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cansingrhymes.label('MSATW_cansingrhymes'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerseeinsky.label('MSATW_cangiveanswerseeinsky'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerswiminwater.label('MSATW_cangiveanswerswiminwater'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerseeontree.label('MSATW_cangiveanswerseeontree'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_knowsidentificationofalphabets.label('MSATW_knowsidentificationofalphabets'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_knowsidentificationofnumbers.label('MSATW_knowsidentificationofnumbers'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_Canholdapencilcrayon.label('MSATW_Canholdapencilcrayon'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canscribble.label('MSATW_canscribble'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cancoloringivenshape.label('MSATW_cancoloringivenshape'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cantearandpaste.label('MSATW_cantearandpaste'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionshappy.label('MSATW_canidentifyemotionshappy'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionssad.label('MSATW_canidentifyemotionssad'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionsangry.label('MSATW_canidentifyemotionsangry'),
                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionsupset.label('MSATW_canidentifyemotionsupset')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialEdassessmentThreeyears.MSATWID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.SpecialEdassessmentthreeyears,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='SpecialEdassessmentthreeyears',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    achievement = Common_Function.CommonFun.achievement()
                    getTextField[0]['options']= achievement
                    getTextField[1]['options']= achievement
                    getTextField[2]['options']= achievement
                    getTextField[3]['options']= achievement
                    getTextField[4]['options']= achievement
                    getTextField[5]['options']= achievement
                    getTextField[6]['options']= achievement
                    getTextField[7]['options']= achievement
                    getTextField[8]['options']= achievement
                    getTextField[9]['options']= achievement
                    getTextField[10]['options']= achievement
                    getTextField[11]['options']= achievement
                    getTextField[12]['options']= achievement
                    getTextField[13]['options']= achievement
                    getTextField[14]['options']= achievement
                    getTextField[15]['options']= achievement
                    getTextField[16]['options']= achievement
                    getTextField[17]['options']= achievement
                    getTextField[18]['options']= achievement
                    getTextField[19]['options']= achievement
                    getTextField[20]['options']= achievement
                    getTextField[21]['options']= achievement
                    getTextField[22]['options']= achievement
                    getTextField[23]['options']= achievement
                    getTextField[24]['options']= achievement
                    getTextField[25]['options']= achievement
                    getTextField[26]['options']= achievement
                    getTextField[27]['options']= achievement
                    getTextField[28]['options']= achievement
                    getTextField[29]['options']= achievement
                    getTextField[30]['options']= achievement

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSATW_respondstoname
                        getTextField[1]['value'] = queryResult[0].MSATW_makeseyecontact
                        getTextField[2]['value'] = queryResult[0].MSATW_cansitformins
                        getTextField[3]['value'] = queryResult[0].MSATW_canmoveeyesupanddown
                        getTextField[4]['value'] = queryResult[0].MSATW_canmoveeyesleftandright
                        getTextField[5]['value'] = queryResult[0].MSATW_cananswerfullname
                        getTextField[6]['value'] = queryResult[0].MSATW_vocabularybodyparts
                        getTextField[7]['value'] = queryResult[0].MSATW_canfollowstepsinstruction
                        getTextField[8]['value'] = queryResult[0].MSATW_cananswerold
                        getTextField[9]['value'] = queryResult[0].MSATW_cananswerwhatsyourmothersname
                        getTextField[10]['value'] = queryResult[0].MSATW_cananswerwhichisyoufavoritecolour
                        getTextField[11]['value'] = queryResult[0].MSATW_vocabularyshapescircle
                        getTextField[12]['value'] = queryResult[0].MSATW_vocabularycolors
                        getTextField[13]['value'] = queryResult[0].MSATW_vocabularywild
                        getTextField[14]['value'] = queryResult[0].MSATW_Vocabularyfruits
                        getTextField[15]['value'] = queryResult[0].MSATW_canfollowstepinstruction
                        getTextField[16]['value'] = queryResult[0].MSATW_cansingrhymes
                        getTextField[17]['value'] = queryResult[0].MSATW_cangiveanswerseeinsky
                        getTextField[18]['value'] = queryResult[0].MSATW_cangiveanswerswiminwater
                        getTextField[19]['value'] = queryResult[0].MSATW_cangiveanswerseeontree
                        getTextField[20]['value'] = queryResult[0].MSATW_knowsidentificationofalphabets
                        getTextField[21]['value'] = queryResult[0].MSATW_knowsidentificationofnumbers
                        getTextField[22]['value'] = queryResult[0].MSATW_Canholdapencilcrayon
                        getTextField[23]['value'] = queryResult[0].MSATW_canscribble
                        getTextField[24]['value'] = queryResult[0].MSATW_cancoloringivenshape
                        getTextField[25]['value'] = queryResult[0].MSATW_cantearandpaste
                        getTextField[26]['value'] = queryResult[0].MSATW_canidentifyemotionshappy
                        getTextField[27]['value'] = queryResult[0].MSATW_canidentifyemotionssad
                        getTextField[28]['value'] = queryResult[0].MSATW_canidentifyemotionsangry
                        getTextField[29]['value'] = queryResult[0].MSATW_canidentifyemotionsupset
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSpecialEdassessmentthreeyearsForm',methods=['GET','POST'])
def submitSpecialEdassessmentthreeyearsForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    respondstoname = request_json.get('respondstoname')
                    makeseyecontact = request_json.get('makeseyecontact')
                    cansitformins = request_json.get('cansitformins')
                    canmoveeyesupanddown = request_json.get('canmoveeyesupanddown')
                    canmoveeyesleftandright = request_json.get('canmoveeyesleftandright')
                    cananswerfullname = request_json.get('cananswerfullname')
                    cananswerold = request_json.get('cananswerold')
                    cananswerwhatsyourmothersname = request_json.get('cananswerwhatsyourmothersname')
                    cananswerwhichisyoufavoritecolour = request_json.get('cananswerwhichisyoufavoritecolour')
                    canfixpiecepuzzle = request_json.get('canfixpiecepuzzle')
                    vocabularyshapescircle = request_json.get('vocabularyshapescircle')
                    vocabularycolors = request_json.get('vocabularycolors')
                    vocabularywild = request_json.get('vocabularywild')
                    Vocabularyfruits = request_json.get('Vocabularyfruits')
                    vocabularybodyparts = request_json.get('vocabularybodyparts')
                    canfollowstepinstruction = request_json.get('canfollowstepinstruction')
                    canfollowstepsinstruction = request_json.get('canfollowstepsinstruction')
                    cansingrhymes = request_json.get('cansingrhymes')
                    cangiveanswerseeinsky = request_json.get('cangiveanswerseeinsky')
                    cangiveanswerseeontree= request_json.get('cangiveanswerseeontree')
                    cangiveanswerswiminwater = request_json.get('cangiveanswerswiminwater')
                    cangiveanswerseeontree = request_json.get('cangiveanswerseeontree')
                    knowsidentificationofalphabets = request_json.get('knowsidentificationofalphabets')
                    knowsidentificationofnumbers = request_json.get('knowsidentificationofnumbers')
                    Canholdapencilcrayon = request_json.get('Canholdapencilcrayon')
                    canscribble = request_json.get('canscribble')
                    cancoloringivenshape = request_json.get('cancoloringivenshape')
                    cantearandpaste = request_json.get('cantearandpaste')
                    canidentifyemotionshappy = request_json.get('canidentifyemotionshappy')
                    canidentifyemotionssad = request_json.get('canidentifyemotionssad')
                    canidentifyemotionsangry = request_json.get('canidentifyemotionsangry')
                    canidentifyemotionsupset = request_json.get('canidentifyemotionsupset')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_SpecialEdassessmentThreeyears()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSATW_respondstoname=respondstoname
                        Insert.MSATW_makeseyecontact=makeseyecontact
                        Insert.MSATW_cansitformins=cansitformins
                        Insert.MSATW_canmoveeyesupanddown=canmoveeyesupanddown
                        Insert.MSATW_canmoveeyesleftandright=canmoveeyesleftandright

                        Insert.MSATW_cananswerfullname=cananswerfullname
                        Insert.MSATW_cananswerold=cananswerold
                        Insert.MSATW_cananswerwhatsyourmothersname=cananswerwhatsyourmothersname
                        Insert.MSATW_cananswerwhichisyoufavoritecolour=cananswerwhichisyoufavoritecolour
                        Insert.MSATW_canfixpiecepuzzle = canfixpiecepuzzle
                        Insert.MSATW_vocabularyshapescircle=vocabularyshapescircle
                        Insert.MSATW_vocabularycolors=vocabularycolors

                        Insert.MSATW_vocabularywild=vocabularywild
                        Insert.MSATW_Vocabularyfruits=Vocabularyfruits
                        Insert.MSATW_vocabularybodyparts=vocabularybodyparts
                        Insert.MSATW_canfollowstepinstruction=canfollowstepinstruction
                        Insert.MSATW_canfollowstepsinstruction=canfollowstepsinstruction
                        Insert.MSATW_cansingrhymes=cansingrhymes
                        Insert.MSATW_cangiveanswerseeinsky=cangiveanswerseeinsky
                        Insert.MSATW_cangiveanswerswiminwater=cangiveanswerswiminwater
                        Insert.MSATW_cangiveanswerseeontree=cangiveanswerseeontree
                        Insert.MSATW_cangiveanswerseeontree=cangiveanswerseeontree
                        Insert.MSATW_knowsidentificationofalphabets=knowsidentificationofalphabets
                        Insert.MSATW_knowsidentificationofnumbers=knowsidentificationofnumbers
                        Insert.MSATW_Canholdapencilcrayon=Canholdapencilcrayon
                        Insert.MSATW_canscribble=canscribble
                        Insert.MSATW_cancoloringivenshape=cancoloringivenshape
                        Insert.MSATW_cantearandpaste=cantearandpaste
                        Insert.MSATW_canidentifyemotionshappy=canidentifyemotionshappy
                        Insert.MSATW_canidentifyemotionssad=canidentifyemotionssad
                        Insert.MSATW_canidentifyemotionsangry=canidentifyemotionsangry
                        Insert.MSATW_canidentifyemotionsupset=canidentifyemotionsupset
                        Insert.MSATW_AddUser= data['id']
                        Insert.MSATW_AddDate = datetime.datetime.now()
                        Insert.MSATW_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Special Ed Assessment Three Years Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_SpecialEdassessmentThreeyears).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSATW_respondstoname=respondstoname
                        Insert.MSATW_makeseyecontact=makeseyecontact
                        Insert.MSATW_cansitformins=cansitformins
                        Insert.MSATW_canmoveeyesupanddown=canmoveeyesupanddown
                        Insert.MSATW_canmoveeyesleftandright=canmoveeyesleftandright

                        Insert.MSATW_cananswerfullname=cananswerfullname
                        Insert.MSATW_cananswerold=cananswerold
                        Insert.MSATW_cananswerwhatsyourmothersname=cananswerwhatsyourmothersname
                        Insert.MSATW_cananswerwhichisyoufavoritecolour=cananswerwhichisyoufavoritecolour
                        Insert.MSATW_canfixpiecepuzzle = canfixpiecepuzzle
                        Insert.MSATW_vocabularyshapescircle=vocabularyshapescircle
                        Insert.MSATW_vocabularycolors=vocabularycolors

                        Insert.MSATW_vocabularywild=vocabularywild
                        Insert.MSATW_Vocabularyfruits=Vocabularyfruits
                        Insert.MSATW_vocabularybodyparts=vocabularybodyparts
                        Insert.MSATW_canfollowstepinstruction=canfollowstepinstruction
                        Insert.MSATW_canfollowstepsinstruction=canfollowstepsinstruction
                        Insert.MSATW_cansingrhymes=cansingrhymes
                        Insert.MSATW_cangiveanswerseeinsky=cangiveanswerseeinsky
                        Insert.MSATW_cangiveanswerswiminwater=cangiveanswerswiminwater
                        Insert.MSATW_cangiveanswerseeontree=cangiveanswerseeontree
                        Insert.MSATW_cangiveanswerseeontree=cangiveanswerseeontree
                        Insert.MSATW_knowsidentificationofalphabets=knowsidentificationofalphabets
                        Insert.MSATW_knowsidentificationofnumbers=knowsidentificationofnumbers
                        Insert.MSATW_Canholdapencilcrayon=Canholdapencilcrayon
                        Insert.MSATW_canscribble=canscribble
                        Insert.MSATW_cancoloringivenshape=cancoloringivenshape
                        Insert.MSATW_cantearandpaste=cantearandpaste
                        Insert.MSATW_canidentifyemotionshappy=canidentifyemotionshappy
                        Insert.MSATW_canidentifyemotionssad=canidentifyemotionssad
                        Insert.MSATW_canidentifyemotionsangry=canidentifyemotionsangry
                        Insert.MSATW_canidentifyemotionsupset=canidentifyemotionsupset
                        Insert.MSATW_AddUser= data['id']
                        Insert.MSATW_AddDate = datetime.datetime.now()
                        Insert.MSATW_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Special Ed Assessment Three Years Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSpecialEdassessmentthreeyearsForm', methods=['GET','POST'])
def viewSpecialEdassessmentthreeyearsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSpecialEdassessmentthreeyearsForm,
                                session.query(Model.models.Application.M_SpecialEdassessmentThreeyears.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_respondstoname.label('respondstoname'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_makeseyecontact.label('makeseyecontact'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cansitformins.label('cansitformins'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canmoveeyesupanddown.label('canmoveeyesupanddown'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canmoveeyesleftandright.label('canmoveeyesleftandright'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerfullname.label('cananswerfullname'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularybodyparts.label('vocabularybodyparts'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfollowstepsinstruction.label('canfollowstepsinstruction'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerold.label('cananswerold'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerwhatsyourmothersname.label('cananswerwhatsyourmothersname'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerwhichisyoufavoritecolour.label('cananswerwhichisyoufavoritecolour'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfixpiecepuzzle.label('canfixpiecepuzzle'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularyshapescircle.label('vocabularyshapescircle'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularycolors.label('vocabularycolors'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularywild.label('vocabularywild'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_Vocabularyfruits.label('Vocabularyfruits'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfollowstepinstruction.label('canfollowstepinstruction'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cansingrhymes.label('cansingrhymes'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerseeinsky.label('cangiveanswerseeinsky'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerswiminwater.label('cangiveanswerswiminwater'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerseeontree.label('cangiveanswerseeontree'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_knowsidentificationofalphabets.label('knowsidentificationofalphabets'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_knowsidentificationofnumbers.label('knowsidentificationofnumbers'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_Canholdapencilcrayon.label('Canholdapencilcrayon'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canscribble.label('canscribble'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cancoloringivenshape.label('cancoloringivenshape'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cantearandpaste.label('cantearandpaste'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionshappy.label('canidentifyemotionshappy'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionssad.label('canidentifyemotionssad'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionsangry.label('canidentifyemotionsangry'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionsupset.label('canidentifyemotionsupset'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialEdassessmentThreeyears.MSATWID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getSpecialEdassessmentthreefouryearsForm', methods=['POST','GET'])
def getSpecialEdassessmentthreefouryearsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATWID.label('Id'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_doesrespondtonamecall.label('MSATW_doesrespondtonamecall'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_doesmakeseyecontact.label('MSATW_doesmakeseyecontact'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_initiatesinteractiontoward.label('MSATW_initiatesinteractiontoward'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cansitformins.label('MSATW_cansitformins'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_understandinstructionslikestand.label('MSATW_understandinstructionslikestand'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_getthatputthere.label('MSATW_getthatputthere'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_givemegetthis.label('MSATW_givemegetthis'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_runwalkjump.label('MSATW_runwalkjump'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_lookdownup.label('MSATW_lookdownup'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cananswerwhatis.label('MSATW_cananswerwhatis'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cananswerfavoritecolour.label('MSATW_cananswerfavoritecolour'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canfixpiecepuzzle.label('MSATW_canfixpiecepuzzle'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularyshapes.label('MSATW_vocabularyshapes'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularycolors.label('MSATW_vocabularycolors'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularywild.label('MSATW_vocabularywild'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularyfruits.label('MSATW_vocabularyfruits'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularybodyparts.label('MSATW_vocabularybodyparts'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_Canunderstandpositions.label('MSATW_Canunderstandpositions'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cansingrhymes.label('MSATW_cansingrhymes'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canunderstandstories.label('MSATW_canunderstandstories'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canWhatquestions.label('MSATW_canWhatquestions'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canidentifybasicobjects.label('MSATW_canidentifybasicobjects'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canholdacrayonpencil.label('MSATW_canholdacrayonpencil'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canmaketower.label('MSATW_canmaketower'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canimitate.label('MSATW_canimitate'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canplaydoughballs.label('MSATW_canplaydoughballs'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canheshethrow.label('MSATW_canheshethrow'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canrecognisealphabet.label('MSATW_canrecognisealphabet'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_Canrecognisenumerals.label('MSATW_Canrecognisenumerals'),
                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cancolourgivenshape.label('MSATW_cancolourgivenshape')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATWID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.SpecialEdassessmentthreefouryears,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='SpecialEdassessmentthreefouryears',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    achievement = Common_Function.CommonFun.achievement()
                    getTextField[0]['options']= achievement
                    getTextField[1]['options']= achievement
                    getTextField[2]['options']= achievement
                    getTextField[3]['options']= achievement
                    getTextField[4]['options']= achievement
                    getTextField[5]['options']= achievement
                    getTextField[6]['options']= achievement
                    getTextField[7]['options']= achievement
                    getTextField[8]['options']= achievement
                    getTextField[9]['options']= achievement
                    getTextField[10]['options']= achievement
                    getTextField[11]['options']= achievement
                    getTextField[12]['options']= achievement
                    getTextField[13]['options']= achievement
                    getTextField[14]['options']= achievement
                    getTextField[15]['options']= achievement
                    getTextField[16]['options']= achievement
                    getTextField[17]['options']= achievement
                    getTextField[18]['options']= achievement
                    getTextField[19]['options']= achievement
                    getTextField[20]['options']= achievement
                    getTextField[21]['options']= achievement
                    getTextField[22]['options']= achievement
                    getTextField[23]['options']= achievement
                    getTextField[24]['options']= achievement
                    getTextField[25]['options']= achievement
                    getTextField[26]['options']= achievement
                    getTextField[27]['options']= achievement
                    getTextField[28]['options']= achievement
                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSATW_doesrespondtonamecall
                        getTextField[1]['value'] = queryResult[0].MSATW_doesmakeseyecontact
                        getTextField[2]['value'] = queryResult[0].MSATW_initiatesinteractiontoward
                        getTextField[3]['value'] = queryResult[0].MSATW_cansitformins
                        getTextField[4]['value'] = queryResult[0].MSATW_understandinstructionslikestand
                        getTextField[5]['value'] = queryResult[0].MSATW_getthatputthere
                        getTextField[6]['value'] = queryResult[0].MSATW_givemegetthis
                        getTextField[7]['value'] = queryResult[0].MSATW_runwalkjump
                        getTextField[8]['value'] = queryResult[0].MSATW_lookdownup
                        getTextField[9]['value'] = queryResult[0].MSATW_cananswerwhatis
                        getTextField[10]['value'] = queryResult[0].MSATW_cananswerfavoritecolour
                        getTextField[11]['value'] = queryResult[0].MSATW_canfixpiecepuzzle
                        getTextField[12]['value'] = queryResult[0].MSATW_vocabularyshapes
                        getTextField[13]['value'] = queryResult[0].MSATW_vocabularycolors
                        getTextField[14]['value'] = queryResult[0].MSATW_vocabularywild
                        getTextField[15]['value'] = queryResult[0].MSATW_vocabularyfruits
                        getTextField[16]['value'] = queryResult[0].MSATW_vocabularybodyparts
                        getTextField[17]['value'] = queryResult[0].MSATW_Canunderstandpositions
                        getTextField[18]['value'] = queryResult[0].MSATW_cansingrhymes
                        getTextField[19]['value'] = queryResult[0].MSATW_canunderstandstories
                        getTextField[20]['value'] = queryResult[0].MSATW_canWhatquestions
                        getTextField[21]['value'] = queryResult[0].MSATW_canidentifybasicobjects
                        getTextField[22]['value'] = queryResult[0].MSATW_canholdacrayonpencil
                        getTextField[23]['value'] = queryResult[0].MSATW_canmaketower
                        getTextField[24]['value'] = queryResult[0].MSATW_canplaydoughballs
                        getTextField[25]['value'] = queryResult[0].MSATW_canheshethrow
                        getTextField[26]['value'] = queryResult[0].MSATW_canrecognisealphabet
                        getTextField[27]['value'] = queryResult[0].MSATW_Canrecognisenumerals
                        getTextField[28]['value'] = queryResult[0].MSATW_cancolourgivenshape
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSpecialEdassessmentthreefouryearsForm', methods=['GET','POST'])
def submitSpecialEdassessmentthreefouryearsForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    doesrespondtonamecall = request_json.get('doesrespondtonamecall')
                    doesmakeseyecontact = request_json.get('doesmakeseyecontact')
                    initiatesinteractiontoward = request_json.get('initiatesinteractiontoward')
                    cansitformins = request_json.get('cansitformins')
                    understandinstructionslikestand = request_json.get('understandinstructionslikestand')
                    getthatputthere = request_json.get('getthatputthere')
                    givemegetthis = request_json.get('givemegetthis')
                    runwalkjump = request_json.get('runwalkjump')
                    lookdownup = request_json.get('lookdownup')
                    cananswerwhatis = request_json.get('cananswerwhatis')
                    cananswerfavoritecolour = request_json.get('cananswerfavoritecolour')
                    canfixpiecepuzzle = request_json.get('canfixpiecepuzzle')
                    vocabularyshapes = request_json.get('vocabularyshapes')
                    vocabularycolors = request_json.get('vocabularycolors')
                    vocabularywild = request_json.get('vocabularycow')
                    vocabularyfruits = request_json.get('vocabularyfruits')
                    vocabularybodyparts = request_json.get('vocabularybodyparts')
                    Canunderstandpositions = request_json.get('Canunderstandpositions')
                    cansingrhymes = request_json.get('cansingrhymes')
                    canunderstandstories = request_json.get('canunderstandstories')
                    canWhatquestions = request_json.get('canWhatquestions')
                    canidentifybasicobjects = request_json.get('canidentifybasicobjects')
                    canholdacrayonpencil = request_json.get('canholdacrayonpencil')
                    canimitate = request_json.get('canimitate')
                    canplaydoughballs = request_json.get('canplaydoughballs')
                    canheshethrow = request_json.get('canheshethrow')
                    canrecognisealphabet= request_json.get('canrecognisealphabet')
                    Canrecognisenumerals = request_json.get('Canrecognisenumerals')
                    cancolourgivenshape = request_json.get('cancolourgivenshape')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_SpecialAssessmentthrefourYrs()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSATW_doesrespondtonamecall=doesrespondtonamecall
                        Insert.MSATW_doesmakeseyecontact=doesmakeseyecontact
                        Insert.MSATW_initiatesinteractiontoward=initiatesinteractiontoward
                        Insert.MSATW_cansitformins=cansitformins
                        Insert.MSATW_understandinstructionslikestand=understandinstructionslikestand
                        Insert.MSATW_getthatputthere=getthatputthere
                        Insert.MSATW_givemegetthis=givemegetthis
                        Insert.MSATW_runwalkjump=runwalkjump
                        Insert.MSATW_lookdownup=lookdownup
                        Insert.MSATW_cananswerwhatis = cananswerwhatis
                        Insert.MSATW_cananswerfavoritecolour=cananswerfavoritecolour
                        Insert.MSATW_canfixpiecepuzzle=canfixpiecepuzzle
                        Insert.MSATW_vocabularyshapes=vocabularyshapes
                        Insert.MSATW_vocabularycolors=vocabularycolors
                        Insert.MSATW_vocabularywild=vocabularywild
                        Insert.MSATW_vocabularyfruits=vocabularyfruits
                        Insert.MSATW_vocabularybodyparts=vocabularybodyparts
                        Insert.MSATW_Canunderstandpositions=Canunderstandpositions
                        Insert.MSATW_cansingrhymes=cansingrhymes
                        Insert.MSATW_canunderstandstories=canunderstandstories
                        Insert.MSATW_canWhatquestions=canWhatquestions
                        Insert.MSATW_canidentifybasicobjects=canidentifybasicobjects
                        Insert.MSATW_canholdacrayonpencil=canholdacrayonpencil
                        Insert.MSATW_canimitate=canimitate
                        Insert.MSATW_canplaydoughballs=canplaydoughballs
                        Insert.MSATW_canheshethrow=canheshethrow
                        Insert.MSATW_canrecognisealphabet=canrecognisealphabet
                        Insert.MSATW_Canrecognisenumerals=Canrecognisenumerals
                        Insert.MSATW_cancolourgivenshape=cancolourgivenshape
                        Insert.MSATW_AddUser= data['id']
                        Insert.MSATW_AddDate = datetime.datetime.now()
                        Insert.MSATW_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Special Ed Assessment Three - Four years Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_SpecialAssessmentthrefourYrs).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSATW_doesrespondtonamecall=doesrespondtonamecall
                        Insert.MSATW_doesmakeseyecontact=doesmakeseyecontact
                        Insert.MSATW_initiatesinteractiontoward=initiatesinteractiontoward
                        Insert.MSATW_cansitformins=cansitformins
                        Insert.MSATW_understandinstructionslikestand=understandinstructionslikestand
                        Insert.MSATW_getthatputthere=getthatputthere
                        Insert.MSATW_givemegetthis=givemegetthis
                        Insert.MSATW_runwalkjump=runwalkjump
                        Insert.MSATW_lookdownup=lookdownup
                        Insert.MSATW_cananswerwhatis = cananswerwhatis
                        Insert.MSATW_cananswerfavoritecolour=cananswerfavoritecolour
                        Insert.MSATW_canfixpiecepuzzle=canfixpiecepuzzle
                        Insert.MSATW_vocabularyshapes=vocabularyshapes
                        Insert.MSATW_vocabularycolors=vocabularycolors
                        Insert.MSATW_vocabularywild=vocabularywild
                        Insert.MSATW_vocabularyfruits=vocabularyfruits
                        Insert.MSATW_vocabularybodyparts=vocabularybodyparts
                        Insert.MSATW_Canunderstandpositions=Canunderstandpositions
                        Insert.MSATW_cansingrhymes=cansingrhymes
                        Insert.MSATW_canunderstandstories=canunderstandstories
                        Insert.MSATW_canWhatquestions=canWhatquestions
                        Insert.MSATW_canidentifybasicobjects=canidentifybasicobjects
                        Insert.MSATW_canholdacrayonpencil=canholdacrayonpencil
                        Insert.MSATW_canimitate=canimitate
                        Insert.MSATW_canplaydoughballs=canplaydoughballs
                        Insert.MSATW_canheshethrow=canheshethrow
                        Insert.MSATW_canrecognisealphabet=canrecognisealphabet
                        Insert.MSATW_Canrecognisenumerals=Canrecognisenumerals
                        Insert.MSATW_cancolourgivenshape=cancolourgivenshape
                        Insert.MSATW_AddUser= data['id']
                        Insert.MSATW_AddDate = datetime.datetime.now()
                        Insert.MSATW_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Special Ed Assessment Three - Four years Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSpecialEdassessmentthreefouryearsForm', methods=['GET','POST'])
def viewSpecialEdassessmentthreefouryearsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSpecialEdassessmentthreefouryearsForm,
                                session.query(Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_doesrespondtonamecall.label('doesrespondtonamecall'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_doesmakeseyecontact.label('doesmakeseyecontact'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_initiatesinteractiontoward.label('initiatesinteractiontoward'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cansitformins.label('cansitformins'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_understandinstructionslikestand.label('understandinstructionslikestand'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_getthatputthere.label('getthatputthere'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_givemegetthis.label('givemegetthis'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_runwalkjump.label('runwalkjump'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_lookdownup.label('lookdownup'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cananswerwhatis.label('cananswerwhatis'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cananswerfavoritecolour.label('cananswerfavoritecolour'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canfixpiecepuzzle.label('canfixpiecepuzzle'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularyshapes.label('vocabularyshapes'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularycolors.label('vocabularycolors'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularywild.label('vocabularywild'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularyfruits.label('vocabularyfruits'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularybodyparts.label('vocabularybodyparts'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_Canunderstandpositions.label('Canunderstandpositions'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cansingrhymes.label('cansingrhymes'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canunderstandstories.label('canunderstandstories'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canWhatquestions.label('canWhatquestions'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canidentifybasicobjects.label('canidentifybasicobjects'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canholdacrayonpencil.label('canholdacrayonpencil'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canmaketower.label('canmaketower'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canimitate.label('canimitate'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canplaydoughballs.label('canplaydoughballs'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canheshethrow.label('canheshethrow'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canrecognisealphabet.label('canrecognisealphabet'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_Canrecognisenumerals.label('Canrecognisenumerals'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cancolourgivenshape.label('cancolourgivenshape'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATWID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSpecialEdassessmentfouryearsForm', methods=['POST','GET'])
def getSpecialEdassessmentfouryearsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_SpecialAssessmentfourYrs.MSATWID.label('Id'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_respondnamecall.label('MSATW_respondnamecall'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_makeseyecontact.label('MSATW_makeseyecontact'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_interactiontowardothers.label('MSATW_interactiontowardothers'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cansitformins.label('MSATW_cansitformins'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cananswerwhatname.label('MSATW_cananswerwhatname'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_answerfavoritecolour.label('MSATW_answerfavoritecolour'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canfixpiecepuzzle.label('MSATW_canfixpiecepuzzle'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularyshapes.label('MSATW_vocabularyshapes'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularycolors.label('MSATW_vocabularycolors'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularywild.label('MSATW_vocabularywild'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularybody.label('MSATW_vocabularybody'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_Vocabularyfruits.label('MSATW_Vocabularyfruits'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canunderstandpositions.label('MSATW_canunderstandpositions'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cansingrhymes.label('MSATW_cansingrhymes'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canunderstandstories.label('MSATW_canunderstandstories'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_replyWhatquestions.label('MSATW_replyWhatquestions'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_identifybasicobjects.label('MSATW_identifybasicobjects'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_holdcrayonpencil.label('MSATW_holdcrayonpencil'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canimitate.label('MSATW_canimitate'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_doughmakeballs.label('MSATW_doughmakeballs'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canthrow.label('MSATW_canthrow'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_recognisealphabets.label('MSATW_recognisealphabets'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_recognisenumerals.label('MSATW_recognisenumerals'),
                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cancolourshape.label('MSATW_cancolourshape'),
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentfourYrs.MSATWID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.SpecialEdassessmentfouryears,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='SpecialEdassessmentfouryears',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    achievement = Common_Function.CommonFun.achievement()
                    getTextField[0]['options']= achievement
                    getTextField[1]['options']= achievement
                    getTextField[2]['options']= achievement
                    getTextField[3]['options']= achievement
                    getTextField[4]['options']= achievement
                    getTextField[5]['options']= achievement
                    getTextField[6]['options']= achievement
                    getTextField[7]['options']= achievement
                    getTextField[8]['options']= achievement
                    getTextField[9]['options']= achievement
                    getTextField[10]['options']= achievement
                    getTextField[11]['options']= achievement
                    getTextField[12]['options']= achievement
                    getTextField[13]['options']= achievement
                    getTextField[14]['options']= achievement
                    getTextField[15]['options']= achievement
                    getTextField[16]['options']= achievement
                    getTextField[17]['options']= achievement
                    getTextField[18]['options']= achievement
                    getTextField[19]['options']= achievement
                    getTextField[20]['options']= achievement
                    getTextField[21]['options']= achievement
                    getTextField[22]['options']= achievement
                    getTextField[23]['options']= achievement

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSATW_respondnamecall
                        getTextField[1]['value'] = queryResult[0].MSATW_makeseyecontact
                        getTextField[2]['value'] = queryResult[0].MSATW_interactiontowardothers
                        getTextField[3]['value'] = queryResult[0].MSATW_cansitformins
                        getTextField[4]['value'] = queryResult[0].MSATW_cananswerwhatname
                        getTextField[5]['value'] = queryResult[0].MSATW_answerfavoritecolour
                        getTextField[6]['value'] = queryResult[0].MSATW_canfixpiecepuzzle
                        getTextField[7]['value'] = queryResult[0].MSATW_vocabularyshapes
                        getTextField[8]['value'] = queryResult[0].MSATW_vocabularycolors
                        getTextField[9]['value'] = queryResult[0].MSATW_vocabularywild
                        getTextField[10]['value'] = queryResult[0].MSATW_vocabularybody
                        getTextField[11]['value'] = queryResult[0].MSATW_Vocabularyfruits
                        getTextField[12]['value'] = queryResult[0].MSATW_canunderstandpositions
                        getTextField[13]['value'] = queryResult[0].MSATW_cansingrhymes
                        getTextField[14]['value'] = queryResult[0].MSATW_canunderstandstories
                        getTextField[15]['value'] = queryResult[0].MSATW_replyWhatquestions
                        getTextField[16]['value'] = queryResult[0].MSATW_identifybasicobjects
                        getTextField[17]['value'] = queryResult[0].MSATW_holdcrayonpencil
                        getTextField[18]['value'] = queryResult[0].MSATW_canimitate
                        getTextField[19]['value'] = queryResult[0].MSATW_doughmakeballs
                        getTextField[20]['value'] = queryResult[0].MSATW_canthrow
                        getTextField[21]['value'] = queryResult[0].MSATW_recognisealphabets
                        getTextField[22]['value'] = queryResult[0].MSATW_recognisenumerals
                        getTextField[23]['value'] = queryResult[0].MSATW_cancolourshape
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSpecialEdassessmentfouryearsForm', methods=['GET','POST'])
def submitSpecialEdassessmentfouryearsForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    respondnamecall = request_json.get('respondnamecall')
                    makeseyecontact = request_json.get('makeseyecontact')
                    interactiontowardothers = request_json.get('interactiontowardothers')
                    cansitformins = request_json.get('cansitformins')
                    cananswerwhatname = request_json.get('cananswerwhatname')
                    answerfavoritecolour = request_json.get('answerfavoritecolour')
                    canfixpiecepuzzle = request_json.get('canfixpiecepuzzle')
                    vocabularyshapes = request_json.get('vocabularyshapes')
                    vocabularywild = request_json.get('vocabularywild')
                    vocabularycolors = request_json.get('vocabularycolors')

                    Vocabularyfruits = request_json.get('Vocabularyfruits')
                    vocabularybody = request_json.get('vocabularybody')
                    canunderstandpositions = request_json.get('canunderstandpositions')
                    cansingrhymes = request_json.get('cansingrhymes')
                    canunderstandstories = request_json.get('canunderstandstories')
                    replyWhatquestions = request_json.get('replyWhatquestions')
                    identifybasicobjects = request_json.get('identifybasicobjects')
                    holdcrayonpencil = request_json.get('holdcrayonpencil')
                    canimitate = request_json.get('canimitate')
                    doughmakeballs = request_json.get('doughmakeballs')
                    canthrow = request_json.get('canthrow')
                    recognisealphabets = request_json.get('recognisealphabets')
                    recognisenumerals = request_json.get('recognisenumerals')
                    cancolourshape = request_json.get('cancolourshape')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_SpecialAssessmentfourYrs()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSATW_respondnamecall= respondnamecall
                        Insert.MSATW_makeseyecontact=makeseyecontact
                        Insert.MSATW_interactiontowardothers=interactiontowardothers
                        Insert.MSATW_cansitformins=cansitformins
                        Insert.MSATW_cananswerwhatname=cananswerwhatname
                        Insert.MSATW_answerfavoritecolour=answerfavoritecolour
                        Insert.MSATW_canfixpiecepuzzle=canfixpiecepuzzle
                        Insert.MSATW_vocabularyshapes=vocabularyshapes
                        Insert.MSATW_vocabularycolors=vocabularycolors
                        Insert.MSATW_vocabularywild = vocabularywild
                        Insert.MSATW_Vocabularyfruits=Vocabularyfruits
                        Insert.MSATW_vocabularybody=vocabularybody
                        Insert.MSATW_canunderstandpositions=canunderstandpositions
                        Insert.MSATW_cansingrhymes=cansingrhymes

                        Insert.MSATW_canunderstandstories=canunderstandstories

                        Insert.MSATW_replyWhatquestions=replyWhatquestions
                        Insert.MSATW_identifybasicobjects=identifybasicobjects
                        Insert.MSATW_holdcrayonpencil=holdcrayonpencil

                        Insert.MSATW_canimitate=canimitate
                        Insert.MSATW_doughmakeballs=doughmakeballs
                        Insert.MSATW_canthrow=canthrow
                        Insert.MSATW_recognisealphabets=recognisealphabets
                        Insert.MSATW_recognisenumerals=recognisenumerals
                        Insert.MSATW_cancolourshape=cancolourshape
                        Insert.MSATW_AddUser= data['id']
                        Insert.MSATW_AddDate = datetime.datetime.now()
                        Insert.MSATW_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Special Ed Assessment Four - Five years Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_SpecialAssessmentfourYrs).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSATW_respondnamecall= respondnamecall
                        Insert.MSATW_makeseyecontact=makeseyecontact
                        Insert.MSATW_interactiontowardothers=interactiontowardothers
                        Insert.MSATW_cansitformins=cansitformins
                        Insert.MSATW_cananswerwhatname=cananswerwhatname
                        Insert.MSATW_answerfavoritecolour=answerfavoritecolour
                        Insert.MSATW_canfixpiecepuzzle=canfixpiecepuzzle
                        Insert.MSATW_vocabularyshapes=vocabularyshapes
                        Insert.MSATW_vocabularycolors=vocabularycolors
                        Insert.MSATW_vocabularywild = vocabularywild
                        Insert.MSATW_Vocabularyfruits=Vocabularyfruits
                        Insert.MSATW_vocabularybody=vocabularybody
                        Insert.MSATW_canunderstandpositions=canunderstandpositions
                        Insert.MSATW_cansingrhymes=cansingrhymes

                        Insert.MSATW_canunderstandstories=canunderstandstories

                        Insert.MSATW_replyWhatquestions=replyWhatquestions
                        Insert.MSATW_identifybasicobjects=identifybasicobjects
                        Insert.MSATW_holdcrayonpencil=holdcrayonpencil

                        Insert.MSATW_canimitate=canimitate
                        Insert.MSATW_doughmakeballs=doughmakeballs
                        Insert.MSATW_canthrow=canthrow
                        Insert.MSATW_recognisealphabets=recognisealphabets
                        Insert.MSATW_recognisenumerals=recognisenumerals
                        Insert.MSATW_cancolourshape=cancolourshape
                        Insert.MSATW_AddUser= data['id']
                        Insert.MSATW_AddDate = datetime.datetime.now()
                        Insert.MSATW_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Special Ed Assessment Four - Five years Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSpecialEdassessmentfouryearsForm', methods=['GET','POST'])
def viewSpecialEdassessmentfouryearsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSpecialEdassessmentfouryearsForm,
                                session.query(Model.models.Application.M_SpecialAssessmentfourYrs.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_respondnamecall.label('respondnamecall'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_makeseyecontact.label('makeseyecontact'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_interactiontowardothers.label('interactiontowardothers'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cansitformins.label('cansitformins'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cananswerwhatname.label('cananswerwhatname'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_answerfavoritecolour.label('answerfavoritecolour'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canfixpiecepuzzle.label('canfixpiecepuzzle'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularyshapes.label('vocabularyshapes'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularycolors.label('vocabularycolors'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularywild.label('vocabularywild'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularybody.label('vocabularybody'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_Vocabularyfruits.label('Vocabularyfruits'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canunderstandpositions.label('canunderstandpositions'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cansingrhymes.label('cansingrhymes'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canunderstandstories.label('canunderstandstories'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_replyWhatquestions.label('replyWhatquestions'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_identifybasicobjects.label('identifybasicobjects'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_holdcrayonpencil.label('holdcrayonpencil'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canimitate.label('canimitate'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_doughmakeballs.label('doughmakeballs'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canthrow.label('canthrow'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_recognisealphabets.label('recognisealphabets'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_recognisenumerals.label('recognisenumerals'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cancolourshape.label('cancolourshape'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentfourYrs.MSATWID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSpecialEdassessmentsevenyearsForm', methods=['POST','GET'])
def getSpecialEdassessmentsevenyearsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_SpecialAssessmentSevenYrs.MSATWID.label('Id'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_putneedsminimalassistance.label('MSATW_putneedsminimalassistance'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_eathandsonly.label('MSATW_eathandsonly'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_fixasandwich.label('MSATW_fixasandwich'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_givefirstlastname.label('MSATW_givefirstlastname'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_cangiveaddress.label('MSATW_cangiveaddress'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_awareofemotions.label('MSATW_awareofemotions'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_canzipper.label('MSATW_canzipper'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_independentlyassistanct.label('MSATW_independentlyassistanct'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_asksmeaningfulquestions.label('MSATW_asksmeaningfulquestions'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_tellsstorieswords.label('MSATW_tellsstorieswords'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_Doestellage.label('MSATW_Doestellage'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_canobeysimplecommands.label('MSATW_canobeysimplecommands'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_readsimplewords.label('MSATW_readsimplewords'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_writesimplewords.label('MSATW_writesimplewords'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_namethingsaround.label('MSATW_namethingsaround'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_alternatesfeetupdownstairs.label('MSATW_alternatesfeetupdownstairs'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_pedaltricycle.label('MSATW_pedaltricycle'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_catchandthrowball.label('MSATW_catchandthrowball'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_towersmallblocks.label('MSATW_towersmallblocks'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_doughmakeballs.label('MSATW_doughmakeballs'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_tieshoes.label('MSATW_tieshoes'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_holdpencilproperly.label('MSATW_holdpencilproperly'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_drawsanyshape.label('MSATW_drawsanyshape'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_usescissorscutshape.label('MSATW_usescissorscutshape'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_learnseasily.label('MSATW_learnseasily'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_manyfingershand.label('MSATW_manyfingershand'),
                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_countbeyond.label('MSATW_countbeyond'),
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentSevenYrs.MSATWID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.SpecialEdassessmentsevenyears,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='SpecialEdassessmentsevenyears',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    achievement = Common_Function.CommonFun.achievement()
                    getTextField[0]['options']= achievement
                    getTextField[1]['options']= achievement
                    getTextField[2]['options']= achievement
                    getTextField[3]['options']= achievement
                    getTextField[4]['options']= achievement
                    getTextField[5]['options']= achievement
                    getTextField[6]['options']= achievement
                    getTextField[7]['options']= achievement
                    getTextField[8]['options']= achievement
                    getTextField[9]['options']= achievement
                    getTextField[10]['options']= achievement
                    getTextField[11]['options']= achievement
                    getTextField[12]['options']= achievement
                    getTextField[13]['options']= achievement
                    getTextField[14]['options']= achievement
                    getTextField[15]['options']= achievement
                    getTextField[16]['options']= achievement
                    getTextField[17]['options']= achievement
                    getTextField[18]['options']= achievement
                    getTextField[19]['options']= achievement
                    getTextField[20]['options']= achievement
                    getTextField[21]['options']= achievement
                    getTextField[22]['options']= achievement
                    getTextField[23]['options']= achievement
                    getTextField[24]['options']= achievement
                    getTextField[25]['options']= achievement
                    getTextField[26]['options']= achievement


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MSATW_putneedsminimalassistance
                        getTextField[1]['value'] = queryResult[0].MSATW_eathandsonly
                        getTextField[2]['value'] = queryResult[0].MSATW_fixasandwich
                        getTextField[3]['value'] = queryResult[0].MSATW_givefirstlastname
                        getTextField[4]['value'] = queryResult[0].MSATW_cangiveaddress
                        getTextField[5]['value'] = queryResult[0].MSATW_awareofemotions
                        getTextField[6]['value'] = queryResult[0].MSATW_canzipper
                        getTextField[7]['value'] = queryResult[0].MSATW_independentlyassistanct
                        getTextField[8]['value'] = queryResult[0].MSATW_asksmeaningfulquestions
                        getTextField[9]['value'] = queryResult[0].MSATW_tellsstorieswords
                        getTextField[10]['value'] = queryResult[0].MSATW_Doestellage
                        getTextField[11]['value'] = queryResult[0].MSATW_canobeysimplecommands
                        getTextField[12]['value'] = queryResult[0].MSATW_readsimplewords
                        getTextField[13]['value'] = queryResult[0].MSATW_writesimplewords
                        getTextField[14]['value'] = queryResult[0].MSATW_namethingsaround
                        getTextField[15]['value'] = queryResult[0].MSATW_alternatesfeetupdownstairs
                        getTextField[16]['value'] = queryResult[0].MSATW_pedaltricycle
                        getTextField[17]['value'] = queryResult[0].MSATW_catchandthrowball
                        getTextField[18]['value'] = queryResult[0].MSATW_towersmallblocks
                        getTextField[19]['value'] = queryResult[0].MSATW_doughmakeballs
                        getTextField[20]['value'] = queryResult[0].MSATW_tieshoes
                        getTextField[21]['value'] = queryResult[0].MSATW_holdpencilproperly
                        getTextField[22]['value'] = queryResult[0].MSATW_drawsanyshape
                        getTextField[23]['value'] = queryResult[0].MSATW_usescissorscutshape
                        getTextField[24]['value'] = queryResult[0].MSATW_learnseasily
                        getTextField[25]['value'] = queryResult[0].MSATW_manyfingershand
                        getTextField[26]['value'] = queryResult[0].MSATW_countbeyond
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitSpecialEdassessmentsevenyearsForm', methods=['GET','POST'])
def submitSpecialEdassessmentsevenyearsForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    putneedsminimalassistance = request_json.get('putneedsminimalassistance')
                    eathandsonly = request_json.get('eathandsonly')
                    fixasandwich = request_json.get('fixasandwich')
                    givefirstlastname = request_json.get('givefirstlastname')
                    cangiveaddress = request_json.get('cangiveaddress')
                    awareofemotions = request_json.get('awareofemotions')
                    canzipper = request_json.get('canzipper')
                    independentlyassistanct = request_json.get('independentlyassistanct')
                    asksmeaningfulquestions = request_json.get('asksmeaningfulquestions')
                    tellsstorieswords = request_json.get('tellsstorieswords')
                    Doestellage = request_json.get('Doestellage')
                    canobeysimplecommands = request_json.get('canobeysimplecommands')
                    readsimplewords = request_json.get('readsimplewords')
                    writesimplewords = request_json.get('writesimplewords')
                    namethingsaround = request_json.get('namethingsaround')
                    alternatesfeetupdownstairs = request_json.get('alternatesfeetupdownstairs')
                    pedaltricycle = request_json.get('pedaltricycle')
                    catchandthrowball = request_json.get('catchandthrowball')
                    towersmallblocks = request_json.get('towersmallblocks')
                    doughmakeballs = request_json.get('doughmakeballs')
                    tieshoes = request_json.get('tieshoes')
                    holdpencilproperly = request_json.get('holdpencilproperly')
                    drawsanyshape = request_json.get('drawsanyshape')
                    usescissorscutshape = request_json.get('usescissorscutshape')
                    learnseasily = request_json.get('learnseasily')
                    manyfingershand = request_json.get('manyfingershand')
                    countbeyond = request_json.get('countbeyond')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_SpecialAssessmentSevenYrs()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSATW_putneedsminimalassistance=putneedsminimalassistance
                        Insert.MSATW_eathandsonly=eathandsonly
                        Insert.MSATW_fixasandwich=fixasandwich
                        Insert.MSATW_givefirstlastname=givefirstlastname
                        Insert.MSATW_cangiveaddress=cangiveaddress
                        Insert.MSATW_awareofemotions=awareofemotions
                        Insert.MSATW_canzipper=canzipper
                        Insert.MSATW_independentlyassistanct=independentlyassistanct
                        Insert.MSATW_asksmeaningfulquestions=asksmeaningfulquestions
                        Insert.MSATW_tellsstorieswords = tellsstorieswords
                        Insert.MSATW_Doestellage=Doestellage
                        Insert.MSATW_canobeysimplecommands=canobeysimplecommands
                        Insert.MSATW_readsimplewords=readsimplewords
                        Insert.MSATW_writesimplewords=writesimplewords
                        Insert.MSATW_namethingsaround=namethingsaround
                        Insert.MSATW_alternatesfeetupdownstairs=alternatesfeetupdownstairs
                        Insert.MSATW_pedaltricycle=pedaltricycle
                        Insert.MSATW_catchandthrowball=catchandthrowball
                        Insert.MSATW_towersmallblocks=towersmallblocks
                        Insert.MSATW_doughmakeballs=doughmakeballs
                        Insert.MSATW_tieshoes=tieshoes
                        Insert.MSATW_holdpencilproperly=holdpencilproperly
                        Insert.MSATW_drawsanyshape=drawsanyshape
                        Insert.MSATW_usescissorscutshape=usescissorscutshape
                        Insert.MSATW_learnseasily=learnseasily
                        Insert.MSATW_countbeyond=countbeyond
                        Insert.MSATW_manyfingershand=manyfingershand
                        Insert.MSATW_AddUser= data['id']
                        Insert.MSATW_AddDate = datetime.datetime.now()
                        Insert.MSATW_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Special Ed Assessment Five - Seven years Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_SpecialAssessmentSevenYrs).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MSATW_putneedsminimalassistance=putneedsminimalassistance
                        Insert.MSATW_eathandsonly=eathandsonly
                        Insert.MSATW_fixasandwich=fixasandwich
                        Insert.MSATW_givefirstlastname=givefirstlastname
                        Insert.MSATW_cangiveaddress=cangiveaddress
                        Insert.MSATW_awareofemotions=awareofemotions
                        Insert.MSATW_canzipper=canzipper
                        Insert.MSATW_independentlyassistanct=independentlyassistanct
                        Insert.MSATW_asksmeaningfulquestions=asksmeaningfulquestions
                        Insert.MSATW_tellsstorieswords = tellsstorieswords
                        Insert.MSATW_Doestellage=Doestellage
                        Insert.MSATW_canobeysimplecommands=canobeysimplecommands
                        Insert.MSATW_readsimplewords=readsimplewords
                        Insert.MSATW_writesimplewords=writesimplewords
                        Insert.MSATW_namethingsaround=namethingsaround
                        Insert.MSATW_alternatesfeetupdownstairs=alternatesfeetupdownstairs
                        Insert.MSATW_pedaltricycle=pedaltricycle
                        Insert.MSATW_catchandthrowball=catchandthrowball
                        Insert.MSATW_towersmallblocks=towersmallblocks
                        Insert.MSATW_doughmakeballs=doughmakeballs
                        Insert.MSATW_tieshoes=tieshoes
                        Insert.MSATW_holdpencilproperly=holdpencilproperly
                        Insert.MSATW_drawsanyshape=drawsanyshape
                        Insert.MSATW_usescissorscutshape=usescissorscutshape
                        Insert.MSATW_learnseasily=learnseasily
                        Insert.MSATW_countbeyond=countbeyond
                        Insert.MSATW_manyfingershand=manyfingershand
                        Insert.MSATW_AddUser= data['id']
                        Insert.MSATW_AddDate = datetime.datetime.now()
                        Insert.MSATW_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Special Ed Assessment Five - Seven years Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSpecialEdassessmentsevenyearsForm', methods=['GET','POST'])
def viewSpecialEdassessmentsevenyearsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSpecialEdassessmentsevenyearsForm,
                                session.query(Model.models.Application.M_SpecialAssessmentSevenYrs.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_putneedsminimalassistance.label('putneedsminimalassistance'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_eathandsonly.label('eathandsonly'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_fixasandwich.label('fixasandwich'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_givefirstlastname.label('givefirstlastname'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_cangiveaddress.label('cangiveaddress'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_awareofemotions.label('awareofemotions'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_canzipper.label('canzipper'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_independentlyassistanct.label('independentlyassistanct'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_asksmeaningfulquestions.label('asksmeaningfulquestions'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_tellsstorieswords.label('tellsstorieswords'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_Doestellage.label('Doestellage'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_canobeysimplecommands.label('canobeysimplecommands'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_readsimplewords.label('readsimplewords'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_writesimplewords.label('writesimplewords'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_namethingsaround.label('namethingsaround'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_alternatesfeetupdownstairs.label('alternatesfeetupdownstairs'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_pedaltricycle.label('pedaltricycle'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_catchandthrowball.label('catchandthrowball'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_towersmallblocks.label('towersmallblocks'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_doughmakeballs.label('doughmakeballs'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_tieshoes.label('tieshoes'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_holdpencilproperly.label('holdpencilproperly'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_drawsanyshape.label('drawsanyshape'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_usescissorscutshape.label('usescissorscutshape'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentSevenYrs.MSATWID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAssessmentForm', methods=['POST','GET'])
def getAssessmentForm():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    # PId= str(request.data)
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getAssessmentForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddAssessmentForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getAddPHQAssessmentForm', methods=['POST','GET'])
def getAddPHQAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_PHQAssessment.MPAID.label('Id'),
                            Model.models.Application.M_PHQAssessment.MPA_AnyPleasure.label('MPA_AnyPleasure'),
                            Model.models.Application.M_PHQAssessment.MPA_AnyDepression.label('MPA_AnyDepression'),
                            Model.models.Application.M_PHQAssessment.MPA_AnyTrouble.label('MPA_AnyTrouble'),
                            Model.models.Application.M_PHQAssessment.MPA_Anytiredness.label('MPA_Anytiredness'),
                            Model.models.Application.M_PHQAssessment.MPA_AnyOvereat.label('MPA_AnyOvereat'),
                            Model.models.Application.M_PHQAssessment.MPA_Anybadfeel.label('MPA_Anybadfeel'),
                            Model.models.Application.M_PHQAssessment.MPA_TroubledbyAnything.label('MPA_TroubledbyAnything'),
                            Model.models.Application.M_PHQAssessment.MPA_MovingAroundAlot.label('MPA_MovingAroundAlot'),
                            Model.models.Application.M_PHQAssessment.MPA_AnyHurtYourself.label('MPA_AnyHurtYourself')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MPA_IsActive=1,MPA_IsDeleted=0
                                ).order_by(Model.models.Application.M_PHQAssessment.MPAID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddPHQAssessment,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddPHQAssessment',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    PHQ = Common_Function.CommonFun.PHQ()
                    getTextField[0]['options']= PHQ
                    getTextField[1]['options']= PHQ
                    getTextField[2]['options']= PHQ
                    getTextField[3]['options']= PHQ
                    getTextField[4]['options']= PHQ
                    getTextField[5]['options']= PHQ
                    getTextField[6]['options']= PHQ
                    getTextField[7]['options']= PHQ
                    getTextField[8]['options']= PHQ

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MPA_AnyPleasure
                        getTextField[1]['value'] = queryResult[0].MPA_AnyDepression
                        getTextField[2]['value'] = queryResult[0].MPA_AnyTrouble
                        getTextField[3]['value'] = queryResult[0].MPA_Anytiredness
                        getTextField[4]['value'] = queryResult[0].MPA_AnyOvereat
                        getTextField[5]['value'] = queryResult[0].MPA_Anybadfeel
                        getTextField[6]['value'] = queryResult[0].MPA_TroubledbyAnything
                        getTextField[7]['value'] = queryResult[0].MPA_MovingAroundAlot
                        getTextField[8]['value'] = queryResult[0].MPA_AnyHurtYourself
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPHQAssessmentForm', methods=['GET','POST'])
def submitPHQAssessmentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    AnyPleasure = request_json.get('AnyPleasure')
                    AnyDepression = request_json.get('AnyDepression')
                    AnyTrouble = request_json.get('AnyTrouble')
                    Anytiredness = request_json.get('Anytiredness')
                    AnyOvereat = request_json.get('AnyOvereat')
                    Anybadfeel = request_json.get('Anybadfeel')
                    TroubledbyAnything = request_json.get('TroubledbyAnything')
                    MovingAroundAlot = request_json.get('MovingAroundAlot')
                    AnyHurtYourself = request_json.get('AnyHurtYourself')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PHQAssessment()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPA_AnyPleasure=AnyPleasure
                        Insert.MPA_AnyDepression=AnyDepression
                        Insert.MPA_AnyTrouble=AnyTrouble
                        Insert.MPA_Anytiredness=Anytiredness
                        Insert.MPA_AnyOvereat=AnyOvereat
                        Insert.MPA_Anybadfeel=Anybadfeel
                        Insert.MPA_TroubledbyAnything=TroubledbyAnything
                        Insert.MPA_MovingAroundAlot=MovingAroundAlot
                        Insert.MPA_AnyHurtYourself=AnyHurtYourself
                        Insert.MPA_AddUser= data['id']
                        Insert.MPA_AddDate = datetime.datetime.now()
                        Insert.MPA_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'PHQ Assessment Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PHQAssessment).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MPA_AnyPleasure=AnyPleasure
                        Insert.MPA_AnyDepression=AnyDepression
                        Insert.MPA_AnyTrouble=AnyTrouble
                        Insert.MPA_Anytiredness=Anytiredness
                        Insert.MPA_AnyOvereat=AnyOvereat
                        Insert.MPA_Anybadfeel=Anybadfeel
                        Insert.MPA_TroubledbyAnything=TroubledbyAnything
                        Insert.MPA_MovingAroundAlot=MovingAroundAlot
                        Insert.MPA_AnyHurtYourself=AnyHurtYourself
                        Insert.MPA_AddUser= data['id']
                        Insert.MPA_AddDate = datetime.datetime.now()
                        Insert.MPA_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'PHQ Assessment Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewPHQAssessmentForm', methods=['GET','POST'])
def viewPHQAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    # queryresult= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.viewPHQAssessmentForm,
                    #             session.query(Model.models.Application.M_PHQAssessment.MPAID.label('ID'),
                    #                         Model.models.Application.M_PHQAssessment.M_AppointmentID.label('Appointment Id'),
                    #                         Model.models.Application.M_PHQAssessment.MPA_AnyPleasure.label('AnyPleasure'),
                    #                         Model.models.Application.M_PHQAssessment.MPA_AnyDepression.label('AnyDepression'),
                    #                         Model.models.Application.M_PHQAssessment.MPA_AnyTrouble.label('AnyTrouble'),
                    #                         Model.models.Application.M_PHQAssessment.MPA_Anytiredness.label('Anytiredness'),
                    #                         Model.models.Application.M_PHQAssessment.MPA_AnyOvereat.label('AnyOvereat'),
                    #                         Model.models.Application.M_PHQAssessment.MPA_Anybadfeel.label('Anybadfeel'),
                    #                         Model.models.Application.M_PHQAssessment.MPA_TroubledbyAnything.label('TroubledbyAnything'),
                    #                         Model.models.Application.M_PHQAssessment.MPA_MovingAroundAlot.label('MovingAroundAlot'),
                    #                         Model.models.Application.M_PHQAssessment.MPA_AnyHurtYourself.label('AnyHurtYourself'),
                                            
                    #                             ).filter_by(M_Patient_MPID=pid,MPA_IsActive=1,MPA_IsDeleted=0
                    #             ).order_by(Model.models.Application.M_PHQAssessment.MPAID.desc()).all())
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPHQAssessmentForm,
                                session.query(Model.models.Application.M_PHQAssessment.MPAID.label('ID'),
                                            Model.models.Application.M_PHQAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PHQAssessment.MPA_AnyPleasure.label('AnyPleasure'),
                                            Model.models.Application.M_PHQAssessment.MPA_AnyDepression.label('AnyDepression'),
                                            Model.models.Application.M_PHQAssessment.MPA_AnyTrouble.label('AnyTrouble'),
                                            Model.models.Application.M_PHQAssessment.MPA_Anytiredness.label('Anytiredness'),
                                            Model.models.Application.M_PHQAssessment.MPA_AnyOvereat.label('AnyOvereat'),
                                            Model.models.Application.M_PHQAssessment.MPA_Anybadfeel.label('Anybadfeel'),
                                            Model.models.Application.M_PHQAssessment.MPA_TroubledbyAnything.label('TroubledbyAnything'),
                                            Model.models.Application.M_PHQAssessment.MPA_MovingAroundAlot.label('MovingAroundAlot'),
                                            Model.models.Application.M_PHQAssessment.MPA_AnyHurtYourself.label('AnyHurtYourself'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_PHQAssessment.MPA_AddDate,'%d-%b-%Y').label('Date'),
                                            ).filter_by(M_Patient_MPID=pid,MPA_IsActive=1,MPA_IsDeleted=0
                                ).order_by(Model.models.Application.M_PHQAssessment.MPAID.desc()).all())
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAddHARSAssessmentForm', methods=['POST','GET'])
def getAddHARSAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_HARSAssessment.MHAID.label('Id'),
                            Model.models.Application.M_HARSAssessment.MHA_anyAnxiousMood.label('MHA_anyAnxiousMood'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyTensionFeeling.label('MHA_AnyTensionFeeling'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyFearsfeeling.label('MHA_AnyFearsfeeling'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyInsomnia.label('MHA_AnyInsomnia'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyIntellectual.label('MHA_AnyIntellectual'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyDipressedMood.label('MHA_AnyDipressedMood'),
                            Model.models.Application.M_HARSAssessment.MHA_AnySomaticpains.label('MHA_AnySomaticpains'),
                            Model.models.Application.M_HARSAssessment.MHA_AnySomaticWeekness.label('MHA_AnySomaticWeekness'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyCardiovascular.label('MHA_AnyCardiovascular'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyRespiratory.label('MHA_AnyRespiratory'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyGastrontedtinal.label('MHA_AnyGastrontedtinal'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyGenitourinarySymptoms.label('MHA_AnyGenitourinarySymptoms'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyAutonomicSymptoms.label('MHA_AnyAutonomicSymptoms'),
                            Model.models.Application.M_HARSAssessment.MHA_AnyBehaviouratInterview.label('MHA_AnyBehaviouratInterview')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MHA_IsActive=1,MHA_IsDeleted=0
                                ).order_by(Model.models.Application.M_HARSAssessment.MHAID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddHARSAssessment,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddHARSAssessment',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    HARS = Common_Function.CommonFun.HARS()
                    getTextField[0]['options']= HARS
                    getTextField[1]['options']= HARS
                    getTextField[2]['options']= HARS
                    getTextField[3]['options']= HARS
                    getTextField[4]['options']= HARS
                    getTextField[5]['options']= HARS
                    getTextField[6]['options']= HARS
                    getTextField[7]['options']= HARS
                    getTextField[8]['options']= HARS
                    getTextField[9]['options']= HARS
                    getTextField[10]['options']= HARS
                    getTextField[11]['options']= HARS
                    getTextField[12]['options']= HARS
                    getTextField[13]['options']= HARS


                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MHA_anyAnxiousMood
                        getTextField[1]['value'] = queryResult[0].MHA_AnyTensionFeeling
                        getTextField[2]['value'] = queryResult[0].MHA_AnyFearsfeeling
                        getTextField[3]['value'] = queryResult[0].MHA_AnyInsomnia
                        getTextField[4]['value'] = queryResult[0].MHA_AnyIntellectual
                        getTextField[5]['value'] = queryResult[0].MHA_AnyDipressedMood
                        getTextField[6]['value'] = queryResult[0].MHA_AnySomaticpains
                        getTextField[7]['value'] = queryResult[0].MHA_AnySomaticWeekness
                        getTextField[8]['value'] = queryResult[0].MHA_AnyCardiovascular
                        getTextField[9]['value'] = queryResult[0].MHA_AnyRespiratory
                        getTextField[10]['value'] = queryResult[0].MHA_AnyGastrontedtinal
                        getTextField[11]['value'] = queryResult[0].MHA_AnyGenitourinarySymptoms
                        getTextField[12]['value'] = queryResult[0].MHA_AnyAutonomicSymptoms
                        getTextField[13]['value'] = queryResult[0].MHA_AnyBehaviouratInterview
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()
@app.route('/submitHARSAssessmentForm', methods=['GET','POST'])
def submitHARSAssessmentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    anyAnxiousMood = request_json.get('anyAnxiousMood')
                    AnyTensionFeeling = request_json.get('AnyTensionFeeling')
                    AnyFearsfeeling = request_json.get('AnyFearsfeeling')
                    AnyInsomnia = request_json.get('AnyInsomnia')
                    AnyIntellectual = request_json.get('AnyIntellectual')
                    AnyDipressedMood = request_json.get('AnyDipressedMood')
                    AnySomaticpains = request_json.get('AnySomaticpains')
                    AnySomaticWeekness = request_json.get('AnySomaticWeekness')
                    AnyCardiovascular = request_json.get('AnyCardiovascular')
                    AnyRespiratory = request_json.get('AnyRespiratory')
                    AnyGastrontedtinal = request_json.get('AnyGastrontedtinal')
                    AnyGenitourinarySymptoms = request_json.get('AnyGenitourinarySymptoms')
                    AnyAutonomicSymptoms = request_json.get('AnyAutonomicSymptoms')
                    AnyBehaviouratInterview = request_json.get('AnyBehaviouratInterview')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id==None):
                        Insert=Model.models.Application.M_HARSAssessment()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MHA_anyAnxiousMood=anyAnxiousMood
                        Insert.MHA_AnyTensionFeeling=AnyTensionFeeling
                        Insert.MHA_AnyFearsfeeling=AnyFearsfeeling
                        Insert.MHA_AnyInsomnia=AnyInsomnia
                        Insert.MHA_AnyIntellectual=AnyIntellectual
                        Insert.MHA_AnyDipressedMood=AnyDipressedMood
                        Insert.MHA_AnySomaticpains=AnySomaticpains
                        Insert.MHA_AnySomaticWeekness=AnySomaticWeekness
                        Insert.MHA_AnyCardiovascular=AnyCardiovascular
                        Insert.MHA_AnyRespiratory=AnyRespiratory
                        Insert.MHA_AnyGastrontedtinal=AnyGastrontedtinal
                        Insert.MHA_AnyGenitourinarySymptoms=AnyGenitourinarySymptoms
                        Insert.MHA_AnyAutonomicSymptoms=AnyAutonomicSymptoms
                        Insert.MHA_AnyBehaviouratInterview=AnyBehaviouratInterview
                        Insert.MHA_AddUser= data['id']
                        Insert.MHA_AddDate = datetime.datetime.now()
                        Insert.MHA_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'HARS Assessment Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_HARSAssessment).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MHA_anyAnxiousMood=anyAnxiousMood
                        Insert.MHA_AnyTensionFeeling=AnyTensionFeeling
                        Insert.MHA_AnyFearsfeeling=AnyFearsfeeling
                        Insert.MHA_AnyInsomnia=AnyInsomnia
                        Insert.MHA_AnyIntellectual=AnyIntellectual
                        Insert.MHA_AnyDipressedMood=AnyDipressedMood
                        Insert.MHA_AnySomaticpains=AnySomaticpains
                        Insert.MHA_AnySomaticWeekness=AnySomaticWeekness
                        Insert.MHA_AnyCardiovascular=AnyCardiovascular
                        Insert.MHA_AnyRespiratory=AnyRespiratory
                        Insert.MHA_AnyGastrontedtinal=AnyGastrontedtinal
                        Insert.MHA_AnyGenitourinarySymptoms=AnyGenitourinarySymptoms
                        Insert.MHA_AnyAutonomicSymptoms=AnyAutonomicSymptoms
                        Insert.MHA_AnyBehaviouratInterview=AnyBehaviouratInterview
                        Insert.MHA_AddUser= data['id']
                        Insert.MHA_AddDate = datetime.datetime.now()
                        Insert.MHA_AddIP= flask.request.remote_addr
                        session.commit()
                        return jsonify({'msg':'HARS Assessment Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()
# @app.route('/submitHARSAssessmentForm', methods=['GET','POST'])
# def submitHARSAssessmentForm():

#     session=Session()
#     try:

#         if(request.method == "POST"):
#             if('Authorization' in request.headers):
#                 token= request.headers.get('Authorization')

#                 if not token:
#                     return jsonify({'MSG':'Token is missing'})
#                 data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
#                 if(data):
#                     request_json = request.get_json()
#                     anyAnxiousMood = request_json.get('anyAnxiousMood')
#                     AnyTensionFeeling = request_json.get('AnyTensionFeeling')
#                     AnyFearsfeeling = request_json.get('AnyFearsfeeling')
#                     AnyInsomnia = request_json.get('AnyInsomnia')
#                     AnyIntellectual = request_json.get('AnyIntellectual')
#                     AnyDipressedMood = request_json.get('AnyDipressedMood')
#                     AnySomaticpains = request_json.get('AnySomaticpains')
#                     AnySomaticWeekness = request_json.get('AnySomaticWeekness')
#                     AnyCardiovascular = request_json.get('AnyCardiovascular')
#                     AnyRespiratory = request_json.get('AnyRespiratory')
#                     AnyGastrontedtinal = request_json.get('AnyGastrontedtinal')
#                     AnyGenitourinarySymptoms = request_json.get('AnyGenitourinarySymptoms')
#                     AnyAutonomicSymptoms = request_json.get('AnyAutonomicSymptoms')
#                     AnyBehaviouratInterview = request_json.get('AnyBehaviouratInterview')


#                     Aid = request_json.get('Aid')
#                     PID = request_json.get('PID')
#                     Id = request_json.get('Id')

#                     Insert=Model.models.Application.M_HARSAssessment()
#                     Insert.M_Patient_MPID=PID
#                     Insert.M_AppointmentID=Aid
#                     Insert.MHA_anyAnxiousMood=anyAnxiousMood
#                     Insert.MHA_AnyTensionFeeling=AnyTensionFeeling
#                     Insert.MHA_AnyFearsfeeling=AnyFearsfeeling
#                     Insert.MHA_AnyInsomnia=AnyInsomnia
#                     Insert.MHA_AnyIntellectual=AnyIntellectual
#                     Insert.MHA_AnyDipressedMood=AnyDipressedMood
#                     Insert.MHA_AnySomaticpains=AnySomaticpains
#                     Insert.MHA_AnySomaticWeekness=AnySomaticWeekness
#                     Insert.MHA_AnyCardiovascular=AnyCardiovascular
#                     Insert.MHA_AnyRespiratory=AnyRespiratory
#                     Insert.MHA_AnyGastrontedtinal=AnyGastrontedtinal
#                     Insert.MHA_AnyGenitourinarySymptoms=AnyGenitourinarySymptoms
#                     Insert.MHA_AnyAutonomicSymptoms=AnyAutonomicSymptoms
#                     Insert.MHA_AnyBehaviouratInterview=AnyBehaviouratInterview
#                     Insert.MHA_AddUser= data['id']
#                     Insert.MHA_AddDate = datetime.datetime.now()
#                     Insert.MHA_AddIP= flask.request.remote_addr
#                     session.add(Insert)
#                     session.commit()
#                     return jsonify({'msg':'HARS Assessment Added Successfully'})
#                 else:
#                     return jsonify({'err':'Token is expired'})
#             else:
#                 return jsonify({'err':'Please Login'})

#     except Exception as e:
#         return jsonify({'err':str(e)})
#     finally:
#         session.close()

@app.route('/viewHARSAssessmentForm', methods=['GET','POST'])
def viewHARSAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    # queryresult= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.viewHARSAssessmentForm,
                    #             session.query(Model.models.Application.M_HARSAssessment.MHAID.label('ID'),
                    #                         Model.models.Application.M_HARSAssessment.M_AppointmentID.label('Appointment Id'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_anyAnxiousMood.label('anyAnxiousMood'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyTensionFeeling.label('AnyTensionFeeling'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyFearsfeeling.label('AnyFearsfeeling'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyInsomnia.label('AnyInsomnia'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyIntellectual.label('AnyIntellectual'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyDipressedMood.label('AnyDipressedMood'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnySomaticpains.label('AnySomaticpains'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnySomaticWeekness.label('AnySomaticWeekness'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyCardiovascular.label('AnyCardiovascular'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyRespiratory.label('AnyRespiratory'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyGastrontedtinal.label('AnyGastrontedtinal'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyGenitourinarySymptoms.label('AnyGenitourinarySymptoms'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyAutonomicSymptoms.label('AnyAutonomicSymptoms'),
                    #                         Model.models.Application.M_HARSAssessment.MHA_AnyBehaviouratInterview.label('AnyBehaviouratInterview'),
                                            
                    #                             ).filter_by(M_Patient_MPID=pid,MHA_IsActive=1,MHA_IsDeleted=0
                    #             ).order_by(Model.models.Application.M_HARSAssessment.MHAID.desc()).all())
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewHARSAssessmentForm,
                                session.query(Model.models.Application.M_HARSAssessment.MHAID.label('ID'),
                                            Model.models.Application.M_HARSAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_HARSAssessment.MHA_anyAnxiousMood.label('anyAnxiousMood'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyTensionFeeling.label('AnyTensionFeeling'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyFearsfeeling.label('AnyFearsfeeling'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyInsomnia.label('AnyInsomnia'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyIntellectual.label('AnyIntellectual'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyDipressedMood.label('AnyDipressedMood'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnySomaticpains.label('AnySomaticpains'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnySomaticWeekness.label('AnySomaticWeekness'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyCardiovascular.label('AnyCardiovascular'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyRespiratory.label('AnyRespiratory'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyGastrontedtinal.label('AnyGastrontedtinal'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyGenitourinarySymptoms.label('AnyGenitourinarySymptoms'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyAutonomicSymptoms.label('AnyAutonomicSymptoms'),
                                            Model.models.Application.M_HARSAssessment.MHA_AnyBehaviouratInterview.label('AnyBehaviouratInterview'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_HARSAssessment.MHA_AddDate,'%d-%b-%Y').label('Date'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MHA_IsActive=1,MHA_IsDeleted=0
                                ).order_by(Model.models.Application.M_HARSAssessment.MHAID.desc()).all())
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAddHRDSAssessmentForm', methods=['POST','GET'])
def getAddHRDSAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_HRDSAssessment.MHAID.label('Id'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSDepressedMood.label('MHA_HRDSDepressedMood'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSFeelingGuilt.label('MHA_HRDSFeelingGuilt'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSSuide.label('MHA_HRDSSuide'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSInsomnia.label('MHA_HRDSInsomnia'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSMidNight.label('MHA_HRDSMidNight'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSEarlyMorning.label('MHA_HRDSEarlyMorning'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSWork.label('MHA_HRDSWork'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSRetardation.label('MHA_HRDSRetardation'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSAgitation.label('MHA_HRDSAgitation'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSPsychic.label('MHA_HRDSPsychic'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSAnxietySomatic.label('MHA_HRDSAnxietySomatic'),
                            Model.models.Application.M_HRDSAssessment.MHA_HRDSSomatic.label('MHA_HRDSSomatic'),
                            Model.models.Application.M_HRDSAssessment.MHA_HDRSGeneralSomatic.label('MHA_HDRSGeneralSomatic'),
                            Model.models.Application.M_HRDSAssessment.MHA_HDRSLossOfLibido.label('MHA_HDRSLossOfLibido'),
                            Model.models.Application.M_HRDSAssessment.MHA_HDRSHypochondriasis.label('MHA_HDRSHypochondriasis'),
                            Model.models.Application.M_HRDSAssessment.MHA_HDRSLossofWeight.label('MHA_HDRSLossofWeight'),
                            Model.models.Application.M_HRDSAssessment.MHA_HDRSInsight.label('MHA_HDRSInsight'),
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MHA_IsActive=1,MHA_IsDeleted=0
                                ).order_by(Model.models.Application.M_HRDSAssessment.MHAID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddHRDSAssessment,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                            ).filter_by(MFC_FormName='AddHRDSAssessment',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    HRDSDepressedMood = Common_Function.CommonFun.HRDSDepressedMood()
                    HRDSFeelingGuilt = Common_Function.CommonFun.HRDSFeelingGuilt()
                    HRDSSucide = Common_Function.CommonFun.HRDSSucide()
                    HRDSInsomnia = Common_Function.CommonFun.HRDSInsomnia()
                    HRDSMidNight = Common_Function.CommonFun.HRDSMidNight()
                    HRDSEarlyMorning = Common_Function.CommonFun.HRDSEarlyMorning()
                    HRDSWork = Common_Function.CommonFun.HRDSWork()
                    HRDSRetardation = Common_Function.CommonFun.HRDSRetardation()
                    HRDSAgitation = Common_Function.CommonFun.HRDSAgitation()
                    HRDSPsychic = Common_Function.CommonFun.HRDSPsychic()
                    HRDSAnxietySomatic = Common_Function.CommonFun.HRDSAnxietySomatic()
                    HRDSSomatic = Common_Function.CommonFun.HRDSSomatic()
                    HDRSGeneralSomatic = Common_Function.CommonFun.HDRSGeneralSomatic()
                    HDRSLossOfLibido = Common_Function.CommonFun.HDRSLossOfLibido()
                    HDRSHypochondriasis = Common_Function.CommonFun.HDRSHypochondriasis()
                    HDRSLossofWeight = Common_Function.CommonFun.HDRSLossofWeight()
                    HDRSInsight = Common_Function.CommonFun.HDRSInsight()

                    getTextField[0]['options']= HRDSDepressedMood
                    getTextField[1]['options']= HRDSFeelingGuilt
                    getTextField[2]['options']= HRDSSucide
                    getTextField[3]['options']= HRDSInsomnia
                    getTextField[4]['options']= HRDSMidNight
                    getTextField[5]['options']= HRDSEarlyMorning
                    getTextField[6]['options']= HRDSWork
                    getTextField[7]['options']= HRDSRetardation
                    getTextField[8]['options']= HRDSAgitation
                    getTextField[9]['options']= HRDSPsychic
                    getTextField[10]['options']= HRDSAnxietySomatic
                    getTextField[11]['options']= HRDSSomatic
                    getTextField[12]['options']= HDRSGeneralSomatic
                    getTextField[13]['options']= HDRSLossOfLibido
                    getTextField[14]['options']= HDRSHypochondriasis
                    getTextField[15]['options']= HDRSLossofWeight
                    getTextField[16]['options']= HDRSInsight

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MHA_HRDSDepressedMood
                        getTextField[1]['value'] = queryResult[0].MHA_HRDSFeelingGuilt
                        getTextField[2]['value'] = queryResult[0].MHA_HRDSSuide
                        getTextField[3]['value'] = queryResult[0].MHA_HRDSInsomnia
                        getTextField[4]['value'] = queryResult[0].MHA_HRDSMidNight
                        getTextField[5]['value'] = queryResult[0].MHA_HRDSEarlyMorning
                        getTextField[6]['value'] = queryResult[0].MHA_HRDSWork
                        getTextField[7]['value'] = queryResult[0].MHA_HRDSRetardation
                        getTextField[8]['value'] = queryResult[0].MHA_HRDSAgitation
                        getTextField[9]['value'] = queryResult[0].MHA_HRDSPsychic
                        getTextField[10]['value'] = queryResult[0].MHA_HRDSAnxietySomatic
                        getTextField[11]['value'] = queryResult[0].MHA_HRDSSomatic
                        getTextField[12]['value'] = queryResult[0].MHA_HDRSGeneralSomatic
                        getTextField[13]['value'] = queryResult[0].MHA_HDRSLossOfLibido
                        getTextField[14]['value'] = queryResult[0].MHA_HDRSHypochondriasis
                        getTextField[15]['value'] = queryResult[0].MHA_HDRSLossofWeight
                        getTextField[16]['value'] = queryResult[0].MHA_HDRSInsight
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitHRDSAssessmentForm', methods=['GET','POST'])
def submitHRDSAssessmentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    HRDSDepressedMood = request_json.get('HRDSDepressedMood')
                    HRDSFeelingGuilt = request_json.get('HRDSFeelingGuilt')
                    HRDSSuide = request_json.get('HRDSSuide')
                    HRDSInsomnia = request_json.get('HRDSInsomnia')
                    HRDSMidNight = request_json.get('HRDSMidNight')
                    HRDSEarlyMorning = request_json.get('HRDSEarlyMorning')
                    HRDSWork = request_json.get('HRDSWork')
                    HRDSRetardation = request_json.get('HRDSRetardation')
                    HRDSAgitation = request_json.get('HRDSAgitation')
                    HRDSPsychic = request_json.get('HRDSPsychic')
                    HRDSAnxietySomatic = request_json.get('HRDSAnxietySomatic')
                    HRDSSomatic = request_json.get('HRDSSomatic')
                    HDRSGeneralSomatic = request_json.get('HDRSGeneralSomatic')
                    HDRSLossOfLibido = request_json.get('HDRSLossOfLibido')
                    HDRSHypochondriasis = request_json.get('HDRSHypochondriasis')
                    HDRSLossofWeight = request_json.get('HDRSLossofWeight')
                    HDRSInsight = request_json.get('HDRSInsight')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_HRDSAssessment()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    Insert.MHA_HRDSDepressedMood=HRDSDepressedMood
                    Insert.MHA_HRDSFeelingGuilt=HRDSFeelingGuilt
                    Insert.MHA_HRDSSuide=HRDSSuide
                    Insert.MHA_HRDSInsomnia=HRDSInsomnia
                    Insert.MHA_HRDSMidNight=HRDSMidNight
                    Insert.MHA_HRDSEarlyMorning=HRDSEarlyMorning
                    Insert.MHA_HRDSWork=HRDSWork
                    Insert.MHA_HRDSRetardation=HRDSRetardation
                    Insert.MHA_HRDSAgitation=HRDSAgitation
                    Insert.MHA_HRDSPsychic=HRDSPsychic
                    Insert.MHA_HRDSAnxietySomatic=HRDSAnxietySomatic
                    Insert.MHA_HRDSSomatic=HRDSSomatic
                    Insert.MHA_HDRSGeneralSomatic=HDRSGeneralSomatic
                    Insert.MHA_HDRSLossOfLibido=HDRSLossOfLibido
                    Insert.MHA_HDRSHypochondriasis=HDRSHypochondriasis
                    Insert.MHA_HDRSLossofWeight=HDRSLossofWeight
                    Insert.MHA_HDRSInsight=HDRSInsight
                    Insert.MHA_AddUser= data['id']
                    Insert.MHA_AddDate = datetime.datetime.now()
                    Insert.MHA_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'HRDS Assessment Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewHRDSAssessmentForm', methods=['GET','POST'])
def viewHRDSAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewHRDSAssessmentForm,
                                session.query(Model.models.Application.M_HRDSAssessment.MHAID.label('ID'),
                                            Model.models.Application.M_HRDSAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSDepressedMood.label('HRDSDepressedMood'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSFeelingGuilt.label('HRDSFeelingGuilt'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSSuide.label('HRDSSuide'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSInsomnia.label('HRDSInsomnia'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSMidNight.label('HRDSMidNight'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSEarlyMorning.label('HRDSEarlyMorning'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSWork.label('HRDSWork'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSRetardation.label('HRDSRetardation'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSAgitation.label('HRDSAgitation'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSPsychic.label('HRDSPsychic'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSAnxietySomatic.label('HRDSAnxietySomatic'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HRDSSomatic.label('HRDSSomatic'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HDRSGeneralSomatic.label('HDRSGeneralSomatic'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HDRSLossOfLibido.label('HDRSLossOfLibido'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HDRSHypochondriasis.label('HDRSHypochondriasis'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HDRSLossofWeight.label('HDRSLossofWeight'),
                                            Model.models.Application.M_HRDSAssessment.MHA_HDRSInsight.label('HDRSInsight'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,MHA_IsActive=1,MHA_IsDeleted=0
                                ).order_by(Model.models.Application.M_HRDSAssessment.MHAID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getAddCKASAssessmentForm', methods=['POST','GET'])
def getAddCKASAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_CKASAssessment.MCAID.label('Id'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASConsistentEyeContact.label('MCA_CKASConsistentEyeContact'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASPointsTowardsObject.label('MCA_CKASPointsTowardsObject'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASFollowSimpleCommand.label('MCA_CKASFollowSimpleCommand'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASRespondWhencalled.label('MCA_CKASRespondWhencalled'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASTryToCopy.label('MCA_CKASTryToCopy'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASCallOutMama.label('MCA_CKASCallOutMama'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASInterestInplaying.label('MCA_CKASInterestInplaying'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASLimitedUseofLanguage.label('MCA_CKASLimitedUseofLanguage'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASFrequentEyeBlinkt.label('MCA_CKASFrequentEyeBlinkt'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASClimbWithoutScare.label('MCA_CKASClimbWithoutScare'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASSpeakNonContextly.label('MCA_CKASFollowSimpleCommand'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASIndicateTowardsObject.label('MCA_CKASIndicateTowardsObject'),
                            Model.models.Application.M_CKASAssessment.MCA_CKASAnyRegression.label('MCA_CKASAnyRegression')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MCA_IsActive=1,MCA_IsDeleted=0
                                ).order_by(Model.models.Application.M_CKASAssessment.MCAID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.AddCKASAssessment,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddCKASAssessment',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    yesno = Common_Function.CommonFun.yesno()
                    getTextField[0]['options']= yesno
                    getTextField[1]['options']= yesno
                    getTextField[2]['options']= yesno
                    getTextField[3]['options']= yesno
                    getTextField[4]['options']= yesno
                    getTextField[5]['options']= yesno
                    getTextField[6]['options']= yesno
                    getTextField[7]['options']= yesno
                    getTextField[8]['options']= yesno
                    getTextField[9]['options']= yesno
                    getTextField[10]['options']= yesno
                    getTextField[11]['options']= yesno
                    getTextField[12]['options']= yesno

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].MCA_CKASConsistentEyeContact
                        getTextField[1]['value'] = queryResult[0].MCA_CKASPointsTowardsObject
                        getTextField[2]['value'] = queryResult[0].MCA_CKASFollowSimpleCommand
                        getTextField[3]['value'] = queryResult[0].MCA_CKASRespondWhencalled
                        getTextField[4]['value'] = queryResult[0].MCA_CKASTryToCopy
                        getTextField[5]['value'] = queryResult[0].MCA_CKASCallOutMama
                        getTextField[6]['value'] = queryResult[0].MCA_CKASInterestInplaying
                        getTextField[7]['value'] = queryResult[0].MCA_CKASLimitedUseofLanguage
                        getTextField[8]['value'] = queryResult[0].MCA_CKASFrequentEyeBlinkt
                        getTextField[9]['value'] = queryResult[0].MCA_CKASClimbWithoutScare
                        getTextField[10]['value'] = queryResult[0].MCA_CKASSpeakNonContextly
                        getTextField[11]['value'] = queryResult[0].MCA_CKASIndicateTowardsObject
                        getTextField[12]['value'] = queryResult[0].MCA_CKASAnyRegression
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

# @app.route('/submitCKASAssessmentForm', methods=['GET','POST'])
# def submitCKASAssessmentForm():

#     session=Session()
#     try:

#         if(request.method == "POST"):
#             if('Authorization' in request.headers):
#                 token= request.headers.get('Authorization')

#                 if not token:
#                     return jsonify({'MSG':'Token is missing'})
#                 data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
#                 if(data):
#                     request_json = request.get_json()
#                     CKASConsistentEyeContact = request_json.get('CKASConsistentEyeContact')
#                     CKASPointsTowardsObject = request_json.get('CKASPointsTowardsObject')
#                     CKASFollowSimpleCommand = request_json.get('CKASFollowSimpleCommand')
#                     CKASRespondWhencalled = request_json.get('CKASRespondWhencalled')
#                     CKASTryToCopy = request_json.get('CKASTryToCopy')
#                     CKASCallOutMama = request_json.get('CKASCallOutMama')
#                     CKASInterestInplaying = request_json.get('CKASInterestInplaying')
#                     CKASLimitedUseofLanguage = request_json.get('CKASLimitedUseofLanguage')
#                     CKASFrequentEyeBlinkt = request_json.get('CKASFrequentEyeBlinkt')
#                     CKASClimbWithoutScare = request_json.get('CKASClimbWithoutScare')
#                     CKASSpeakNonContextly = request_json.get('CKASSpeakNonContextly')
#                     CKASIndicateTowardsObject = request_json.get('CKASIndicateTowardsObject')
#                     CKASAnyRegression = request_json.get('CKASAnyRegression')


#                     Aid = request_json.get('Aid')
#                     PID = request_json.get('PID')
#                     Id = request_json.get('Id')

#                     Insert=Model.models.Application.M_CKASAssessment()
#                     Insert.M_Patient_MPID=PID
#                     Insert.M_AppointmentID=Aid
#                     Insert.MCA_CKASConsistentEyeContact=CKASConsistentEyeContact
#                     Insert.MCA_CKASPointsTowardsObject=CKASPointsTowardsObject
#                     Insert.MCA_CKASFollowSimpleCommand=CKASFollowSimpleCommand
#                     Insert.MCA_CKASRespondWhencalled=CKASRespondWhencalled
#                     Insert.MCA_CKASTryToCopy=CKASTryToCopy
#                     Insert.MCA_CKASCallOutMama=CKASCallOutMama
#                     Insert.MCA_CKASInterestInplaying=CKASInterestInplaying
#                     Insert.MCA_CKASLimitedUseofLanguage=CKASLimitedUseofLanguage
#                     Insert.MCA_CKASFrequentEyeBlinkt=CKASFrequentEyeBlinkt
#                     Insert.MCA_CKASClimbWithoutScare=CKASClimbWithoutScare
#                     Insert.MCA_CKASSpeakNonContextly=CKASSpeakNonContextly
#                     Insert.MCA_CKASIndicateTowardsObject=CKASIndicateTowardsObject
#                     Insert.MCA_CKASAnyRegression=CKASAnyRegression
#                     Insert.MCA_AddUser= data['id']
#                     Insert.MCA_AddDate = datetime.datetime.now()
#                     Insert.MCA_AddIP= flask.request.remote_addr
#                     session.add(Insert)
#                     session.commit()
#                     return jsonify({'msg':'CKAS Assessment Added Successfully'})
#                 else:
#                     return jsonify({'err':'Token is expired'})
#             else:
#                 return jsonify({'err':'Please Login'})

#     except Exception as e:
#         return jsonify({'err':str(e)})
#     finally:
#         session.close()

# @app.route('/viewCKASAssessmentForm', methods=['GET','POST'])
# def viewCKASAssessmentForm():
#     session=Session()
#     try:
#         if(request.method == "POST"):
#             if('Authorization' in request.headers):
#                 token= request.headers.get('Authorization')

#                 if not token:
#                     return jsonify({'MSG':'Token is missing'})
#                 data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
#                 if(data):
#                     request1= request.get_json()
#                     pid = request1.get('pid')
                    
#                     queryresult= Common_Function.CommonFun.convertToJson(
#                                 Constant.constant.constant.viewCKASAssessmentForm,
#                                 session.query(Model.models.Application.M_CKASAssessment.MCAID.label('ID'),
#                                             Model.models.Application.M_CKASAssessment.M_AppointmentID.label('Appointment Id'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASConsistentEyeContact.label('CKASConsistentEyeContact'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASPointsTowardsObject.label('CKASPointsTowardsObject'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASFollowSimpleCommand.label('CKASFollowSimpleCommand'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASRespondWhencalled.label('CKASRespondWhencalled'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASTryToCopy.label('CKASTryToCopy'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASCallOutMama.label('CKASCallOutMama'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASInterestInplaying.label('CKASInterestInplaying'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASLimitedUseofLanguage.label('CKASLimitedUseofLanguage'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASFrequentEyeBlinkt.label('CKASFrequentEyeBlinkt'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASClimbWithoutScare.label('CKASClimbWithoutScare'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASSpeakNonContextly.label('CKASSpeakNonContextly'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASIndicateTowardsObject.label('CKASIndicateTowardsObject'),
#                                             Model.models.Application.M_CKASAssessment.MCA_CKASAnyRegression.label('CKASAnyRegression'),
                                            
#                                                 ).filter_by(M_Patient_MPID=pid,MCA_IsActive=1,MCA_IsDeleted=0
#                                 ).order_by(Model.models.Application.M_CKASAssessment.MCAID.desc()).all())


#                     return jsonify(result=queryresult)
#                 else:
#                     return jsonify({'err':'Token is expired'})
#             else:
#                 return jsonify({'err':'Please Login'})
#     except Exception as e:
#         return jsonify({'err':str(e)})
#     finally:
#         session.close()

#################  Till here  #####################



###########################  Till here Abhishek Work #########################################

@app.route('/submitPackageForPatient', methods=['GET','POST'])
def submitPackageForPatient():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                branchId= request.headers.get('branchId')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    packageName = request_json.get('packageName')
                    date = request_json.get('date')
                    packagePrice = request_json.get('packagePrice')
                    taxDiscount2 = request_json.get('taxDiscount2')
                    total2 = request_json.get('total2')
                    discountPercent = request_json.get('discountPercent')
                    discount = request_json.get('discount')
                    discountReason = request_json.get('discountReason')
                    totalPayable = request_json.get('totalPayable')
                    amountPaid = request_json.get('amountPaid')
                    dueBalance = request_json.get('dueBalance')
                    totalPayable = request_json.get('totalPayable')
                    cash = request_json.get('cash')
                    card = request_json.get('card')
                    cheque = request_json.get('cheque')
                    online = request_json.get('online')
                    upi = request_json.get('upi')
                    prepaid = request_json.get('prepaid')
                    bankName = request_json.get('bankName')
                    cardType = request_json.get('cardType')
                    lastDigits = request_json.get('lastDigits')
                    comments = request_json.get('comments')
                    packageId = request_json.get('packageId')
                    cgst = request_json.get('cgst')
                    sgst = request_json.get('sgst')
                    PId = request_json.get('PID')
                    Validity = request_json.get('Validity')
                    queryresult= session.query(Model.models.Application.M_ServicePackage.MSP_ServiceName,
                                               Model.models.Application.M_ServicePackage.MSP_ServiceNamess,
                                Model.models.Application.M_ServicePackage.MSP_Sessions
                                ).filter_by(MSPID=packageId,MSP_IsDeleted=0).all()
                    
                    Insert=Model.models.Application.M_PackageForPatient()
                    Insert.MPP_PackageName=packageName
                    Insert.MPP_BranchId=branchId
                    Insert.MPP_Date=date
                    Insert.MPP_PackagePrice=packagePrice
                    Insert.MPP_TaxDiscount=taxDiscount2
                    Insert.MPP_cgst=cgst
                    Insert.MPP_sgst=sgst
                    Insert.MPP_Total=total2
                    Insert.MPP_DiscountPersent=discountPercent
                    Insert.MPP_Discount=discount
                    Insert.MPP_DiscountReason=discountReason
                    Insert.MPP_TotalPayable=totalPayable
                    Insert.MPP_AmountPaid=amountPaid
                    Insert.MPP_DueBalance=dueBalance
                    Insert.MPP_Cash=cash
                    Insert.MPP_Cheque=cheque
                    Insert.MPP_Card=card
                    Insert.MPP_Online=online
                    Insert.MPP_UPI=upi
                    Insert.MPP_Prepaid=prepaid
                    Insert.MPP_BankName=bankName
                    Insert.MPP_CardType=cardType
                    Insert.MPP_LastDigit=lastDigits
                    Insert.MPP_Comments=comments
                    Insert.MPP_PackageId=packageId
                    Insert.MPP_PatientId=PId

                    Insert.MPP_AddUser= data['id']
                    Insert.MPP_AddDate = datetime.datetime.now()
                    Insert.MPP_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    
                    
                    lastdata= session.query(Model.models.Application.M_PackageForPatient.MPPID,
                                ).filter_by(MPP_IsActive=1,MPP_IsDeleted=0
                            ).order_by(Model.models.Application.M_PackageForPatient.MPPID.desc()).all()
                    getClinic= session.query(Model.models.Application.M_Branch.MB_Code
                                        ).filter_by(MBID=int(branchId),MB_IsActive=1,MB_IsDeleted=0).all()
                    
                    getInvoiceNo= session.query(Model.models.Application.M_InvoiceMaster.MainInvoiceNo
                                        ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                        # ).filter(Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode!='Package'
                                        ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
                    clinicname=getClinic[0].MB_Code
                    # sn=len(totalPatientinbranch) + 1
                    lastInvoice = getInvoiceNo[0].MainInvoiceNo
                    NewInvoice=  int(lastInvoice) + 1
                    # sn=len(totalPatientinbranch) + 1
                    # lastPatientIDs = totalPatientinbranch[0]
                    # lastPatientID=  lastPatientIDs[-5:]
                    # newPatientID= str(int(lastPatientID)+1).zfill(5)
                    Prefix='CK'+str(clinicname)
                    
                    mod = ''
                    if(prepaid!='' and prepaid!=None and prepaid!=0):
                        mod = 'Prepaid'
                    if(online !='' and online !=None and online!=0):
                        mod = 'Online'
                    if(upi !='' and upi !=None and upi!=0):
                        mod = 'UPI'
                    if(cash !='' and cash !=None and cash!=0):
                        mod = 'Cash'
                    if(card !='' and card !=None and card!=0):
                        mod = 'Card'
                    if(cheque !='' and cheque !=None and cheque!=0):
                        mod = 'Cheque'
                    Insert=Model.models.Application.M_InvoiceMaster()
                    Insert.MPP_PackageName=packageName
                    Insert.M_Branch_MBID=branchId
                    Insert.MI_Date=date
                    Insert.MPP_PackagePrice=packagePrice
                    Insert.MI_ServiceName=packageName
                    Insert.MI_CGST=cgst
                    Insert.MI_SGST=sgst
                    Insert.MainInvoiceNo=NewInvoice
                    Insert.MI_TotalAmount=total2
                    Insert.MI_InvoiceTotal=total2
                    Insert.MI_discountPercent=discountPercent
                    Insert.MI_Discount=discount
                    Insert.MI_DiscountReason=discountReason
                    Insert.MI_TotalPayable=totalPayable
                    Insert.MI_AmountPaid=amountPaid
                    Insert.MI_DueBalance=dueBalance
                    Insert.dueSettle=dueBalance
                    Insert.MI_Cash=cash
                    Insert.MI_Cheque=cheque
                    Insert.MI_Card=card
                    Insert.MI_Online=online
                    Insert.MI_Upi=upi
                    Insert.MI_Prepaid=prepaid
                    Insert.MI_bankName=bankName
                    Insert.MPIA_PaymentMode=''
                    if(cardType!='' and cardType!=None):
                        Insert.MI_CardType=cardType
                    Insert.MI_lastDigits=lastDigits
                    Insert.MI_Comments=comments
                    Insert.MPP_PackageId=packageId
                    Insert.M_Patient_MPID=PId
                    Insert.MPP_Prefix=Prefix
                    Insert.MPP_PaymentType=mod

                    Insert.MI_AddUser= data['id']
                    Insert.MI_AddDate = datetime.datetime.now()
                    Insert.MI_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    if(int(dueBalance)>0):
                        dueBalancedtl = session.query(Model.models.Application.T_DueBalanceAmt.TDID,
                                                        Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount
                                        ).filter_by(TD_PatientID=PId,TP_IsActive=1,TP_IsDeleted=0).all()
                            
                        if(len(dueBalancedtl)==0):
                            Insert=Model.models.Application.T_DueBalanceAmt()
                            Insert.TD_Date=datetime.datetime.now()
                            Insert.TD_PrepaidAmount=dueBalance
                            Insert.TD_PatientID=PId
                            
                            Insert.TP_AddIP= flask.request.remote_addr
                            Insert.TP_AddUser = data['id']
                            Insert.TP_AddDate = datetime.datetime.now()
                            session.add(Insert)
                            session.commit()
                        else:
                            PrepaidAm = dueBalancedtl[0].TD_PrepaidAmount
                            amountnow = PrepaidAm + float(dueBalance)
                            session.query(Model.models.Application.T_DueBalanceAmt
                                    ).filter(Model.models.Application.T_DueBalanceAmt.TD_PatientID==PId
                                                ).update({Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount:amountnow,
                                                        Model.models.Application.T_DueBalanceAmt.TP_ModUser:data['id'],
                                                        Model.models.Application.T_DueBalanceAmt.TP_ModDate:datetime.datetime.now()})
                            session.commit()
                    if(int(prepaid)>0):
                        prepaiddata = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                                    Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount
                                    ).filter_by(TP_PatientID=PId,TP_IsActive=1,TP_IsDeleted=0).all()
                        Insert=Model.models.Application.T_CreditMaster()
                        Insert.TC_Date=datetime.datetime.now()
                        Insert.TC_Amount=prepaid
                        Insert.TC_PatientID=PId
                        Insert.TC_Comment='ACCDebit'
                        Insert.TC_Description=packageName
                        
                        Insert.TC_AddIP= flask.request.remote_addr
                        Insert.TC_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        
                        PrepaidAm = prepaiddata[0].TP_PrepaidAmount
                        amountnow = PrepaidAm - float(prepaid)
                        session.query(Model.models.Application.T_PrepaidAmt
                                    ).filter(Model.models.Application.T_PrepaidAmt.TP_PatientID==PId
                                                ).update({Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount:amountnow,
                                                        Model.models.Application.T_PrepaidAmt.TP_ModDate:datetime.datetime.now()})
                        session.commit()
                    
                    print(Validity)
                    present = datetime.datetime.now()
                    # print('date : ' + present)
                    new_date = pd.to_datetime(present)+pd.DateOffset(months=int(Validity))
                    # print('new date is : '+str(new_date))
                    Insert = Model.models.Application.M_PatientPackageDetailed()
                    Insert.MPP_PackageName=packageName
                    Insert.MPP_BranchId=branchId
                    Insert.MPP_TotalPayable=totalPayable
                    Insert.MPP_PackageId=packageId
                    Insert.MPP_PackageForPatientId=lastdata[0].MPPID
                    Insert.MPP_PatientId=PId
                    Insert.MPP_ServiceId=queryresult[0].MSP_ServiceName
                    Insert.MPP_ServiceName=queryresult[0].MSP_ServiceNamess
                    Insert.MPP_TotalSessions=queryresult[0].MSP_Sessions
                    
                    Insert.MPP_UsedSessions=0
                    Insert.MPP_AvailSessions=queryresult[0].MSP_Sessions
                    Insert.MPP_StartDate=datetime.datetime.now()
                    Insert.MPP_EndDate=new_date

                    Insert.MPP_AddUser= data['id']
                    Insert.MPP_AddDate = datetime.datetime.now()
                    Insert.MPP_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    
                    return jsonify({'msg':'Package Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitPackageInvoiceForAppointment', methods=['GET','POST'])
def submitPackageInvoiceForAppointment():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                branchId= request.headers.get('branchId')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    serviceName = request_json.get('serviceName')
                    price = request_json.get('price')
                    taxInr = request_json.get('taxInr')
                    totalCost = request_json.get('totalCost')
                    cgst = request_json.get('cgst')
                    sgst = request_json.get('sgst')
                    invoiceTotal = request_json.get('invoiceTotal')
                    sessionName = request_json.get('sessionName')
                    totalSessions = request_json.get('totalSessions')
                    usedSession = request_json.get('usedSession')
                    availableSession = request_json.get('availableSession')
                    paymentMode = request_json.get('paymentMode')
                    PackageId = request_json.get('PackageId')
                    pid = request_json.get('pid')
                    Aid = request_json.get('Aid')
                    comments = 'Session ' + str(usedSession) +' of ' + str(totalSessions)
                    # if(pid!=''):
                    #     return jsonify({'MSG':'Token is missing2'})
                    Insert=Model.models.Application.M_PackageInvoiceForAppointment()
                    Insert.MPIA_ServiceName=serviceName
                    Insert.MPIA_Price=price
                    Insert.MPIA_TaxInr=taxInr

                    Insert.MPIA_TotalCost=totalCost
                    Insert.MPIA_Cgst=cgst
                    Insert.MPIA_Sgst=sgst
                    Insert.MPIA_InvoiceTotal=invoiceTotal
                    Insert.MPIA_SessionName=sessionName
                    Insert.MPIA_TotalSessions=totalSessions
                    Insert.MPIA_UsedSession=usedSession
                    Insert.MPIA_PaymentMode=paymentMode
                    Insert.MPIA_PatientId=pid
                    Insert.MPIA_AppointId=Aid
                    Insert.MP_PackageId=PackageId

                    Insert.MPIA_AddUser= data['id']
                    Insert.MPIA_AddDate = datetime.datetime.now()
                    Insert.MPIA_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    InvoiceDtlsId = session.query(Model.models.Application.M_PackageInvoiceForAppointment.MPIAID
                                ).order_by(Model.models.Application.M_PackageInvoiceForAppointment.MPIAID.desc()).all()
                    session.commit()
                    getClinic= session.query(Model.models.Application.M_Branch.MB_Code
                                        ).filter_by(MBID=int(branchId),MB_IsActive=1,MB_IsDeleted=0).all()
                    session.commit()
                    getInvoiceNo= session.query(Model.models.Application.M_InvoiceMaster.MainInvoiceNo
                                        ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                        ).filter(Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode=='Package'
                                        ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
                    clinicname=getClinic[0].MB_Code
                    # sn=len(totalPatientinbranch) + 1
                    lastInvoice = getInvoiceNo[0].MainInvoiceNo
                    NewInvoice=  int(lastInvoice) + 1
                    Prefix='CK'+str(clinicname)
                    
                    Insert=Model.models.Application.M_InvoiceMaster()
                    # Insert.MI_invoiceType=invoiceType
                    Insert.M_Branch_MBID=branchId
                    Insert.MI_Date=datetime.datetime.now()
                    # Insert.MIP_MedicineDetails=medicineDetails
                    Insert.MI_InvoiceTotal=invoiceTotal
                    Insert.MI_CGST=cgst
                    Insert.MI_SGST=sgst
                    Insert.MI_discountPercent=0
                    
                    Insert.MI_Discount=0
                    Insert.MI_DiscountReason=''
                    # Insert.MI_TotalPayable=invoiceTotal
                    Insert.MI_TotalPayable=0
                    Insert.MI_AmountPaid=0
                    Insert.MI_DueBalance=0
                    Insert.dueSettle=0
                    Insert.MI_Cash=0
                    Insert.MI_Card=0
                    Insert.MI_Cheque=0
                    Insert.MI_Online=0
                    Insert.MI_Upi=0
                    Insert.MI_Prepaid=0
                    Insert.MI_bankName=''
                    Insert.MI_CardType=0
                    Insert.MI_lastDigits=''
                    Insert.MI_Comments=comments
                    Insert.M_Patient_MPID=pid
                    Insert.MPP_Prefix=Prefix
                    Insert.MainInvoiceNo=NewInvoice
                    
                    Insert.MPIA_PaymentMode='Package'
                    Insert.MPIA_UsedSession=usedSession
                    Insert.MPIA_TotalSessions=totalSessions
                    Insert.MI_AppointmentId=Aid
                    Insert.MI_ServiceName=serviceName
                    Insert.MPP_PackageName=sessionName
                    Insert.M_PartnerOrgName=''
                    Insert.MI_PaidByPartner=0

                    Insert.MI_AddUser= data['id']
                    Insert.MI_AddDate = datetime.datetime.now()
                    Insert.MI_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                
                    Insert=session.query(Model.models.Application.M_Appointment).get(Aid)
                    Insert.MP_Status=527
                    Insert.MP_ModDate=datetime.datetime.now()
                    Insert.MA_PaymentMode='Package'
                    Insert.MA_PackageName=sessionName
                    Insert.MA_SessionsAvailed= str(usedSession)+' / '+str(totalSessions)
                    Insert.MA_Fee=price
                    Insert.MA_Discount=''
                    Insert.MA_ReceiptDate=datetime.datetime.now()
                    Insert.MA_InvoiceNo= ''
                    Insert.MA_CGST=cgst
                    Insert.MA_SGST=sgst
                    Insert.MA_TotalAmount=invoiceTotal
                    Insert.MA_AppStatus='Completed'
                    session.commit()
                    session.query(Model.models.Application.M_PatientPackageDetailed
                                    ).filter(Model.models.Application.M_PatientPackageDetailed.MPPID==PackageId
                                    ).update({Model.models.Application.M_PatientPackageDetailed.MPP_UsedSessions:usedSession,
                                            Model.models.Application.M_PatientPackageDetailed.MPP_ModDate:datetime.datetime.now(),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions:availableSession})
                    session.commit()
                    
                    ORGID= session.query(Model.models.Application.M_Appointment.MAID,
                                                     Model.models.Application.M_Patient.MPID,
                                                     Model.models.Application.M_Patient.MP_Mobile,
                                                     Model.models.Application.M_Patient.MP_Name,
                                                     ).filter(Model.models.Application.M_Appointment.MAID==Aid
                                                    ).join(Model.models.Application.M_Patient,Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                                    ).all()

                    if(ORGID[0].MP_Mobile !=''):
                        Name= ORGID[0].MP_Name
                        Mobile= ''#ORGID[0].MP_Mobile
                        x= 'https://rb.gy/b8iod'
                        if(Mobile!='' and Mobile!=None):
                            msg = 'https://api.pinnacle.in/index.php/sms/urlsms?sender=CONKID&numbers=91' + str(Mobile) +'&messagetype=TXT&message=Thank you for visiting Continua Kids. View your visit details in the app '+x+'. Thank you!&response=Y&apikey=bb4d93-a1481e-f7c2a2-67d92c-2d3477'
                            # rese = requests.get('https://api.pinnacle.in/index.php/sms/urlsms?sender=CONKID&numbers=918544388788&messagetype=TXT&message=Dear member Vipul, your appointment at Continua Kids for Test has been created for 20-07-2023_11:00 AM&response=Y&apikey=bb4d93-a1481e-f7c2a2-67d92c-2d3477')
                            rese = requests.get(msg)
                            print(rese)
                    else:
                        pass
                    return jsonify({'msg':'Invoice Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()


@app.route('/submitNewPatientVisit', methods=['GET','POST'])
def submitNewPatientVisit():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                branchId= request.headers.get('branchId')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    doctorName = request_json.get('doctorName')
                    # countryCode = request_json.get('countryCode')
                    # mobileNumber = request_json.get('mobileNumber')
                    patientName = request_json.get('patientName')
                    procedure = request_json.get('procedure')
                    date = request_json.get('date')
                    time = request_json.get('time')
                    duration = request_json.get('duration')
                    remote = request_json.get('remote')
                    notify = request_json.get('notify')
                    # pid = request_json.get('pid')
                    # Aid = request_json.get('Aid')

                    currentdate = datetime.datetime.now().strftime('%Y%m%d')
                    currenttime = datetime.datetime.now().strftime('%H%M')
                    appdate1 = datetime.datetime.strptime(date,'%Y-%m-%d')
                    appdate = appdate1.strftime('%Y%m%d')
                    apptime1 = datetime.datetime.strptime(time,'%H:%M')
                    apptime = apptime1.strftime('%H%M')
                    checkdoctor = session.query(Model.models.Application.M_Appointment.MAID
                        ).filter_by(MA_Date=date,M_DoctorDetails_MDDID=doctorName,MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0
                        ).filter(Model.models.Application.M_Appointment.MA_Time==time).all()
                    if(len(checkdoctor)==0):
                        # if(currentdate == appdate or currentdate < appdate):
                        #     if((currentdate == appdate and (apptime >= currenttime and  apptime <='2000')) or (currentdate <= appdate and ('0800' <= apptime and  apptime <='2000'))):
                        if('0800' <= apptime and  apptime <='2000'):
                            print(currentdate,currenttime)
                            Insert=Model.models.Application.M_Appointment()
                            Insert.MP_Status=29
                            Insert.M_DoctorDetails_MDDID=doctorName
                            Insert.M_Branch_MBID=branchId
                            Insert.M_Patient_MPID=patientName
                            Insert.MP_Procedure=procedure
                            Insert.MA_Date=date
                            Insert.MA_Time=time
                            Insert.MP_Duration=duration
                            if(remote==True):
                                Insert.MP_AppointmentType=32
                            else:
                                Insert.MP_AppointmentType=31
                            # Insert.MPIA_PaymentMode=paymentMode
                            # Insert.MPIA_PatientId=pid
                            # Insert.MPIA_AppointId=Aid

                            Insert.MP_AddUser= data['id']
                            Insert.MP_AddDate = datetime.datetime.now()
                            Insert.MP_AddIP= flask.request.remote_addr
                            session.add(Insert)
                            session.commit()
                            return jsonify({'msg':'Appointment Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/getAppointDdl', methods=['GET'])
def getAppointDdl():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                branchId= request.headers.get('branchId')
                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    content_type = request.headers.get('Content-Type')
                    getTherapistDdlList= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getTherapistDdlList,
                        session.query(Model.models.Application.M_DoctorDetails.MDDID.label('key'),
                                    sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,' ',Model.models.Application.M_DoctorDetails.MDD_LastName).label('label')
                                        ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0,MDD_Type='Therapist').order_by(Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
                                )
                    getDoctorDdlList= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getDoctorDdlList,
                        session.query(Model.models.Application.M_DoctorDetails.MDDID.label('key'),
                                    sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,' ',Model.models.Application.M_DoctorDetails.MDD_LastName).label('label')
                                        ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0
                                        ).filter(Model.models.Application.M_DoctorDetails.MDD_Clinic.contains(branchId)            
                                        ).order_by(Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
                                )
                    getPatient= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getPatientddllist,
                        session.query(Model.models.Application.M_Patient.MPID.label('key'),
                                    Model.models.Application.M_Patient.MP_Name.label('label')
                                        ).filter_by(MP_IsActive=1,MP_IsDeleted=0
                                    ).order_by(Model.models.Application.M_Patient.MP_Name).all()
                                )
                    getPhoneCode= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getPhoneCode,
                        session.query(Model.models.Application.M_CountryCode.MCCId.label('key'),
                                    Model.models.Application.M_CountryCode.MCC_Phonecode.label('label')
                                        ).filter_by(MCC_IsActive=1,MCC_IsDeleted=0
                                                    ).order_by(Model.models.Application.M_CountryCode.MCC_Phonecode).all()
                                )
                    getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())
                    duration = 45
                    Curdate  = datetime.datetime.now().strftime('%Y-%m-%d')
                    CurTime = datetime.datetime.now().strftime("%H:%M")
                    getAllDdl = []
                    getAllDdl.append({'getDoctors':getDoctorDdlList,'getTherapists':getTherapistDdlList, 'CurDate':Curdate,'CurTime':CurTime,'Duration':duration,
                                      'Patient':getPatient,'Services':getServiceDtl,'PhoneCode':getPhoneCode})



                    return jsonify(result=getAllDdl)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitInvoiceForPatient', methods=['GET','POST'])
def submitInvoiceForPatient():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                branchId= request.headers.get('branchId')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    invoiceType = request_json.get('invoiceType')
                    date = request_json.get('date')
                    medicineDetails = request_json.get('medicineDetails')
                    invoiceTotal = request_json.get('invoiceTotal')
                    cgst = request_json.get('cgst')
                    sgst = request_json.get('sgst')
                    discountPercent = request_json.get('discountPercent')
                    discount = request_json.get('discount')
                    discountReason = request_json.get('discountReason')
                    totalPayable = request_json.get('totalPayable')
                    amountPaid = request_json.get('amountPaid')
                    dueBalance = request_json.get('dueBalance')
                    cash = request_json.get('cash')
                    card = request_json.get('card')
                    cheque = request_json.get('cheque')
                    online = request_json.get('online')
                    upi = request_json.get('upi')
                    prepaid = request_json.get('prepaid')
                    bankName = request_json.get('bankName')
                    cardType = request_json.get('cardType')
                    lastDigits = request_json.get('lastDigits')
                    comments = request_json.get('comments')
                    # packageId = request_json.get('packageId')
                    PId = request_json.get('PID')

                    Insert=Model.models.Application.M_InvoiceForPatient()
                    Insert.MIP_InvoiceType=invoiceType
                    Insert.MIP_BranchId=branchId
                    Insert.MIP_Date=date
                    # Insert.MIP_MedicineDetails=medicineDetails
                    Insert.MIP_InvoiceTotal=invoiceTotal
                    Insert.MIP_cgst=cgst
                    Insert.MIP_sgst=sgst
                    Insert.MIP_DiscountPercent=discountPercent
                    Insert.MIP_Discount=discount
                    Insert.MIP_DiscountReason=discountReason
                    Insert.MIP_TotalPayable=totalPayable
                    Insert.MIP_AmountPaid=amountPaid
                    Insert.MIP_DueBalance=dueBalance
                    Insert.MIP_Cash=cash
                    Insert.MIP_Card=card
                    Insert.MIP_Cheque=cheque
                    Insert.MIP_Online=online
                    Insert.MIP_UPI=upi
                    Insert.MIP_Prepaid=prepaid
                    Insert.MIP_BankName=bankName
                    if(cardType!='' and cardType!=None):
                        Insert.MI_CardType=cardType
                    Insert.MIP_LastDigit=lastDigits
                    Insert.MIP_Comments=comments
                    Insert.MIP_PatientId=PId

                    Insert.MIP_AddUser= data['id']
                    Insert.MIP_AddDate = datetime.datetime.now()
                    Insert.MIP_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    getClinic= session.query(Model.models.Application.M_Branch.MB_Code
                                        ).filter_by(MBID=int(branchId),MB_IsActive=1,MB_IsDeleted=0).all()
                    getInvoiceNo= session.query(Model.models.Application.M_InvoiceMaster.MainInvoiceNo
                                        ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                        # ).filter(Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode!='Package'
                                        ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
                    clinicname=getClinic[0].MB_Code
                    # sn=len(totalPatientinbranch) + 1
                    lastInvoice = getInvoiceNo[0].MainInvoiceNo
                    NewInvoice=  int(lastInvoice) + 1
                    # sn=len(totalPatientinbranch) + 1
                    # lastPatientIDs = totalPatientinbranch[0]
                    # lastPatientID=  lastPatientIDs[-5:]
                    # newPatientID= str(int(lastPatientID)+1).zfill(5)
                    Prefix='CK'+str(clinicname)
                    mod = ''
                    if(prepaid!='' and prepaid!=None and prepaid!=0):
                        mod = 'Prepaid'
                    if(online !='' and online !=None and online!=0):
                        mod = 'Online'
                    if(upi !='' and upi !=None and upi!=0):
                        mod = 'UPI'
                    if(cash !='' and cash !=None and cash!=0):
                        mod = 'Cash'
                    if(card !='' and card !=None and card!=0):
                        mod = 'Card'
                    if(cheque !='' and cheque !=None and cheque!=0):
                        mod = 'Cheque'
                    Insert=Model.models.Application.M_InvoiceMaster()
                    Insert.MI_invoiceType=invoiceType
                    Insert.M_Branch_MBID=branchId
                    Insert.MI_Date=date
                    Insert.MainInvoiceNo=NewInvoice
                    Insert.MI_InvoiceTotal=invoiceTotal
                    Insert.MI_CGST=cgst
                    Insert.MI_SGST=sgst
                    Insert.MI_discountPercent=discountPercent
                    Insert.MI_Discount=discount
                    Insert.MI_DiscountReason=discountReason
                    Insert.MI_TotalPayable=totalPayable
                    Insert.MI_TotalPayable=amountPaid
                    Insert.MI_AmountPaid=amountPaid
                    Insert.MI_DueBalance=dueBalance
                    Insert.dueSettle=dueBalance
                    Insert.MI_Cash=cash
                    Insert.MI_Card=card
                    Insert.MI_Cheque=cheque
                    Insert.MI_Online=online
                    Insert.MI_Upi=upi
                    Insert.MI_Prepaid=prepaid
                    Insert.MI_bankName=bankName
                    Insert.MPIA_PaymentMode=''
                    if(cardType!='' and cardType!=None):
                        Insert.MI_CardType=cardType
                    Insert.MI_lastDigits=lastDigits
                    Insert.MI_Comments=comments
                    Insert.M_Patient_MPID=PId
                    Insert.MI_ServiceName='Other Invoice'
                    Insert.MPP_Prefix=Prefix
                    Insert.MPP_PaymentType=mod

                    Insert.MI_AddUser= data['id']
                    Insert.MI_AddDate = datetime.datetime.now()
                    Insert.MI_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                       
                    if(int(dueBalance)>0):
                        dueBalancedtl = session.query(Model.models.Application.T_DueBalanceAmt.TDID,
                                                        Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount
                                        ).filter_by(TD_PatientID=PId,TP_IsActive=1,TP_IsDeleted=0).all()
                            
                        if(len(dueBalancedtl)==0):
                            Insert=Model.models.Application.T_DueBalanceAmt()
                            Insert.TD_Date=datetime.datetime.now()
                            Insert.TD_PrepaidAmount=dueBalance
                            Insert.TD_PatientID=PId
                            
                            Insert.TP_AddIP= flask.request.remote_addr
                            Insert.TP_AddUser = data['id']
                            Insert.TP_AddDate = datetime.datetime.now()
                            session.add(Insert)
                            session.commit()
                        else:
                            PrepaidAm = dueBalancedtl[0].TD_PrepaidAmount
                            amountnow = PrepaidAm + float(dueBalance)
                            session.query(Model.models.Application.T_DueBalanceAmt
                                    ).filter(Model.models.Application.T_DueBalanceAmt.TD_PatientID==PId
                                                ).update({Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount:amountnow,
                                                        Model.models.Application.T_DueBalanceAmt.TP_ModUser:data['id'],
                                                        Model.models.Application.T_DueBalanceAmt.TP_ModDate:datetime.datetime.now()})
                            session.commit()
                    if(int(prepaid)>0):
                        prepaiddata = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                                    Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount
                                    ).filter_by(TP_PatientID=PId,TP_IsActive=1,TP_IsDeleted=0).all()
                        Insert=Model.models.Application.T_CreditMaster()
                        Insert.TC_Date=datetime.datetime.now()
                        Insert.TC_Amount=prepaid
                        Insert.TC_PatientID=PId
                        Insert.TC_Comment='ACCDebit'
                        Insert.TC_Description='Other Invoice'
                        
                        Insert.TC_AddIP= flask.request.remote_addr
                        Insert.TC_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                        
                        PrepaidAm = prepaiddata[0].TP_PrepaidAmount
                        amountnow = PrepaidAm - float(prepaid)
                        session.query(Model.models.Application.T_PrepaidAmt
                                    ).filter(Model.models.Application.T_PrepaidAmt.TP_PatientID==PId
                                                ).update({Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount:amountnow,
                                                        Model.models.Application.T_PrepaidAmt.TP_ModDate:datetime.datetime.now()})
                        session.commit()   
                       
                       
                       
                        
                    InvoiceDtlsId = session.query(Model.models.Application.M_InvoiceForPatient.MIPID
                                ).order_by(Model.models.Application.M_InvoiceForPatient.MIPID.desc()).all()

                    Id = InvoiceDtlsId[0].MIPID
                    for inv in medicineDetails:
                        Service = inv['service']
                        Batch = inv['batch']
                        cost = inv['cost']
                        item = inv['item']
                        quantity = inv['quantity']
                        tax = inv['tax']
                        totalCost = inv['totalCost']
                        totalTax = inv['totalTax']


                        Insert=Model.models.Application.M_InvoiceMedicines()
                        Insert.MIM_Service=Service
                        Insert.MIM_Batch=Batch
                        Insert.MIM_Cost=cost
                        Insert.MIM_Item=item
                        Insert.MIM_Quantity=quantity
                        Insert.MIM_Tax=tax
                        Insert.MIM_TotalCost=totalCost
                        Insert.MIM_TotalTax=totalTax
                        Insert.MIM_Invoice=Id

                        Insert.MIM_AddUser= data['id']
                        Insert.MIM_AddDate = datetime.datetime.now()
                        Insert.MIM_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                    return jsonify({'msg':'Invoice Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()


@app.route('/getSessionNoteFormbox', methods=['POST','GET'])
def getSessionNoteFormbox():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # FormItems=[]
                    # content_type = request.headers.get('Content-Type')
                    # PId= str(request.data)
                    # # if(Id=="0" and Id==0):
                    # #if(PId!="b'0'"):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.SessionNoteForm,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='AddSessionNoteForm',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getAddSessionNotesForm', methods=['POST','GET'])
def getAddSessionNotesForm():
    session=Session()
    try:
        if(request.method == "POST"):
            request_json = request.get_json()
            Aid = request_json.get('Aid')
            PID = request_json.get('PID')
            queryResult= session.query(Model.models.Application.M_SessionNotes.MSNID.label('Id'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_SessionNotes.MSN_started,'').label('MSN_started'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_SessionNotes.MSN_todayfeeling,'').label('MSN_todayfeeling'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_SessionNotes.MSN_dotoday,'').label('MSN_dotoday'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_SessionNotes.MSN_Notes,'').label('MSN_Notes')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MSN_IsActive=1,MSN_IsDeleted=0
                                ).order_by(Model.models.Application.M_SessionNotes.MSNID.desc()).all()

            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddSessionNotes,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                        ).filter_by(MFC_FormName='AddSessionNotes',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
            Started = Common_Function.CommonFun.Started()
            todayfeeling = Common_Function.CommonFun.todayfeeling()
            dotoday = Common_Function.CommonFun.dotoday()
            getTextField[0]['options']= Started
            getTextField[1]['options']= todayfeeling
            getTextField[2]['options']= dotoday

            if(len(queryResult)==0):
                return jsonify(result=getTextField)
            else:
                if(queryResult[0].MSN_started!=''):
                    getTextField[0]['value'] = int(queryResult[0].MSN_started)
                else:
                    getTextField[0]['value'] = queryResult[0].MSN_started
                
                if(queryResult[0].MSN_todayfeeling!=''):
                    getTextField[1]['value'] = int(queryResult[0].MSN_todayfeeling)
                else:
                    getTextField[2]['value'] = queryResult[0].MSN_todayfeeling
                
                if(queryResult[0].MSN_dotoday!=''):
                    getTextField[2]['value'] = int(queryResult[0].MSN_dotoday)
                else:
                    getTextField[2]['value'] = queryResult[0].MSN_dotoday
                
                if(queryResult[0].MSN_Notes!=''):
                    getTextField[3]['value'] = queryResult[0].MSN_Notes
                else:
                    getTextField[3]['value'] = queryResult[0].MSN_Notes
                return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
    finally:
        session.close()

@app.route('/submitSessionNotesForm', methods=['GET','POST'])
def submitSessionNotesForm():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            started = request_json.get('started')
            todayfeeling = request_json.get('todayfeeling')
            dotoday = request_json.get('dotoday')
            Notes = request_json.get('Notes')
            AID = request_json.get('AID')

            PID = request_json.get('PID')
            Id = request_json.get('ID')
            if(Id=='' or Id==None):

                Insert=Model.models.Application.M_SessionNotes()
                Insert.M_Patient_MPID=PID
                Insert.M_AppointmentID=AID
                Insert.MSN_started=started
                Insert.MSN_todayfeeling=todayfeeling
                Insert.MSN_dotoday=dotoday
                Insert.MSN_Notes=Notes

                Insert.MSN_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()
                return jsonify({'msg':'Session Notes Added Successfully'})
            else:
                
                Insert=session.query(Model.models.Application.M_SessionNotes).get(Id)
                Insert.M_Patient_MPID=PID
                Insert.M_AppointmentID=AID
                Insert.MSN_started=started
                Insert.MSN_todayfeeling=todayfeeling
                Insert.MSN_dotoday=dotoday
                Insert.MSN_Notes=Notes
                Insert.MSN_AddIP= flask.request.remote_addr
                session.commit()
                return jsonify({'msg':'Session Notes Added Successfully'})

    except:
        return jsonify({'err':'token is invalid'})
    finally:
        session.close()

@app.route('/getPatientUploadFilesbox', methods=['POST','GET'])
def getPatientUploadFilesbox():
    session=Session()
    try:
        if(request.method == "GET"):
            # FormItems=[]
            # content_type = request.headers.get('Content-Type')
            # PId= str(request.data)
            # # if(Id=="0" and Id==0):
            # #if(PId!="b'0'"):
            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddPatientFilesform,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddPatientFilesform',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/submitPatientUploadFiles',methods=['GET','POST'])
def submitPatientUploadFiles():

    session=Session()
    try:

        if(request.method == "POST"):
            content_type = request.headers.get('Content-Type')
            files= request.files.getlist(str('files[]'))
            data= request.form.get('PID')

            FilePath = 'static/PatientFile_Documentss'
            for file in files:
                if(file.filename!='' and file.filename!= None):
                    date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                    name, ext = os.path.splitext(file.filename)
                    files = 'PF'+ '_'+ name +'_' + date  + ext
                    fileName=files
                    if(os.path.exists(FilePath)):
                        file.save(os.path.join(FilePath, fileName))
                        print(file.filename)
                    else:
                        os.makedirs(FilePath)
                        file.save(os.path.join(FilePath, fileName))

                Insert=Model.models.Application.M_PatientUplpoadFiles()
                Insert.MPF_PatientID= 1  #data
                Insert.MPF_Name=fileName
                Insert.MPF_FilePath=FilePath
                Insert.MPF_FileType='NotAvailable'
                Insert.MPF_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()
            return jsonify({'msg':'File Uploaded Successfully'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/getAddProvisionalDiagnosis', methods=['POST','GET'])
def getAddProvisionalDiagnosis():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddProvisionalDiagnosis,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddProvisionalDiagnosis',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
            return jsonify(result=getTextField)
    finally:
        session.close()

# @app.route('/submitProvisionalDiagnosis', methods=['GET','POST'])
# def submitProvisionalDiagnosis():

#     session=Session()
#     try:

#         if(request.method == "POST"):
#             request_json = request.get_json()
#             ProvisionalDiagnosis = request_json.get('ProvisionalDiagnosis')
#             ICDCode = request_json.get('ICDCode')
#             ICDDescription = request_json.get('ICDDescription')
#             AID = request_json.get('AID')

#             PID = request_json.get('PID')
            
#             Insert=Model.models.Application.M_ProvisionalDiagnosis()
#             Insert.M_PatientID=PID
#             Insert.M_AppointmentID=AID
#             Insert.MPD_ProvisionalDiagnosis=ProvisionalDiagnosis
#             Insert.MPD_ICDCode=ICDCode
#             Insert.MPD_ICDDescription=ICDDescription

#             Insert.MPD_AddIP= flask.request.remote_addr
#             session.add(Insert)
#             session.commit()
#             return jsonify({'msg':'Provisional Diagnosis Added Successfully'})

#     except:
#         return jsonify({'err':'token is invalid'})
#     finally:
#         session.close()


@app.route('/submitProvisionalDiagnosis', methods=['GET','POST'])
def submitProvisionalDiagnosis():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            
            ReqData  = request_json.get('Diagnosis')
            AID  = request_json.get('AID')
            PID  = request_json.get('PID')
            showData  = request_json.get('showData')
            
            Appoint = session.query(Model.models.Application.M_ProvisionalDiagnosis
                                    ).filter_by(M_AppointmentID=int(AID),MPD_IsDeleted=0).all()
            if(len(Appoint)>0):
                session.query(Model.models.Application.M_ProvisionalDiagnosis
                        ).filter(Model.models.Application.M_ProvisionalDiagnosis.M_AppointmentID==AID
                                    ).update({Model.models.Application.M_ProvisionalDiagnosis.MPD_IsDeleted:1,
                                            Model.models.Application.M_ProvisionalDiagnosis.MPD_ModDate:datetime.datetime.now()})
                session.commit()
                    
            for getjson in ReqData:
                ProvisionalDiagnosis =getjson['ProvisionalDiagnosis']
                ICDCode =getjson['ICDCode']
                ICDDescription= getjson['ICDDescription']
                
                Insert=Model.models.Application.M_ProvisionalDiagnosis()
                Insert.M_PatientID=PID
                Insert.M_AppointmentID=AID
                Insert.MPD_ProvisionalDiagnosis=ProvisionalDiagnosis
                Insert.MPD_ICDCode=ICDCode
                Insert.MPD_ICDDescription=ICDDescription
                Insert.MPD_ShowDtl=showData
                    
                Insert.MPD_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()
            return jsonify({'msg':'Provisional Diagnosis Added Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()



@app.route('/getAddPatientreviewForm', methods=['POST','GET'])
def getAddPatientreviewForm():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddPatientreviewForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddPatientreviewForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
            FollowAfter = Common_Function.CommonFun.FollowAfter()
            getTextField[0]['options']= FollowAfter

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/submitPatientReview', methods=['GET','POST'])
def submitPatientReview():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            FollowAfter = request_json.get('FollowAfter')
            FollowDate = request_json.get('FollowDate')
            Comments = request_json.get('Comments')
            
            PID = request_json.get('PID')
            AID = request_json.get('AID')

            Insert=Model.models.Application.M_PatientReview()
            Insert.M_Patient_MPID=PID
            Insert.MPR_FollowAfter=FollowAfter
            Insert.MPR_FollowDate=FollowDate
            Insert.MPR_Comments=Comments
            Insert.M_AppointmentID=AID

            Insert.MPR_AddIP= flask.request.remote_addr
            session.add(Insert)
            session.commit()
            return jsonify({'msg':'Patient Review Added Successfully'})

    except:
        return jsonify({'err':'token is invalid'})
    finally:
        session.close()

@app.route('/getAddServicesbox', methods=['POST','GET'])
def getAddServicesbox():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddServicesbox,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddServicesbox',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/getAddServicesboxForm', methods=['POST','GET'])
def getAddServicesboxForm():
    session=Session()
    try:


        getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddServicesboxForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddServicesboxForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
        ServiceStatus = Common_Function.CommonFun.ServiceStatus()
        getTextField[4]['options']= ServiceStatus
        if(request.method == "GET"):
            return jsonify(result=getTextField)
        if(request.method == "POST"):
            Id=request.get_json()

            queryresult= session.query(Model.models.Application.M_Services.MS_ServiceName,
                                Model.models.Application.M_Services.MS_Quantity,
                                Model.models.Application.M_Services.MS_TotalCost,
                                Model.models.Application.M_Services.MS_Comments,
                                Model.models.Application.M_Services.MS_Status
                                ).filter_by(MPDID=Id,MS_IsActive=1,MS_IsDeleted=0).all()
            getTextField[0]['value']=queryresult[0].MS_ServiceName
            getTextField[1]['value']=queryresult[0].MS_Quantity
            getTextField[2]['value']=queryresult[0].MS_TotalCost
            getTextField[3]['value']=queryresult[0].MS_Comments
            getTextField[4]['value']=queryresult[0].MS_Status

            return jsonify(result=getTextField)

    finally:
        session.close()

@app.route('/submitServices', methods=['GET','POST'])
def submitServices():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            ServiceName = request_json.get('ServiceName')
            Quantity = request_json.get('Quantity')
            TotalCost = request_json.get('TotalCost')
            Comments = request_json.get('Comments')
            Status = request_json.get('Status')

            PID = request_json.get('PID')
            Id = request_json.get('ID')
            if(Id=='' or Id==None):

                Insert=Model.models.Application.M_Services()
                Insert.M_Patient_MPID=PID
                Insert.MS_ServiceName=ServiceName
                Insert.MS_Quantity=Quantity
                Insert.MS_TotalCost=TotalCost
                Insert.MS_Comments=Comments
                Insert.MS_Status=Status

                Insert.MS_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()
                return jsonify({'msg':'Services Added Successfully'})
            else:
                Insert=session.query(Model.models.Application.M_Services).get(Id)
                Insert.M_Patient_MPID=PID
                Insert.MS_ServiceName=ServiceName
                Insert.MS_Quantity=Quantity
                Insert.MS_TotalCost=TotalCost
                Insert.MS_Comments=Comments
                Insert.MS_Status=Status
                Insert.MS_AddIP= flask.request.remote_addr
                Insert.MS_ModDate = datetime.datetime.now()
                session.commit()
                return jsonify({'msg':'Services Updated Successfully'})
    except:
        return jsonify({'err':'token is invalid'})
    finally:
        session.close()

@app.route('/getServices', methods=['GET'])
def getServices():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getServices,
                    session.query(Model.models.Application.M_Services.MPDID.label('ID'),
                                Model.models.Application.M_Services.MS_ServiceName.label('Service Name'),
                                Model.models.Application.M_Services.MS_Quantity.label('Quantity'),
                                Model.models.Application.M_Services.MS_TotalCost.label('Total Cost')
                                ).filter_by(MS_IsActive=1,MS_IsDeleted=0).all()
                            )
            return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/deleteServices', methods=['POST','GET'])
def deleteServices():
    session=Session()
    try:
        if(request.method == "POST"):
            Id= request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_Services
                              ).filter(Model.models.Application.M_Services.MPDID==Id
                              ).update({Model.models.Application.M_Services.MS_IsDeleted:1})
                session.commit()
                return jsonify({'msg':'Services Deleted Successfully'})
            else:
                return jsonify({'err':'Something went wrong (Id was not there)'})
    finally:
          session.close()

@app.route('/getAddPrescriptionBox', methods=['POST','GET'])
def getAddPrescriptionForm():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddPrescriptionBox,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddPrescriptionBox',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/getAddInstructions', methods=['POST','GET'])
def getAddInstructions():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddInstructions,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddInstructions',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

            return jsonify(result=getTextField)
    finally:
        session.close()

# @app.route('/AddAllAppointmentScene', methods=['POST','GET'])
# async def AddAllAppointmentScene():
#     session=Session()
#     try:
#         if(request.method == "GET"):
#             OpenTime='09:00'
#             CloseTime= '20:00'
#             dateobject = datetime.date.today()
#             Startdate = datetime.datetime.combine(dateobject, datetime.time())
#             branchId= request.headers.get('branchId')
#             EndDate= Startdate + datetime.timedelta(days=1)
#             getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddAllAppointmentScene,
#                             session.query(Model.models.Application.M_FormControl,
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
#                                     Model.models.Application.M_FormControl.MFC_Align.label('align'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
#                         ).filter_by(MFC_FormName='AddAllAppointmentScene',MFC_IsActive=1,MFC_IsDeleted=0
#             # getDoctor= Common_Function.CommonFun.getDoctor()
#                                     ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
#                                         ).all())
#             getDoctor = Common_Function.CommonFun.getDoctor(branchId)
#             Columns= [row[0] for row in getDoctor]
#             Columns.insert(0,"Time")

#             ListTime = (pd.DataFrame(columns=['NULL'],
#                             index=pd.date_range(Startdate, EndDate,freq='15T')).between_time(OpenTime,CloseTime).index.tolist()
#             )
#             today = datetime.datetime.now().strftime('%d-%b-%Y')
#             todaytime = datetime.datetime.now().strftime('%H%M')
#             arr = []
#             for eachtime in ListTime:
#                 obj = {}
#                 time= eachtime.strftime('%H:%M')
#                 timee= eachtime.strftime('%I:%M %p')
#                 obj['Time'] = timee

#                 # print(str(eachtime))

#                 for doctors in getDoctor:
#                     doctor = doctors[0]
#                     DoctorId = doctors[1]
#                     endTime = eachtime + timedelta(minutes=14)
#                     PatientName = session.query(Model.models.Application.M_Appointment.M_DoctorDetails_MDDID,
#                                                 Model.models.Application.M_Patient.MP_Name,
#                                                 Model.models.Application.M_Patient.MP_UHID,
#                                                 Model.models.Application.M_Appointment.MAID,
#                                                 Model.models.Application.M_Appointment.MP_Status,
#                                                 Model.models.Application.M_Appointment.MP_Duration,
#                                                 Model.models.Application.M_Appointment.MA_FromApp,
#                                                 Model.models.Application.M_Appointment.MP_AppointmentType,
#                                                 sqlalchemy.func.coalesce(Model.models.Application.M_Service.MS_CategoryName,'').label('MS_CategoryName'),
#                                                 Model.models.Application.T_Details.TD_Name.label('Duration')
#                                 ).filter_by(MP_IsActive=1,MP_IsDeleted=0,M_DoctorDetails_MDDID=DoctorId,M_Branch_MBID=int(branchId),MP_IsCancelled=0
#                                 ).filter(Model.models.Application.M_Appointment.MA_Time.between(eachtime, endTime),
#                                 sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y') == today
#                                 ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
#                                 ).outerjoin(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
#                                 ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Duration
#                                         ).all()
#                     obj[doctor] = {}
#                     if(len(PatientName)>0):
#                         obj[doctor]['Appoint']= "Appointment of " + PatientName[0].MP_Name +" ("+PatientName[0].MP_UHID +") For " + PatientName[0].MS_CategoryName
#                         obj[doctor]['Appoint_ID']= PatientName[0].MAID
#                         obj[doctor]['Status']= PatientName[0].MP_Status
#                         obj[doctor]['Duration']= PatientName[0].Duration
#                         if(PatientName[0].MA_FromApp=='yes'):
#                             obj[doctor]['FromApp']= 'Yes'
#                         else:
#                             obj[doctor]['FromApp']= 'No'
#                         if(PatientName[0].MP_AppointmentType==32):
#                             obj[doctor]['Video']= 'Yes'
#                         else:
#                             obj[doctor]['Video']= 'No'
#                     else:
#                         obj[doctor]['DoctorName']  = DoctorId
#                         obj[doctor]['Time']  = time
                        
#                 arr.append(obj)

#            # print(arr)
#             getTextField[0]['columnData']= Columns
#             getTextField[0]['rowData']= arr
#             # print(getTextField)
#             return jsonify(result=getTextField)
#     finally:
#         session.close()


@app.route('/AddAllAppointmentScene', methods=['POST','GET'])
async def AddAllAppointmentScene():
    session=Session()
    try:
        if(request.method == "GET"):
            OpenTime='09:00'
            CloseTime= '20:00'
            dateobject = datetime.date.today()
            Startdate = datetime.datetime.combine(dateobject, datetime.time())
            branchId= request.headers.get('branchId')
            EndDate= Startdate + datetime.timedelta(days=1)
            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddAllAppointmentScene,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddAllAppointmentScene',MFC_IsActive=1,MFC_IsDeleted=0
            
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getDoctor = Common_Function.CommonFun.getDoctor(branchId)
            Columns= [row[0] for row in getDoctor]
            Columns.insert(0,"Time")

            ListTime = (pd.DataFrame(columns=['NULL'],
                            index=pd.date_range(Startdate, EndDate,freq='15T')).between_time(OpenTime,CloseTime).index.tolist()
            )
            today = datetime.datetime.now().strftime('%d-%b-%Y')
            
            arr = []
            
            
            for eachtime in ListTime:
                obj = {}
                time= eachtime.strftime('%H:%M')
                timee= eachtime.strftime('%H:%M %p')
                obj['Time'] = timee

                for doctors in getDoctor:
                    doctor = doctors[0]
                    DoctorId = doctors[1]
                    
                    obj[doctor] = {}
                    
                    obj[doctor]['DoctorName']  = DoctorId
                    obj[doctor]['Time']  = time
                        
                arr.append(obj)
                PatientName = session.query(Model.models.Application.M_Appointment.M_DoctorDetails_MDDID,
                                                Model.models.Application.M_Patient.MP_Name,
                                                Model.models.Application.M_Patient.MP_UHID,
                                                Model.models.Application.M_Appointment.MAID,
                                                Model.models.Application.M_Appointment.MP_Status,
                                                sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Time,'%H:%i %p').label('Time'),
                                                Model.models.Application.M_Appointment.MP_Status,
                                                Model.models.Application.M_Appointment.MP_Duration,
                                                Model.models.Application.M_Appointment.MP_AppointmentType,
                                                Model.models.Application.M_Appointment.MA_FromApp,
                                                sqlalchemy.func.coalesce(Model.models.Application.M_Service.MS_CategoryName,'').label('MS_CategoryName'),
                                                Model.models.Application.T_Details.TD_Name.label('Duration'),
                                                func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName, ' ', Model.models.Application.M_DoctorDetails.MDD_LastName,' ',Model.models.Application.M_DoctorDetails.MDD_Suffix).label('DocName'),
                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0,M_Branch_MBID=int(branchId)
                                ).filter(sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y') == today
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                ).outerjoin(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Duration
                                ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                        ).all()
            
            for i in range(len(PatientName)):
                
                Appoint= "Appointment of " + PatientName[i].MP_Name +" ("+PatientName[i].MP_UHID +") For " + PatientName[i].MS_CategoryName
                Appoint_ID= PatientName[i].MAID
                Status= PatientName[i].MP_Status
                Duration= PatientName[i].Duration
                if(PatientName[i].MA_FromApp=='yes'):
                    FromApp= 'Yes'
                else:
                    FromApp= 'No'
                if(PatientName[i].MP_AppointmentType==32):
                    Video= 'Yes'
                else:
                    Video= 'No'
                val = {'Appoint':Appoint,'Appoint_ID':Appoint_ID,'Status':Status,'Duration':Duration,'FromApp':FromApp,'Video':Video}           
                
                target_time = PatientName[i].Time
                docname  = PatientName[i].DocName
                for entry in arr:
                    if entry["Time"] == target_time:
                    
                        entry[docname] = val

           
            getTextField[0]['columnData']= Columns
            getTextField[0]['rowData']= arr
            
            return jsonify(result=getTextField)
    finally:
        session.close()



@app.route('/doctorOutOffice', methods=['GET','POST'])
def doctorOutOffice():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            DoctorId = request_json.get('doctorId')
            FromDate = request_json.get('fromDate')
            ToDate = request_json.get('toDate')

            Insert=Model.models.Application.DoctorOutoffice()
            Insert.DO_DoctorId=DoctorId
            Insert.DO_FromDate=FromDate
            Insert.DO_ToDate=ToDate

            Insert.DO_AddIP= flask.request.remote_addr
            Insert.DO_AddDate=datetime.datetime.now()
            Insert.DO_IsActive= 1
            Insert.DO_IsDeleted= 0
            session.add(Insert)
            session.commit()
            return jsonify({'msg':'Out of office Added Successfully'})

    except:
        return jsonify({'err':'token is invalid'})
    finally:
        session.close()

# @app.route('/AddSearchAppointmentScene', methods=['POST','GET'])
# async def AddSearchAppointmentScene():
#     session=Session()
#     try:
#         if(request.method == "POST"):
#             OpenTime='08:00'
#             CloseTime= '20:00'
#             dateobject = datetime.date.today()
#             Startdate = datetime.datetime.combine(dateobject, datetime.time())
#             EndDate= Startdate + datetime.timedelta(days=1)
#             request_json = request.get_json()
#             appointmentType = request_json.get('appointmentType')
#             branch = request_json.get('branch')
#             appointmentDate = request_json.get('appointmentDate')
#             apply = []
#             branchId= request.headers.get('branchId')
#             if(appointmentType !='' and appointmentType !=None):
#                 apply.append(Model.models.Application.M_DoctorDetails.MDDID==appointmentType)
#             applies = []
#             if(branch !='' and branch !=None):
#                 apply.append(Model.models.Application.M_DoctorDetails.MDD_Clinic.contains(branch))
#             else:
#                 apply.append(Model.models.Application.M_DoctorDetails.MDD_Clinic.contains(branchId))
#             getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddAllAppointmentScene,
#                             session.query(Model.models.Application.M_FormControl,
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
#                                     Model.models.Application.M_FormControl.MFC_Align.label('align'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
#                         ).filter_by(MFC_FormName='AddAllAppointmentScene',MFC_IsActive=1,MFC_IsDeleted=0
#             # getDoctor= Common_Function.CommonFun.getDoctor()
#                                     ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
#                                         ).all())
#             # getDoctor = Common_Function.CommonFun.getDoctor()
#             if(appointmentType !='' and appointmentType !=None):
#                 getDoctor= session.query(sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,' ',sqlalchemy.func.coalesce(Model.models.Application.M_DoctorDetails.MDD_Suffix,'')).label('MDD_FirstName'),
#                                  Model.models.Application.M_DoctorDetails.MDDID
#                                             ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0
#                                     ).filter(*apply
#                                     # ).filter(Model.models.Application.M_DoctorDetails.MDD_Clinic==branchId
#                                     ).order_by(Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
#             else:
#                 getDoctor= session.query(sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,' ',sqlalchemy.func.coalesce(Model.models.Application.M_DoctorDetails.MDD_Suffix,'')).label('MDD_FirstName'),
#                                  Model.models.Application.M_DoctorDetails.MDDID
#                                             ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0
#                                             ).filter(*apply
#                                     ).order_by(Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
#             Columns= [row[0] for row in getDoctor]
#             Columns.insert(0,"Time")


#             ListTime = (pd.DataFrame(columns=['NULL'],
#                             index=pd.date_range(Startdate, EndDate,freq='15T')).between_time(OpenTime,CloseTime).index.tolist()
#             )
#             today = datetime.datetime.now().strftime('%d-%b-%Y')
#             if(appointmentDate !='' and appointmentDate !=None):
#                 applies.append(Model.models.Application.M_Appointment.MA_Date==appointmentDate)
#             else:
#                 applies.append(sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y') == today)
#             if(branch !='' and branch !=None):
#                 applies.append(Model.models.Application.M_Appointment.M_Branch_MBID==branch)
#             else:
#                 applies.append(Model.models.Application.M_Appointment.M_Branch_MBID==branchId)
#             arr = []
#             for eachtime in ListTime:
#                 obj = {}
#                 time= eachtime.strftime('%H:%M')
#                 timee= eachtime.strftime('%H:%M %p')
#                 obj['Time'] = timee

#                 # print(str(eachtime))

#                 for doctors in getDoctor:
#                     doctor = doctors[0]
#                     DoctorId = doctors[1]
#                     endTime = eachtime + timedelta(minutes=14)
#                     PatientName = session.query(Model.models.Application.M_Appointment.M_DoctorDetails_MDDID,
#                                                 Model.models.Application.M_Patient.MP_Name,
#                                                 Model.models.Application.M_Patient.MP_UHID,
#                                                 Model.models.Application.M_Appointment.MAID,
#                                                 Model.models.Application.M_Appointment.MP_Status,
#                                                 Model.models.Application.M_Appointment.MP_Duration,
#                                                 Model.models.Application.M_Appointment.MA_FromApp,
#                                                 Model.models.Application.M_Appointment.MP_AppointmentType,
#                                                 sqlalchemy.func.coalesce(Model.models.Application.M_Service.MS_CategoryName,'').label('MS_CategoryName'),
#                                                 Model.models.Application.T_Details.TD_Name.label('Duration')
#                                 ).filter_by(MP_IsActive=1,MP_IsDeleted=0,M_DoctorDetails_MDDID=DoctorId,MP_IsCancelled=0
#                                 ).filter(Model.models.Application.M_Appointment.MA_Time.between(eachtime, endTime),
#                                 *applies
#                                 ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
#                                 ).outerjoin(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
#                                 ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Duration
#                                         ).all()
#                     # select M_DoctorDetails_MDDID,MP_Name from m_appointment INNER JOIN m_patient ON m_appointment.M_Patient_MPID=m_patient.MPID where MA_Date="2022-07-28" and MA_Time between "18:30:00" and "19:00:00";
#                     obj[doctor] = {}
#                     if(len(PatientName)>0):
#                          #"Appointment of " + PatientName[0].MP_Name
#                         obj[doctor]['Appoint']= "Appointment of " + PatientName[0].MP_Name +" ("+PatientName[0].MP_UHID +") For " + PatientName[0].MS_CategoryName
#                         obj[doctor]['Appoint_ID']= PatientName[0].MAID
#                         obj[doctor]['Status']= PatientName[0].MP_Status
#                         obj[doctor]['Duration']= PatientName[0].Duration
#                         if(PatientName[0].MA_FromApp=='yes'):
#                             obj[doctor]['FromApp']= 'Yes'
#                         else:
#                             obj[doctor]['FromApp']= 'No'
#                         if(PatientName[0].MP_AppointmentType==32):
#                             obj[doctor]['Video']= 'Yes'
#                         else:
#                             obj[doctor]['Video']= 'No'
#                     else:
#                         obj[doctor]['DoctorName']  = DoctorId
#                         obj[doctor]['Time'] = time
#                         obj[doctor]['Date'] = appointmentDate
#                     # print(doctor)
#                     #print(eachtime = doctor)
#                 arr.append(obj)

#            # print(arr)
#             getTextField[0]['columnData']= Columns
#             getTextField[0]['rowData']= arr

#             return jsonify(result=getTextField)
#     finally:
#         session.close()


@app.route('/AddSearchAppointmentScene', methods=['POST','GET'])
def AddSearchAppointmentScene():
    session=Session()
    try:
        if(request.method == "POST"):
            OpenTime='09:00'
            CloseTime= '20:00'
            dateobject = datetime.date.today()
            Startdate = datetime.datetime.combine(dateobject, datetime.time())
            EndDate= Startdate + datetime.timedelta(days=1)
            request_json = request.get_json()
            appointmentType = request_json.get('appointmentType')
            branch = request_json.get('branch')
            appointmentDate = request_json.get('appointmentDate')
            apply = []
            branchId= request.headers.get('branchId')
            if(appointmentType !='' and appointmentType !=None):
                apply.append(Model.models.Application.M_DoctorDetails.MDDID==appointmentType)
            applies = []
            if(branch !='' and branch !=None):
                apply.append(Model.models.Application.M_DoctorDetails.MDD_Clinic.contains([branch]))
            else:
                apply.append(Model.models.Application.M_DoctorDetails.MDD_Clinic.contains([branchId]))
            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddAllAppointmentScene,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddAllAppointmentScene',MFC_IsActive=1,MFC_IsDeleted=0
            
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            
            if(appointmentType !='' and appointmentType !=None):
                getDoctor= session.query(func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName, ' ', Model.models.Application.M_DoctorDetails.MDD_LastName,' ',Model.models.Application.M_DoctorDetails.MDD_Suffix).label('Name'),
                                 Model.models.Application.M_DoctorDetails.MDDID
                                            ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0
                                    ).filter(*apply
                                    
                                    ).order_by(Model.models.Application.M_DoctorDetails.MDD_Suffix,Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
            else:
                getDoctor= session.query(func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName, ' ', Model.models.Application.M_DoctorDetails.MDD_LastName,' ',Model.models.Application.M_DoctorDetails.MDD_Suffix).label('Name'),
                                 Model.models.Application.M_DoctorDetails.MDDID
                                            ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0
                                            ).filter(*apply
                                    ).order_by(Model.models.Application.M_DoctorDetails.MDD_Suffix,Model.models.Application.M_DoctorDetails.MDD_FirstName).all()
            Columns= [row[0] for row in getDoctor]
            Columns.insert(0,"Time")


            ListTime = (pd.DataFrame(columns=['NULL'],
                            index=pd.date_range(Startdate, EndDate,freq='15T')).between_time(OpenTime,CloseTime).index.tolist()
            )
            today = datetime.datetime.now().strftime('%d-%b-%Y')
            if(appointmentDate !='' and appointmentDate !=None):
                applies.append(Model.models.Application.M_Appointment.MA_Date==appointmentDate)
            else:
                applies.append(sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y') == today)
            if(branch !='' and branch !=None):
                applies.append(Model.models.Application.M_Appointment.M_Branch_MBID==branch)
            else:
                applies.append(Model.models.Application.M_Appointment.M_Branch_MBID==branchId)
            arr = []
            for eachtime in ListTime:
                obj = {}
                time= eachtime.strftime('%H:%M')
                timee= eachtime.strftime('%H:%M %p')
                obj['Time'] = timee

               

                for doctors in getDoctor:
                    doctor = doctors[0]
                    DoctorId = doctors[1]
                    
                    obj[doctor] = {}
                    
                    obj[doctor]['DoctorName']  = DoctorId
                    obj[doctor]['Time'] = time
                    obj[doctor]['Date'] = appointmentDate
                    
                arr.append(obj)
                
            PatientName = session.query(Model.models.Application.M_Appointment.M_DoctorDetails_MDDID,
                                                Model.models.Application.M_Patient.MP_Name,
                                                Model.models.Application.M_Patient.MP_UHID,
                                                Model.models.Application.M_Appointment.MAID,
                                                Model.models.Application.M_Appointment.MP_Status,
                                                sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Time,'%H:%i %p').label('Time'),
                                                Model.models.Application.M_Appointment.MP_Status,
                                                Model.models.Application.M_Appointment.MP_Duration,
                                                Model.models.Application.M_Appointment.MP_AppointmentType,
                                                Model.models.Application.M_Appointment.MA_FromApp,
                                                sqlalchemy.func.coalesce(Model.models.Application.M_Service.MS_CategoryName,'').label('MS_CategoryName'),
                                                Model.models.Application.T_Details.TD_Name.label('Duration'),
                                                func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName, ' ', Model.models.Application.M_DoctorDetails.MDD_LastName,' ',Model.models.Application.M_DoctorDetails.MDD_Suffix).label('DocName'),
                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0
                                ).filter(*applies
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                ).outerjoin(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Duration
                                ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                        ).all()
            
            for i in range(len(PatientName)):
                
                Appoint= "Appointment of " + PatientName[i].MP_Name +" ("+PatientName[i].MP_UHID +") For " + PatientName[i].MS_CategoryName
                Appoint_ID= PatientName[i].MAID
                Status= PatientName[i].MP_Status
                Duration= PatientName[i].Duration
                if(PatientName[i].MA_FromApp=='yes'):
                    FromApp= 'Yes'
                else:
                    FromApp= 'No'
                if(PatientName[i].MP_AppointmentType==32):
                    Video= 'Yes'
                else:
                    Video= 'No'
                val = {'Appoint':Appoint,'Appoint_ID':Appoint_ID,'Status':Status,'Duration':Duration,'FromApp':FromApp,'Video':Video}           
                
                target_time = PatientName[i].Time
                docname  = PatientName[i].DocName
                for entry in arr:
                    if entry["Time"] == target_time:
                    
                        entry[docname] = val
                
            getTextField[0]['columnData']= Columns
            getTextField[0]['rowData']= arr
            
            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/getAllAppointmentDetail', methods=['POST','GET'])
def getAllAppointmentDetail():
    session=Session()
    try:
        if(request.method == "POST"):

            request_json = request.get_json(force = True)
            AppointmentID = request_json.get('id')

            apply = []
            appointStatus = session.query(Model.models.Application.T_Details.TD_Name.label('Status'),
                                          Model.models.Application.T_Details.TDID.label('IDs')).subquery()

            if(AppointmentID !='' and AppointmentID !=None):
                apply.append(Model.models.Application.M_Appointment.MAID==AppointmentID)
            if(AppointmentID !='' and AppointmentID !=None):
                queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getAppointments,
                session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
                            Model.models.Application.M_Appointment.MP_Procedure,
                            Model.models.Application.M_Branch.MB_Name.label('Branch'),
                            Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                            Model.models.Application.M_Patient.MP_Name.label('Patient'),
                            Model.models.Application.M_Patient.MP_DOB.label('Age'),
                            Model.models.Application.M_Patient.MPID.label('PID'),
                            appointStatus.c.Status.label('Status'),
                            # Model.models.Application.M_Appointment.MP_Status.label('Status'),
                            Model.models.Application.M_Patient.MP_Mobile.label('Mobile'),
                            Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('Date'),
                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Time,'%I:%i %p').label('Time'),
                            # cast(Model.models.Application.M_Appointment.MA_Time, sqlalchemy.String).label('Time'),
                            Model.models.Application.M_Appointment.MP_Duration.label('Durations'),
                            Model.models.Application.T_Details.TD_Name.label('Duration'),
                            Model.models.Application.M_InvoiceMaster.MIID.label('Invoiceno'),
                            ).filter_by(MP_IsActive=1,MP_IsDeleted=0).filter(*apply
                # ).join(Model.models.Application.M_Organisation, Model.models.Application.M_Organisation.MOID==Model.models.Application.M_Appointment.M_Organisation_MOID
                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                ).outerjoin(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                ).join(appointStatus, appointStatus.c.IDs==Model.models.Application.M_Appointment.MP_Status
                ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Duration
                ).outerjoin(Model.models.Application.M_InvoiceMaster, and_(Model.models.Application.M_InvoiceMaster.MI_AppointmentId==Model.models.Application.M_Appointment.MAID,
                            Model.models.Application.M_InvoiceMaster.MI_IsDeleted==0)
                       ).all())
                Detail = session.query(Model.models.Application.M_Appointment.MAID,
                                          Model.models.Application.M_Appointment.M_Patient_MPID,
                                          Model.models.Application.M_Appointment.MP_Procedure,
                                          Model.models.Application.M_Appointment.M_DoctorDetails_MDDID,
                                          Model.models.Application.M_Appointment.MA_FromApp
                                          ).filter_by(MAID=AppointmentID).all()
                pid= Detail[0].M_Patient_MPID
                Sid = Detail[0].MP_Procedure
                FromApp = Detail[0].MA_FromApp
                if(FromApp=='yes'):
                    queryresult[0]['AppAppointment'] = 'yes'
                else:
                    queryresult[0]['AppAppointment'] = 'no'    
                queryResult1= session.query(Model.models.Application.M_PartnerOrgPatient.MPP_OrgId,
                                    Model.models.Application.M_PartnerOrgPatient.MPPID,
                                    Model.models.Application.M_PartnerOrgPatient.MPP_PatientId,
                                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MPP_PatientId=pid
                                    ).all()
                session.commit()
                if(len(queryResult1)>0):
                    queryresult[0]['Partner'] = 'yes'
                else:
                    queryresult[0]['Partner'] = 'no'
                queryResult2= session.query(Model.models.Application.M_PatientPackageDetailed.MPPID,
                                    Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions
                                    ).filter_by(MPP_IsActive=1,MPP_IsDeleted=0,MPP_PatientId=pid
                                    ).filter(Model.models.Application.M_PatientPackageDetailed.MPP_ServiceId.ilike(f'%{Sid}%')
                                    ).filter(Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions!=0
                                    ).order_by(Model.models.Application.M_PatientPackageDetailed.MPPID.desc()).all()
                session.commit()
                if(len(queryResult2)>0):
                    # if(int(queryResult2[0].MPP_AvailSessions)>0):
                    queryresult[0]['Package'] = 'yes'
                    # else:
                    #     queryresult[0]['Package'] = 'no'
                else:
                    queryresult[0]['Package'] = 'no'
                queryResult3= session.query(Model.models.Application.M_PackageInvoiceForAppointment.MPIAID
                                    ).filter_by(MPIA_IsActive=1,MPIA__IsDeleted=0,MPIA_AppointId=AppointmentID
                                    ).all()
                session.commit()
                if(len(queryResult3)>0):
                    queryresult[0]['PackageNo'] = queryResult3[0].MPIAID
            return jsonify(result=queryresult)
    finally:
        session.close()

# @app.route('/getAllAppointmentDetail', methods=['POST','GET'])
# def getAllAppointmentDetail():
#     session=Session()
#     try:
#         if(request.method == "POST"):

#             request_json = request.get_json(force = True)
#             AppointmentID = request_json.get('id')

#             apply = []
#             appointStatus = session.query(Model.models.Application.T_Details.TD_Name.label('Status'),
#                                           Model.models.Application.T_Details.TDID.label('IDs')).subquery()

#             if(AppointmentID !='' and AppointmentID !=None):
#                 apply.append(Model.models.Application.M_Appointment.MAID==AppointmentID)
#             if(AppointmentID !='' and AppointmentID !=None):
#                 queryresult= Common_Function.CommonFun.convertToJson(
#                 Constant.constant.constant.getAppointments,
#                 session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
#                             Model.models.Application.M_Appointment.MP_Procedure,
#                             Model.models.Application.M_Branch.MB_Name.label('Branch'),
#                             Model.models.Application.M_Patient.MP_UHID.label('UHID'),
#                             Model.models.Application.M_Patient.MP_Name.label('Patient'),
#                             Model.models.Application.M_Patient.MP_DOB.label('Age'),
#                             Model.models.Application.M_Patient.MPID.label('PID'),
#                             appointStatus.c.Status.label('Status'),
#                             # Model.models.Application.M_Appointment.MP_Status.label('Status'),
#                             Model.models.Application.M_Patient.MP_Mobile.label('Mobile'),
#                             Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
#                             sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('Date'),
#                             sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Time,'%I:%i %p').label('Time'),
#                             # cast(Model.models.Application.M_Appointment.MA_Time, sqlalchemy.String).label('Time'),
#                             Model.models.Application.M_Appointment.MP_Duration.label('Durations'),
#                             Model.models.Application.T_Details.TD_Name.label('Duration'),
#                             Model.models.Application.M_InvoiceMaster.MIID.label('Invoiceno'),
#                             ).filter_by(MP_IsActive=1,MP_IsDeleted=0).filter(*apply
#                 # ).join(Model.models.Application.M_Organisation, Model.models.Application.M_Organisation.MOID==Model.models.Application.M_Appointment.M_Organisation_MOID
#                 ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
#                 ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
#                 ).outerjoin(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
#                 ).join(appointStatus, appointStatus.c.IDs==Model.models.Application.M_Appointment.MP_Status
#                 ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Duration
#                 ).outerjoin(Model.models.Application.M_InvoiceMaster, and_(Model.models.Application.M_InvoiceMaster.MI_AppointmentId==Model.models.Application.M_Appointment.MAID,
#                             Model.models.Application.M_InvoiceMaster.MI_IsDeleted==0)
#                        ).all())
#                 Detail = session.query(Model.models.Application.M_Appointment.MAID,
#                                           Model.models.Application.M_Appointment.M_Patient_MPID,
#                                           Model.models.Application.M_Appointment.MP_Procedure,
#                                           Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
#                                           ).filter_by(MAID=AppointmentID).all()
#                 pid= Detail[0].M_Patient_MPID
#                 Sid = Detail[0].MP_Procedure
#                 queryResult1= session.query(Model.models.Application.M_PartnerOrgPatient.MPP_OrgId,
#                                     Model.models.Application.M_PartnerOrgPatient.MPPID,
#                                     Model.models.Application.M_PartnerOrgPatient.MPP_PatientId,
#                                     ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MPP_PatientId=pid
#                                     ).all()
#                 session.commit()
#                 if(len(queryResult1)>0):
#                     queryresult[0]['Partner'] = 'yes'
#                 else:
#                     queryresult[0]['Partner'] = 'no'
#                 # queryResult2= session.query(Model.models.Application.M_PatientPackageDetailed.MPPID,
#                 #                     Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions
#                 #                     ).filter_by(MPP_IsActive=1,MPP_IsDeleted=0,MPP_PatientId=pid
#                 #                     ).filter(Model.models.Application.M_PatientPackageDetailed.MPP_ServiceId.ilike(f'%{Sid}%')  #.contains(Sid)
#                 #                     ).order_by(Model.models.Application.M_PatientPackageDetailed.MPPID.desc()).all()
#                 # session.commit()
#                 # if(len(queryResult2)>0):
#                 #     if(int(queryResult2[0].MPP_AvailSessions)>0):
#                 #         queryresult[0]['Package'] = 'yes'
#                 #     else:
#                 #         queryresult[0]['Package'] = 'no'
#                 # else:
#                 #     queryresult[0]['Package'] = 'no'
#                 queryResult2= session.query(Model.models.Application.M_PatientPackageDetailed.MPPID,
#                                     Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions
#                                     ).filter_by(MPP_IsActive=1,MPP_IsDeleted=0,MPP_PatientId=pid
#                                     ).filter(Model.models.Application.M_PatientPackageDetailed.MPP_ServiceId.ilike(f'%{Sid}%')
#                                     ).filter(Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions!=0
#                                     ).order_by(Model.models.Application.M_PatientPackageDetailed.MPPID.desc()).all()
#                 session.commit()
#                 if(len(queryResult2)>0):
#                     queryresult[0]['Package'] = 'yes'
                    
#                 else:
#                     queryresult[0]['Package'] = 'no'
#             return jsonify(result=queryresult)
#     except Exception as e:
#         return jsonify({'err':str(e)})
#     finally:
#         session.close()

# @app.route('/getAllAppointmentDetailss', methods=['POST','GET'])
# def getAllAppointmentDetailss():
#     session=Session()
#     try:
#         if(request.method == "GET"):

#             AppointmentID = 1

#             apply = []

#             if(AppointmentID !='' and AppointmentID !=None):
#                 apply.append(Model.models.Application.M_Appointment.MAID==AppointmentID)
#             if(AppointmentID !=None and AppointmentID !=None):
#                 queryresult= Common_Function.CommonFun.convertToJson(
#                 Constant.constant.constant.getAppointmentss,
#                 session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
#                             Model.models.Application.M_Organisation.MO_Name.label('Organisation'),
#                             Model.models.Application.M_Branch.MB_Name.label('Branch'),
#                             Model.models.Application.M_Room.MR_RoomName.label('Room'),
#                             Model.models.Application.M_Patient.MP_Name.label('Patient'),
#                             Model.models.Application.M_Patient.MP_Mobile.label('Mobile'),
#                             # extract('year',func.age(Model.models.Application.M_Patient.MP_DOB)).label('Age'),
#                             #(cast(datetime.date.today() , sqlalchemy.Date) - cast(Model.models.Application.M_Patient.MP_DOB, sqlalchemy.Date)).label('Age'),
#                             (sqlalchemy.func.datediff(text('yyyy-MMM-dd'), (cast(datetime.date.today() , sqlalchemy.Date)), (cast(Model.models.Application.M_Patient.MP_DOB, sqlalchemy.Date)))).label('Age'),
#                             Model.models.Application.M_Appointment.MP_Status.label('Status'),
#                             Model.models.Application.T_Details.TD_Name.label('Procedure'),
#                             Model.models.Application.M_Appointment.MA_Date.label('Date'),
#                             cast(Model.models.Application.M_Appointment.MA_Time , sqlalchemy.String).label('Time'),
#                             Model.models.Application.M_Appointment.MP_Duration.label('Duration')
#                             ).filter_by(MP_IsActive=1,MP_IsDeleted=0).filter(*apply
#                 ).join(Model.models.Application.M_Organisation, Model.models.Application.M_Organisation.MOID==Model.models.Application.M_Appointment.M_Organisation_MOID
#                 ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
#                 ).join(Model.models.Application.M_Room, Model.models.Application.M_Room.MRID==Model.models.Application.M_Appointment.M_Room_MRID
#                 ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
#                 ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Procedure).all())


#             return jsonify(result=queryresult)
#     finally:
#         session.close()

@app.route('/getSearchAllAppointment', methods=['POST','GET'])
def getSearchAllAppointment():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddNewCouponForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='SearchAllAppointment',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )


            getClinic = Common_Function.CommonFun.getBranch()
            getDoctorList = Common_Function.CommonFun.getDoctorList()
            # date = datetime.date.today()
            getTextField[2]['options']= getClinic
            getTextField[0]['options']= getDoctorList
            # getTextField[1]['value']= str(date)

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/getAddAdminPage', methods=['POST','GET'])
def getAddAdminPage():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                usrtype= request.headers.get('UserType')
                if not token:
                    return jsonify({'err':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                print(data)
                if(data):
                    if(usrtype==str(2) or usrtype==str(1)):
                        getTextField= Common_Function.CommonFun.convertToJson(
                                        Constant.constant.constant.AddAdminPage,
                                        session.query(Model.models.Application.M_FormControl,
                                                sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                                Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                    ).filter_by(MFC_FormName='AddAdminPage',MFC_IsActive=1,MFC_IsDeleted=0,MFCID=1028
                                                ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                    ).all()
                                )
                        return jsonify(result=getTextField)
                    else:
                        getTextField= Common_Function.CommonFun.convertToJson(
                                        Constant.constant.constant.AddAdminPage,
                                        session.query(Model.models.Application.M_FormControl,
                                                sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                                Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                    ).filter_by(MFC_FormName='AddAdminPage',MFC_IsActive=1,MFC_IsDeleted=0
                                                ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                    ).all()
                                )
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getAddTherapistForm', methods=['POST','GET'])
def getAddTherapistForm():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextFieldRow= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddTherapistRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddTherapistRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddTherapistForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddTherapistForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())
            Title = Common_Function.CommonFun.Title()
            Status = Common_Function.CommonFun.Status()
            getTextField[1]['options']= Title
            getTextField[4]['options']= getServiceDtl
            getTextField[5]['options']= Status
            getTextFieldRow[0]['childControl'] = getTextField
            return jsonify(result=getTextFieldRow)
    finally:
        session.close()

@app.route('/submitTherapistForm', methods=['GET','POST'])
def submitTherapistForm():

    session=Session()
    try:

        if(request.method == "POST"):
            branchId= request.headers.get('branchId')
            request_json = request.get_json()
            mobile = request_json.get('mobile')
            # Cid = request_json.get('id')
            title = request_json.get('title')
            fullname = request_json.get('fullname')
            emailid = request_json.get('emailid')
            Specialty = request_json.get('Specialty')
            status = request_json.get('status')
            displaysuffix = request_json.get('displaysuffix')
            therapistId = request_json.get('therapistId')
            Password = request_json.get('Password')
            if(therapistId == '' or therapistId == None):
                Insert=Model.models.Application.M_Therapist()
                Insert.mobile=mobile
                # Insert.CKid=Cid
                Insert.title=title
                Insert.fullname=fullname
                Insert.emailid=emailid
                Insert.Specialty=Specialty
                Insert.fullname=fullname
                Insert.status=status
                Insert.displaysuffix=displaysuffix
                Insert.Clinic=branchId

                Insert.MT_AddIP= flask.request.remote_addr
                Insert.MT_AddDate= datetime.datetime.now()
                session.add(Insert)
                session.commit()
                LastStaff = session.query(Model.models.Application.M_Therapist.MTID
                                ).order_by(Model.models.Application.M_Therapist.MTID.desc()).first()
                Insert=Model.models.Application.M_Users()
                Insert.MU_TherapistID=LastStaff.MTID
                Insert.MU_Name=fullname
                Insert.MU_Email=emailid
                Insert.MU_PersonalEmail=emailid
                Insert.MU_Mobile=mobile
                Insert.MU_Username= emailid
                Insert.MU_UserType=2
                Insert.MU_Password= Password
                Insert.MU_ConfirmPassword= Password
                Insert.MU_AddIP= flask.request.remote_addr
                Insert.MU_AddDate=datetime.datetime.now()
                session.add(Insert)
                session.commit()
                Insert=Model.models.Application.M_DoctorDetails()
                Insert.MDD_FirstName=fullname
                Insert.MDD_LastName=''
                Insert.MDD_Email=emailid
                Insert.MDD_Phone=mobile
                Insert.MDD_Status=1
                Insert.MDD_Clinic=branchId
                Insert.DoctorId=LastStaff.MTID
                Insert.MDD_Suffix=displaysuffix
                
                # Insert.MU_DoctorID= Cid
                Insert.MDD_Type='Therapist'
                Insert.MDD_AddIP= flask.request.remote_addr
                Insert.MDD_AddDate=datetime.datetime.now()
                session.add(Insert)
                session.commit()
                URL = 'https://portal.continuakids.com/login'
                Common_Function.MailFun.SendRegistration_Mail(fullname,emailid,emailid,Password,URL)
                return jsonify({'msg':'Therapist Added Successfully'})

            else:
                Insert=session.query(Model.models.Application.M_Therapist).get(int(therapistId))
                Insert.mobile=mobile
                # Insert.CKid=Cid
                Insert.title=title
                Insert.fullname=fullname
                Insert.emailid=emailid
                Insert.Specialty=Specialty
                Insert.fullname=fullname
                Insert.status=status
                Insert.displaysuffix=displaysuffix

                Insert.MT_AddIP= flask.request.remote_addr
                Insert.MT_ModDate= datetime.datetime.now()
                # session.add(Insert)
                session.commit()
                return jsonify({'msg':'Therapist updated Successfully'})
        else:
            return jsonify({'err':'Method not allowed'}),409
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getTherapists', methods=['GET'])
def getTherapists():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getTherapists,
                    session.query(Model.models.Application.M_Therapist.MTID.label('Id'),
                                Model.models.Application.M_Therapist.mobile.label('Mobile'),
                                Model.models.Application.M_Therapist.fullname.label('Full Name'),
                                Model.models.Application.M_Therapist.Specialty.label('Special'),
                                Model.models.Application.M_Service.MS_CategoryName.label('Specialty'),
                                Model.models.Application.M_Branch.MB_Name.label('Branch')
                                ).filter_by(MT_IsActive=1,MT_IsDeleted=0
                                ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Therapist.Specialty
                                ).outerjoin(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Therapist.Clinic
                                ).all()
                            )
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteTherapists', methods=['POST','GET'])
def deleteTherapists():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                usrtype= request.headers.get('UserType')
                if not token:
                    return jsonify({'err':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                # print(data)
                if(data):
                    Id= request.get_json()

                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Therapist
                                    ).filter(Model.models.Application.M_Therapist.MTID==Id
                                    ).update({Model.models.Application.M_Therapist.MT_IsDeleted:1,
                                    Model.models.Application.M_Therapist.MT_ModUser:data['id'],
                                    Model.models.Application.M_Therapist.MT_ModDate:datetime.datetime.now()})
                        session.commit()
                        session.query(Model.models.Application.M_DoctorDetails
                                    ).filter(Model.models.Application.M_DoctorDetails.DoctorId==Id
                                    ).update({Model.models.Application.M_DoctorDetails.MDD_IsDeleted:1,
                                    Model.models.Application.M_DoctorDetails.MDD_ModUser:data['id'],
                                    Model.models.Application.M_DoctorDetails.MDD_ModDate:datetime.datetime.now()})
                        session.commit()
                        
                        return jsonify({'msg':'Therapist Deleted Successfully'})
                    else:
                        return jsonify({'err':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()

@app.route('/getAddStaffForm', methods=['POST','GET'])
def getAddStaffForm():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextFieldRow= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddStaffRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddStaffRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddStaffForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddStaffForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

            Title = Common_Function.CommonFun.Title()
            Status = Common_Function.CommonFun.Status()
            Code = Common_Function.CommonFun.Code()
            Designation = Common_Function.CommonFun.Designation()
            getTextField[0]['options']= Code
            getTextField[3]['options']= Title
            getTextField[6]['options']= Status
            getTextField[7]['options']= Designation
            getTextFieldRow[0]['childControl'] = getTextField
            return jsonify(result=getTextFieldRow)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitStaffForm', methods=['GET','POST'])
def submitStaffForm():

    session=Session()
    try:

        if(request.method == "POST"):
            branchId= request.headers.get('branchId')
            request_json = request.get_json()
            code = request_json.get('code')
            mobile = request_json.get('Mobile')
            Cid = request_json.get('ID')
            title = request_json.get('Title')
            fullname = request_json.get('FullName')
            emailid = request_json.get('EmailId')
            # Specialty = request_json.get('Specialty')
            status = request_json.get('Status')
            
            Designation = request_json.get('Designation')
            staffId = request_json.get('staffId')
            if(staffId == '' or staffId == None):

                Insert=Model.models.Application.M_Staff()
                Insert.code=code
                Insert.mobile=mobile
                Insert.CKid=Cid
                Insert.title=title
                Insert.fullname=fullname
                Insert.emailid=emailid
                # Insert.Specialty=Specialty
                # Insert.fullname=fullname
                Insert.status=status
                Insert.M_BranchId=branchId
                Insert.Designation=Designation

                Insert.MT_AddIP= flask.request.remote_addr
                Insert.MT_AddDate= datetime.datetime.now()
                session.add(Insert)
                session.commit()
                return jsonify({'msg':'Staff Added Successfully'})
            else:
                Insert=session.query(Model.models.Application.M_Staff).get(int(staffId))
                Insert.code=code
                Insert.mobile=mobile
                Insert.CKid=Cid
                Insert.title=title
                Insert.fullname=fullname
                Insert.emailid=emailid
                # Insert.Specialty=Specialty
                Insert.fullname=fullname
                Insert.status=status
                Insert.M_BranchId=branchId
                Insert.Designation=Designation

                Insert.MT_AddIP= flask.request.remote_addr
                Insert.MT_ModDate= datetime.datetime.now()
                # session.add(Insert)
                session.commit()
                return jsonify({'msg':'Staff Updated Successfully'})
        else:
            return jsonify({'err':'Method not allowed'}),409

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()




@app.route('/getStaffs', methods=['GET'])
def getStaffs():
    session=Session()
    try:
        if(request.method == "GET"):
            branchId= request.headers.get('branchId')
            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getStaffs,
                    session.query(Model.models.Application.M_Staff.MSID.label('Id'),
                                Model.models.Application.M_Staff.mobile.label('Mobile'),
                                Model.models.Application.M_Staff.CKid.label('Continua Id'),
                                Model.models.Application.M_Staff.fullname.label('Full Name'),
                                Model.models.Application.M_Staff.Designation.label('Designation'),
                                Model.models.Application.M_Branch.MB_Name.label('Branch')
                                ).filter_by(MT_IsActive=1,MT_IsDeleted=0,M_BranchId=branchId
                                ).outerjoin(Model.models.Application.M_Branch,Model.models.Application.M_Branch.MBID==Model.models.Application.M_Staff.M_BranchId).all()
                            )
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteStaffs', methods=['POST','GET'])
def deleteStaffs():
    session=Session()
    try:
        if(request.method == "POST"):
            Id= request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_Staff
                              ).filter(Model.models.Application.M_Staff.MSID==Id
                              ).update({Model.models.Application.M_Staff.MT_IsDeleted:1})
                session.commit()
                return jsonify({'msg':'Staff Deleted Successfully'})
            else:
                return jsonify({'err':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()

@app.route('/getAddNewCouponForm', methods=['POST','GET'])
def getAddNewCouponForm():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextFieldRow= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddNewCouponRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddNewCouponRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddNewCouponForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddNewCouponForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

            Coupons = Common_Function.CommonFun.Coupons()
            getDoctorList = Common_Function.CommonFun.getDoctorList()
            getTextField[1]['options']= Coupons
            getTextField[2]['options']= getDoctorList
            getTextFieldRow[0]['childControl'] = getTextField
            return jsonify(result=getTextFieldRow)
    finally:
        session.close()

@app.route('/submitNewCoupon', methods=['GET','POST'])
def submitNewCoupon():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            CouponType = request_json.get('CouponType')
            SelectHCP = request_json.get('SelectHCP')
            Discount = request_json.get('Discount')
            ValidityDays = request_json.get('ValidityDays')
            CouponCode = request_json.get('CouponCode')

            PID = request_json.get('PID')

            Insert=Model.models.Application.M_Coupons()
            Insert.M_Patient_MPID=PID
            Insert.CouponType=CouponType
            Insert.SelectHCP=SelectHCP
            Insert.Discount=Discount
            Insert.ValidityDays=ValidityDays
            Insert.CouponCode=CouponCode

            Insert.MC_AddIP= flask.request.remote_addr
            session.add(Insert)
            session.commit()
            return jsonify({'msg':'Coupon Added Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

# @app.route('/getDoctorMenu', methods=['POST','GET'])
# def getDoctorMenu():
#     session=Session()
#     try:
#         if(request.method == "POST"):
#             Id=request.get_json()
#             getTextField= Common_Function.CommonFun.convertToJson(
#                             Constant.constant.constant.AddDoctorMenu,
#                             session.query(Model.models.Application.M_DifferentMenu,
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_DifferentMenu.MDM_Label,'').label('label'),
#                                     Model.models.Application.M_DifferentMenu.MDM_databstarget.label('target'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_DifferentMenu.MDM_Id,'').label('MenuID'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_DifferentMenu.MDM_Path,'').label('path')
#                         ).filter_by(MDM_FormName='DoctorMenu',MDM_IsActive=1,MDM_IsDeleted=0
#                                     ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_DifferentMenu.M_Control_MCID
#                                         ).order_by(Model.models.Application.M_DifferentMenu.MDM_Preferences).all()
#                     )
#             if(Id != '' and Id != None):

#                 ForGender = session.query( Model.models.Application.M_Patient,
#                                           Model.models.Application.T_Details.TD_Name
#                             ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MPID = Id
#                 ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Patient.MP_Gender).all()

#                 queryresult= Common_Function.CommonFun.convertToJson(
#                 Constant.constant.constant.getAppointment,
#                 session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
#                             Model.models.Application.M_Branch.MB_Name.label('Branch'),
#                             Model.models.Application.M_Patient.MP_Name.label('Patient'),
#                             Model.models.Application.M_Patient.MP_DOB.label('Age'),
#                             Model.models.Application.M_Patient.MP_Gender.label('Reason'),
#                             Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
#                             Model.models.Application.M_Appointment.MA_Date.label('Date')
#                                 ).filter_by(MP_IsActive=1,MP_IsDeleted=0,M_Patient_MPID = Id
#                 ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
#                 ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
#                 ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure).all())
#                 if(len(ForGender)>0):
#                     queryresult[0]['Gender']=ForGender[0].TD_Name
#                 else:
#                     queryresult[0]['Gender']=''
#             getTextField[0]['Details']=queryresult[0]

#             return jsonify(result=getTextField)
#     except Exception as e:
#         return jsonify({'err':str(e)})
#     finally:
#         session.close()

@app.route('/getAddDoctorPatientProfileForm', methods=['POST','GET'])
def getAddDoctorPatientProfileForm():
    session=Session()
    try:
        if(request.method == "POST"):

            Id= request.data
            Id = Id.decode()

            PatientDtl = session.query(sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_Name,'').label('MP_Name'),
                                       sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_Address,'').label('MP_Address'),
                                       sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_Gender,'').label('MP_Gender'),
                                       sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_City,'').label('MP_City'),
                                       sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_State,'').label('MP_State'),
                                       sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_BloodGroup,'').label('MP_BloodGroup'),
                                       sqlalchemy.func.date_format(sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_DOB,''),'%Y-%m-%d').label('MP_DOB'),
                                       sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_Country,'').label('MP_Country'),
                                       sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_Allergies,'').label('MP_Allergies'),
                                       sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_PreExMed,'').label('MP_PreExMed')

                                       ).filter_by(MPID=Id).all()



            getTextFieldRow= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddDoctorPatientProfileRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddDoctorPatientProfileRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddDoctorPatientProfileForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Validations,'').label('filterDate')
                        ).filter_by(MFC_FormName='AddDoctorPatientProfileForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

            Gender = Common_Function.CommonFun.Gender()
            BloodGroup = Common_Function.CommonFun.BloodGroup()
            getTextField[1]['options']= Gender
            getTextField[2]['options']= BloodGroup

            getTextField[0]['value']= PatientDtl[0].MP_Name
            if(PatientDtl[0].MP_Gender==''):
                getTextField[1]['value']= PatientDtl[0].MP_Gender
            else:
                getTextField[1]['value']= int(PatientDtl[0].MP_Gender)
            if(PatientDtl[0].MP_BloodGroup==''):
                getTextField[2]['value']= PatientDtl[0].MP_BloodGroup
            else:
                getTextField[2]['value']= int(PatientDtl[0].MP_BloodGroup)
            getTextField[3]['value']= PatientDtl[0].MP_DOB
            # getTextField[4]['value']= PatientDtl[0].MP_Allergies
            # getTextField[5]['value']= PatientDtl[0].MP_PreExMed
            getTextFieldRow[0]['childControl'] = getTextField
            getTextFieldRow[1]['value'] = PatientDtl[0].MP_Allergies
            getTextFieldRow[2]['value'] = PatientDtl[0].MP_PreExMed

            return jsonify(result=getTextFieldRow)
    finally:
        session.close()

@app.route('/getAddExpenseRegisterForm', methods=['POST','GET'])
def getAddExpenseRegisterForm():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextFieldRow= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddExpenseRegisterRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddExpenseRegisterRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddExpenseRegisterForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddExpenseRegisterForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

            getPaymentMode = Common_Function.CommonFun.getPaymentMode()
            ExpenseStatus = Common_Function.CommonFun.ExpenseStatus()
            getTextField[3]['options']= getPaymentMode
            getTextField[4]['options']= ExpenseStatus
            getTextFieldRow[0]['childControl'] = getTextField
            return jsonify(result=getTextFieldRow)
    finally:
        session.close()

@app.route('/submitExpenseRegister', methods=['GET','POST'])
def submitExpenseRegister():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            VendorName = request_json.get('VendorName')
            InvoiceNo = request_json.get('InvoiceNo')
            Amount = request_json.get('Amount')
            PaymentMode = request_json.get('PaymentMode')
            Status = request_json.get('Status')
            Comments = request_json.get('Comments')
            InvoiceDate = request_json.get('InvoiceDate')
            DueDate = request_json.get('DueDate')
            PaymentDate = request_json.get('PaymentDate')

            Insert=Model.models.Application.M_ExpenseRegister()
            Insert.VendorName=VendorName
            Insert.InvoiceNo=InvoiceNo
            Insert.Amount=Amount
            Insert.PaymentMode=PaymentMode
            Insert.Status=Status
            Insert.Comments=Comments
            Insert.InvoiceDate=InvoiceDate
            Insert.DueDate=DueDate
            Insert.PaymentDate=PaymentDate

            Insert.ME_AddIP= flask.request.remote_addr
            session.add(Insert)
            session.commit()
            return jsonify({'msg':'Expense Register Added Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAddPartnerOrganisation', methods=['POST','GET'])
def getAddPartnerOrganisation():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddPartnerOrganisation,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddPartnerOrganisation',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/EditPartnerOrgForm', methods=['GET','POST'])
def EditPartnerOrgForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Id = request_json.get('Id')

                    queryresult= session.query(Model.models.Application.M_PartnerOrg.MPID.label('ID'),
                                    Model.models.Application.M_PartnerOrg.OrgName.label('OrgName'),
                                    Model.models.Application.M_PartnerOrg.Address.label('Address'),
                                    Model.models.Application.M_PartnerOrg.Email.label('Email'),
                                    Model.models.Application.M_PartnerOrg.Mobile.label('Mobile'),
                                    Model.models.Application.M_PartnerOrg.Amount.label('Amount')
                                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MPID=Id
                                    ).all()

                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.EditPartnerOrgForm,
                                session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.controlType,'').label('controlType'),
                                    Model.models.Application.M_FormControl.MFC_Multiline.label('multiline')
                        ).filter_by(MFC_FormName='AddPartnerOrganisation',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

                    
                    getTextField[0]['value'] = queryresult[0].OrgName
                    getTextField[1]['value'] = queryresult[0].Address
                    getTextField[2]['value'] = queryresult[0].Email
                    getTextField[3]['value'] = queryresult[0].Mobile
                    getTextField[4]['value'] = queryresult[0].Amount
                    
                    return jsonify(result=getTextField)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitPartnerOrganisation', methods=['GET','POST'])
def submitPartnerOrganisation():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            OrgName = request_json.get('OrgName')
            address = request_json.get('address')
            email = request_json.get('email')
            mobile = request_json.get('mobile')
            amount = request_json.get('amount')

            ID = request_json.get('ID')
            if(ID=='' or ID==None):
                Insert=Model.models.Application.M_PartnerOrg()
                Insert.OrgName=OrgName
                Insert.Address=address
                Insert.Email=email
                Insert.Mobile=mobile
                Insert.Amount=amount
                Insert.MP_IsActive=1
                Insert.MP_IsDeleted=0

                Insert.MP_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()
                return jsonify({'msg':'Partner Organisation Added Successfully'})
            else:
                Insert=session.query(Model.models.Application.M_PartnerOrg).get(ID)
                Insert.OrgName=OrgName
                Insert.Address=address
                Insert.Email=email
                Insert.Mobile=mobile
                Insert.Amount=amount
                Insert.MP_IsActive=1
                Insert.MP_IsDeleted=0

                Insert.MP_AddIP= flask.request.remote_addr
                session.commit()
                return jsonify({'msg':'Partner Organisation Updated Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPartnerOrgList', methods=['POST','GET'])
def getPartnerOrgList():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.AddPartnerOrganisation()

            return jsonify(result=getTextField)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getPartnerOrg', methods=['POST','GET'])
def getPartnerOrg():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            PID = request_json.get('PID')
            queryResult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getPartnerOrg,
                        session.query(Model.models.Application.M_PartnerOrg.MPID.label('ID'),
                                    Model.models.Application.M_PartnerOrg.OrgName.label('Name'),
                                    Model.models.Application.M_PartnerOrg.Address.label('Address'),
                                    Model.models.Application.M_PartnerOrg.Email.label('Email'),
                                    Model.models.Application.M_PartnerOrg.Mobile.label('Mobile'),
                                    Model.models.Application.M_PartnerOrg.Amount.label('Amount'),
                                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0
                                    ).all()
                                )
            session.commit()
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DeletePartnerOrg',methods=['POST'])
def DeletePartnerOrg():
    try:
        if(request.method == "POST"):
            session=Session()
            Id=request.get_json()
            #Id=request.data
            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_PartnerOrg
                              ).filter(Model.models.Application.M_PartnerOrg.MPID==Id).update({Model.models.Application.M_PartnerOrg.MP_IsDeleted:1})
                session.commit()
                session.query(Model.models.Application.M_PartnerOrgPatient
                              ).filter(Model.models.Application.M_PartnerOrgPatient.MPP_OrgId==Id).update({Model.models.Application.M_PartnerOrgPatient.MP_IsActive:1})
                session.commit()
                return jsonify({'msg':'Partner Organisation Deleted Successfully'})
            else:
                return jsonify({'msg':'something went wrong please try again'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddPartnerOrgPatient', methods=['GET','POST'])
def AddPartnerOrgPatient():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            OrgId = request_json.get('OrgId')
            PID = request_json.get('PID')
            
            Insert=Model.models.Application.M_PartnerOrgPatient()
            Insert.MPP_OrgId=OrgId
            Insert.MPP_PatientId=PID
            Insert.status='Active'
            Insert.MP_IsActive=1
            Insert.MP_IsDeleted=0

            Insert.MP_AddIP= flask.request.remote_addr
            session.add(Insert)
            session.commit()
            return jsonify({'msg':'Partner Organisation Patient Added Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPatientPartnerOrg', methods=['POST','GET'])
def getPatientPartnerOrg():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            PID = request_json.get('PID')
            queryResult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getPatientPartnerOrg,
                        session.query(Model.models.Application.M_PartnerOrgPatient.MPP_OrgId,
                                    Model.models.Application.M_PartnerOrgPatient.MPPID.label('Id'),
                                    Model.models.Application.M_Patient.MP_Name.label('Patient Name'),
                                    Model.models.Application.M_PartnerOrg.OrgName.label('Partner Organisation'),
                                    Model.models.Application.M_PartnerOrgPatient.MPP_PatientId,
                                    sqlalchemy.func.date_format(Model.models.Application.M_PartnerOrgPatient.MP_AddDate,'%d-%b-%Y').label('Add Date'),
                                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MPP_PatientId=PID
                                    ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_PartnerOrgPatient.MPP_PatientId
                                    ).join(Model.models.Application.M_PartnerOrg, Model.models.Application.M_PartnerOrg.MPID==Model.models.Application.M_PartnerOrgPatient.MPP_OrgId       
                                    ).all()
                                )
            session.commit()
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DeletePatientPartnerOrg',methods=['POST'])
def DeletePatientPartnerOrg():
    try:
        if(request.method == "POST"):
            session=Session()
            requst1=request.get_json()
            Id = requst1.get('Id')
            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_PartnerOrgPatient
                              ).filter(Model.models.Application.M_PartnerOrgPatient.MPPID==Id).update({Model.models.Application.M_PartnerOrgPatient.MP_IsDeleted:1})
                session.commit()
                return jsonify({'msg':'Partner Organisation Deleted Successfully'})
            else:
                return jsonify({'msg':'something went wrong please try again'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddPackageForm', methods=['POST','GET'])
def AddPackageForm():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddPackageForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddPackageForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getDiscountType= Common_Function.CommonFun.getDiscountType()
            getPackagetype= Common_Function.CommonFun.getPackagetype()
            getOrg= Common_Function.CommonFun.getOrg()
            getClinic= Common_Function.CommonFun.getClinic()
            getTextField[8]['options']= getDiscountType
            getTextField[1]['options']= getPackagetype
            getTextField[2]['options']= getOrg
            getTextField[3]['options']= getClinic

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/EditPackageForm', methods=['POST','GET'])
def EditPackageForm():
    session=Session()
    try:
        if(request.method == "GET"):
            content_type = request.headers.get('Content-Type')
            PId= request.data
            queryResult= session.query(Model.models.Application.T_Credit.TCID.label('ID'),
                            Model.models.Application.T_Credit.M_Credit_MCID.label('CreditID'),
                            Model.models.Application.T_Credit.M_Organisation_MOID.label('Org'),
                            Model.models.Application.T_Credit.M_Branch_MBID.label('clinic'),
                            Model.models.Application.T_Credit.TC_PaymentMode.label('paymode'),
                            Model.models.Application.T_Credit.TC_Date.label('date'),
                            Model.models.Application.T_Credit.TC_ServiceID.label('serviceID'),
                            Model.models.Application.T_Credit.TC_Amount.label('Amount'),
                            Model.models.Application.T_Credit.TC_BankName.label('bank'),
                            Model.models.Application.T_Credit.TC_CardType.label('cardtype'),
                            Model.models.Application.T_Credit.TC_CardNumber.label('cardno'),
                            Model.models.Application.T_Credit.TC_CreditType.label('credittype'),
                            Model.models.Application.T_Credit.TC_PatientID.label('patient'),
                            Model.models.Application.T_Credit.TC_Comment.label('comment')

                                ).filter_by(TCID=PId,TC_IsActive=1,TC_IsDeleted=0).all()

            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.EditPackageForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddPackageForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
            getDiscountType= Common_Function.CommonFun.getDiscountType()
            getPackagetype= Common_Function.CommonFun.getPackagetype()
            getOrg= Common_Function.CommonFun.getOrg()
            getClinic= Common_Function.CommonFun.getClinic()
            getPaymentMode= Common_Function.CommonFun.getPaymentMode()
            getTextField[14]['options']= getPaymentMode
            getTextField[8]['options']= getDiscountType
            getTextField[1]['options']= getPackagetype
            getTextField[2]['options']= getOrg
            getTextField[3]['options']= getClinic

            getTextField[0]['value']= queryResult[0]
            getTextField[1]['value']= queryResult[0]
            getTextField[2]['value']= queryResult[0]
            getTextField[3]['value']= queryResult[0]
            getTextField[4]['value']= queryResult[0]
            getTextField[5]['value']= queryResult[0]
            getTextField[6]['value']= queryResult[0]
            getTextField[7]['value']= queryResult[0]
            getTextField[8]['value']= queryResult[0]
            getTextField[9]['value']= queryResult[0]
            getTextField[10]['value']= queryResult[0]
            getTextField[11]['value']= queryResult[0]
            getTextField[12]['value']= queryResult[0]
            getTextField[13]['value']= queryResult[0]
            getTextField[14]['value']= queryResult[0]
            getTextField[15]['value']= queryResult[0]
            getTextField[16]['value']= queryResult[0]
            getTextField[1]['value']= getPackagetype
            getTextField[2]['value']= getOrg
            getTextField[3]['value']= getClinic

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/AddPackage',methods=['GET','POST'])
def AddPackage():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):

            request_json = request.get_json()
            ID = request_json.get('ID')
            if(ID=='' or ID==None):

                request_json = request.get_json(force = True)
                Name = request_json.get('Name')
                packagetype = request_json.get('packagetype')
                OrganisationName = request_json.get('OrganisationName')
                Clinic = request_json.get('Clinic')
                effectdate = request_json.get('effectdate')
                MP_ServiceName = request_json.get('MP_ServiceName')
                Amount = request_json.get('Amount')
                Tax = request_json.get('Tax')
                discounttype = request_json.get('discounttype')
                Discount = request_json.get('Discount')
                Discountreason = request_json.get('Discountreason')
                totalpayamt = request_json.get('totalpayamt')
                amountpaid = request_json.get('amountpaid')
                amountbalance = request_json.get('amountbalance')
                paymode = request_json.get('paymode')
                transaction = request_json.get('transaction')
                PID = request_json.get('PID')

                Insert=Model.models.Application.M_Package()
                Insert.M_Patient_MPID= PID
                Insert.MP_Name=Name
                Insert.MP_PackageType=packagetype

                Insert.MP_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()

                M_PackageID= session.query(Model.models.Application.M_Package.MPID).order_by(Model.models.Application.M_Package.MPID.desc()).first()

                Insert=Model.models.Application.M_PackageDetails()
                Insert.M_Patient_MPID= PID
                Insert.M_Branch_MBID=Name
                Insert.MPD_Date=packagetype
                Insert.MPD_Price= PID
                Insert.MPD_Discount=Name
                Insert.MPD_Payable=packagetype
                Insert.MPD_Paid= PID
                Insert.MPD_Balance=Name

                Insert.MPD_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()

                Insert=Model.models.Application.M_PackageServiceDetails()
                Insert.M_Package_MPID= M_PackageID[0]
                Insert.M_Patient_MPID=PID
                Insert.MPD_Date=packagetype
                Insert.MPD_Price= PID
                Insert.MPD_Discount=Name
                Insert.MPD_Payable=packagetype
                Insert.MPD_Paid= PID
                Insert.MPD_Balance=Name

                Insert.MPD_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()

                Insert=Model.models.Application.T_Package()
                Insert.M_Package_MPID=M_PackageID[0]
                Insert.M_Organisation_MOID=OrganisationName
                Insert.M_Branch_MBID=Clinic
                Insert.TP_Tax=Tax
                Insert.TP_Amount=Amount
                Insert.TP_Discount=Discount
                Insert.TP_DiscountType=discounttype
                Insert.TP_DiscountReason=Discountreason
                Insert.TP_AmountPayable=totalpayamt
                Insert.TP_AmountPaid = amountpaid
                Insert.TP_AmountBalance=amountbalance
                Insert.TP_PaymentMode=paymode
                Insert.TP_EffectiveDate=effectdate
                Insert.TP_Comment=transaction

                Insert.TP_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()
                print("success")

                return jsonify({'msg':'Package Added Successfully'})
            else:

                request_json = request.get_json(force = True)
                Name = request_json.get('Name')
                packagetype = request_json.get('packagetype')
                OrganisationName = request_json.get('OrganisationName')
                Clinic = request_json.get('Clinic')
                effectdate = request_json.get('effectdate')
                MP_ServiceName = request_json.get('MP_ServiceName')
                Amount = request_json.get('Amount')
                Tax = request_json.get('Tax')
                discounttype = request_json.get('discounttype')
                Discount = request_json.get('Discount')
                Discountreason = request_json.get('Discountreason')
                totalpayamt = request_json.get('totalpayamt')
                amountpaid = request_json.get('amountpaid')
                amountbalance = request_json.get('amountbalance')
                paymode = request_json.get('paymode')
                transaction = request_json.get('transaction')


                Insert=Model.models.Application.M_Package()
                Insert.MP_Name=Name
                Insert.MP_PackageType=packagetype

                Insert.MP_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()

                M_PackageID= session.query(Model.models.Application.M_Package.MPID).order_by(Model.models.Application.M_Package.MPID.desc()).first()

                Insert=Model.models.Application.T_Package()
                Insert.M_Package_MPID=M_PackageID[0]
                Insert.M_Organisation_MOID=OrganisationName
                Insert.M_Branch_MBID=Clinic
                Insert.TP_Tax=Tax
                Insert.TP_Amount=Amount
                Insert.TP_Discount=Discount
                Insert.TP_DiscountType=discounttype
                Insert.TP_DiscountReason=Discountreason
                Insert.TP_AmountPayable=totalpayamt
                Insert.TP_AmountPaid = amountpaid
                Insert.TP_AmountBalance=amountbalance
                Insert.TP_PaymentMode=paymode
                Insert.TP_EffectiveDate=effectdate
                Insert.TP_Comment=transaction

                Insert.TP_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()
                print("success")

                return jsonify({'msg':'Package Updated Successfully'})
                #     return jsonify({'token': data, 'msg':'username is not valid','About':about,'TokenUser':data['user']})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DeletePackage',methods=['POST'])
def DeletePackage():
    try:
        if(request.method == "POST"):
            session=Session()
            Id=request.get_json()
            #Id=request.data
            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_Package
                              ).filter(Model.models.Application.M_Package.MPID==Id).update({Model.models.Application.M_Package.MP_IsDeleted:1})
                session.commit()
                session.query(Model.models.Application.T_Package
                              ).filter(Model.models.Application.T_Package.TPID==Id).update({Model.models.Application.T_Package.TP_IsDeleted:1})
                session.commit()
                return jsonify({'msg':'Package Deleted Successfully'})
            else:
                return jsonify({'msg':'something went wrong please try again'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/searchPackage',methods=['POST','GET'])
def searchPackage():
    try:
        if(request.method == "GET"):
            session=Session()

            getTextField= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.searchPackageForm,session.query(Model.models.Application.M_FormControl,
                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                ).filter_by(MFC_FormName='searchPackageForm',MFC_IsActive=1,MFC_IsDeleted=0
                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                ).all()
            )

            # getservice= Common_Function.CommonFun.getservice()
            # getPatient = Common_Function.CommonFun.getPatient()
            # getPackage = Common_Function.CommonFun.getPackage()

            getTextField[0]['options'] = Common_Function.CommonFun.getPatient()
            getTextField[1]['options'] = Common_Function.CommonFun.getservice()
            getTextField[2]['options'] = Common_Function.CommonFun.getPackage()


            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/searchedPackage', methods=['POST'])
def searchedPackage():
    session=Session()
    try:
        if(request.method == "POST"):

            request_json = request.get_json(force = True)
            Pid = request_json.get('Pid')
            srvcname = request_json.get('srvcname')
            pkgname = request_json.get('pkgname')


            apply = []

            if(pkgname !='' and pkgname !=None):
                apply.append(Model.models.Application.T_Package.TC_ServiceID == pkgname)
            if(Pid !='' and Pid !=None):
                apply.append(Model.models.Application.T_Package.TC_CreditType == Pid)
            if(srvcname !='' and srvcname !=None):
                apply.append(Model.models.Application.T_Package.M_Branch_MBID == srvcname)

            if((pkgname!='' and pkgname !='') or (Pid!='' and Pid !='') or (srvcname!='' and srvcname !='')):
                queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getPatientCredit,
                session.query(Model.models.Application.T_Package.TPID.label('ID'),
                            Model.models.Application.T_Package.M_Package_MPID.label('Package Name'),
                            Model.models.Application.T_Package.TP_Amount.label('Amount'),
                            Model.models.Application.T_Package.TP_Discount.label('Discount'),
                            Model.models.Application.T_Package.TP_AmountPayable.label('Amount Payable')
                                ).filter_by(TP_IsActive=1,TP_IsDeleted=0
                ).filter(*apply).all())


            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAddInspectionsForm', methods=['POST','GET'])
def getAddInspectionsForm():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.AddInspectionsForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddInspectionsForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )

            return jsonify(result=getTextField)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitInspectionsForm', methods=['GET','POST'])
def submitInspectionsForm():

    session=Session()
    try:

        if(request.method == "POST"):
            Data= request.form.get('data')
            getjson= json.loads(Data)
            PID =getjson['PID']
            LabTestName =getjson['LabTestName']
            file = request.files['files[]']
            FilePath = 'static/PatientFile_LabTest'
            # for file in files:
            if(file.filename!='' and file.filename!= None):
                date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                name, ext = os.path.splitext(file.filename)
                files = (LabTestName.replace(" ", ""))+ '_'+ name +'_'  + date  + ext
                fileName=files
                if(os.path.exists(FilePath)):
                    file.save(os.path.join(FilePath, fileName))
                    print(file.filename)
                else:
                    os.makedirs(FilePath)
                    file.save(os.path.join(FilePath, fileName))

            Insert=Model.models.Application.M_LabTest()
            Insert.M_Patient_MPID=PID
            Insert.LabTestName=LabTestName
            Insert.FilePath=FilePath
            Insert.FileName=fileName

            Insert.ML_AddIP= flask.request.remote_addr
            session.add(Insert)
            session.commit()
            return jsonify({'msg':'Lab Test Added Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

# @app.route('/getCheckInForm', methods=['POST','GET'])
# def getCheckInForm():
#     session=Session()
#     try:
#         if(request.method == "POST"):
#             Id= request.get_json()
#             PatientDtl = session.query(sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_Name,'').label('MP_Name'),
#                                        sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_RefferedBy,'').label('MP_RefferedBy'),
#                                        sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_Address,'').label('MP_Address'),
#                                        sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_Gender,'').label('MP_Gender'),
#                                        sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_City,'').label('MP_City'),
#                                        sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_State,'').label('MP_State'),

#                                        sqlalchemy.func.date_format(sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_DOB,''),'%Y-%m-%d').label('MP_DOB'),
#                                        sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_Country,'').label('MP_Country')
#                                        ).filter_by(MPID=Id).all()
#             if(PatientDtl[0].MP_Name !='' and PatientDtl[0].MP_Gender and PatientDtl[0].MP_DOB and PatientDtl[0].MP_Address and PatientDtl[0].MP_City and PatientDtl[0].MP_State and PatientDtl[0].MP_Country):
#                 return jsonify({'checked':'Checked in already'})
#             getRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddCheckInFormRow,
#                             session.query(Model.models.Application.M_FormControl,
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
#                                     Model.models.Application.M_FormControl.MFC_Align.label('align'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
#                         ).filter_by(MFC_FormName='AddCheckInFormRow',MFC_IsActive=1,MFC_IsDeleted=0
#                                     ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
#                                         ).all())

#             getTextField= Common_Function.CommonFun.convertToJson(
#                             Constant.constant.constant.AddCheckInForm,
#                             session.query(Model.models.Application.M_FormControl,
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
#                                     Model.models.Application.M_FormControl.MFC_Align.label('align'),
#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

#                                     sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
#                         ).filter_by(MFC_FormName='AddCheckInForm',MFC_IsActive=1,MFC_IsDeleted=0
#                                     ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
#                                         ).all()
#                     )
#             getRefferDoctor= Common_Function.CommonFun.convertToJson(
#                         Constant.constant.constant.getRefferDoctors,
#                         session.query(Model.models.Application.M_ReferredByDoctor.MRDID.label('key'),
#                                     sqlalchemy.func.concat(Model.models.Application.M_ReferredByDoctor.MRD_FirstName,' ',Model.models.Application.M_ReferredByDoctor.MRD_LastName).label('label')
#                                         ).filter_by(MRD_IsActive=1,MRD_IsDeleted=0
#                                                     ).order_by(Model.models.Application.M_ReferredByDoctor.MRD_FirstName).all()
#                                 )

#             getTextField[0]['value'] = PatientDtl[0].MP_Name
#             getTextField[1]['value'] = PatientDtl[0].MP_RefferedBy
#             getTextField[2]['value'] = PatientDtl[0].MP_Gender
#             getTextField[3]['value'] = PatientDtl[0].MP_DOB
#             getTextField[4]['value'] = PatientDtl[0].MP_Address
#             getTextField[5]['value'] = PatientDtl[0].MP_City
#             getTextField[6]['value'] = PatientDtl[0].MP_State
#             getTextField[7]['value'] = PatientDtl[0].MP_Country
#             CurrentDate= datetime.date.today()
#             # DOB = datetime.datetime.strptime(PatientDtl[0].MP_DOB,'%Y-%m-%d')
#             # print(DOB)
#             # day_check = ((CurrentDate.month, CurrentDate.day) < (DOB.month, DOB.day))
#             # year_diff  = CurrentDate.year - DOB.year
#             # age_in_years = year_diff - day_check
#             # remaining_months = abs(CurrentDate.month - DOB.month)
#             # remaining_days = abs(CurrentDate.day - DOB.day)
#             # if(age_in_years==0 and remaining_months>0):
#             #     Age = str(remaining_months) +' months'+str(remaining_days)+ ' days'
#             # elif(age_in_years==0 and remaining_months==0):
#             #     Age = str(remaining_days)+ ' days'
#             # else:
#             #     Age =  str(age_in_years)+ " Years"+ str(remaining_months)+ " Months"+ str(remaining_days)+ " days"
#             # print("Age:", age_in_years, " Years", remaining_months, " Months", remaining_days, "days")
#             # print(day_check)
#             # ages ={}
#             # ages['Age'] = Age
#             # if(PatientDtl[0].MP_Gender!='' and PatientDtl[0].MP_Gender!=None):
#             #     genderr = session.query(Model.models.Application.T_Details.TD_Name.label('Gender')
#             #                             ).filter_by(TDID=int(PatientDtl[0].MP_Gender),TD_IsActive=1,TD_IsDeleted=0).all()
#             #     genders = {}
#             #     genders['Gender'] = genderr
#             #     # getTextField.append(genders)

#             Gender= Common_Function.CommonFun.Gender()

#             getTextField[2]['options'] = Gender
#             getTextField[1]['options'] = getRefferDoctor
#             # getTextField.append(ages)
#             # getTextField.append(genders)
#             getRow[0]['childControl']= getTextField

#             return jsonify(result=getRow)
#     finally:
#         session.close()


@app.route('/getCheckInForm', methods=['POST','GET'])
def getCheckInForm():
    session=Session()
    try:
        if(request.method == "POST"):
            Id= request.get_json()
            res = session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
                                    func.coalesce(Model.models.Application.M_Appointment.MP_Procedure,'').label('Procedure')
                                        ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MAID = Id
                        ).all()
            if(res[0].Procedure == '' or res[0].Procedure == None):
                
                return jsonify({'Procedure':'Not Available'})
            else:
                return jsonify({'checked':'Checked in already'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDropdownForInvoice', methods=['POST','GET'])
def getDropdownForInvoice():
    session=Session()
    try:
        if(request.method == "GET"):
            value= {}
            getClinic = Common_Function.CommonFun.getClinic()
            getCardType= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getCardType2,
                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                    Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=18,TD_IsActive=1,TD_IsDeleted=0).all()
                                )
            getInventory= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getInventory,
                        session.query(Model.models.Application.M_Inventory.MIID.label('key'),
                                    Model.models.Application.M_Inventory.MI_ItemName.label('label')
                                        ).filter_by(MI_IsActive=1,MI_IsDeleted=0).all()
                                )
            getServiceforDDL= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.getServiceforDDL,
                        session.query(Model.models.Application.M_Services.MPDID.label('key'),
                                    Model.models.Application.M_Services.MS_ServiceName.label('label')
                                        ).filter_by(MS_IsActive=1,MS_IsDeleted=0).all()
                                )
            session.commit()
            value['Clinic'] =getClinic
            value['CardType'] =getCardType
            value['Item'] =getInventory
            value['Service'] =getServiceforDDL
            return jsonify(result=value)
    finally:
        session.close()


@app.route('/addCheckInForm',methods=['GET','POST'])
def addCheckInForm():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            name = request_json.get('name')
            referredBy = request_json.get('referredBy')
            gender = request_json.get('gender')
            birth = request_json.get('birth')
            address = request_json.get('address')
            city = request_json.get('city')
            state = request_json.get('state')
            country = request_json.get('country')
            ID = request_json.get('ID')
            if(ID!='' or ID!=None):
                Insert=session.query(Model.models.Application.M_Patient).get(ID)
                Insert.MP_Name=name
                if(referredBy != '' and referredBy != None):
                    Insert.MP_RefferedBy=referredBy
                if(gender != '' and gender != None):
                    Insert.MP_Gender=gender
                if(birth != '' and birth != None):
                    Insert.MP_DOB=birth  #jjksfdjkhsfdjhksdjhksfd
                if(address != '' and address != None):
                    Insert.MP_Address=address
                if(country != '' and country != None):
                    Insert.MP_Country=country
                if(state != '' and state != None):
                    Insert.MP_State=state
                if(city != '' and city != None):
                    Insert.MP_City=city
                Insert.MP_AddIP= flask.request.remote_addr
                Insert.MP_ModDate = datetime.datetime.now()
                Insert.MP_ModUser =6 #datetime.datetime.now()
                session.commit()
                print("success")

                return jsonify({'msg':'Patient Details Added Successfully'})

        else:
            return jsonify({'err':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()




@app.route('/addInvoice',methods=['GET','POST'])
def addInvoice():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):
            branchId= request.headers.get('branchId')
            
            request_json = request.get_json()
            amountPaid = request_json.get('amountPaid')
            bankName = request_json.get('bankName')
            branch = request_json.get('branch')
            card = request_json.get('card')
            cardType = request_json.get('cardType')
            cash = request_json.get('cash')
            cgst = request_json.get('cgst')
            cheque = request_json.get('cheque')
            comments = request_json.get('comments')
            date = request_json.get('date')
            discount = request_json.get('discount')
            discountPercent = request_json.get('discountPercent')
            discountReason = request_json.get('discountReason')
            dueBalance = request_json.get('dueBalance')
            invoiceTotal = request_json.get('invoiceTotal')
            invoiceType = request_json.get('invoiceType')

            lastDigits = request_json.get('lastDigits')
            online = request_json.get('online')
            prepaid = request_json.get('prepaid')
            sgst = request_json.get('sgst')
            totalPayable = request_json.get('totalPayable')
            upi = request_json.get('upi')
            Pid = request_json.get('Pid')
            medicineDetails = request_json.get('medicineDetails')
            ID = request_json.get('ID')
            if(ID=='' or ID==None):
                Insert=Model.models.Application.M_Invoice()
                Insert.MI_AmountPaid=amountPaid
                Insert.MI_bankName=bankName
                Insert.M_Branch_MBID=branchId
                Insert.MI_Card=card
                if(cardType!='' and cardType!=None):
                    Insert.MI_CardType=cardType
                Insert.MI_Cash=cash
                Insert.MI_CGST=cgst
                Insert.MI_Cheque=cheque
                Insert.MI_Comments=comments
                Insert.MI_Date=date
                Insert.MI_Discount=discount
                Insert.MI_discountPercent=discountPercent
                Insert.MI_DiscountReason=discountReason
                Insert.MI_DueBalance=dueBalance
                Insert.MI_InvoiceTotal=invoiceTotal
                Insert.MI_invoiceType=invoiceType

                Insert.MI_lastDigits=lastDigits
                Insert.MI_Online=online
                Insert.MI_Prepaid=prepaid
                Insert.MI_SGST=sgst
                Insert.MI_TotalPayable=totalPayable
                Insert.MI_Upi=upi
                Insert.M_Patient_MPID=Pid

                Insert.MI_AddIP= flask.request.remote_addr
                Insert.MI_AddDate = datetime.datetime.now()
                Insert.MI_AddUser = 1 #data['id']
                session.add(Insert)
                session.commit()
                getClinic= session.query(Model.models.Application.M_Branch.MB_Code
                                        ).filter_by(MBID=int(branchId),MB_IsActive=1,MB_IsDeleted=0).all()
                getInvoiceNo= session.query(Model.models.Application.M_InvoiceMaster.MainInvoiceNo
                                        ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                        # ).filter(Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode!='Package'
                                        ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
                clinicname=getClinic[0].MB_Code
                # sn=len(totalPatientinbranch) + 1
                lastInvoice = getInvoiceNo[0].MainInvoiceNo
                NewInvoice=  int(lastInvoice) + 1
                # sn=len(totalPatientinbranch) + 1
                # lastPatientIDs = totalPatientinbranch[0]
                # lastPatientID=  lastPatientIDs[-5:]
                # newPatientID= str(int(lastPatientID)+1).zfill(5)
                Prefix='CK'+str(clinicname)
                mod = ''
                if(prepaid!='' and prepaid!=None and prepaid!=0):
                    mod = 'Prepaid'
                if(online !='' and online !=None and online!=0):
                    mod = 'Online'
                if(upi !='' and upi !=None and upi!=0):
                    mod = 'UPI'
                if(cash !='' and cash !=None and cash!=0):
                    mod = 'Cash'
                if(card !='' and card !=None and card!=0):
                    mod = 'Card'
                if(cheque !='' and cheque !=None and cheque!=0):
                    mod = 'Cheque'
                Insert=Model.models.Application.M_InvoiceMaster()
                Insert.MI_AmountPaid=amountPaid
                Insert.MI_bankName=bankName
                Insert.M_Branch_MBID=branchId
                Insert.MI_Card=card
                if(cardType!='' and cardType!=None):
                    Insert.MI_CardType=cardType
                Insert.MI_Cash=cash
                Insert.MI_CGST=cgst
                Insert.MI_Cheque=cheque
                Insert.MI_Comments=comments
                Insert.MainInvoiceNo=NewInvoice
                Insert.MI_Date=date
                Insert.MI_Discount=discount
                Insert.MI_discountPercent=discountPercent
                Insert.MI_DiscountReason=discountReason
                Insert.MI_DueBalance=dueBalance
                Insert.dueSettle=dueBalance
                Insert.MI_InvoiceTotal=invoiceTotal
                Insert.MI_invoiceType=invoiceType
                Insert.MI_ServiceName='Other Invoice'
                Insert.MPP_Prefix=Prefix
                Insert.MPIA_PaymentMode=''
                Insert.MI_lastDigits=lastDigits
                Insert.MI_Online=online
                Insert.MI_Prepaid=prepaid
                Insert.MI_SGST=sgst
                Insert.MI_TotalPayable=totalPayable
                Insert.MI_Upi=upi
                Insert.M_Patient_MPID=Pid
                Insert.MPP_PaymentType=mod

                Insert.MI_AddIP= flask.request.remote_addr
                Insert.MI_AddDate = datetime.datetime.now()
                Insert.MI_AddUser = 1 #data['id']
                session.add(Insert)
                session.commit()
                print("success")
                if(int(dueBalance)>0):
                    dueBalancedtl = session.query(Model.models.Application.T_DueBalanceAmt.TDID,
                                                    Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount
                                    ).filter_by(TD_PatientID=Pid,TP_IsActive=1,TP_IsDeleted=0).all()
                        
                    if(len(dueBalancedtl)==0):
                        Insert=Model.models.Application.T_DueBalanceAmt()
                        Insert.TD_Date=datetime.datetime.now()
                        Insert.TD_PrepaidAmount=dueBalance
                        Insert.TD_PatientID=Pid
                        
                        Insert.TP_AddIP= flask.request.remote_addr
                        Insert.TP_AddDate = datetime.datetime.now()
                        session.add(Insert)
                        session.commit()
                    else:
                        PrepaidAm = dueBalancedtl[0].TD_PrepaidAmount
                        amountnow = PrepaidAm + float(dueBalance)
                        session.query(Model.models.Application.T_DueBalanceAmt
                                ).filter(Model.models.Application.T_DueBalanceAmt.TD_PatientID==Pid
                                            ).update({Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount:amountnow,
                                                    Model.models.Application.T_DueBalanceAmt.TP_ModDate:datetime.datetime.now()})
                        session.commit()
                if(int(prepaid)>0):
                    prepaiddata = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                                Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount
                                ).filter_by(TP_PatientID=Pid,TP_IsActive=1,TP_IsDeleted=0).all()
                    Insert=Model.models.Application.T_CreditMaster()
                    Insert.TC_Date=datetime.datetime.now()
                    Insert.TC_Amount=prepaid
                    Insert.TC_PatientID=Pid
                    Insert.TC_Comment='ACCDebit'
                    Insert.TC_Description='Other Invoice'
                    
                    Insert.TC_AddIP= flask.request.remote_addr
                    Insert.TC_AddDate = datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    
                    PrepaidAm = prepaiddata[0].TP_PrepaidAmount
                    amountnow = PrepaidAm - float(prepaid)
                    session.query(Model.models.Application.T_PrepaidAmt
                                ).filter(Model.models.Application.T_PrepaidAmt.TP_PatientID==Pid
                                            ).update({Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount:amountnow,
                                                    Model.models.Application.T_PrepaidAmt.TP_ModDate:datetime.datetime.now()})
                    session.commit()
                LastInvoice = session.query(Model.models.Application.M_Invoice.MIID
                                ).order_by(Model.models.Application.M_Invoice.MIID.desc()).first()
                for patient in medicineDetails:
                    batch = patient['batch']
                    cost = patient['cost']
                    item = patient['item']
                    quantity = patient['quantity']
                    tax = patient['tax']
                    totalCost = patient['totalCost']
                    totalTax = patient['totalTax']
                    Insert = Model.models.Application.M_MedicineDtls()
                    Insert.M_Invoice_MIID= LastInvoice.MIID
                    Insert.MD_Batch=batch
                    Insert.MD_Cost=cost
                    Insert.MD_Item=item
                    Insert.MD_Quantity=quantity
                    Insert.MD_Tax=tax
                    Insert.MD_TotalCost=totalCost
                    Insert.MD_TotalTax=totalTax
                    session.add(Insert)
                    session.commit()
                    print("success")

                return jsonify({'msg':'Invoice Added Successfully'})

        else:
            return jsonify({'err':'Wrong Method Used'})
    except:
        return jsonify({'err':'token is invalid'})
    finally:
        session.close()


@app.route('/addDoctor',methods=['GET','POST'])
def AddDoctor():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):

            branchId= request.headers.get('branchId')
            request_json = request.get_json()
            FirstName = request_json.get('FirstName')
            LastName = request_json.get('LastName')
            consultfeeinr = request_json.get('consultfeeinr')
            consultfeeusd = request_json.get('consultfeeusd')
            visitfeeinr = request_json.get('visitfeeinr')
            visitfeeusd = request_json.get('visitfeeusd')
            Email = request_json.get('Email')
            Password = request_json.get('Password')
            status = request_json.get('status')
            Phone = request_json.get('Phone')
            ID = request_json.get('ID')
            if(ID=='' or ID==None):
                if(FirstName!='' and FirstName!=None and Email!='' and Email!=None and Password!='' and Password!=None):
                    Insert=Model.models.Application.M_DoctorDetails()
                    Insert.MDD_FirstName=FirstName
                    Insert.MDD_LastName=LastName
                    Insert.MDD_OnlineFeeINR=consultfeeinr
                    Insert.MDD_OnlineFeeUSD=consultfeeusd
                    Insert.MDD_visitFeeINR=visitfeeinr
                    Insert.MDD_visitFeeUSD=visitfeeusd
                    Insert.MDD_Email=Email
                    Insert.MDD_Phone=Phone
                    Insert.MDD_Clinic=int(branchId)

                    Insert.MDD_Status=status
                    Insert.MDD_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    print("success")
                    LastDoctor = session.query(Model.models.Application.M_DoctorDetails.MDDID
                                    ).order_by(Model.models.Application.M_DoctorDetails.MDDID.desc()).first()
                    Insert=Model.models.Application.M_Users()
                    Insert.MU_DoctorID=LastDoctor
                    Insert.MU_Name=FirstName
                    Insert.MU_Email=Email
                    Insert.MU_PersonalEmail=Email
                    Insert.MU_Mobile=Phone
                    Insert.MU_Username= Email
                    Insert.MU_UserType=1
                    Insert.MU_Password= Password
                    Insert.MU_ConfirmPassword= Password
                    Insert.MU_AddIP= flask.request.remote_addr
                    Insert.MU_AddDate=datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    URL = 'https://portal.continuakids.com/login'
                    Common_Function.MailFun.SendRegistration_Mail(FirstName,Email,Email,Password,URL)
                    return jsonify({'msg':'Doctor Added Successfully'})
            else:
                Insert=session.query(Model.models.Application.M_DoctorDetails).get(ID)
                Insert.MDD_FirstName=FirstName
                Insert.MDD_LastName=LastName
                Insert.MDD_OnlineFeeINR=consultfeeinr
                Insert.MDD_OnlineFeeUSD=consultfeeusd
                Insert.MDD_visitFeeINR=visitfeeinr
                Insert.MDD_visitFeeUSD=visitfeeusd

                Insert.MDD_Status=status
                Insert.MDD_AddIP= flask.request.remote_addr
                Insert.MDD_ModDate = datetime.datetime.now()
                session.commit()
                print("success")

                return jsonify({'msg':'Doctor Updated Successfully'})
        else:
            return jsonify({'msg':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/deleteDoctor',methods=['POST'])
def deleteDoctor():
    try:
        if(request.method == "POST"):
            session=Session()
            Id=request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_DoctorDetails
                              ).filter(Model.models.Application.M_DoctorDetails.MDDID==Id).update({Model.models.Application.M_DoctorDetails.MDD_IsDeleted:1})
                session.commit()
                session.query(Model.models.Application.M_DoctorPracticeDetails
                              ).filter(Model.models.Application.M_DoctorPracticeDetails.MDPD_DoctorId==Id).update({Model.models.Application.M_DoctorPracticeDetails.MDPD_IsDeleted:1})
                session.commit()
                return jsonify({'msg':'Doctor Deleted Successfully'})
            else:
                return jsonify({'msg':'something went wrong please try again'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDoctor', methods=['GET'])
def getDoctor():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getDoctor,
                    session.query(Model.models.Application.M_DoctorDetails.MDDID.label('ID'),
                                func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName, ' ', Model.models.Application.M_DoctorDetails.MDD_LastName).label('Name'),
                                Model.models.Application.M_DoctorDetails.MDD_OnlineFeeINR.label('Online Consult Fee (INR)'),
                                Model.models.Application.M_DoctorDetails.MDD_OnlineFeeUSD.label('Online Consult Fee (USD $)'),
                                Model.models.Application.M_DoctorDetails.MDD_visitFeeINR.label('Clinic Visit Fee (INR)'),
                                Model.models.Application.M_DoctorDetails.MDD_visitFeeUSD.label('Clinic Visit Fee (USD $)'),
                                Model.models.Application.M_DoctorDetails.MDD_Clinic.label('MDD_Clinic'),
                                Model.models.Application.M_DoctorDetails.MDD_Type.label('Type'),
                                    Model.models.Application.M_Branch.MB_Name.label('Location'),
                                    ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0
                                    ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID ==Model.models.Application.M_DoctorDetails.MDD_Clinic
                                    ).order_by(Model.models.Application.M_DoctorDetails.MDDID.desc()).all()
                                )
                                   
                                
                            
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDoctorProfile', methods=['GET'])
def getDoctorProfile():
    session=Session()
    try:
        if(request.method == "GET"):
            DoctorId= request.headers.get('Doctorid')
            Usertype= request.headers.get('Usertype')
            # DoctorId = 71
            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getDoctorProfile,
                    session.query(Model.models.Application.M_DoctorDetails.MDDID.label('ID'),
                                func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName, ' ', Model.models.Application.M_DoctorDetails.MDD_LastName).label('Name'),
                                func.coalesce(Model.models.Application.M_DoctorDetails.MDD_Phone,'').label('Phone'),
                                func.coalesce(Model.models.Application.M_DoctorDetails.MDD_Email,'').label('Email'),
                                func.coalesce(Model.models.Application.M_DoctorMedicalDetails.MDMD_MedicalDegree,'').label('Degree'),
                                func.coalesce(Model.models.Application.M_DoctorMedicalDetails.MDMD_Registration,'').label('Registration'),
                                func.coalesce(Model.models.Application.M_DoctorMedicalDetails.MDMD_PracticingSince,'').label('PracticingSince'),
                                func.coalesce(Model.models.Application.M_DoctorMedicalDetails.MDMD_Languages,'').label('Languages'),
                                func.coalesce(Model.models.Application.M_DoctorMedicalDetails.MDMD_MedicalExpertise,'').label('MedicalExpertise'),
                                func.coalesce(Model.models.Application.M_DoctorMedicalDetails.MDMD_AwardRecognitions,'').label('AwardRecognitions'),
                                func.coalesce(Model.models.Application.M_DoctorMedicalDetails.MDMD_Category,'').label('speciality'),
                                func.coalesce(Model.models.Application.M_DoctorMedicalDetails.MDMD_HospitalAffiliation,'').label('HospitalAffiliation'),
                                func.coalesce(Model.models.Application.M_DoctorMedicalDetails.MDMD_ProfilePic,'').label('ProfilePic'),
                                func.coalesce(Model.models.Application.M_DoctorDetails.MU_DoctorID,'').label('MemberId'),
                                func.concat(sqlalchemy.func.date_format(Model.models.Application.DoctorOutoffice.DO_FromDate,'%d-%b-%Y %I:%i %p'),' - ',sqlalchemy.func.date_format(Model.models.Application.DoctorOutoffice.DO_ToDate,'%d-%b-%Y %I:%i %p')).label('OutDate'),
                                    ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0,MDDID=DoctorId
                                ).outerjoin(Model.models.Application.M_DoctorMedicalDetails,Model.models.Application.M_DoctorMedicalDetails.MDMD_DoctorId==Model.models.Application.M_DoctorDetails.MDDID
                                ).outerjoin(Model.models.Application.DoctorOutoffice,Model.models.Application.DoctorOutoffice.DO_DoctorId==Model.models.Application.M_DoctorDetails.MDDID
                                ).all()
                            )
            # sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('Date')
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/addDoctorProfile',methods=['GET','POST'])
def AddDoctorProfile():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):
            Data= request.form.get('data')
            getjson= json.loads(Data)
            memberID = getjson['memberID']
            fullName = getjson['fullName']
            countryCode = getjson['countryCode']
            mobile = getjson['mobile']
            email = getjson['email']
            speciality = getjson['speciality']
            medicalDegree = getjson['medicalDegree']
            councilRegistration = getjson['councilRegistration']
            medicalExpertise = getjson['medicalExpertise']
            awardsRecognition = getjson['awardsRecognition']
            language = getjson['language']
            practicingSince = getjson['practicingSince']
            hospitalAffiliation = getjson['hospitalAffiliation']
            Id = getjson['Id']
            # ServiceFile = request.files['file']
            ServiceFile = request.files.get('file')
            FilePath = 'static/MedicalProfile'
            if(ServiceFile!=None):
                if(ServiceFile.filename!='' and ServiceFile.filename!= None):
                    date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                    name, ext = os.path.splitext(ServiceFile.filename)
                    files = 'MedicalImage_'+ name +'_' + date  + ext
                    fileName=files
                    if(os.path.exists(FilePath)):
                        ServiceFile.save(os.path.join(FilePath, fileName))
                        print(ServiceFile.filename)
                    else:
                        os.makedirs(FilePath)
                        ServiceFile.save(os.path.join(FilePath, fileName))
            if(Id!='' or Id!=None):
                FullNames = fullName.rsplit(' ', 1)
                Insert=session.query(Model.models.Application.M_DoctorDetails).get(Id)
                Insert.MU_DoctorID=memberID
                Insert.MDD_FirstName=FullNames[0]
                Insert.MDD_LastName=FullNames[1]
                Insert.MDD_Email=email
                Insert.MDD_Phone=mobile
                Insert.MDD_ModDate= datetime.datetime.now()
                session.commit()
                print("success")
                DoctorMedicalDtl = session.query(Model.models.Application.M_DoctorMedicalDetails.MDMDID
                                ).filter_by(MDMD_DoctorId=Id).first()
                Insert=session.query(Model.models.Application.M_DoctorMedicalDetails).get(DoctorMedicalDtl.MDMDID)
                Insert.MDMD_MedicalDegree=medicalDegree
                Insert.MDMD_Registration=councilRegistration
                Insert.MDMD_PracticingSince=practicingSince
                Insert.MDMD_HospitalAffiliation=hospitalAffiliation
                Insert.MDMD_Languages=language
                Insert.MDMD_AwardRecognitions= awardsRecognition
                Insert.MDMD_MedicalExpertise=medicalExpertise
                Insert.MDMD_Category= speciality
                if(ServiceFile!=None):
                    if(ServiceFile.filename!='' and ServiceFile.filename!= None):
                        Insert.MDMD_ProfilePic= FilePath+'/'+fileName
                Insert.MDMD_ModDate=datetime.datetime.now()
                # session.add(Insert)
                session.commit()

                return jsonify({'msg':'Details Updated Successfully'}),200
            else:

                return jsonify({'err':'Please check'}),200
        else:
            return jsonify({'err':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/AddDoctorForm', methods=['POST','GET'])
def AddDoctorForm():
    session=Session()
    try:
        if(request.method == "GET"):
            getNameField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.nameform,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                        ).filter_by(MFC_FormName='nameform',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddDoctorForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddDoctorForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            # getDiscountType= Common_Function.CommonFun.getDiscountType()
            # getPackagetype= Common_Function.CommonFun.getPackagetype()
            # getOrg= Common_Function.CommonFun.getOrg()
            # getClinic= Common_Function.CommonFun.getClinic()
            Validation= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.Validation,
                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                            Model.models.Application.M_validations.MV_Message.label('message')
                                ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                        )
            getNameField[0]['validations']=Validation
            getNameField[1]['validations']=Validation
            getTextField[0]['childControl']= getNameField
            getTextField[0]['validations']= Validation
            getTextField[1]['validations']= Validation
            getTextField[2]['validations']= Validation
            getTextField[3]['validations']= Validation
            getTextField[5]['validations']= Validation
            getTextField[6]['validations']= Validation
            getTextField[7]['validations']= Validation


            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/EditDoctorForm', methods=['POST','GET'])
def EditDoctorForm():
    session=Session()
    try:
        if(request.method == "POST"):
            PId= request.data
            queryresult= session.query(Model.models.Application.M_DoctorDetails.MDDID.label('ID'),
                                Model.models.Application.M_DoctorDetails.MDD_FirstName.label('FirstName'),
                                Model.models.Application.M_DoctorDetails.MDD_LastName.label('LastName'),
                                func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName, ' ', Model.models.Application.M_DoctorDetails.MDD_LastName).label('Name'),
                                Model.models.Application.M_DoctorDetails.MDD_OnlineFeeINR.label('OnlineConsultINR'),
                                Model.models.Application.M_DoctorDetails.MDD_OnlineFeeUSD.label('OnlineConsultUSD'),
                                Model.models.Application.M_DoctorDetails.MDD_visitFeeINR.label('ClinicVisitINR'),
                                Model.models.Application.M_DoctorDetails.MDD_visitFeeUSD.label('ClinicVisitUSD'),
                                Model.models.Application.M_DoctorDetails.MDD_Email.label('Email'),
                                Model.models.Application.M_DoctorDetails.MDD_Phone.label('Phone'),
                                Model.models.Application.M_DoctorDetails.MU_DoctorID.label('DoctorID'),
                                Model.models.Application.M_DoctorDetails.MDD_Status.label('Status')
                                    ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0,MDDID=PId).all()

            getNameField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.EditDoctorForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                        ).filter_by(MFC_FormName='nameform',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddDoctorForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddDoctorForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

            Validation= Common_Function.CommonFun.Validation()

            getNameField[0]['validations']=Validation
            getNameField[1]['validations']=Validation
            getTextField[0]['childControl']= getNameField
            getTextField[0]['validations']= Validation
            getTextField[1]['validations']= Validation
            getTextField[2]['validations']= Validation
            getTextField[3]['validations']= Validation
            getTextField[4]['validations']= Validation

            getNameField[0]['value']=queryresult[0].FirstName
            getNameField[1]['value']=queryresult[0].LastName
            getTextField[1]['value']=queryresult[0].OnlineConsultINR
            getTextField[2]['value']=queryresult[0].OnlineConsultUSD
            getTextField[3]['value']=queryresult[0].ClinicVisitINR
            getTextField[4]['value']=queryresult[0].ClinicVisitUSD
            getTextField[5]['value']=queryresult[0].Email
            getTextField[6]['value']=queryresult[0].Phone
            # getTextField[7]['value']=queryresult[0].DoctorID
            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/SearchDoctorForm', methods=['POST','GET'])
def SearchDoctorForm():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.SearchDoctorForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='SearchDoctorForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/getSearchedDoctor', methods=['POST','get'])
def getSearchedDoctor():
    session=Session()
    try:
        if(request.method == "POST"):
            request_json = request.get_json(force = True)
            FirstName = request_json.get('FirstName')
            LastName = request_json.get('LastName')

            apply = []

            if(FirstName !='' and FirstName !=None):
                apply.append(Model.models.Application.M_DoctorDetails.MDD_FirstName.contains(FirstName))
            if(LastName !='' and LastName !=None):
                apply.append(Model.models.Application.M_DoctorDetails.MDD_LastName.contains(LastName))

            if((FirstName!='' and FirstName !=None) or (LastName!='' and LastName !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getSearchedDoctor,
                    session.query(Model.models.Application.M_DoctorDetails.MDDID.label('ID'),
                                func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName, ' ', Model.models.Application.M_DoctorDetails.MDD_LastName).label('Name'),
                                Model.models.Application.M_DoctorDetails.MDD_OnlineFeeINR.label('Online Consult Fee (INR)'),
                                Model.models.Application.M_DoctorDetails.MDD_OnlineFeeUSD.label('Online Consult Fee (USD $)'),
                                Model.models.Application.M_DoctorDetails.MDD_visitFeeINR.label('Clinic Visit Fee (INR)'),
                                Model.models.Application.M_DoctorDetails.MDD_visitFeeUSD.label('Clinic Visit Fee (USD $)')
                                    ).filter_by(MDD_IsActive=1,MDD_IsDeleted=0).filter(*apply
                                ).order_by(Model.models.Application.M_DoctorDetails.MDDID.desc()).all()
                            )
                return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/addDoctorPractice',methods=['GET','POST'])
def addDoctorPractice():

    session=Session()
    try:

        if(request.method == "POST"):
            Data= request.form.get('data')
            # Org= Data[0]

            # Clinic= Data[1]
            getjson= json.loads(Data)
            # DoctorID = request.form.get('DoctorID')
            # slots_Sunday = request.get_json()
            DoctorID = 70#getjson['DoctorID']
            OrganisationName = getjson['OrganisationName']
            clinicname = getjson['clinicname']
            country = getjson['city']
            Pincode = getjson['Pincode']
            state = getjson['state']
            city = getjson['city']
            landline = getjson['LandLine']
            Mobile1 = getjson['Mobile1']
            # Mobile1toggle = getjson['Mobile1toggle']
            Mobile2 = getjson['Mobile2']
            # Mobile2toggle = getjson['Mobile2toggle']
            cliniccponsultfee = getjson['cliniccponsultfee']
            visitfeeusd = getjson['cliniccponsultfeeusd']
            onlinefeeinr = getjson['onlinefeeinr']
            onlinefeeusd = getjson['onlinefeeusd']
            Address= getjson['Address']
            # digitalSigns = slots_Sunday.get('digitalSign')

            digitalSigns = request.files['files[]']
            # DoctorPractice= session.query(Model.models.Application.M_DoctorPracticeDetails.MDPDID

            slots_Sundays = getjson['slots_Sunday']
            for slot in slots_Sundays:
                fromslot = slot['FromSlot']
                ToSlot=slot['ToSlot']
                Insert= Model.models.Application.T_DoctorPracticeTimeSlot()
                Insert.TDPS_MDPDID= DoctorID
                Insert.TDPS_DayID= 1
                Insert.TDPS_FromTime=fromslot
                Insert.TDPS_ToTime=ToSlot
                session.add(Insert)
                session.commit()
            slots_Monday = getjson['slots_Monday']
            for slot in slots_Monday:
                fromslot = slot['FromSlot']
                ToSlot=slot['ToSlot']
                Insert= Model.models.Application.T_DoctorPracticeTimeSlot()
                Insert.TDPS_MDPDID= DoctorID
                Insert.TDPS_DayID= 2
                Insert.TDPS_FromTime=fromslot
                Insert.TDPS_ToTime=ToSlot
                session.add(Insert)
                session.commit()

            slots_Tuesday = getjson['slots_Tuesday']
            for slot in slots_Tuesday:
                fromslot = slot['FromSlot']
                ToSlot=slot['ToSlot']
                Insert= Model.models.Application.T_DoctorPracticeTimeSlot()
                Insert.TDPS_MDPDID= DoctorID
                Insert.TDPS_DayID= 3
                Insert.TDPS_FromTime=fromslot
                Insert.TDPS_ToTime=ToSlot
                session.add(Insert)
                session.commit()

            slots_Wednesday = getjson['slots_Wednesday']
            for slot in slots_Wednesday:
                fromslot = slot['FromSlot']
                ToSlot=slot['ToSlot']
                Insert= Model.models.Application.T_DoctorPracticeTimeSlot()
                Insert.TDPS_MDPDID= DoctorID
                Insert.TDPS_DayID= 4
                Insert.TDPS_FromTime=fromslot
                Insert.TDPS_ToTime=ToSlot
                session.add(Insert)
                session.commit()

            slots_Thursday = getjson['slots_Thursday']
            for slot in slots_Thursday:
                fromslot = slot['FromSlot']
                ToSlot=slot['ToSlot']
                Insert= Model.models.Application.T_DoctorPracticeTimeSlot()
                Insert.TDPS_MDPDID= DoctorID
                Insert.TDPS_DayID= 5
                Insert.TDPS_FromTime=fromslot
                Insert.TDPS_ToTime=ToSlot
                session.add(Insert)
                session.commit()
            slots_Friday = getjson['slots_Friday']

            for slot in slots_Friday:
                fromslot = slot['FromSlot']
                ToSlot=slot['ToSlot']
                Insert= Model.models.Application.T_DoctorPracticeTimeSlot()
                Insert.TDPS_MDPDID= DoctorID
                Insert.TDPS_DayID= 6
                Insert.TDPS_FromTime=fromslot
                Insert.TDPS_ToTime=ToSlot
                session.add(Insert)
                session.commit()
            slots_Saturday = getjson['slots_Saturday']

            for slot in slots_Saturday:
                fromslot = slot['FromSlot']
                ToSlot=slot['ToSlot']
                Insert= Model.models.Application.T_DoctorPracticeTimeSlot()
                Insert.TDPS_MDPDID= DoctorID
                Insert.TDPS_DayID= 7
                Insert.TDPS_FromTime=fromslot
                Insert.TDPS_ToTime=ToSlot
                session.add(Insert)
                session.commit()
            #value= json.loads(slots_Sunday)

            DoctorPractice= session.query(Model.models.Application.M_DoctorPracticeDetails.MDPDID
                                 ).filter_by(MDPD_DoctorId=DoctorID,MDPD_IsActive=1,MDPD_IsDeleted=0).all()

            # #Model.models.Application.T_DoctorPracticeTimeSlot

            FilePath = 'static/DoctorDigitalSign'
            #for digitalSign in digitalSigns:
            if(digitalSigns.filename!='' and digitalSigns.filename!= None):
                date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                name, ext = os.path.splitext(digitalSigns.filename)
                files = 'DigitalSign_'+ str(DoctorID) +'_' + date  + ext
                fileName=files
                if(os.path.exists(FilePath)):
                    digitalSigns.save(os.path.join(FilePath, fileName))
                    print(digitalSigns.filename)
                else:
                    os.makedirs(FilePath)
                    digitalSigns.save(os.path.join(FilePath, fileName))



            if(len(DoctorPractice)>0):
                DoctorPracticID= DoctorPractice[0]
                Insert=session.query(Model.models.Application.M_DoctorPracticeDetails).get(DoctorPracticID)
                Insert.MDPD_DoctorId=DoctorID
                Insert.M_Organisation_MOID=52  #OrganisationName
                Insert.MDPD_Address=Address
                Insert.MDPD_Mobile1=Mobile1
                #Insert.MDPD_HideMobile1=Mobile1toggle
                Insert.MDPD_Mobile2=Mobile2
                #Insert.MDPD_HideMobile2=Mobile2toggle
                Insert.MDPD_Pincode=Pincode
                Insert.MDPD_city=12  #city
                Insert.MDPD_cliniccponsultfee=cliniccponsultfee
                Insert.MDPD_clinicname= 1 #clinicname
                Insert.MDPD_country=3 #country
                Insert.MDPD_digitalSign=fileName
                Insert.MDPD_DigitalSIgnPath=FilePath
                Insert.MDPD_landline=landline
                Insert.MDPD_onlinefeeusd=onlinefeeusd
                Insert.MDPD_onlinefeeinr=onlinefeeinr
                Insert.MDPD_state= 6 #state
                Insert.MDPD_visitfeeusd=visitfeeusd
                Insert.MDPD_ModDate= datetime.datetime.now()
                Insert.MDPD_AddIP= flask.request.remote_addr

                session.commit()

                return jsonify({'msg':'Doctor Practice Updated Successfully'})
            else:
                Insert=Model.models.Application.M_DoctorPracticeDetails()
                Insert.MDPD_DoctorId=DoctorID
                Insert.M_Organisation_MOID=52  #OrganisationName
                Insert.MDPD_Address=Address
                Insert.MDPD_Mobile1=Mobile1
                #Insert.MDPD_HideMobile1=Mobile1toggle
                Insert.MDPD_Mobile2=Mobile2
                #Insert.MDPD_HideMobile2=Mobile2toggle
                Insert.MDPD_Pincode=Pincode
                Insert.MDPD_city=12  #city
                Insert.MDPD_cliniccponsultfee=cliniccponsultfee
                Insert.MDPD_clinicname= 1 #clinicname
                Insert.MDPD_country=3 #country
                Insert.MDPD_digitalSign=fileName
                Insert.MDPD_DigitalSIgnPath=FilePath
                Insert.MDPD_landline=landline
                Insert.MDPD_onlinefeeusd=onlinefeeusd
                Insert.MDPD_onlinefeeinr=onlinefeeinr
                Insert.MDPD_state= 6 #state
                Insert.MDPD_visitfeeusd=visitfeeusd
                Insert.MDPD_AddDate= datetime.datetime.now()
                Insert.MDPD_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()

                return jsonify({'msg':'Doctor Practice Added Successfully'})
            #return jsonify({'msg':'Doctor Practice Added Successfully'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddDoctorPracticeForm', methods=['POST','GET'])
def AddDoctorPracticeForm():
    session=Session()
    try:
        if(request.method == "POST"):

            PId= request.data

            doctor=session.query(Model.models.Application.M_DoctorPracticeDetails.MDPDID
                                 ).filter_by(MDPD_DoctorId=PId,MDPD_IsActive=1,MDPD_IsDeleted=0).all()


            getNameField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddDoctorPracticeAddressForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                        ).filter_by(MFC_FormName='AddDoctorPracticeAddressForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getMobileField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddDoctorPracticeMobileForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                        ).filter_by(MFC_FormName='AddDoctorPracticeMobileForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddDoctorPracticeForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddDoctorPracticeForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).order_by(Model.models.Application.M_FormControl.MFC_preference).all())
            gettogleField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.togglebutton,
                                                                   session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('value')
                        ).filter_by(MFC_FormName='togglebutton',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            gettogleField2= Common_Function.CommonFun.convertToJson(Constant.constant.constant.togglebutton2,
                                                                    session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),

                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('value')
                        ).filter_by(MFC_FormName='togglebutton1',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            # getDiscountType= Common_Function.CommonFun.getDiscountType()
            # getPackagetype= Common_Function.CommonFun.getPackagetype()
            # getOrg= Common_Function.CommonFun.getOrg()
            # getClinic= Common_Function.CommonFun.getClinic()
            # Validation= Common_Function.CommonFun.convertToJson(
            #     Constant.constant.constant.Validation,
            #     session.query(Model.models.Application.M_validations.MV_Name.label('name'),
            #                 Model.models.Application.M_validations.MV_Pattern.label('pattern'),
            #                 Model.models.Application.M_validations.MV_Message.label('message')
            #                     ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
            #             )

            Validation = Common_Function.CommonFun.Validation()
            getTextField[0]['validations']=Validation
            getTextField[1]['validations']=Validation
            getTextField[2]['validations']=Validation
            getTextField[3]['validations']=Validation
            getTextField[4]['validations']=Validation
            getTextField[5]['validations']=Validation
            getTextField[6]['validations']=Validation
            getTextField[7]['validations']=Validation
            #getTextField[8]['validations']=Validation
            getTextField[9]['validations']=Validation
            getTextField[10]['validations']=Validation
            getTextField[11]['validations']=Validation

            getNameField[0]['validations']=Validation
            getNameField[1]['validations']=Validation
            getNameField[2]['validations']=Validation
            getNameField[3]['validations']=Validation
            getMobileField[0]['validations']=Validation
            getMobileField[0]['showToggle']=gettogleField
            getMobileField[1]['showToggle']=gettogleField2

            getTextField[3]['childControl']=getNameField
            getTextField[5]['childControl']=getMobileField

            getTextField[0]['options']= Common_Function.CommonFun.getOrg()
            getTextField[1]['options']= Common_Function.CommonFun.getClinic()
            getNameField[1]['options']= Common_Function.CommonFun.getCountry()
            getNameField[2]['options']= Common_Function.CommonFun.getState()
            getNameField[3]['options']= Common_Function.CommonFun.City()
            #getNameField[1]['options']= Common_Function.CommonFun.getCountry()
            getTextField[8]['columnData']= ['Day', 'Slot']
            getTextField[8]['rowData']= [{
                "type":'multiSlot',
                "Day": 'Sunday',
                "Slot_0": [1],
            },
            {
                "type":'multiSlot',
                "Day": 'Monday',
                "Slot_1": [1],
            },
            {
                "type":'multiSlot',
                "Day": 'Tuesday',
                "Slot_2": [1],
            },
            {
                "type":'multiSlot',
                "Day": 'Wednesday',
                "Slot_3": [1],
            },
            {
                "type":'multiSlot',
                "Day": 'Thursday',
                "Slot_4": [1],
            },
            {
                "type":'multiSlot',
                "Day": 'Friday',
                "Slot_5": [1],
            },
            {
                "type":'multiSlot',
                "Day": 'Saturday',
                "Slot_6": [1],
            }]
            if(len(doctor)>0):

                doctorResult=session.query(Model.models.Application.M_DoctorPracticeDetails.MDPDID,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_DoctorId,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_Address,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_Mobile1,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_HideMobile1,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_Mobile2,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_HideMobile2,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_Pincode,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_city,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_cliniccponsultfee,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_clinicname,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_country,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_digitalSign,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_landline,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_onlinefeeusd,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_onlinefeeinr,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_state,
                                 Model.models.Application.M_DoctorPracticeDetails.MDPD_visitfeeusd,
                                 Model.models.Application.M_DoctorPracticeDetails.M_Organisation_MOID,

                                 ).filter_by(MDPD_DoctorId=PId,MDPD_IsActive=1,MDPD_IsDeleted=0).all()
                getTextField[0]['value']=doctorResult[0].M_Organisation_MOID
                getTextField[1]['value']=doctorResult[0].MDPD_clinicname
                getTextField[2]['value']=doctorResult[0].MDPD_Address
                getTextField[4]['value']=doctorResult[0].MDPD_landline
                getTextField[6]['value']=doctorResult[0].MDPD_cliniccponsultfee
                getTextField[7]['value']=doctorResult[0].MDPD_visitfeeusd
                getTextField[9]['value']=doctorResult[0].MDPD_onlinefeeinr
                getTextField[10]['value']=doctorResult[0].MDPD_onlinefeeusd
                getTextField[11]['value']=doctorResult[0].MDPD_digitalSign
                getNameField[1]['value']=doctorResult[0].MDPD_country
                getNameField[2]['value']=doctorResult[0].MDPD_state
                getNameField[3]['value']=doctorResult[0].MDPD_city
                getNameField[0]['value']=doctorResult[0].MDPD_Pincode
                getMobileField[0]['value']=doctorResult[0].MDPD_Mobile1
                getMobileField[1]['value']=doctorResult[0].MDPD_Mobile2

                gettogleField[0]['value']=doctorResult[0].MDPD_HideMobile1
                gettogleField2[0]['value']=doctorResult[0].MDPD_HideMobile2

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/deleteDoctorPractice',methods=['POST'])
def deleteDoctorPractice():
    try:
        if(request.method == "POST"):
            session=Session()
            Id=request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_Package
                              ).filter(Model.models.Application.M_Package.MPID==Id).update({Model.models.Application.M_Package.MP_IsDeleted:1})
                session.commit()

                return jsonify({'msg':'Doctor practice Deleted Successfully'})
            else:
                return jsonify({'msg':'something went wrong please try again'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/addReferredDoctor',methods=['GET','POST'])
def addReferredDoctor():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            FirstName = request_json.get('FirstName')
            LastName = request_json.get('LastName')
            Mobile = request_json.get('Mobile')
            Email = request_json.get('Email')
            Id = request_json.get('Id')
            if(Id=='' or Id==None):
                Insert=Model.models.Application.M_ReferredByDoctor()
                Insert.MRD_FirstName=FirstName
                Insert.MRD_LastName=LastName
                Insert.MRD_MobileNo=Mobile
                Insert.MRD_EmailId=Email
                Insert.MRD_AddIP= flask.request.remote_addr
                Insert.MRD_AddDate= datetime.datetime.now()
                session.add(Insert)
                session.commit()
                session.close()
                print("success")

                return jsonify({'msg':'Doctor Added Successfully'})
            else:
                Insert=session.query(Model.models.Application.M_ReferredByDoctor).get(Id)
                Insert.MRD_FirstName=FirstName
                Insert.MRD_LastName=LastName
                Insert.MRD_MobileNo=Mobile
                Insert.MRD_EmailId=Email
                Insert.MRD_AddIP= flask.request.remote_addr
                Insert.MRD_ModDate = datetime.datetime.now()
                session.commit()
                session.close()
                print("success")

                return jsonify({'msg':'Doctor Updated Successfully'})
        else:
            return jsonify({'msg':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/addReferredDoctorForm', methods=['POST','GET'])
def addReferredDoctorForm():
    session=Session()
    try:
        if(request.method == "GET"):
            getNameField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddReferredDoctorFormRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                        ).filter_by(MFC_FormName='AddReferredDoctorFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddDoctorForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddReferredDoctorForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            Validation= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.Validation,
                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                            Model.models.Application.M_validations.MV_Message.label('message')
                                ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                        )

            getTextField[0]['validations']= Validation
            getTextField[1]['validations']= Validation
            getTextField[2]['validations']= Validation
            getNameField[0]['childControl']= getTextField

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/editReferredDoctorForm', methods=['POST','GET'])
def editReferredDoctorForm():
    session=Session()
    try:
        if(request.method == "POST"):
            PId= request.data
            queryresult= session.query(Model.models.Application.M_ReferredByDoctor.MRDID.label('Id'),
                                Model.models.Application.M_ReferredByDoctor.MRD_FirstName.label('FirstName'),
                                Model.models.Application.M_ReferredByDoctor.MRD_LastName.label('LastName'),
                                Model.models.Application.M_ReferredByDoctor.MRD_MobileNo.label('Mobile'),
                                Model.models.Application.M_ReferredByDoctor.MRD_EmailId.label('Email')
                                    ).filter_by(MRD_IsActive=1,MRD_IsDeleted=0,MRDID=PId).all()
            getNameField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddReferredDoctorFormRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                        ).filter_by(MFC_FormName='AddReferredDoctorFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddDoctorForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddReferredDoctorForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            Validation= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.Validation,
                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                            Model.models.Application.M_validations.MV_Message.label('message')
                                ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                        )

            getTextField[0]['validations']= Validation
            getTextField[1]['validations']= Validation
            getTextField[2]['validations']= Validation
            # getNameField[0]['childControl']= getTextField
            getTextField[0]['value']=queryresult[0].FirstName
            getTextField[1]['value']=queryresult[0].LastName
            getTextField[2]['value']=queryresult[0].Mobile
            getTextField[3]['value']=queryresult[0].Email
            getNameField[0]['childControl']= getTextField

            return jsonify(result=getNameField)
    finally:
        session.close()

@app.route('/deleteReferDoctor',methods=['POST'])
def deleteReferDoctor():
    try:
        if(request.method == "POST"):
            session=Session()
            Id=request.data

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_ReferredByDoctor
                              ).filter(Model.models.Application.M_ReferredByDoctor.MRDID==Id).update({Model.models.Application.M_ReferredByDoctor.MRD_IsDeleted:1})
                session.commit()

                return jsonify({'msg':'Reffer Doctor Deleted Successfully'})
            else:
                return jsonify({'msg':'something went wrong please try again'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getReferredDoctor', methods=['GET'])
def getReferredDoctor():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getReferredDoctor,
                    session.query(Model.models.Application.M_ReferredByDoctor.MRDID.label('Id'),
                                func.concat(Model.models.Application.M_ReferredByDoctor.MRD_FirstName, ' ', Model.models.Application.M_ReferredByDoctor.MRD_LastName).label('Name'),
                                Model.models.Application.M_ReferredByDoctor.MRD_MobileNo.label('Mobile'),
                                Model.models.Application.M_ReferredByDoctor.MRD_EmailId.label('Email')
                                ).filter_by(MRD_IsActive=1,MRD_IsDeleted=0).all()
                            )
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddPrescriptionForm', methods=['POST','GET'])
def AddPrescriptionForm():
    session=Session()
    try:
        if(request.method == "GET"):

            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddPrescriptionForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='AddPrescriptionPageForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            MedecineType= Common_Function.CommonFun.MedecineType()
            RoutesType= Common_Function.CommonFun.RoutesType()
            timesADayType= Common_Function.CommonFun.timesADayType()
            DurationType= Common_Function.CommonFun.DurationType()
            # Validation= Common_Function.CommonFun.convertToJson(
            #     Constant.constant.constant.Validation,
            #     session.query(Model.models.Application.M_validations.MV_Name.label('name'),
            #                 Model.models.Application.M_validations.MV_Pattern.label('pattern'),
            #                 Model.models.Application.M_validations.MV_Message.label('message')
            #                     ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
            #             )


            getTextField[1]['options']= MedecineType
            getTextField[2]['options']= RoutesType
            getTextField[3]['options']= timesADayType
            getTextField[4]['options']= DurationType

            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/getPatientAllHistory', methods=['GET'])
def getPatientAllHistory():
    session=Session()
    try:
        if(request.method == "GET"):
            Doctorid= request.headers.get('Doctorid')
            Usertype= request.headers.get('Usertype')
            branchId= request.headers.get('branchId')
            if(Usertype!='2' and Usertype!='1'):
                query="""select (select MS_CategoryName from m_service where MSID = m_appointment.MP_Procedure) as reasonForVisit
                ,(select TD_Name from T_Details where TDID = m_appointment.MP_AppointmentType) as mode, MAID as consultId,
                (select TD_Name from T_Details where TDID = m_appointment.MP_Status) as status,M_Patient_MPID as patientId,
                (select MP_Name from m_patient where MPID = m_appointment.M_Patient_MPID) as patientName,
                date_format(MA_Date, '%d %M %Y') as date,
                (select MDD_FirstName from m_doctordetails where MDDID = m_appointment.M_DoctorDetails_MDDID)
                as doctorName,M_DoctorDetails_MDDID as doctorId,
                TIME_FORMAT(MA_Time, '%I:%i %p') as visitTimeFrom,
                TIME_FORMAT(date_add(MA_Time,interval (select TD_Name from T_Details where TDID = m_appointment.MP_Duration) minute), '%I:%i %p') as visitTimeTo,
                MDD_OnlineFeeINR as fee from m_appointment INNER JOIN m_doctordetails ON
                m_doctordetails.MDDID=m_appointment.M_DoctorDetails_MDDID where MP_IsActive=1 and MP_IsDeleted=0 and MP_IsCancelled=0 and MA_Date = curdate() and M_Branch_MBID=""" + branchId +""";"""
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getPatientAllHistory,
                    session.execute(query).fetchall())
                return jsonify(result=queryresult)
            else:
                query="""select (select MS_CategoryName from m_service where MSID = m_appointment.MP_Procedure) as reasonForVisit
                ,(select TD_Name from T_Details where TDID = m_appointment.MP_AppointmentType) as mode, MAID as consultId,
                (select TD_Name from T_Details where TDID = m_appointment.MP_Status) as status,M_Patient_MPID as patientId,
                (select MP_Name from m_patient where MPID = m_appointment.M_Patient_MPID) as patientName,
                date_format(MA_Date, '%d %M %Y') as date,
                (select MDD_FirstName from m_doctordetails where MDDID = m_appointment.M_DoctorDetails_MDDID)
                as doctorName,M_DoctorDetails_MDDID as doctorId,
                TIME_FORMAT(MA_Time, '%I:%i %p') as visitTimeFrom,
                TIME_FORMAT(date_add(MA_Time,interval (select TD_Name from T_Details where TDID = m_appointment.MP_Duration) minute), '%I:%i %p') as visitTimeTo,
                MDD_OnlineFeeINR as fee from m_appointment INNER JOIN m_doctordetails ON
                m_doctordetails.MDDID=m_appointment.M_DoctorDetails_MDDID where MP_IsActive=1 and MP_IsDeleted=0 and MP_IsCancelled=0 and MA_Date = curdate() and M_Branch_MBID=""" + branchId +""" and M_DoctorDetails_MDDID="""+Doctorid+""";"""
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getPatientAllHistory,
                    session.execute(query).fetchall())
                return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/getAllPatient', methods=['GET'])
def getAllPatient():
    session=Session()
    try:
        if(request.method == "GET"):
            Doctorid= request.headers.get('Doctorid')
            Usertype= request.headers.get('Usertype')
            query="""select  ma.MAID as consultId,ma.M_Patient_MPID as patientId,mp.MP_Name,mp.MP_UHID,mp.MP_DOB
            from m_appointment ma INNER JOIN m_patient mp ON
            mp.MPID=ma.M_Patient_MPID where ma.MP_IsActive=1 and ma.MP_IsDeleted=0 and ma.MP_IsCancelled=0 and ma.M_DoctorDetails_MDDID="""+ Doctorid
            """ group by ma.M_Patient_MPID"""
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getPatientAll,
                session.execute(query).fetchall())
            # cur.execute("UPDATE students SET name=%s, class=%s, town=%s, roll=%s WHERE id=%s", (requestData["name"],requestData["class"],requestData["town"],requestData["roll"],requestData["id"]))
            # db.commit()
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPatientSearchHistory', methods=['GET','POST'])
def getPatientSearchHistory():
    session=Session()
    try:
        if(request.method == "POST"):
            request_json = request.get_json()
            doctorName = request_json.get('doctorName')
            date = request_json.get('date')
            onlineData = request_json.get('onlineData')
            offlineData = request_json.get('offlineData')
            branchId= request.headers.get('branchId')
            con=""
            if(doctorName != '' and doctorName != None):
                con += " and M_DoctorDetails_MDDID=" + doctorName
            if(date != '' and date != None):
                con += " and MA_Date = '"+ date +"'"
            if(onlineData==True and offlineData!=True):
                con += " and MP_AppointmentType = 32"
            if(offlineData==True and onlineData!=True):
                con += " and MP_AppointmentType = 31"
            if(offlineData==True and onlineData==True):
                con += ""
            if(offlineData!=True and onlineData!=True):
                con += ""
            if(branchId!='' and branchId!=None):
                con += " and M_Branch_MBID =" + branchId
            query="""select (select MS_CategoryName from m_service where MSID = m_appointment.MP_Procedure) as reasonForVisit
                ,(select TD_Name from T_Details where TDID = m_appointment.MP_AppointmentType) as mode, MAID as consultId,
                (select TD_Name from T_Details where TDID = m_appointment.MP_Status) as status,M_Patient_MPID as patientId,
                (select MP_Name from m_patient where MPID = m_appointment.M_Patient_MPID) as patientName,
                date_format(MA_Date, '%d %M %Y') as date,
                (select MDD_FirstName from m_doctordetails where MDDID = m_appointment.M_DoctorDetails_MDDID)
                as doctorName,M_DoctorDetails_MDDID as doctorId,
                TIME_FORMAT(MA_Time, '%I:%i %p') as visitTimeFrom,
                TIME_FORMAT(date_add(MA_Time,interval (select TD_Name from T_Details where TDID = m_appointment.MP_Duration) minute), '%I:%i %p') as visitTimeTo,
                MDD_OnlineFeeINR as fee from m_appointment INNER JOIN m_doctordetails ON
                m_doctordetails.MDDID=m_appointment.M_DoctorDetails_MDDID where MP_IsActive=1 and MP_IsDeleted=0 and MP_IsCancelled=0 """+ con +""";"""
            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getPatientSearchHistory,
                    session.execute(query).fetchall())

            return jsonify(result=queryresult)

            

            
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/pastConsultData', methods=['POST'])
def pastConsultData():
    session=Session()
    try:
        if(request.method == "POST"):
            Id=request.data
            Id = Id.decode()
            query="""select (select MS_CategoryName from m_service where MSID = m_appointment.MP_Procedure) as reasonForVisit
            ,(select TD_Name from T_Details where TDID = m_appointment.MP_AppointmentType) as mode, MAID as consultId,
            (select TD_Name from T_Details where TDID = m_appointment.MP_Status) as status,M_Patient_MPID as patientId,
            (select MP_Name from m_patient where MPID = m_appointment.M_Patient_MPID) as patientName,
            date_format(MA_Date, '%d %M %Y') as date,
            (select MDD_FirstName from m_doctordetails where MDDID = m_appointment.M_DoctorDetails_MDDID)
            as doctorName,M_DoctorDetails_MDDID as doctorId,
            TIME_FORMAT(MA_Time, '%I:%i %p') as visitTimeFrom,
            TIME_FORMAT(date_add(MA_Time,interval (select TD_Name from T_Details where TDID = m_appointment.MP_Duration) minute), '%I:%i %p') as visitTimeTo,
            MDD_OnlineFeeINR as fee from m_appointment INNER JOIN m_doctordetails ON
            m_doctordetails.MDDID=m_appointment.M_DoctorDetails_MDDID where MP_IsActive=1 and MP_IsDeleted=0 and MP_IsCancelled=0 and M_Patient_MPID=""" +str(Id)+""";"""
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.pastConsultData,
                session.execute(query).fetchall())
            # cur.execute("UPDATE students SET name=%s, class=%s, town=%s, roll=%s WHERE id=%s", (requestData["name"],requestData["class"],requestData["town"],requestData["roll"],requestData["id"]))
            # db.commit()
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddVaccine',methods=['GET','POST'])
def AddVaccine():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):

        #     data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
        #     if(data['user']=='vipul Kumar'):

                    # Name='vipul patel'
                    # Email='vipul@ksm.in'
                    # mobile=8544388999
                    # about='Hello Hello application dekhne waalo karna kya chah rhe tum nu batao'

            # request_json = request.get_json()
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')
            Email = request_json.get('Email')
            Name = request_json.get('Name')
            Email = request_json.get('Email')
            Name = request_json.get('Name')
            Name = request_json.get('Name')
            Email = request_json.get('Email')

            Insert=Model.models.Application.M_VaccinationDetails()
            Insert.M_Patient_MPID=Name
            Insert.MVD_Date=Email
            Insert.MVD_Time=Name
            Insert.MVD_Age=Email
            Insert.M_VaccineType_MVTID=Name
            Insert.MVD_TotalDose=Name
            Insert.MVD_ConsumedDose=Name
            Insert.MVD_AddIP= flask.request.remote_addr
            session.add(Insert)
            session.commit()
            print("success")
                    #return "inserted Successfully"

            ORGID= session.query(Model.models.Application.M_VaccinationDetails.MVDID).order_by(Model.models.Application.M_VaccinationDetails.MVDID.desc()).first()


            return jsonify({'msg':'Vaccination Details Added Successfully', 'data': {'vaccinationId':ORGID[0]}})
            # else:
            #     return jsonify({'token': data, 'msg':'username is not valid','About':about,'TokenUser':data['user']})
        else:

            ID= request.args.get('id')
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')
            Email = request_json.get('Email')
            Name = request_json.get('Name')
            Email = request_json.get('Email')
            Name = request_json.get('Name')
            Name = request_json.get('Name')
            Email = request_json.get('Email')

            Insert=session.query(Model.models.Application.M_VaccinationDetails).get(ID)
            Insert.M_Patient_MPID=Name
            Insert.MVD_Date=Email
            Insert.MVD_Time=Name
            Insert.MVD_Age=Email
            Insert.M_VaccineType_MVTID=Name
            Insert.MVD_TotalDose=Name
            Insert.MVD_ConsumedDose=Name
            Insert.MVD_AddIP= flask.request.remote_addr
            session.commit()

            return jsonify({'msg':'Vaccination Details Updated Successfully', 'data': ID})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getVaccination', methods=['GET'])
def getVaccination():
    session=Session()
    try:
        if(request.method == "GET"):
            MOID= request.args.get('Name')
            MBID= request.args.get('Email')
            MFID= request.args.get('Name')
            RoomName= request.args.get('Email')
            RoomNumber= request.args.get('Name')

            apply = []

            if(MOID !='' and MOID !=None):
                apply.append(Model.models.Application.M_VaccinationDetails.M_Patient_MPID == MOID)
            if(MBID !='' and MBID !=None):
                apply.append(Model.models.Application.M_VaccinationDetails.MVD_Date == MBID)
            if(MFID !='' and MFID !=None):
                apply.append(Model.models.Application.M_VaccinationDetails.MVD_Time == MFID)
            if(RoomName !='' and RoomName !=None):
                apply.append(Model.models.Application.M_VaccinationDetails.MVD_Age == RoomName)
            if(RoomNumber !='' and RoomNumber !=None):
                apply.append(Model.models.Application.M_VaccinationDetails.M_VaccineType_MVTID == RoomNumber)
            if((MOID!='' and MOID !='') or (MBID!='' and MBID !='') or (MFID!='' and MFID !='') or (RoomName!='' and RoomName !='') or  (RoomNumber !=None and RoomNumber !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getVaccination,
                session.query(Model.models.Application.M_VaccinationDetails.MVDID.label('ID'),
                            Model.models.Application.M_VaccinationDetails.M_Patient_MPID.label('Patient'),
                            Model.models.Application.M_VaccinationDetails.MVD_Date.label('Date'),
                            Model.models.Application.M_VaccinationDetails.MVD_Time.label('Time'),
                            Model.models.Application.M_VaccinationDetails.MVD_Age.label('Age'),
                            Model.models.Application.M_VaccinationDetails.M_VaccineType_MVTID.label('Vaccine Type'),
                            Model.models.Application.M_VaccinationDetails.MVD_TotalDose.label('Total Dose'),
                            Model.models.Application.M_VaccinationDetails.MVD_ConsumedDose.label('Consumed dose')
                                ).filter_by(MVD_IsActive=1,MVD_IsDeleted=0).filter(*apply).all()
                        )
            else:
                queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getVaccination,
                session.query(Model.models.Application.M_VaccinationDetails.MVDID.label('ID'),
                            Model.models.Application.M_VaccinationDetails.M_Patient_MPID.label('Patient'),
                            Model.models.Application.M_VaccinationDetails.MVD_Date.label('Date'),
                            Model.models.Application.M_VaccinationDetails.MVD_Time.label('Time'),
                            Model.models.Application.M_VaccinationDetails.MVD_Age.label('Age'),
                            Model.models.Application.M_VaccinationDetails.M_VaccineType_MVTID.label('Vaccine Type'),
                            Model.models.Application.M_VaccinationDetails.MVD_TotalDose.label('Total Dose'),
                            Model.models.Application.M_VaccinationDetails.MVD_ConsumedDose.label('Consumed dose')
                                ).filter_by(MVD_IsActive=1,MVD_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/getDynamicForm', methods=['GET'])
def getDynamicForm():
    session=Session()
    try:
        if(request.method == "GET"):
            # FormItems=[]
            getTextField= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getDynamicForm,session.query(Model.models.Application.M_FormControl,
                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Required,'').label('required'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                ).filter_by(MFC_FormName='AddOrgnizForm',MFC_IsActive=1,MFC_IsDeleted=0
                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                ).all()
            )

            getCountry= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.GetCountryid,
                session.query(Model.models.Application.T_Details.TDID.label('key'),
                            Model.models.Application.T_Details.TD_Name.label('label')
                                ).filter_by(M_Details_MDID=1,TD_IsActive=1,TD_IsDeleted=0).all()
                        )
            getState = Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.GetStateid,
                session.query(Model.models.Application.T_Details.TDID.label('key'),
                            Model.models.Application.T_Details.TD_Name.label('label')
                                ).filter_by(M_Details_MDID=2,TD_IsActive=1,TD_IsDeleted=0).all()
                        )
            getCity = Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.GetCityid,
                session.query(Model.models.Application.T_Details.TDID.label('key'),
                            Model.models.Application.T_Details.TD_Name.label('label')
                                ).filter_by(M_Details_MDID=3,TD_IsActive=1,TD_IsDeleted=0).all()
                        )

            getTextField[7]['Options'] = getCountry

            getTextField[8]['Options'] = getState

            getTextField[9]['Options'] = getCity

            # getFormDtls = getTextField
            # Countries = [p for p in getCountry]

            # if Countries:
            #     getTextField[7]['Options'] = Countries
            # #FormItems.append(getFormDtls)

            # #getFormDtls = getStateField
            # States = [p for p in getState]
            # if States:
            #     getTextField[8]['Options'] = States
            # #FormItems.append(getFormDtls)

            # #getFormDtls = getCityField
            # Cities = [p for p in getCity]
            # if Cities:
            #     getTextField[9]['Options'] = Cities

            #FormItems.append(getFormDtls)

            # for dtl in getTextField:
            #     FormItems.append(dtl)

            # getFormDtls = getCountryField
            # Countries = [p for p in getCountry]

            # if Countries:
            #     getFormDtls[0]['Options'] = Countries
            # FormItems.append(getFormDtls)

            # getFormDtls = getStateField
            # States = [p for p in getState]
            # if States:
            #     getFormDtls[0]['Options'] = States
            # FormItems.append(getFormDtls)

            # getFormDtls = getCityField
            # Cities = [p for p in getCity]
            # if Cities:
            #     getFormDtls[0]['Options'] = Cities
            # FormItems.append(getFormDtls)
            #result = [d.__dict__ for d in queryresult]
            #return jsonify(result=queryresult) #IFNULL(columnName, '')
            #return json.dumps( [dict(ix) for ix in queryresult] )
           # return jsonify(result= [dict(x) for x in queryresult] )
#             select
#    -> fullname,
#    -> substring_index(fullname, ',', 1) First_Name,
#    -> substring_index(fullname, ',', -1) Last_Name
#    -> from demo79;
            #return jsonify(result= [{'MFC_Label':x.MFC_Label,'MFC_SetId':x.MFC_SetId,'MFC_FormId':x.MFC_FormId,'MFC_Required':x.MFC_Required,'MFC_Regex':x.MFC_Regex,'MFC_InitialValue':x.MFC_InitialValue,'MFC_preference':x.MFC_preference,'data':[{'MFC_Data_Column':x.MFC_Data_Column,'MFC_Data_Table':x.MFC_Data_Table}]} for x in queryresult] )
            # data = []
            # for row in queryresult:
            #     data.append([x for x in row]) # or simply data.append(list(row))
            return jsonify(result=getTextField)
    finally:
        session.close()

@app.route('/getOrganization', methods=['GET'])
def getOrganization():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.OrgDtl,
                session.query(Model.models.Application.M_Organisation.MOID,
                            Model.models.Application.M_Organisation.MO_Name
                                ).filter_by(MO_IsActive=1,MO_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getClinicAllDtls', methods=['GET'])
def getClinicAllDtls():
    session=Session()
    try:
        if(request.method == "GET"):
            query="""select (select MO_Name from m_organisation where MOID = Mb.M_Organisation_MOID) as Organisation,Mb.MB_Name as Name,Mb.MB_Email as Email,Mb.MB_Mobile as Mobile,(select TD_Name from T_Details where TDID = Mb.MB_City) as City,(select TD_Name from T_Details where TDID = Mb.MB_State) as State,(select TD_Name from T_Details where TDID = Mb.MB_Country) as Country,Mb.MB_PinCode as PinCode,Mb.MB_Address as Address,CONCAT(cl.MCT_ClinicOpenTime,' ',(select TD_Name from T_Details where TDID = cl.MCT_ClinicOpenTimePeriod)) as OpenTime,CONCAT(cl.MCT_ClinicCloseTime,' ',(select TD_Name from T_Details where TDID = cl.MCT_ClinicCloseTimePeriod)) as CloseTime from m_branch Mb join m_clinictiming cl on cl.M_Branch_MBID=Mb.MBID where MB_IsActive=1 and MB_IsDeleted=0;"""
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getClinicAllDtls,
                session.execute(query).fetchall())
            # cur.execute("UPDATE students SET name=%s, class=%s, town=%s, roll=%s WHERE id=%s", (requestData["name"],requestData["class"],requestData["town"],requestData["roll"],requestData["id"]))
            # db.commit()
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getClinic', methods=['GET'])
def getClinic():
    session=Session()
    try:
        if(request.method == "GET"):
            ID= request.args.get('id')
            if not ID:
                queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getClinic,
                session.query(Model.models.Application.M_Branch.MBID,
                            Model.models.Application.M_Branch.MB_Name,
                            ).filter_by(MB_IsActive=1,MB_IsDeleted=0).all()
                        )
            else:
                queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getClinic,
                session.query(Model.models.Application.M_Branch.MBID,
                            Model.models.Application.M_Branch.MB_Name,
                            ).filter_by(MBID=int(ID),MB_IsActive=1,MB_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAllMenu', methods=['GET'])
def getAllMenu():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getAllMenu,
                session.query(Model.models.Application.M_Menu.MMID.label('ID'),
                            Model.models.Application.M_Menu.MM_State.label('state'),
                            Model.models.Application.M_Menu.MM_Name.label('name'),
                            Model.models.Application.M_Menu.MM_Type.label('type'),
                            Model.models.Application.M_Menu.MM_Icon.label('icon')
                                ).filter_by(MM_IsActive=1,MM_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getMenuItems', methods=['GET'])
def getMenuItems():
    session=Session()
    try:
        if(request.method == "GET"):
            menuItem = []
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getcorrectMenu,
                session.query(Model.models.Application.M_Menu.MMID.label('ID'),
                            Model.models.Application.M_Menu.MM_State.label('state'),
                            Model.models.Application.M_Menu.MM_Name.label('name'),
                            Model.models.Application.M_Menu.MM_Type.label('type'),
                            Model.models.Application.M_Menu.MM_Icon.label('icon'),
                            Model.models.Application.M_Menu.MM_Level.label('level'),
                            Model.models.Application.M_Menu.MM_Parent.label('parent')
                                ).filter_by(MM_IsActive=1,MM_IsDeleted=0
                            ).order_by(Model.models.Application.M_Menu.MM_Parent).all()
                        )
            # print(queryresult)

            # for x in queryresult:
            #     getMenuItems = x
            #     filtered_arr = [p for p in queryresult if p['parent'] == x['ID']]
            #     if filtered_arr:
            #         getMenuItems['children'] = filtered_arr

            #     if x['parent'] == 0:

            #         menuItem.append(getMenuItems)
            #print(menuItem)
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getUserRights', methods=['GET'])
def getUserRights():
    session=Session()
    try:
        if(request.method == "GET"):
            menuItem = []
            getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.CreateRightJSON,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('name')
                        ).filter_by(MFC_FormName='CreateRightJSON',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).all())
            # Rights = Common_Function.CommonFun.Rights()
            # Columns= [row[0] for row in Rights]

            Columns= {'View':False, 'Add':False, 'Edit':False, 'Delete':False, 'Active':False}
            # print(Columns)
            Pages = Common_Function.CommonFun.Pages()
            Rights = getDoctor # [row[0] for row in getDoctor]
            # print(Pages)

            def Merge(dict1, dict2):
                res = {**dict1, **dict2}
                return res

            dict1 = Columns
            for row in Pages:

                dict2 = row
                dict3 = Merge(dict2, dict1)
                menuItem.append(dict3)
            RightId = {"View": 4,"Add": 5,"Edit": 6,"Delete": 7,"Active": 8}
            getFormRow[0]['value']=menuItem
            RightsCols = Common_Function.CommonFun.RightsCols()
            getFormRow[0]['children'] = RightsCols
            getFormRow[0]['rigthsId'] = RightId

            return jsonify(getFormRow) #json.dumps(getFormRow)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/userRightsData', methods=['GET','POST'])
def userRightsData():
    session=Session()
    try:
        if(request.method == "POST"):
            menuItem = []
            request_json = request.get_json()
            pageUrl = request_json.get('pageUrl')
            pageId = Common_Function.CommonFun.getPageId(pageUrl)
            token= request.headers.get('Authorization')
            branchId= request.headers.get('branchId')
            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            userId = data['id']
            policyId = Common_Function.CommonFun.getpolicyId(branchId,userId)
            print(pageUrl,pageId,branchId,userId,policyId)
            getFormRow= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getUserRightsForm,
                    session.query(Model.models.Application.M_PolicyRights.M_Pages_MPID,
                                     Model.models.Application.M_Pages.MP_PageParent.label('Page'),
                                     Model.models.Application.M_Rights.MR_Name.label('Right'),
                                     Model.models.Application.M_PolicyRights.M_Rights_MRID,
                                     Model.models.Application.M_PolicyRights.MPR_IsAssign.label('Assign')
                        #).filter_by(M_Pages_MPID=32,M_Policy_MPID=50,MP_IsActive=1,MP_IsDeleted=0
                        ).filter_by(M_Pages_MPID=pageId,M_Policy_MPID=policyId,MP_IsActive=1,MP_IsDeleted=0
                        ).join(Model.models.Application.M_Pages,
                        Model.models.Application.M_Pages.MPID==Model.models.Application.M_PolicyRights.M_Pages_MPID
                        ).join(Model.models.Application.M_Rights,
                        Model.models.Application.M_Rights.MRID==Model.models.Application.M_PolicyRights.M_Rights_MRID
                        ).all())
            # data = []
            # for row in getFormRow:
            #     data.append([x for x in row])

            return jsonify(result=getFormRow) #jsonify(getFormRow)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getxyz', methods=['GET'])
def getxyz():
    session=Session()
    try:
        if(request.method == "GET"):
            data = {}
            fun = ['add','edit','delete']
            for f in fun:

                queryresult= session.query(Model.models.Application.M_PolicyRights.M_Rights_MRID
                                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0,M_Policy_MPID=23).all()
                data[f] = queryresult[0].M_Rights_MRID
            #     # print(queryresult[0].f)
            # for row in queryresult:
            #         data.append(x for x in row)
            #         for row in getFormRow:
            #     # data.append([x for x in row])
            #     data[f] = x for x in row
            return jsonify(data)  #json.dumps(data)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitUserRights', methods=['GET','POST'])
def submitUserRights():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            policyName = request_json.get('PolicyName')
            parentPolicy = request_json.get('ParentPolicy')
            # user = request_json.get('User')
            # branch = request_json.get('Branch')
            rights = request_json.get('rights')

            Insert=Model.models.Application.M_Policy()
            Insert.MP_PolicyName=policyName
            Insert.MP_PolicyParent=parentPolicy
            Insert.MP_AddDate=datetime.datetime.now()
            session.add(Insert)
            session.commit()

            Policy = session.query(Model.models.Application.M_Policy.MPID
                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0).order_by(Model.models.Application.M_Policy.MPID.desc()).all()
            
            for joson in rights:
                PageId =joson.get('PageId')
                rights =joson.get('rights')
                x = rights.split(",")
                RightID = x[0]
                Assigned = int(x[1])

                Insert=Model.models.Application.M_PolicyRights()
                Insert.M_Policy_MPID=Policy[0].MPID
                Insert.M_Pages_MPID=PageId
                Insert.M_Rights_MRID=RightID
                Insert.MPR_IsAssign=Assigned
                Insert.MP_AddDate=datetime.datetime.now()
                session.add(Insert)
                session.commit()
            return jsonify({'msg':'Policy Created Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AssignPolicyUserRights', methods=['GET','POST'])
def AssignPolicyUserRights():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()
            policyName = request_json.get('PolicyName')
            user = request_json.get('User')
            branch = request_json.get('Branch')
            
            for userss in user:
                users = userss.get('key')
                for branchs in branch:
                    branchses = branchs.get('key')
                    Insert=Model.models.Application.M_AssignRole()
                    Insert.M_Users_MUID=users
                    Insert.M_Policy_MPID=policyName
                    Insert.M_Branch_MBID=branchses
                    Insert.MP_AddDate=datetime.datetime.now()
                    session.add(Insert)
                    session.commit()

            
            return jsonify({'msg':'Policy Assigned Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getPolicyDetails', methods=['GET','POST'])
def getPolicyDetails():
    session=Session()
    try:
        if(request.method == "GET"):


            # session.query(Model.models.Application.M_Policy.MP_PolicyName,
            #             Model.models.Application.M_Policy.MP_PolicyParent.label('Policy Parent')
            #             ).join(Model.models.Application.M_Policy,
            #             Model.models.Application.M_Policy.MPID==Model.models.Application.M_AssignRole.M_Policy_MPID
            #                             ).subquery()

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getPolicyDetails,
                    session.query(Model.models.Application.M_AssignRole.MARID.label('PolicyId'),
                                  Model.models.Application.M_Policy.MP_PolicyName.label('Policy'),
                                # Model.models.Application.M_Policy.MP_PolicyParent.label('Policy Parent'),
                                Model.models.Application.M_Users.MU_Name.label('User'),
                                Model.models.Application.M_Branch.MB_Name.label('Branch')
                                ).filter(Model.models.Application.M_AssignRole.MP_IsDeleted==0
                                ).join(Model.models.Application.M_Users, Model.models.Application.M_Users.MUID==Model.models.Application.M_AssignRole.M_Users_MUID
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_AssignRole.M_Branch_MBID
                                ).join(Model.models.Application.M_Policy, Model.models.Application.M_Policy.MPID==Model.models.Application.M_AssignRole.M_Policy_MPID
                                        ).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        elif(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('name')
            Email = request_json.get('email')
            mobile = request_json.get('mobile')
            username = request_json.get('username')

            apply = []

            if(Name !='' and Name !=None):
                apply.append(Model.models.Application.M_Users.MU_Name.contains(Name))
            if(Email !='' and Email !=None):
                apply.append(Model.models.Application.M_Users.MU_Email.contains(Email))
            if(mobile !='' and mobile !=None):
                apply.append(Model.models.Application.M_Users.MU_Mobile.contains(mobile))
            if(username !='' and username !=None):
                apply.append(Model.models.Application.M_Users.MU_Username.contains(username))

            if((Name!='' and Name !=None) or (Email!='' and Email !=None) or (mobile!='' and mobile !=None) or (username!='' and username !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getUsers,
                    session.query(Model.models.Application.M_Users.MUID.label('Id'),
                                Model.models.Application.M_Users.MU_Name.label('Name'),
                                Model.models.Application.M_Users.MU_Email.label('Email'),
                                Model.models.Application.M_Users.MU_Mobile.label('Mobile'),
                                Model.models.Application.M_Users.MU_Username.label('Username'),
                                Model.models.Application.M_Users.MU_IsActive.label('Status')
                                ).filter_by(MU_IsDeleted=0).filter(*apply).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
            else:
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getUsers,
                    session.query(Model.models.Application.M_Users.MUID.label('Id'),
                                Model.models.Application.M_Users.MU_Name.label('Name'),
                                Model.models.Application.M_Users.MU_Email.label('Email'),
                                Model.models.Application.M_Users.MU_Mobile.label('Mobile'),
                                Model.models.Application.M_Users.MU_Username.label('Username'),
                                Model.models.Application.M_Users.MU_IsActive.label('Status')
                                ).filter_by(MU_IsDeleted=0).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()



@app.route('/deletePolicyDetails', methods=['POST','GET'])
def deletePolicyDetails():
    session=Session()
    try:
        if(request.method == "POST"):
            Id=request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_AssignRole).filter(Model.models.Application.M_AssignRole.MARID==Id).update({Model.models.Application.M_AssignRole.MP_IsDeleted:1,Model.models.Application.M_AssignRole.MP_ModDate:datetime.datetime.now()})
                session.commit()
                # session.query(Model.models.Application.M_Policy).filter(Model.models.Application.M_Policy.MPID==Id).update({Model.models.Application.M_Policy.MP_IsDeleted:1,Model.models.Application.M_Policy.MP_ModDate:datetime.datetime.now()})
                # session.commit()
                # session.query(Model.models.Application.M_PolicyRights).filter(Model.models.Application.M_PolicyRights.M_Policy_MPID==Id).update({Model.models.Application.M_PolicyRights.MP_IsDeleted:1,Model.models.Application.M_PolicyRights.MP_ModDate:datetime.datetime.now()})
                # session.commit()
                return jsonify({'msg':'Right  Deleted Successfully'})
            else:
                return jsonify({'msg':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()

@app.route('/getPolicyCreationForm', methods=['POST','GET'])
def getPolicyCreationForm():
    session=Session()
    try:
        if(request.method == "GET"):
            getNameField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddUserRightsFormRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                        ).filter_by(MFC_FormName='AddUserRightsFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddUserRightsForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                        ).filter_by(MFC_FormName='PolicyCreationForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

            Validation= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.Validation,
                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                            Model.models.Application.M_validations.MV_Message.label('message')
                                ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                        )
            # getTextField[2]['options'] = Common_Function.CommonFun.getClinic()
            # getTextField[0]['options'] = Common_Function.CommonFun.Policy()
            # getTextField[1]['options'] = Common_Function.CommonFun.Users()
            getTextField[0]['validations']= Validation
            # getTextField[1]['validations']= Validation
            # getTextField[2]['validations']= Validation
            # getTextField[3]['validations']= Validation

            getNameField[0]['childControl']= getTextField

            return jsonify(result=getNameField)
    finally:
        session.close()

@app.route('/getAssignPolicyForm', methods=['POST','GET'])
def getAssignPolicyForm():
    session=Session()
    try:
        if(request.method == "GET"):
            getNameField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddUserRightsFormRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                        ).filter_by(MFC_FormName='AddUserRightsFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddUserRightsForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                        ).filter_by(MFC_FormName='AddUserRightsForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

            Validation= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.Validation,
                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                            Model.models.Application.M_validations.MV_Message.label('message')
                                ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                        )
            getTextField[2]['options'] = Common_Function.CommonFun.getClinic()
            getTextField[0]['options'] = Common_Function.CommonFun.Policy()
            getTextField[1]['options'] = Common_Function.CommonFun.Users()
            getTextField[0]['validations']= Validation
            getTextField[1]['validations']= Validation
            getTextField[2]['validations']= Validation
            # getTextField[3]['validations']= Validation

            getNameField[0]['childControl']= getTextField

            return jsonify(result=getNameField)
    finally:
        session.close()


@app.route('/AddCreateUserForm', methods=['POST','GET'])
def AddCreateUserForm():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddNewUserRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddNewUserRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddNewUserForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddNewUserForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            # getDiscountType= Common_Function.CommonFun.getDiscountType()

        getTextField2= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddNewUserForms,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddNewUserForm2',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        Validation= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.Validation,
                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                            Model.models.Application.M_validations.MV_Message.label('message')
                                ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                        )
        UserType = Common_Function.CommonFun.UserType()
        getTextField[0]['validations']=Validation
        getTextField[1]['validations']=Validation
        getTextField2[2]['validations']= Validation
        getTextField[3]['validations']= Validation
        getTextField2[3]['validations']= Validation
        getTextField2[0]['validations']= Validation
        getTextField2[1]['options']= UserType
        getTextField2[1]['validations']= Validation
        getTextField[1]['validations']= Validation
        getFormRow[0]['childControl']= getTextField
        getFormRow[1]['childControl']= getTextField2
        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            JSONFile=request.get_json()
            Id=JSONFile.get('Id')
            queryresult= session.query(Model.models.Application.M_Users.MU_Name,
                                Model.models.Application.M_Users.MU_Email,
                                Model.models.Application.M_Users.MU_Mobile,
                                Model.models.Application.M_Users.MU_PersonalEmail,
                                Model.models.Application.M_Users.MU_Username,
                                Model.models.Application.M_Users.MU_UserType,
                                Model.models.Application.M_Users.MU_Password,
                                Model.models.Application.M_Users.MU_ConfirmPassword
                                ).filter_by(MUID=int(Id),MU_IsActive=1,MU_IsDeleted=0).all()
            UserType = Common_Function.CommonFun.UserType()
            getTextField[0]['value']=queryresult[0].MU_Name
            getTextField[1]['value']=queryresult[0].MU_Email
            getTextField[2]['value']= queryresult[0].MU_PersonalEmail
            getTextField[3]['value']= queryresult[0].MU_Mobile
            getTextField2[0]['value']= queryresult[0].MU_Username
            getTextField2[1]['value']= queryresult[0].MU_UserType
            getTextField2[2]['value']= queryresult[0].MU_Password
            getTextField2[3]['value']= queryresult[0].MU_ConfirmPassword
            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/submitCreateUserForm', methods=['GET','POST'])
def submitCreateUserForm():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()

            MU_Name =request_json.get('name')
            MU_Email =request_json.get('email')
            MU_PersonalEmail = request_json.get('personalEmail')
            MU_Mobile = request_json.get('Mobile')
            M_Username =request_json.get('UserName')
            MU_UserType =request_json.get('usertype')
            MU_Password = request_json.get('pswd')
            MU_ConfirmPassword = request_json.get('confpswd')
            reg = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!#%*?&]{8,20}$"
            ID = request_json.get('ID')
            if(ID=='' or ID==None):

                if(MU_Password==MU_ConfirmPassword):
                    MU_Username = session.query(Model.models.Application.M_Users.MU_Name
                                                ).filter_by(MU_Username=M_Username,MU_IsActive=1,MU_IsDeleted=0).all()
                    if(len(MU_Username)==0):
                        pat = re.compile(reg)

                        mat = re.search(pat, MU_Password)
                        if mat:
                            if(MU_Password!='' and MU_Password!=None and M_Username!='' and M_Username!=None and MU_Name!='' and MU_Name!=None):                    
                                Insert=Model.models.Application.M_Users()
                                Insert.MU_Name=MU_Name
                                Insert.MU_Email=MU_Email
                                Insert.MU_PersonalEmail=MU_PersonalEmail
                                Insert.MU_Mobile=MU_Mobile
                                Insert.MU_Username= M_Username
                                Insert.MU_UserType=MU_UserType
                                Insert.MU_Password= MU_Password
                                Insert.MU_ConfirmPassword= MU_ConfirmPassword
                                Insert.MU_AddIP= flask.request.remote_addr
                                Insert.MU_AddDate=datetime.datetime.now()
                                session.add(Insert)
                                session.commit()
                                URL = 'https://portal.continuakids.com/login'
                                Common_Function.MailFun.SendRegistration_Mail(MU_Name,MU_Email,M_Username,MU_Password,URL)
                                return jsonify({'msg':'User Added Successfully'})
                        else:
                            return jsonify({'err':'Please Enter Password in correct format'})
                    else:
                        return jsonify({'err':'Username Already taken'})
                else:
                    return jsonify({'err':'Password not matched'})
            else:
                if(MU_Password==MU_ConfirmPassword):
                    # MU_Username = session.query(Model.models.Application.M_Users.MU_Name
                    #                             ).filter_by(MU_Username=M_Username,MUID=ID,MU_IsActive=1,MU_IsDeleted=0).all()
                    # if(len(MU_Username)==0):
                    pat = re.compile(reg)

                    mat = re.search(pat, MU_Password)
                    if mat:
                        Insert=session.query(Model.models.Application.M_Users).get(ID)
                        Insert.MU_Name=MU_Name
                        Insert.MU_Email=MU_Email
                        Insert.MU_PersonalEmail=MU_PersonalEmail
                        Insert.MU_Mobile=MU_Mobile
                        Insert.MU_Username= M_Username
                        Insert.MU_UserType=MU_UserType
                        Insert.MU_Password= MU_Password
                        Insert.MU_ConfirmPassword= MU_ConfirmPassword
                        Insert.MU_AddIP= flask.request.remote_addr
                        Insert.MU_ModDate=datetime.datetime.now()
                        session.commit()
                        return jsonify({'msg':'User Updated Successfully'})
                    else:
                        return jsonify({'err':'Please Enter Password in correct format'})
                    # else:
                    #     return jsonify({'err':'Username Already taken'})
                else:
                    return jsonify({'err':'Password not matched'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/getUsers', methods=['GET','POST'])
def getUsers():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getUserss,
                    session.query(Model.models.Application.M_Users.MUID.label('Id'),
                                Model.models.Application.M_Users.MU_Name.label('Name'),
                                Model.models.Application.M_Users.MU_Email.label('Email'),
                                Model.models.Application.M_Users.MU_Mobile.label('Mobile'),
                                Model.models.Application.M_Users.MU_Username.label('Username'),
                                Model.models.Application.M_UserType.MU_UserName.label('Type'),
                                Model.models.Application.M_Users.MU_UserType.label('User'),
                                Model.models.Application.M_Users.MU_IsActive.label('Status')
                                ).filter_by(MU_IsDeleted=0
                                ).join(Model.models.Application.M_UserType,Model.models.Application.M_UserType.MU_UserType == Model.models.Application.M_Users.MU_UserType
                                ).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        elif(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('name')
            Email = request_json.get('email')
            mobile = request_json.get('mobile')
            username = request_json.get('username')

            apply = []

            if(Name !='' and Name !=None):
                apply.append(Model.models.Application.M_Users.MU_Name.contains(Name))
            if(Email !='' and Email !=None):
                apply.append(Model.models.Application.M_Users.MU_Email.contains(Email))
            if(mobile !='' and mobile !=None):
                apply.append(Model.models.Application.M_Users.MU_Mobile.contains(mobile))
            if(username !='' and username !=None):
                apply.append(Model.models.Application.M_Users.MU_Username.contains(username))

            if((Name!='' and Name !=None) or (Email!='' and Email !=None) or (mobile!='' and mobile !=None) or (username!='' and username !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getUserss,
                    session.query(Model.models.Application.M_Users.MUID.label('Id'),
                                Model.models.Application.M_Users.MU_Name.label('Name'),
                                Model.models.Application.M_Users.MU_Email.label('Email'),
                                Model.models.Application.M_Users.MU_Mobile.label('Mobile'),
                                Model.models.Application.M_Users.MU_Username.label('Username'),
                                Model.models.Application.M_UserType.MU_UserName.label('Type'),
                                Model.models.Application.M_Users.MU_UserType.label('User'),
                                Model.models.Application.M_Users.MU_IsActive.label('Status')
                                ).filter_by(MU_IsDeleted=0).filter(*apply
                                ).join(Model.models.Application.M_UserType,Model.models.Application.M_UserType.MU_UserType == Model.models.Application.M_Users.MU_UserType
                                ).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
            else:
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getUserss,
                    session.query(Model.models.Application.M_Users.MUID.label('Id'),
                                Model.models.Application.M_Users.MU_Name.label('Name'),
                                Model.models.Application.M_Users.MU_Email.label('Email'),
                                Model.models.Application.M_Users.MU_Mobile.label('Mobile'),
                                Model.models.Application.M_Users.MU_Username.label('Username'),
                                Model.models.Application.M_UserType.MU_UserName.label('Type'),
                                Model.models.Application.M_Users.MU_UserType.label('User'),
                                Model.models.Application.M_Users.MU_IsActive.label('Status')
                                ).filter_by(MU_IsDeleted=0
                                ).join(Model.models.Application.M_UserType,Model.models.Application.M_UserType.MU_UserType == Model.models.Application.M_Users.MU_UserType
                                ).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteUsers', methods=['POST','GET'])
def deleteUsers():
    session=Session()
    try:
        if(request.method == "POST"):
            Id= request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_Users).filter(Model.models.Application.M_Users.MUID==Id).update({Model.models.Application.M_Users.MU_IsDeleted:1,Model.models.Application.M_Users.MU_ModDate:datetime.datetime.now()})
                session.commit()
                return jsonify({'msg':'User Deleted Successfully'})
            else:
                return jsonify({'msg':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()

@app.route('/ActivateUsers', methods=['POST'])
def ActivateUsers():
    session=Session()
    try:
        if(request.method == "POST"):
            Id=request.get_json()

            if(Id != '' and Id != None):
                Status = session.query(Model.models.Application.M_Users.MU_IsActive
                              ).filter_by(MUID=Id).all()
                if(Status[0].MU_IsActive==True):

                    session.query(Model.models.Application.M_Users).filter_by(MUID = Id).update({Model.models.Application.M_Users.MU_IsActive:0})
                    session.commit()
                    return jsonify({'msg':'User InActivated Successfully'})
                else:
                    session.query(Model.models.Application.M_Users).filter_by(MUID = Id).update({Model.models.Application.M_Users.MU_IsActive:1})
                    session.commit()
                    return jsonify({'msg':'User Activated Successfully'})
            else:
                return jsonify({'err':'Something went wrong'})
        else:
            return jsonify({'err':'Wrong method used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/SearchUserForm', methods=['POST','GET'])
def SearchUserForm():
    session=Session()
    try:
        if(request.method == "GET"):
            getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.SearchAllUser,
                                session.query(Model.models.Application.M_FormControl,
                                        sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                        sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                        sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                        sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                        Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                        sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                        sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                            ).filter_by(MFC_FormName='SearchAllUser',MFC_IsActive=1,MFC_IsDeleted=0
                                        ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                            ).all())

            return jsonify(result=getFormRow)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddServiceCategoryForm', methods=['POST','GET'])
def AddServiceCategoryForm():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServiceCategoryRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServiceCategoryRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServiceCategoryForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServiceCategoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField2= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServiceCategoryForms,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServiceCategoryForm2',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        # Validation= Common_Function.CommonFun.convertToJson(
        #         Constant.constant.constant.Validation,
        #         session.query(Model.models.Application.M_validations.MV_Name.label('name'),
        #                     Model.models.Application.M_validations.MV_Pattern.label('pattern'),
        #                     Model.models.Application.M_validations.MV_Message.label('message')
        #                         ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
        #                 )

        # getTextField[0]['validations']= Validation
        # getTextField2[0]['validations']= Validation
        # getTextField2[1]['validations']= Validation

        getFormRow[0]['childControl']= getTextField
        getFormRow[1]['childControl']= getTextField2
        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()

            queryresult= session.query(func.concat(Model.models.Application.M_Service.MS_FilePath,'/',Model.models.Application.M_Service.MS_FileName).label('Image'),
                                Model.models.Application.M_Service.MS_CategoryName,
                                Model.models.Application.M_Service.MS_Description,
                                ).filter_by(MSID=Id,MS_IsActive=1,MS_IsDeleted=0).all()
            getTextField2[0]['value']=queryresult[0].MS_CategoryName
            getTextField2[1]['value']=queryresult[0].MS_Description

            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/submitServiceCategoryForm', methods=['GET','POST'])
def submitServiceCategoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            Data= request.form.get('data')
            if(Data!='' or Data !=None):
                getjson= json.loads(Data)
                categoryName =getjson['categoryName']
                description =getjson['description']
                ServiceFile = request.files['files[]']
                FilePath = 'static/ServiceImages'
                if(ServiceFile.filename!='' and ServiceFile.filename!= None):
                    date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                    name, ext = os.path.splitext(ServiceFile.filename)
                    files = 'ServiceImage_'+ name +'_' + date  + ext
                    fileName=files
                    if(os.path.exists(FilePath)):
                        ServiceFile.save(os.path.join(FilePath, fileName))
                        print(ServiceFile.filename)
                    else:
                        os.makedirs(FilePath)
                        ServiceFile.save(os.path.join(FilePath, fileName))
                ID = getjson['ID']
                if(ID=='' or ID==None):
                    Insert=Model.models.Application.M_Service()
                    Insert.MS_FileName=fileName
                    Insert.MS_FilePath=FilePath
                    Insert.MS_CategoryName=categoryName
                    Insert.MS_Description=description
                    Insert.MS_AddIP= flask.request.remote_addr
                    Insert.MS_AddDate=datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'Category Added Successfully'})

                else:
                    Insert=session.query(Model.models.Application.M_Service).get(ID)
                    Insert.MS_FileName=fileName
                    Insert.MS_FilePath=FilePath
                    Insert.MS_CategoryName=categoryName
                    Insert.MS_Description=description
                    Insert.MS_AddIP= flask.request.remote_addr
                    Insert.MS_ModDate=datetime.datetime.now()
                    session.commit()
                    return jsonify({'msg':'Category Updated Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getServiceCategory', methods=['GET','POST'])
def getServiceCategory():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getServiceCategory,
                    session.query(Model.models.Application.M_Service.MSID.label('Id'),
                                Model.models.Application.M_Service.MS_CategoryName.label('Name'),
                                Model.models.Application.M_Service.MS_Description.label('Description'),
                                Model.models.Application.M_Service.MS_IsActive.label('Active')
                                ).filter_by(MS_IsDeleted=0
                                ).order_by(Model.models.Application.M_Service.MSID.desc()).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        elif(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')
            Discription = request_json.get('Discription')
            apply = []
            if(Name !='' and Name !=None):
                apply.append(Model.models.Application.M_Service.MS_CategoryName.contains(Name))
            if(Discription !='' and Discription !=None):
                apply.append(Model.models.Application.M_Service.MS_Description.contains(Discription))

            if((Name!='' and Name !=None) or (Discription!='' and Discription !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getService,
                    session.query(Model.models.Application.M_Service.MS_CategoryName.label('Name'),
                                Model.models.Application.M_Service.MS_Description.label('Discription')
                                ).filter_by(MS_IsDeleted=0).filter(*apply
                            ).order_by(Model.models.Application.M_Service.MSID.desc()).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
            else:
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getService,
                    session.query(Model.models.Application.M_Service.MS_CategoryName.label('Name'),
                                Model.models.Application.M_Service.MS_Description.label('Discription')
                                ).filter_by(MS_IsDeleted=0
                            ).order_by(Model.models.Application.M_Service.MSID.desc()).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteServiceCategory', methods=['POST','GET'])
def deleteServiceCategory():
    session=Session()
    try:
        if(request.method == "POST"):
            Id= request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_Service).filter(Model.models.Application.M_Service.MSID==Id).update({Model.models.Application.M_Service.MS_IsDeleted:1})
                session.commit()
                return jsonify({'msg':'category Deleted Successfully'})
            else:
                return jsonify({'msg':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()

@app.route('/ActivateServiceCategory', methods=['POST'])
def ActivateServiceCategory():
    session=Session()
    try:
        if(request.method == "POST"):
            Id=request.get_json()

            if(Id != '' and Id != None):
                Status = session.query(Model.models.Application.M_Service.MS_IsActive
                              ).filter_by(MSID=Id).all()
                if(Status[0]==1):

                    session.query(Model.models.Application.M_Service).filter_by(MSID = Id).update({Model.models.Application.M_Service.MS_IsActive:0})
                    session.commit()
                    return jsonify({'msg':'User InActivated Successfully'})
                else:
                    session.query(Model.models.Application.M_Service).filter_by(MSID = Id).update({Model.models.Application.M_Service.MS_IsActive:1})
                    session.commit()
                    return jsonify({'msg':'User Activated Successfully'})
            else:
                return jsonify({'err':'Something went wrong'})
        else:
            return jsonify({'err':'Wrong method used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddPreTreatmentForm', methods=['POST','GET'])
def AddPreTreatmentForm():
    session=Session()
    try:
        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddPreTreatmentFormRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddPreTreatmentFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServiceCategoryForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddPreTreatmentForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        #
        # Validation= Common_Function.CommonFun.convertToJson(
        #         Constant.constant.constant.Validation,
        #         session.query(Model.models.Application.M_validations.MV_Name.label('name'),
        #                     Model.models.Application.M_validations.MV_Pattern.label('pattern'),
        #                     Model.models.Application.M_validations.MV_Message.label('message')
        #                         ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
        #                 )

        # getTextField[0]['validations']= Validation
        # getTextField2[0]['validations']= Validation
        # getTextField2[1]['validations']= Validation

        getFormRow[0]['childControl']= getTextField

        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()
            # Id=JSONFile.get('Id')
            queryresult= session.query(func.concat(Model.models.Application.M_Service.MS_FilePath,'/',Model.models.Application.M_Service.MS_FileName).label('Image'),
                                Model.models.Application.M_Service.MS_CategoryName,
                                Model.models.Application.M_Service.MS_Description,
                                ).filter_by(MSID=Id,MS_IsActive=1,MS_IsDeleted=0).all()
            # getTextField2[0]['value']=queryresult[0].MS_CategoryName
            # getTextField2[1]['value']=queryresult[0].MS_Description

            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/AddPostTreatmentForm', methods=['POST','GET'])
def AddPostTreatmentForm():
    session=Session()
    try:
        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddPostTreatmentForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddPostTreatmentFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServiceCategoryForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddPostTreatmentForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        #
        # Validation= Common_Function.CommonFun.convertToJson(
        #         Constant.constant.constant.Validation,
        #         session.query(Model.models.Application.M_validations.MV_Name.label('name'),
        #                     Model.models.Application.M_validations.MV_Pattern.label('pattern'),
        #                     Model.models.Application.M_validations.MV_Message.label('message')
        #                         ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
        #                 )

        # getTextField[0]['validations']= Validation
        # getTextField2[0]['validations']= Validation
        # getTextField2[1]['validations']= Validation

        getFormRow[0]['childControl']= getTextField

        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()
            # Id=JSONFile.get('Id')
            queryresult= session.query(func.concat(Model.models.Application.M_Service.MS_FilePath,'/',Model.models.Application.M_Service.MS_FileName).label('Image'),
                                Model.models.Application.M_Service.MS_CategoryName,
                                Model.models.Application.M_Service.MS_Description,
                                ).filter_by(MSID=Id,MS_IsActive=1,MS_IsDeleted=0).all()
            # getTextField2[0]['value']=queryresult[0].MS_CategoryName
            # getTextField2[1]['value']=queryresult[0].MS_Description

            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/ServiceNames', methods=['POST','GET'])
def ServiceNames():
    session=Session()
    try:

        ServiceNames= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.ServiceNames,
                    session.query(Model.models.Application.M_Service.MSID.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MS_IsDeleted=0).all()
                            )
        session.commit()
        getServiceDtl = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getServiceDtls,
                                session.query(Model.models.Application.M_ServicePro.MSP_serviceId.label('key'),
                                Model.models.Application.M_Service.MS_CategoryName.label('label')
                                ).filter_by(MSP_IsActive=1,MSP_IsDeleted=0
                    ).join(Model.models.Application.M_Service,
                    Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId).all())






        return jsonify(result=ServiceNames)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddServicesForm', methods=['POST','GET'])
def AddServicesForm():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicesFormRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicesFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicesFormRow1,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicesFormRow1',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField2= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicesFormRow2,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicesFormRow2',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField3= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicesFormRow3,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicesFormRow3',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField4= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicesFormRow4,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicesFormRow4',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField5= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicesFormRow5,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicesFormRow5',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        # Validation= Common_Function.CommonFun.convertToJson(
        #         Constant.constant.constant.Validation,
        #         session.query(Model.models.Application.M_validations.MV_Name.label('name'),
        #                     Model.models.Application.M_validations.MV_Pattern.label('pattern'),
        #                     Model.models.Application.M_validations.MV_Message.label('message')
        #                         ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
        #                 )
        CategoryType = Common_Function.CommonFun.ServiceCatType()
        getClinic = Common_Function.CommonFun.getClinic()

        getTextField4[0]['options']= CategoryType
        getTextField[1]['options'] = getClinic
        getTextField[2]['options'] = ServiceNames
        # getTextField2[0]['validations']= Validation
        # getTextField2[1]['validations']= Validation

        getFormRow[0]['childControl']= getTextField
        getFormRow[1]['childControl']= getTextField2
        getFormRow[2]['childControl']= getTextField3
        getFormRow[3]['childControl']= getTextField4
        getFormRow[4]['childControl']= getTextField5
        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()

            queryresult= session.query(Model.models.Application.M_ServicePro.MSP_categories,
                                Model.models.Application.M_ServicePro.MSP_Fee,
                                Model.models.Application.M_ServicePro.M_Branch_MBID,
                                Model.models.Application.M_ServicePro.MSP_Duration,
                                Model.models.Application.M_ServicePro.MSP_Bonus,
                                Model.models.Application.M_ServicePro.MSP_SuitedFor,
                                Model.models.Application.M_ServicePro.MSP_ServiceOptions
                                ).filter_by(MSPID=Id,MSP_IsActive=1,MSP_IsDeleted=0).all()
            getTextField[1]['value']=queryresult[0].M_Branch_MBID
            getTextField2[0]['value']=queryresult[0].MSP_Fee
            getTextField2[1]['value']=queryresult[0].MSP_Duration
            getTextField2[2]['value']=queryresult[0].MSP_Bonus
            getTextField4[0]['value']=queryresult[0].MSP_categories
            getTextField3[0]['value']=queryresult[0].MSP_SuitedFor
            getTextField5[0]['value']=queryresult[0].MSP_ServiceOptions

            return jsonify(result=getFormRow)
    
    finally:
        session.close()

@app.route('/submitServicesForm', methods=['GET','POST'])
def submitServicesForm():

    session=Session()
    try:

        if(request.method == "POST"):
            # getjson= request.get_json()
            Data=request.form.get('data')
            ServiceFile= request.files['files[]']
            getjson= json.loads(Data)
            preTreatment =getjson.get('PreTreatmentForm')
            PostTreatment =getjson.get('PostTreatmentForm')
            video =getjson.get('video')
            fee =getjson.get('fee')
            duration =getjson.get('duration')
            bonus =getjson.get('bonus')
            suitedFor =getjson.get('suitedFor')
            categories =getjson.get('categories')
            Branch =getjson.get('Branch')
            serviceId =getjson.get('serviceId')
            serviceOptions =getjson.get('serviceOptions')
            image= request.files['files[]']
            # ServiceFile = about['filectrl']
            # about= json.loads(about)
            # fee =about.get('fee')
            # duration =about.get('duration')
            # bonus =about.get('bonus')
            # suitedFor =about.get('suitedFor')
            # categories =about.get('categories')
            # Branch =about.get('Branch')
            # serviceOptions =about.get('serviceOptions')
            # ServiceFile = about.get('filectrl')
            # serviceId =getjson['serviceId']
            print(ServiceFile.filename)
            FilePath = 'static/ServicesImages'
            if(ServiceFile.filename!='' and ServiceFile.filename!= None):
                date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                name, ext = os.path.splitext(ServiceFile.filename)
                files = 'ServicesImage_'+ str(Branch) +'_' + date  + ext
                fileName=files
                if(os.path.exists(FilePath)):
                    ServiceFile.save(os.path.join(FilePath, fileName))
                    print(ServiceFile.filename)
                else:
                    os.makedirs(FilePath)
                    ServiceFile.save(os.path.join(FilePath, fileName))

                Insert=Model.models.Application.M_ServicePro()
                Insert.MSP_FileName=fileName
                Insert.MSP_FilePath=FilePath
                Insert.MSP_Fee=fee
                Insert.MSP_Duration=duration
                Insert.MSP_Bonus=bonus
                Insert.M_Branch_MBID=Branch
                Insert.MSP_SuitedFor=suitedFor
                Insert.MSP_categories=categories
                Insert.MSP_ServiceOptions=serviceOptions
                Insert.MSP_serviceId=serviceId
                Insert.MSP_AddIP= flask.request.remote_addr
                Insert.MSP_AddDate=datetime.datetime.now()
                session.add(Insert)
                session.commit()
            PackageID = session.query(Model.models.Application.M_ServicePro.MSPID
                                      ).order_by(Model.models.Application.M_ServicePro.MSPID.desc()).first()
            for all in preTreatment:
                Insert=Model.models.Application.M_ServicePreTreatement()
                Insert.MSP_PreTreatement=all
                Insert.MSP_PackageID=PackageID.MSPID
                Insert.MSP_AddIP= flask.request.remote_addr
                Insert.MSP_AddDate= datetime.datetime.now()
                session.add(Insert)
                session.commit()
            for all in PostTreatment:

                Insert=Model.models.Application.M_ServicePostTreatement()
                Insert.MSP_PostTreatement=all
                Insert.MSP_PackageID=PackageID.MSPID
                Insert.MSP_AddIP= flask.request.remote_addr
                session.add(Insert)
                session.commit()
            Insert=Model.models.Application.M_ServiceVideoLink()
            Insert.MS_video = video
            Insert.MS_PackageID = PackageID.MSPID
            Insert.MS_AddIP = flask.request.remote_addr
            Insert.MS_AddDate = datetime.datetime.now()
            session.add(Insert)
            session.commit()
            FilePath = 'static/ServicePackageImg'
            print(image.filename)
            if(image.filename!='' and image.filename!= None):
                date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                name, ext = os.path.splitext(image.filename)
                files = 'ServicePackageImage_'+ str(1) +'_' + date  + ext
                fileName=files
                if(os.path.exists(FilePath)):
                    image.save(os.path.join(FilePath, fileName))
                    print(image.filename)
                else:
                    os.makedirs(FilePath)
                    image.save(os.path.join(FilePath, fileName))

                Insert=Model.models.Application.M_ServicePackageImage()
                Insert.MSP_FilePath = FilePath
                Insert.MSP_FileName = fileName
                Insert.MSP_PackageID = PackageID.MSPID
                Insert.MSP_AddIP = flask.request.remote_addr
                Insert.MSP_AddDate = datetime.datetime.now()
                session.add(Insert)
                session.commit()
            return jsonify({'msg':'Uploaded successfully!'})
            # Data= request.form.get('data')
            # if(Data!='' or Data !=None):
            #     getjson= json.loads(Data)
            #     fee =getjson['fee']
            #     duration =getjson['duration']
            #     bonus =getjson['bonus']
            #     suitedFor =getjson['suitedFor']
            #     categories =getjson['categories']
            #     Branch =getjson['Branch']
            #     serviceOptions =getjson['serviceOptions']
            #     ServiceFile = request.files['files[]']
            #     # serviceId =getjson['serviceId']
            #     FilePath = 'static/ServicesImages'
            #     if(ServiceFile.filename!='' and ServiceFile.filename!= None):
            #         date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
            #         name, ext = os.path.splitext(ServiceFile.filename)
            #         files = 'ServicesImage_'+ str(Branch) +'_' + date  + ext
            #         fileName=files
            #         if(os.path.exists(FilePath)):
            #             ServiceFile.save(os.path.join(FilePath, fileName))
            #             print(ServiceFile.filename)
            #         else:
            #             os.makedirs(FilePath)
            #             ServiceFile.save(os.path.join(FilePath, fileName))
            #     ID = getjson['ID']
            #     if(ID=='' or ID==None):
            #         Insert=Model.models.Application.M_ServicePro()
            #         Insert.MSP_FileName=fileName
            #         Insert.MSP_FilePath=FilePath
            #         Insert.MSP_Fee=fee
            #         Insert.MSP_Duration=duration
            #         Insert.MSP_Bonus=bonus
            #         Insert.M_Branch_MBID=Branch
            #         Insert.MSP_SuitedFor=suitedFor
            #         Insert.MSP_categories=categories
            #         Insert.MSP_ServiceOptions=serviceOptions
            #         # Insert.MSP_serviceId=serviceId
            #         Insert.MSP_AddIP= flask.request.remote_addr
            #         Insert.MSP_AddDate=datetime.datetime.now()
            #         session.add(Insert)
            #         session.commit()
            #         return jsonify({'msg':'Service Added Successfully'})

            #     else:
            #         Insert=session.query(Model.models.Application.M_ServicePro).get(ID)
            #         Insert.MSP_FileName=fileName
            #         Insert.MSP_FilePath=FilePath
            #         Insert.MSP_Fee=fee
            #         Insert.MSP_Duration=duration
            #         Insert.MSP_Bonus=bonus
            #         Insert.M_Branch_MBID=Branch
            #         Insert.MSP_SuitedFor=suitedFor
            #         Insert.MSP_categories=categories
            #         Insert.MSP_ServiceOptions=serviceOptions
            #         # Insert.MSP_serviceId=serviceId
            #         Insert.MSP_AddIP= flask.request.remote_addr
            #         Insert.MSP_ModDate=datetime.datetime.now()
            #         session.commit()
            #         return jsonify({'msg':'Service Updated Successfully'})
            # else:
            #      return jsonify({'err':'Data is not available!! Please check'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getServicesProDtls', methods=['GET','POST'])
def getServicesProDtls():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getPromotionsDtls,
                    session.query(Model.models.Application.M_ServicePro.MSPID.label('Id'),
                                Model.models.Application.M_ServicePro.MSP_Fee.label('Fee'),
                                Model.models.Application.M_ServicePro.MSP_Duration.label('Duration'),
                                Model.models.Application.M_ServicePro.MSP_StartDate.label('From'),
                                Model.models.Application.M_ServicePro.MSP_IsActive.label('Active')
                                ).filter_by(MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_ServicePro.MSPID.desc()).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        elif(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')
            Discription = request_json.get('Discription')
            apply = []
            if(Name !='' and Name !=None):
                apply.append(Model.models.Application.M_Service.MS_CategoryName.contains(Name))
            if(Discription !='' and Discription !=None):
                apply.append(Model.models.Application.M_Service.MS_Description.contains(Discription))

            if((Name!='' and Name !=None) or (Discription!='' and Discription !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getService,
                    session.query(Model.models.Application.M_Service.MS_CategoryName.label('Name'),
                                Model.models.Application.M_Service.MS_Description.label('Discription')
                                ).filter_by(MS_IsDeleted=0).filter(*apply).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
            else:
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getService,
                    session.query(Model.models.Application.M_Service.MS_CategoryName.label('Name'),
                                Model.models.Application.M_Service.MS_Description.label('Discription')
                                ).filter_by(MS_IsDeleted=0).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddServicePackageForms', methods=['POST','GET'])
def AddServicePackageForms():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicePackageRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicePackageRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicePackageForms1,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicePackageForms1',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            # getDiscountType= Common_Function.CommonFun.getDiscountType()

        getTextField2= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicePackageForms2,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicePackageForms2',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField3= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicePackageForms3,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicePackageForms3',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField4= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicePackageForms4,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddServicePackageForms4',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        Validation= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.Validation,
                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                            Model.models.Application.M_validations.MV_Message.label('message')
                                ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                        )
        servicePackageType = Common_Function.CommonFun.servicePackageType()
        serviceStatus = Common_Function.CommonFun.serviceStatus()
        # getTextField[0]['validations']=Validation
        # getTextField[1]['validations']=Validation
        # getTextField2[2]['validations']= Validation
        # getTextField[3]['validations']= Validation
        # getTextField2[3]['validations']= Validation
        # getTextField2[0]['validations']= Validation
        getTextField[0]['options']= servicePackageType
        getTextField4[1]['options']= serviceStatus
        # getTextField2[1]['validations']= Validation
        # getTextField[1]['validations']= Validation
        getFormRow[0]['childControl']= getTextField
        getFormRow[1]['childControl']= getTextField2
        getFormRow[2]['childControl']= getTextField3
        getFormRow[3]['childControl']= getTextField4
        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()
            # Id=JSONFile.get('Id')
            queryresult= session.query(Model.models.Application.M_ServicePackage.MSP_PackageType,
                                Model.models.Application.M_ServicePackage.MSP_PackageName,
                                Model.models.Application.M_ServicePackage.MSP_ServiceName,
                                Model.models.Application.M_ServicePackage.MSP_Options,
                                Model.models.Application.M_ServicePackage.MSP_Price,
                                Model.models.Application.M_ServicePackage.MSP_Sessions,
                                Model.models.Application.M_ServicePackage.MSP_TotalCost,
                                Model.models.Application.M_ServicePackage.MSP_Months,
                                Model.models.Application.M_ServicePackage.MSP_PackagePrice,
                                Model.models.Application.M_ServicePackage.MSP_Tax,
                                Model.models.Application.M_ServicePackage.MSP_Total,
                                Model.models.Application.M_ServicePackage.MSP_Description,
                                Model.models.Application.M_ServicePackage.MSP_Status
                                ).filter_by(MSPID=Id,MSP_IsDeleted=0).all()
            # UserType = Common_Function.CommonFun.UserType()
            getTextField[0]['value']=queryresult[0].MSP_PackageType
            getTextField[1]['value']=queryresult[0].MSP_PackageName
            getTextField2[0]['value']= queryresult[0].MSP_ServiceName
            getTextField2[1]['value']= queryresult[0].MSP_Options
            getTextField2[2]['value']= queryresult[0].MSP_Price
            getTextField2[3]['value']= queryresult[0].MSP_Sessions
            getTextField2[4]['value']= queryresult[0].MSP_TotalCost
            getTextField2[5]['value']= queryresult[0].MSP_Months
            getTextField3[0]['value']= queryresult[0].MSP_PackagePrice
            getTextField3[1]['value']= queryresult[0].MSP_Tax
            getTextField3[2]['value']= queryresult[0].MSP_Total
            getTextField4[0]['value']= queryresult[0].MSP_Description
            getTextField4[1]['value']= queryresult[0].MSP_Status
            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/submitServicePackageForms', methods=['GET','POST'])
def submitServicePackageForms():

    session=Session()
    try:

        if(request.method == "POST"):
            request_json = request.get_json()

            # packageType =request_json.get('packageType')
            packageName =request_json.get('packageName')
            serviceId2 =request_json.get('serviceId')
            serviceId = ','.join(str(num) for num in serviceId2)
            serviceName2 = request_json.get('serviceName')
            serviceName = ','.join(str(num) for num in serviceName2)
            
            branchId2 = request_json.get('branchId')
            branchId = ','.join(str(num) for num in branchId2)
            branchName2 = request_json.get('branchName')
            branchName = ','.join(str(num) for num in branchName2)
            
            print(serviceName)
            price =request_json.get('price')
            sessions =request_json.get('sessions')
            totalCost = request_json.get('totalCost')
            month = request_json.get('month')
            packagePrice = request_json.get('packagePrice')
            tax =request_json.get('tax')
            total =request_json.get('total')
            # validity = request_json.get('validity')
            status = request_json.get('status')
            ID = request_json.get('ID')
            if(ID=='' or ID==None):

                Insert=Model.models.Application.M_ServicePackage()
                # Insert.MSP_PackageType=packageType
                Insert.MSP_PackageName=packageName
                Insert.MSP_ServiceName=serviceId
                Insert.MSP_ServiceNamess=serviceName
                # Insert.MSP_ServiceNamess=options
                Insert.MSP_Price=price
                Insert.MSP_Sessions=sessions
                Insert.MSP_TotalCost=totalCost
                Insert.MSP_Months=int(month)
                Insert.MSP_PackagePrice=packagePrice
                Insert.MSP_Tax=tax
                Insert.MSP_Total=total
                Insert.MSP_Status=status
                Insert.MSP_Validity=int(month)
                Insert.MPP_BranchId=branchId
                Insert.MPP_BranchName=branchName
                
                Insert.MSP_AddIP= flask.request.remote_addr
                Insert.MSP_AddDate=datetime.datetime.now()
                session.add(Insert)
                session.commit()
                return jsonify({'msg':'Service Package Added Successfully'})

            else:

                Insert=session.query(Model.models.Application.M_ServicePackage).get(ID)
                
                Insert.MSP_PackageName=packageName
                Insert.MSP_ServiceName=serviceId
                Insert.MSP_ServiceNamess=serviceName
                # Insert.MSP_ServiceNamess=options
                Insert.MSP_Price=price
                Insert.MSP_Sessions=sessions
                Insert.MSP_TotalCost=totalCost
                Insert.MSP_Months=int(month)
                Insert.MSP_PackagePrice=packagePrice
                Insert.MSP_Tax=tax
                Insert.MSP_Total=total
                Insert.MSP_Status=status
                Insert.MSP_Validity=int(month)
                Insert.MPP_BranchId=branchId
                Insert.MPP_BranchName=branchName
                
                Insert.MSP_AddIP= flask.request.remote_addr
                Insert.MSP_ModDate=datetime.datetime.now()
                session.commit()
                return jsonify({'msg':'Service Package Updated Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteServicePackage', methods=['POST','GET'])
def deleteServicePackage():
    session=Session()
    try:
        if(request.method == "POST"):
            Id= request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_ServicePro
                              ).filter(Model.models.Application.M_ServicePro.MSPID==Id
                                       ).update({Model.models.Application.M_ServicePro.MSP_IsDeleted:1,
                                                 Model.models.Application.M_ServicePro.MSP_ModDate:datetime.datetime.now()})
                session.commit()
                return jsonify({'msg':'Service Deleted Successfully'})
            else:
                return jsonify({'err':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()

@app.route('/getServicePro', methods=['GET','POST'])
def getServicePro():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getServicePro,
                    session.query(Model.models.Application.M_ServicePro.MSPID.label('Id'),
                                Model.models.Application.M_ServicePro.MSP_Fee.label('Total'),
                                Model.models.Application.M_ServicePro.MSP_serviceId.label('service'),
                                Model.models.Application.M_Service.MS_CategoryName.label('service'),
                                Model.models.Application.M_ServicePro.MSP_Duration.label('Duration'),
                                Model.models.Application.M_Branch.MB_Name.label('Branch')
                                ).filter_by(MSP_IsDeleted=0
                                ).join(Model.models.Application.M_Branch,
                                       Model.models.Application.M_Branch.MBID==Model.models.Application.M_ServicePro.M_Branch_MBID
                                ).join(Model.models.Application.M_Service,
                                Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePro.MSP_serviceId
                                ).order_by(Model.models.Application.M_ServicePro.MSPID.desc()).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        elif(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')
            Discription = request_json.get('Discription')
            apply = []
            if(Name !='' and Name !=None):
                apply.append(Model.models.Application.M_ServicePro.MSP_serviceId.contains(Name))
            if(Discription !='' and Discription !=None):
                apply.append(Model.models.Application.M_ServicePro.M_Branch_MBID.contains(Discription))

            if((Name!='' and Name !=None) or (Discription!='' and Discription !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getServicePro,
                    session.query(Model.models.Application.M_ServicePro.MSPID.label('Id'),
                                Model.models.Application.M_ServicePro.MSP_Fee.label('Total'),
                                Model.models.Application.M_ServicePro.MSP_serviceId.label('service'),
                                Model.models.Application.M_ServicePro.MSP_Duration.label('Duration'),
                                Model.models.Application.M_ServicePro.M_Branch_MBID.label('Branch')
                                ).filter_by(MSP_IsDeleted=0).filter(*apply
                                ).order_by(Model.models.Application.M_ServicePro.MSPID.desc()).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
            else:
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getServicePro,
                    session.query(Model.models.Application.M_ServicePro.MSPID.label('Id'),
                                Model.models.Application.M_ServicePro.MSP_Fee.label('Total'),
                                Model.models.Application.M_ServicePro.MSP_serviceId.label('service'),
                                Model.models.Application.M_ServicePro.MSP_Duration.label('Duration'),
                                Model.models.Application.M_ServicePro.M_Branch_MBID.label('Branch')
                                ).filter_by(MSP_IsDeleted=0
                                ).order_by(Model.models.Application.M_ServicePro.MSPID.desc()).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getServicePackagesss', methods=['GET','POST'])
def getServicePackagesss():
    session=Session()
    try:
        if(request.method == "GET"):
            branchId= request.headers.get('branchId')
            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getServicePackagesss,
                    session.query(Model.models.Application.M_ServicePackage.MSPID.label('Id'),
                                Model.models.Application.M_ServicePackage.MSP_PackageName.label('name'),
                                Model.models.Application.M_ServicePackage.MSP_Total.label('price'),
                                Model.models.Application.M_ServicePackage.MSP_Sessions.label('sessions'),
                                Model.models.Application.M_ServicePackage.MSP_ServiceName.label('typess'),
                                Model.models.Application.M_ServicePackage.MSP_ServiceNamess.label('type'),
                                Model.models.Application.M_ServicePackage.MSP_Validity.label('Validity'),
                                ).filter_by(MSP_IsDeleted=0
                                ).filter(Model.models.Application.M_ServicePackage.MPP_BranchId.contains(branchId)
                                ).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
    finally:
        session.close()


@app.route('/getServicePackage', methods=['GET','POST'])
def getServicePackage():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getServicePackages,
                    session.query(Model.models.Application.M_ServicePackage.MSPID.label('Id'),
                                Model.models.Application.M_ServicePackage.MSP_PackageName.label('name'),
                                Model.models.Application.M_ServicePackage.MSP_Total.label('price'),
                                Model.models.Application.M_ServicePackage.MSP_Sessions.label('sessions'),
                                Model.models.Application.M_ServicePackage.MSP_ServiceName.label('typess'),
                                Model.models.Application.M_ServicePackage.MSP_ServiceNamess.label('type'),
                                # Model.models.Application.M_Service.MS_CategoryName.label('type'),
                                Model.models.Application.M_ServicePackage.MSP_Validity.label('Validity'),
                                ).filter_by(MSP_IsDeleted=0
                                # ).join(Model.models.Application.M_Service,Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePackage.MSP_ServiceName
                                ).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        elif(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')
            Discription = request_json.get('Discription')
            apply = []
            if(Name !='' and Name !=None):
                apply.append(Model.models.Application.M_ServicePackage.MSP_PackageName.contains(Name))
            if(Discription !='' and Discription !=None):
                apply.append(Model.models.Application.M_ServicePackage.MSP_ServiceName.contains(Discription))

            if((Name!='' and Name !=None) or (Discription!='' and Discription !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getServicePackages,
                    session.query(Model.models.Application.M_ServicePackage.MSPID.label('Id'),
                                Model.models.Application.M_ServicePackage.MSP_PackageName.label('name'),
                                Model.models.Application.M_ServicePackage.MSP_Total.label('price'),
                                Model.models.Application.M_ServicePackage.MSP_Sessions.label('sessions'),
                                Model.models.Application.M_ServicePackage.MSP_ServiceName.label('types'),
                                Model.models.Application.M_ServicePackage.MSP_ServiceNamess.label('type'),
                                Model.models.Application.M_ServicePackage.MSP_Validity.label('Validity'),
                                ).filter_by(MSP_IsDeleted=0).filter(*apply).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
            else:
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getServicePackages,
                    session.query(Model.models.Application.M_ServicePackage.MSPID.label('Id'),
                                Model.models.Application.M_ServicePackage.MSP_PackageName.label('name'),
                                Model.models.Application.M_ServicePackage.MSP_Total.label('price'),
                                Model.models.Application.M_ServicePackage.MSP_Sessions.label('sessions'),
                                Model.models.Application.M_ServicePackage.MSP_ServiceName.label('types'),
                                Model.models.Application.M_ServicePackage.MSP_ServiceNamess.label('type'),
                                Model.models.Application.M_ServicePackage.MSP_Validity.label('Validity'),
                                ).filter_by(MSP_IsDeleted=0).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/getProductMenu', methods=['GET','POST'])
def getProductMenu():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult = Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddProductMenu,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('target'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('MenuID'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path')
                        ).filter_by(MFC_FormName='AddProductMenu',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            session.commit()
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddPromotionsForms', methods=['POST','GET'])
def AddPromotionsForms():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddPromotionsPageFormRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddPromotionsPageFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddPromotionsPageForm1,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddPromotionsPageForm1',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
            # getDiscountType= Common_Function.CommonFun.getDiscountType()

        getTextField2= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddPromotionsPageForm2,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddPromotionsPageForm2',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField3= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddPromotionsPageForm3,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddPromotionsPageForm3',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField4= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddPromotionsPageForm4,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddPromotionsPageForm4',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        Validation= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.Validation,
                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                            Model.models.Application.M_validations.MV_Message.label('message')
                                ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                        )
        PromotionType = Common_Function.CommonFun.PromotionType()
        # getTextField[0]['validations']=Validation
        # getTextField[1]['validations']=Validation
        # getTextField2[2]['validations']= Validation
        # getTextField[3]['validations']= Validation
        # getTextField2[3]['validations']= Validation
        # getTextField2[0]['validations']= Validation
        getTextField2[1]['options']= PromotionType
        # getTextField2[1]['validations']= Validation
        # getTextField[1]['validations']= Validation
        getFormRow[0]['childControl']= getTextField
        getFormRow[1]['childControl']= getTextField2
        getFormRow[2]['childControl']= getTextField3
        getFormRow[3]['childControl']= getTextField4
        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()
            #Id=JSONFile.get('Id')
            queryresult= session.query(Model.models.Application.M_Promotions.MP_PromoName,
                                Model.models.Application.M_Promotions.MP_PromoType,
                                Model.models.Application.M_Promotions.MP_TagLine,
                                Model.models.Application.M_Promotions.MP_Description,
                                Model.models.Application.M_Promotions.MP_StartDate,
                                Model.models.Application.M_Promotions.MP_EndDate,
                                Model.models.Application.M_Promotions.MP_DiscountPercent,
                                ).filter_by(MPID=Id,MP_IsDeleted=0).all()
            # UserType = Common_Function.CommonFun.UserType()
            if(len(queryresult)>0):
                getTextField2[0]['value']=queryresult[0].MP_PromoName
                getTextField2[1]['value']=queryresult[0].MP_PromoType
                getTextField3[0]['value']= queryresult[0].MP_TagLine
                getTextField3[1]['value']= queryresult[0].MP_Description
                getTextField4[0]['value']= str(queryresult[0].MP_StartDate)
                getTextField4[1]['value']= str(queryresult[0].MP_EndDate)
                getTextField4[2]['value']= queryresult[0].MP_DiscountPercent
                return jsonify(result=getFormRow)
            else:
                return jsonify({'err':'Id is not available!! Please check'})
    finally:
        session.close()

@app.route('/submitPromotionForm', methods=['GET','POST'])
def submitPromotionForm():

    session=Session()
    try:

        if(request.method == "POST"):
            Data= request.form.get('data')
            if(Data!='' or Data !=None):
                getjson= json.loads(Data)
                PromoName =getjson['PromoName']
                PromoType =getjson['PromoType']
                TagLine =getjson['TagLine']
                Description =getjson['Description']
                StartDate =getjson['StartDate']
                EndDate =getjson['EndDate']
                ServiceFile = request.files['files[]']
                DiscountPercent =getjson['DiscountPercent']
                FilePath = 'static/Promotions'
                if(ServiceFile.filename!='' and ServiceFile.filename!= None):
                    date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                    name, ext = os.path.splitext(ServiceFile.filename)
                    files = 'ServicesImage_'+ str(1) +'_' + date  + ext
                    fileName=files
                    if(os.path.exists(FilePath)):
                        ServiceFile.save(os.path.join(FilePath, fileName))
                        print(ServiceFile.filename)
                    else:
                        os.makedirs(FilePath)
                        ServiceFile.save(os.path.join(FilePath, fileName))
                ID = getjson['ID']
                if(ID=='' or ID==None):
                    Insert=Model.models.Application.M_Promotions()
                    Insert.MP_PromoName=PromoName
                    Insert.MP_FilePath=FilePath
                    Insert.MP_fileName=fileName
                    Insert.MP_PromoType=PromoType
                    Insert.MP_TagLine=TagLine
                    Insert.MP_Description=Description
                    Insert.MP_StartDate=StartDate
                    Insert.MP_EndDate=EndDate
                    Insert.MP_DiscountPercent=DiscountPercent
                    Insert.MP_AddIP= flask.request.remote_addr
                    Insert.MP_AddDate=datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'Promotion Added Successfully'})

                else:
                    Insert=session.query(Model.models.Application.M_Promotions).get(ID)
                    Insert.MP_PromoName=PromoName
                    Insert.MP_FilePath=FilePath
                    Insert.MP_fileName=fileName
                    Insert.MP_PromoType=PromoType
                    Insert.MP_TagLine=TagLine
                    Insert.MP_Description=Description
                    Insert.MP_StartDate=StartDate
                    Insert.MP_EndDate=EndDate
                    Insert.MP_DiscountPercent=DiscountPercent
                    Insert.MP_AddIP= flask.request.remote_addr
                    Insert.MP_ModDate=datetime.datetime.now()
                    session.commit()
                    return jsonify({'msg':'Promotion Updated Successfully'})
            else:
                 return jsonify({'err':'Data is not available!! Please check'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deletePromotions', methods=['POST','GET'])
def deletePromotions():
    session=Session()
    try:
        if(request.method == "POST"):
            Id= request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_Promotions).filter(Model.models.Application.M_Promotions.MPID==Id).update({Model.models.Application.M_Promotions.MP_IsDeleted:1,Model.models.Application.M_Promotions.MP_ModDate:datetime.datetime.now()})
                session.commit()
                return jsonify({'msg':'Promotion Deleted Successfully'})
            else:
                return jsonify({'err':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()

@app.route('/getPromotionsDtls', methods=['GET','POST'])
def getPromotionsDtls():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getPromotionsDtls,
                    session.query(Model.models.Application.M_Promotions.MPID.label('Id'),
                                Model.models.Application.M_Promotions.MP_PromoName.label('Name'),
                                Model.models.Application.M_Promotions.MP_PromoType.label('Typess'),
                                Model.models.Application.T_Details.TD_Name.label('Type'),
                                Model.models.Application.M_Promotions.MP_StartDate.label('From'),
                                Model.models.Application.M_Promotions.MP_EndDate.label('Till')
                                ).filter_by(MP_IsDeleted=0
                                ).join(Model.models.Application.T_Details,Model.models.Application.T_Details.TDID==Model.models.Application.M_Promotions.MP_PromoType
                                ).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        elif(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')
            Discription = request_json.get('Discription')
            apply = []
            if(Name !='' and Name !=None):
                apply.append(Model.models.Application.M_Service.MS_CategoryName.contains(Name))
            if(Discription !='' and Discription !=None):
                apply.append(Model.models.Application.M_Service.MS_Description.contains(Discription))

            if((Name!='' and Name !=None) or (Discription!='' and Discription !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getService,
                    session.query(Model.models.Application.M_Service.MS_CategoryName.label('Name'),
                                Model.models.Application.M_Service.MS_Description.label('Discription')
                                ).filter_by(MS_IsDeleted=0).filter(*apply).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
            else:
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getService,
                    session.query(Model.models.Application.M_Service.MS_CategoryName.label('Name'),
                                Model.models.Application.M_Service.MS_Description.label('Discription')
                                ).filter_by(MS_IsDeleted=0).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddservicePreTreatmentForm', methods=['POST','GET'])
def AddservicePreTreatmentForm():
    session=Session()
    try:
        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddservicePreTreatmentRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddservicePreTreatmentRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddservicePreTreatmentForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddservicePreTreatmentForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        getFormRow[0]['childControl']= getTextField

        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()
            # Id=JSONFile.get('Id')
            queryresult= session.query(Model.models.Application.M_ServicePreTreatement.MSP_PreTreatement
                                ).filter_by(MSPID=Id,MSP_IsActive=1,MSP_IsDeleted=0).all()
            getTextField[0]['value']=queryresult[0].MSP_PreTreatement

            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/AddservicePostTreatmentForm', methods=['POST','GET'])
def AddservicePostTreatmentForm():
    session=Session()
    try:
        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddservicePostTreatmentRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddservicePostTreatmentRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddservicePostTreatmentForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddservicePostTreatmentForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        getFormRow[0]['childControl']= getTextField

        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()
            # Id=JSONFile.get('Id')
            queryresult= session.query(Model.models.Application.M_ServicePostTreatement.MSP_PostTreatement
                                ).filter_by(MSPID=Id,MSP_IsActive=1,MSP_IsDeleted=0).all()
            getTextField[0]['value']=queryresult[0].MSP_PreTreatement
            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/submitservicePreTreatment',methods=['GET','POST'])
def submitservicePreTreatment():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):


            request_json = request.get_json()
            PreTreatment = request_json.get('PreTreatment')
            PackageID = request_json.get('PackageID')
            ID = request_json.get('ID')
            if(ID=='' or ID==None):
                for all in PreTreatment:

                    Insert=Model.models.Application.M_ServicePreTreatement()
                    Insert.MSP_PreTreatement=all
                    Insert.MSP_PackageID=PackageID
                    Insert.MSP_AddIP= flask.request.remote_addr
                    Insert.MSP_AddDate= datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    print("success")

                return jsonify({'msg':'Pre Treatment Added Successfully'})
            else:
                Insert=session.query(Model.models.Application.M_ServicePreTreatement).get(ID)
                Insert.MSP_PreTreatement=PreTreatment
                Insert.MSP_PackageID=PackageID
                Insert.MSP_AddIP= flask.request.remote_addr
                Insert.MSP_ModDate = datetime.datetime.now()
                session.commit()
                print("success")

                return jsonify({'msg':'Pre Treatment Updated Successfully'})
        else:
            return jsonify({'msg':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitservicePostTreatment',methods=['GET','POST'])
def submitservicePostTreatment():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):


            request_json = request.get_json()
            PostTreatment = request_json.get('PostTreatment')
            PackageID = request_json.get('PackageID')
            ID = request_json.get('ID')
            if(ID=='' or ID==None):
                for all in PostTreatment:

                    Insert=Model.models.Application.M_ServicePostTreatement()
                    Insert.MSP_PostTreatement=all
                    Insert.MSP_PackageID=PackageID
                    Insert.MSP_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                print("success")

                return jsonify({'msg':'Post Treatment Added Successfully'})
            else:
                Insert=session.query(Model.models.Application.M_ServicePostTreatement).get(ID)
                Insert.MSP_PostTreatement=PostTreatment
                Insert.MSP_PackageID=PackageID
                Insert.MSP_AddIP= flask.request.remote_addr
                Insert.MSP_ModDate = datetime.datetime.now()
                session.commit()
                print("success")

                return jsonify({'msg':'Post Treatment Updated Successfully'})
        else:
            return jsonify({'msg':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddServicePackageVideoLink', methods=['POST','GET'])
def AddServicePackageVideoLink():
    session=Session()
    try:
        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddServicePackageVideoLink,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('placeholder')
                        ).filter_by(MFC_FormName='AddServicePackageVideoLink',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            JSONFile=request.get_json()
            Id=JSONFile.get('Id')
            queryresult= session.query(func.concat(Model.models.Application.M_Service.MS_FilePath,'/',Model.models.Application.M_Service.MS_FileName).label('Image'),
                                Model.models.Application.M_Service.MS_CategoryName,
                                Model.models.Application.M_Service.MS_Description,
                                ).filter_by(MSID=Id,MS_IsActive=1,MS_IsDeleted=0).all()
            # getTextField2[0]['value']=queryresult[0].MS_CategoryName
            # getTextField2[1]['value']=queryresult[0].MS_Description

            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/submitServicePackageVideo',methods=['GET','POST'])
def submitServicePackageVideo():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):


            request_json = request.get_json()
            video = request_json.get('video')
            PackageID = request_json.get('PackageID')
            ID = request_json.get('ID')
            if(ID=='' or ID==None):
                Insert=Model.models.Application.M_ServiceVideoLink()
                Insert.MS_video = video
                Insert.MS_PackageID = PackageID
                Insert.MS_AddIP = flask.request.remote_addr
                Insert.MS_AddDate = datetime.datetime.now()
                session.add(Insert)
                session.commit()
                print("success")

                return jsonify({'msg':'Video Added Successfully'})
            else:
                Insert=session.query(Model.models.Application.M_ServiceVideoLink).get(ID)
                Insert.MS_video=video
                Insert.MS_PackageID=PackageID
                Insert.MS_AddIP= flask.request.remote_addr
                Insert.MS_ModDate = datetime.datetime.now()
                session.commit()
                print("success")

                return jsonify({'msg':'Video Updated Successfully'})
        else:
            return jsonify({'msg':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitServicePackageImage',methods=['GET','POST'])
def submitServicePackageImage():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):

            Data= request.form.get('data')
            if(Data!='' or Data !=None):
                getjson= json.loads(Data)
                PackageID =getjson['CategoryName']
                ServicePackageImage = request.files['files[]']
                FilePath = 'static/ServicePackageImg'
                ID = getjson['Id']
                if(ServicePackageImage.filename!='' and ServicePackageImage.filename!= None):
                    date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                    name, ext = os.path.splitext(ServicePackageImage.filename)
                    files = 'ServicePackageImage_'+ str(1) +'_' + date  + ext
                    fileName=files
                    if(os.path.exists(FilePath)):
                        ServicePackageImage.save(os.path.join(FilePath, fileName))
                        print(ServicePackageImage.filename)
                    else:
                        os.makedirs(FilePath)
                        ServicePackageImage.save(os.path.join(FilePath, fileName))
                if(ID=='' or ID==None):
                    Insert=Model.models.Application.M_ServicePackageImage()
                    Insert.MSP_FilePath = FilePath
                    Insert.MSP_FileName = fileName
                    Insert.MSP_PackageID = PackageID
                    Insert.MSP_AddIP = flask.request.remote_addr
                    Insert.MSP_AddDate = datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    print("success")

                    return jsonify({'msg':'Image Added Successfully'})
                else:
                    Insert=session.query(Model.models.Application.M_ServicePackageImage).get(ID)
                    Insert.MSP_FilePath = FilePath
                    Insert.MSP_FileName = fileName
                    Insert.MSP_PackageID = PackageID
                    Insert.MSP_AddIP= flask.request.remote_addr
                    Insert.MSP_ModDate = datetime.datetime.now()
                    session.commit()
                    print("success")

                    return jsonify({'msg':'Image Updated Successfully'})
        else:
            return jsonify({'msg':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddInventoryForm', methods=['POST','GET'])
def AddInventoryForm():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddInventoryFormRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddInventoryFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddInventoryForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddInventoryForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField2= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddInventoryForm1,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddInventoryForm1',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField3= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddInventoryForm2,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddInventoryForm2',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        Validation= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.Validation,
                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                            Model.models.Application.M_validations.MV_Message.label('message')
                                ).filter_by(MV_Type='number',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                        )
        Inventorytype = Common_Function.CommonFun.Inventorytype()
        Months = Common_Function.CommonFun.Months()
        Years = Common_Function.CommonFun.Years()
        getBranch = Common_Function.CommonFun.getBranch()
        getTextField[0]['options'] = Inventorytype
        getTextField3[2]['options'] = Months
        getTextField3[3]['options'] = Years
        getTextField[3]['options'] = getBranch
        getTextField2[3]['validations'] = Validation

        getFormRow[0]['childControl']= getTextField
        getFormRow[1]['childControl']= getTextField2
        getFormRow[2]['childControl']= getTextField3
        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            JSONFile=request.get_json()
            Id=JSONFile.get('Id')
            queryresult= session.query(Model.models.Application.M_Inventory.MI_InventoryType,
                                Model.models.Application.M_Inventory.MI_ItemName,
                                Model.models.Application.M_Inventory.M_Branch_MBID,
                                Model.models.Application.M_Inventory.MI_UnitType,
                                Model.models.Application.M_Inventory.MI_Price,
                                Model.models.Application.M_Inventory.MI_Tax,
                                Model.models.Application.M_Inventory.MI_mrp,
                                Model.models.Application.M_Inventory.MI_Quantity,
                                Model.models.Application.M_Inventory.MI_Batch,
                                Model.models.Application.M_Inventory.MI_Manufacturer,
                                Model.models.Application.M_Inventory.MI_ExpiryMonth,
                                Model.models.Application.M_Inventory.MI_ExpiryYear

                                ).filter_by(MIID=Id,MI_IsActive=1,MI_IsDeleted=0).all()
            getTextField[0]['value']=queryresult[0].MI_InventoryType
            getTextField[1]['value']=queryresult[0].MI_ItemName
            getTextField[3]['value']=queryresult[0].M_Branch_MBID
            getTextField[2]['value']=queryresult[0].MI_UnitType
            getTextField2[0]['value']=queryresult[0].MI_Price
            getTextField2[1]['value']=queryresult[0].MI_Tax
            getTextField2[2]['value']=queryresult[0].MI_mrp
            getTextField2[3]['value']=queryresult[0].MI_Quantity
            getTextField3[0]['value']=queryresult[0].MI_Batch
            getTextField3[1]['value']=queryresult[0].MI_Manufacturer
            getTextField3[2]['value']=queryresult[0].MI_ExpiryMonth
            getTextField3[3]['value']=queryresult[0].MI_ExpiryYear

            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/submitInventoryForm',methods=['GET','POST'])
def submitInventoryForm():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):


            request_json = request.get_json()
            InventoryType = request_json.get('InventoryType')
            ItemName = request_json.get('ItemName')
            UnitType = request_json.get('UnitType')
            Branch = request_json.get('Branch')
            Price = request_json.get('Price')
            Tax = request_json.get('Tax')
            mrp = request_json.get('mrp')
            Quantity = request_json.get('Quantity')
            Batch = request_json.get('Batch')
            Manufacturer = request_json.get('Manufacturer')
            ExpiryMonth = request_json.get('ExpiryMonth')
            ExpiryYear = request_json.get('ExpiryYear')
            ID = request_json.get('ID')
            if(ID=='' or ID==None):
                Insert=Model.models.Application.M_Inventory()
                Insert.MI_InventoryType = InventoryType
                Insert.MI_ItemName = ItemName
                Insert.MI_UnitType = UnitType
                Insert.M_Branch_MBID = Branch
                Insert.MI_Price = Price
                Insert.MI_Tax = Tax
                Insert.MI_mrp = mrp
                Insert.MI_Quantity = Quantity
                Insert.MI_Batch = Batch
                Insert.MI_Manufacturer = Manufacturer
                Insert.MI_ExpiryMonth = ExpiryMonth
                Insert.MI_ExpiryYear = ExpiryYear
                Insert.MI_InventoryType = InventoryType
                Insert.MI_ItemName = ItemName
                Insert.MI_AddIP= flask.request.remote_addr
                Insert.MI_AddDate= datetime.datetime.now()
                session.add(Insert)
                session.commit()
                print("success")

                return jsonify({'msg':'Inventory Added Successfully'})
            else:
                Insert=session.query(Model.models.Application.M_Inventory).get(ID)
                Insert.MI_InventoryType = InventoryType
                Insert.MI_ItemName = ItemName
                Insert.MI_UnitType = UnitType
                Insert.M_Branch_MBID = Branch
                Insert.MI_Price = Price
                Insert.MI_Tax = Tax
                Insert.MI_mrp = mrp
                Insert.MI_Quantity = Quantity
                Insert.MI_Batch = Batch
                Insert.MI_Manufacturer = Manufacturer
                Insert.MI_ExpiryMonth = ExpiryMonth
                Insert.MI_ExpiryYear = ExpiryYear
                Insert.MI_InventoryType = InventoryType
                Insert.MI_ItemName = ItemName
                Insert.MS_AddIP= flask.request.remote_addr
                Insert.MS_ModDate = datetime.datetime.now()
                session.commit()
                print("success")

                return jsonify({'msg':'Inventory Updated Successfully'})
        else:
            return jsonify({'msg':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getInventoryMedicalDtls', methods=['GET','POST'])
def getInventoryMedicalDtls():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getInventoryMedicalDtls,
                    session.query(Model.models.Application.M_Inventory.MIID.label('Id'),
                                Model.models.Application.M_Inventory.MI_ItemName.label('Medecine Name'),
                                Model.models.Application.M_Inventory.MI_UnitType.label('Unit Type'),
                                Model.models.Application.M_Inventory.MI_Quantity.label('Quantity'),
                                Model.models.Application.M_Inventory.MI_Manufacturer.label('Manufacturer')
                                ).filter_by(MI_IsDeleted=0,MI_InventoryType=453
                                ).order_by(Model.models.Application.M_Inventory.MIID.desc()).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        elif(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')
            Discription = request_json.get('Discription')
            apply = []
            if(Name !='' and Name !=None):
                apply.append(Model.models.Application.M_Service.MS_CategoryName.contains(Name))
            if(Discription !='' and Discription !=None):
                apply.append(Model.models.Application.M_Service.MS_Description.contains(Discription))

            if((Name!='' and Name !=None) or (Discription!='' and Discription !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getInventoryMedicalDtls,
                    session.query(Model.models.Application.M_Inventory.MIID.label('Id'),
                                Model.models.Application.M_Inventory.MI_ItemName.label('Medecine Name'),
                                Model.models.Application.M_Inventory.MI_UnitType.label('Unit Type'),
                                Model.models.Application.M_Inventory.MI_Quantity.label('Quantity'),
                                Model.models.Application.M_Inventory.MI_Manufacturer.label('Manufacturer')
                                ).filter_by(MI_IsDeleted=0,MI_InventoryType=453
                                ).filter(*apply
                                ).order_by(Model.models.Application.M_Inventory.MIID.desc()).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
            else:
                Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getInventoryMedicalDtls,
                    session.query(Model.models.Application.M_Inventory.MIID.label('Id'),
                                Model.models.Application.M_Inventory.MI_ItemName.label('Medecine Name'),
                                Model.models.Application.M_Inventory.MI_UnitType.label('Unit Type'),
                                Model.models.Application.M_Inventory.MI_Quantity.label('Quantity'),
                                Model.models.Application.M_Inventory.MI_Manufacturer.label('Manufacturer')
                                ).filter_by(MI_IsDeleted=0,MI_InventoryType=453
                                ).order_by(Model.models.Application.M_Inventory.MIID.desc()).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getInventoryConsumableDtls', methods=['GET','POST'])
def getInventoryConsumableDtls():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getInventoryConsumableDtls,
                    session.query(Model.models.Application.M_Inventory.MIID.label('Id'),
                                Model.models.Application.M_Inventory.MI_ItemName.label('Consumable Name'),
                                Model.models.Application.M_Inventory.MI_UnitType.label('Unit Type'),
                                Model.models.Application.M_Inventory.MI_Quantity.label('Quantity'),
                                Model.models.Application.M_Inventory.MI_Manufacturer.label('Manufacturer')
                                ).filter_by(MI_IsDeleted=0,MI_InventoryType=454
                                ).order_by(Model.models.Application.M_Inventory.MIID.desc()).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        elif(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')
            Discription = request_json.get('Discription')
            apply = []
            if(Name !='' and Name !=None):
                apply.append(Model.models.Application.M_Service.MS_CategoryName.contains(Name))
            if(Discription !='' and Discription !=None):
                apply.append(Model.models.Application.M_Service.MS_Description.contains(Discription))

            if((Name!='' and Name !=None) or (Discription!='' and Discription !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getInventoryConsumableDtls,
                    session.query(Model.models.Application.M_Inventory.MIID.label('Id'),
                                Model.models.Application.M_Inventory.MI_ItemName.label('Consumable Name'),
                                Model.models.Application.M_Inventory.MI_UnitType.label('Unit Type'),
                                Model.models.Application.M_Inventory.MI_Quantity.label('Quantity'),
                                Model.models.Application.M_Inventory.MI_Manufacturer.label('Manufacturer')
                                ).filter_by(MI_IsDeleted=0,MI_InventoryType=454).filter(*apply
                                ).order_by(Model.models.Application.M_Inventory.MIID.desc()).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
            else:
                Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getInventoryConsumableDtls,
                    session.query(Model.models.Application.M_Inventory.MIID.label('Id'),
                                Model.models.Application.M_Inventory.MI_ItemName.label('Consumable Name'),
                                Model.models.Application.M_Inventory.MI_UnitType.label('Unit Type'),
                                Model.models.Application.M_Inventory.MI_Quantity.label('Quantity'),
                                Model.models.Application.M_Inventory.MI_Manufacturer.label('Manufacturer')
                                ).filter_by(MI_IsDeleted=0,MI_InventoryType=454
                                ).order_by(Model.models.Application.M_Inventory.MIID.desc()).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getInventoryEquipmentDtls', methods=['GET','POST'])
def getInventoryEquipmentDtls():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getInventoryEquipmentDtls,
                    session.query(Model.models.Application.M_Inventory.MIID.label('Id'),
                                Model.models.Application.M_Inventory.MI_ItemName.label('Equipment Name'),
                                Model.models.Application.M_Inventory.MI_UnitType.label('Unit Type'),
                                Model.models.Application.M_Inventory.MI_Quantity.label('Quantity'),
                                Model.models.Application.M_Inventory.MI_Manufacturer.label('Manufacturer')
                                ).filter_by(MI_IsDeleted=0,MI_InventoryType=455
                                ).order_by(Model.models.Application.M_Inventory.MIID.desc()).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        elif(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')
            Discription = request_json.get('Discription')
            apply = []
            if(Name !='' and Name !=None):
                apply.append(Model.models.Application.M_Service.MS_CategoryName.contains(Name))
            if(Discription !='' and Discription !=None):
                apply.append(Model.models.Application.M_Service.MS_Description.contains(Discription))

            if((Name!='' and Name !=None) or (Discription!='' and Discription !=None)):
                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getInventoryConsumableDtls,
                    session.query(Model.models.Application.M_Inventory.MIID.label('Id'),
                                Model.models.Application.M_Inventory.MI_ItemName.label('Equipment Name'),
                                Model.models.Application.M_Inventory.MI_UnitType.label('Unit Type'),
                                Model.models.Application.M_Inventory.MI_Quantity.label('Quantity'),
                                Model.models.Application.M_Inventory.MI_Manufacturer.label('Manufacturer')
                                ).filter_by(MI_IsDeleted=0,MI_InventoryType=455).filter(*apply
                                ).order_by(Model.models.Application.M_Inventory.MIID.desc()).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
            else:
                Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getInventoryConsumableDtls,
                    session.query(Model.models.Application.M_Inventory.MIID.label('Id'),
                                Model.models.Application.M_Inventory.MI_ItemName.label('Equipment Name'),
                                Model.models.Application.M_Inventory.MI_UnitType.label('Unit Type'),
                                Model.models.Application.M_Inventory.MI_Quantity.label('Quantity'),
                                Model.models.Application.M_Inventory.MI_Manufacturer.label('Manufacturer')
                                ).filter_by(MI_IsDeleted=0,MI_InventoryType=455
                                ).order_by(Model.models.Application.M_Inventory.MIID.desc()).all()
                            )
                session.commit()
                return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddEquipmentQnty',methods=['GET','POST'])
def AddEquipmentQnty():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):


            request_json = request.get_json()
            ItemName = request_json.get('ItemName')
            Batch = request_json.get('Batch')
            Quantity = request_json.get('Quantity')
            ExpiryMonth = request_json.get('ExpiryMonth')
            ExpiryYear = request_json.get('ExpiryYear')

            ID = request_json.get('ID')
            if(ID=='' or ID==None):

                Insert=session.query(Model.models.Application.M_Inventory).get(ID)
                Insert.MI_ItemName=ItemName
                Insert.MI_Batch=Batch
                Insert.MI_Quantity=Quantity
                Insert.MI_ExpiryMonth=ExpiryMonth
                Insert.MI_ExpiryYear=ExpiryYear
                Insert.MI_AddIP= flask.request.remote_addr
                Insert.MI_ModDate = datetime.datetime.now()
                session.commit()
                print("success")

                return jsonify({'msg':'Quantity Added Successfully'})
            else:
                return jsonify({'msg':'Id is not Available'})
        else:
            return jsonify({'msg':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddQTYInventoryForm', methods=['POST','GET'])
def AddQTYInventoryForm():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddQntyFormRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddQntyFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddQntyForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddQntyForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField2= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddQntyForm1,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddQntyForm1',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())


        # Validation= Common_Function.CommonFun.convertToJson(
        #         Constant.constant.constant.Validation,
        #         session.query(Model.models.Application.M_validations.MV_Name.label('name'),
        #                     Model.models.Application.M_validations.MV_Pattern.label('pattern'),
        #                     Model.models.Application.M_validations.MV_Message.label('message')
        #                         ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
        #                 )
        Months = Common_Function.CommonFun.Months()
        Years = Common_Function.CommonFun.Years()
        getTextField2[0]['options'] = Months
        getTextField2[1]['options'] = Years

        getFormRow[0]['childControl']= getTextField
        getFormRow[1]['childControl']= getTextField2
        if(request.method == "POST"):
            Id=request.get_json()

            queryresult= session.query(Model.models.Application.M_Inventory.MI_ItemName,
                                ).filter_by(MIID=Id,MI_IsDeleted=0).all()
            getTextField[0]['value']=queryresult[0].MI_ItemName


            return jsonify(result=getFormRow)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DeductQTYInventoryForm', methods=['POST','GET'])
def DeductQTYInventoryForm():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.dedutQntyFormRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='deductQntyFormRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.DeductQntyForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='deductQntyForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        # Validation= Common_Function.CommonFun.convertToJson(
        #         Constant.constant.constant.Validation,
        #         session.query(Model.models.Application.M_validations.MV_Name.label('name'),
        #                     Model.models.Application.M_validations.MV_Pattern.label('pattern'),
        #                     Model.models.Application.M_validations.MV_Message.label('message')
        #                         ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
        #                 )
        getFormRow[0]['childControl']= getTextField
        if(request.method == "POST"):
            Id=request.get_json()
            # Id=JSONFile.get('Id')
            queryresult= session.query(Model.models.Application.M_Inventory.MI_ItemName,
                                ).filter_by(MIID=Id,MI_IsDeleted=0).all()
            getTextField[0]['value']=queryresult[0].MI_ItemName


            return jsonify(result=getFormRow)
        else:
            return jsonify({'err':'Something went wrong (Use POST)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitAddQTYInventory',methods=['GET','POST'])
def submitAddQTYInventory():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):


            request_json = request.get_json()
            Quantity = request_json.get('Quantity')
            ItemName = request_json.get('ItemName')
            Batch = request_json.get('Batch')
            ExpiryMonth = request_json.get('ExpiryMonth')
            ExpiryYear = request_json.get('ExpiryYear')
            ID = request_json.get('ID')
            if(ID!='' or ID!=None):
                queryresult= session.query(Model.models.Application.M_Inventory.MI_Quantity,
                                ).filter_by(MIID=ID,MI_IsDeleted=0).all()
                totalQty = int(queryresult[0].MI_Quantity) + int(Quantity)
                Insert=session.query(Model.models.Application.M_Inventory).get(ID)
                Insert.MI_ItemName = ItemName
                Insert.MI_Batch = Batch
                Insert.MI_ExpiryMonth = ExpiryMonth
                Insert.MI_ExpiryYear = ExpiryYear
                Insert.MI_Quantity = totalQty
                Insert.MI_AddIP= flask.request.remote_addr
                Insert.MI_ModDate = datetime.datetime.now()
                session.commit()
                print("success")

                return jsonify({'msg':'Quantity Updated Successfully'})
        else:
            return jsonify({'err':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitDeductQTYInventory',methods=['GET','POST'])
def submitDeductQTYInventory():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):


            request_json = request.get_json()
            Quantity = request_json.get('Quantity')
            ItemName = request_json.get('Item')
            Batch = request_json.get('Batch')
            ID = request_json.get('ID')
            if(ID!='' or ID!=None):
                queryresult= session.query(Model.models.Application.M_Inventory.MI_Quantity,
                                ).filter_by(MIID=ID,MI_IsDeleted=0).all()
                if(queryresult[0].MI_Quantity>=Quantity):
                    totalQty = int(queryresult[0].MI_Quantity) - int(Quantity)

                    Insert=session.query(Model.models.Application.M_Inventory).get(ID)
                    Insert.MI_ItemName = ItemName
                    Insert.MI_Batch = Batch
                    Insert.MI_Quantity = totalQty
                    Insert.MI_AddIP= flask.request.remote_addr
                    Insert.MI_ModDate = datetime.datetime.now()
                    session.commit()
                    print("success")

                    return jsonify({'msg':'Quantity Updated Successfully'})
                else:
                    return jsonify({'err':'Quantity should be less than Stock'})

        else:
            return jsonify({'msg':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSessionProgress', methods=['POST','GET'])
def getSessionProgress():
    session=Session()
    try:
        if(request.method == "POST"):
            # Id=request.get_json()
            Id=request.data
            Id = Id.decode()
            #Id=1
            query="""select M_Patient_MPID as Id,(select TD_Name from T_Details where TDID = M_SessionNotes.MSN_started) as Started,
            (select TD_Name from T_Details where TDID = M_SessionNotes.MSN_todayfeeling) as TodayFeeling,
            (select TD_Name from T_Details where TDID = M_SessionNotes.MSN_dotoday) as dotoday,
            date_format(MSN_AddDate, '%d %M %Y') as Date,
            MSN_Notes as notes from M_SessionNotes where M_Patient_MPID=""" + str(Id) +""";"""
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getSessionProgress,
                session.execute(query).fetchall())

            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()



@app.route('/getCRMMenu', methods=['POST','GET'])
def getCRMMenu():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.getCRMMenu,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('target'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('MenuID'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path')
                        ).filter_by(MFC_FormName='CRMMenu',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        if(request.method == "GET"):

            return jsonify(result=getFormRow)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddBrodcastForm', methods=['POST','GET'])
def AddBrodcastForm():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddBrodcastForm,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('controlType'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Multiline,'').label('multiline')
                        ).filter_by(MFC_FormName='AddBrodcastForm',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        validations= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.Validation,
                session.query(Model.models.Application.M_validations.MV_Name.label('name'),
                            Model.models.Application.M_validations.MV_Pattern.label('pattern'),
                            Model.models.Application.M_validations.MV_Message.label('message')
                                ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
                        )
        getFormRow[0]['validations']= validations
        getFormRow[1]['validations']= validations
        if(request.method == "GET"):

            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()
            # Id=JSONFile.get('Id')
            queryresult= session.query(Model.models.Application.M_Broadcast.MBID.label('Id'),
                                Model.models.Application.M_Broadcast.MB_Title.label('Title'),
                                Model.models.Application.M_Broadcast.MB_Message.label('Message'),
                                Model.models.Application.M_Broadcast.MB_IsActive.label('Active')
                                ).filter_by(MB_IsDeleted=0,MBID=Id).all()
            getFormRow[0]['value']=queryresult[0].Title
            getFormRow[1]['value']=queryresult[0].Message

            return jsonify(result=getFormRow)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/crmdashboardcard', methods=['POST','GET'])
def crmdashboardcard():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.CRMDashboard,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Regex,'').label('linkTitle')
                        ).filter_by(MFC_FormName='CRMDashboard',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        if(request.method == "GET"):
            AllAppointment= session.query(Model.models.Application.M_Appointment.MAID).count()
            session.commit()
            ActiveAppointment= session.query(Model.models.Application.M_Appointment.MAID
                                          ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0).count()
            session.commit()
            TotalPatient= session.query(Model.models.Application.M_Patient.MPID
                                          ).filter_by(MP_IsActive=1,MP_IsDeleted=0).count()
            session.commit()
            AppPatient= session.query(Model.models.Application.M_Patient.MPID
                                          ).filter_by(MP_IsActive=1,MP_IsDeleted=0
                                        ).filter(Model.models.Application.M_Patient.MP_UHID.contains('App')).count()
            session.commit()
            AppRegistration= session.query(Model.models.Application.M_PatientsDtl.MPDID
                                          ).filter_by(MPD_IsActive=1,MPD_IsDeleted=0).count()
            session.commit()
            getFormRow[0]['label'] = AllAppointment
            getFormRow[1]['label'] = ActiveAppointment
            getFormRow[2]['label'] = TotalPatient
            getFormRow[3]['label'] = AppPatient
            getFormRow[4]['label'] = AppRegistration
            
            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/submitBrodcastForms', methods=['GET','POST'])
def submitBrodcastForms():

    session=Session()
    try:

        if(request.method == "POST"):
            
            files= request.files.getlist(str('files[]'))
            msg= request.form.get('msg')
            FilePath2 = 'static/broadcast/'
            FilePath = 'C:/inetpub/wwwroot/Continua_Patient/ContinuaPatientAPIs/static/broadcast/'
            for file in files:
                if(file.filename!='' and file.filename!= None):
                    date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                    name, ext = os.path.splitext(file.filename)
                    files = 'BR'+ '_'+ (name.replace(" ", "")) +'_' + date  + ext
                    fileName=files
                    if(os.path.exists(FilePath)):
                        file.save(os.path.join(FilePath, fileName))
                        print(file.filename)
                    else:
                        os.makedirs(FilePath)
                        file.save(os.path.join(FilePath, fileName))
                    
                    if(os.path.exists(FilePath2)):
                        file.save(os.path.join(FilePath2, fileName))
                        print(file.filename)
                    else:
                        os.makedirs(FilePath2)
                        file.save(os.path.join(FilePath2, fileName))

                    Insert=Model.models.Application.M_Broadcast()
                    Insert.MB_Title=FilePath2 + fileName
                    Insert.MB_Message=msg

                    Insert.MB_AddIP= flask.request.remote_addr
                    Insert.MB_AddDate=datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'Broadcast Added Successfully'})

            
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getBroadcastdtls', methods=['GET','POST'])
def getBroadcastdtls():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getBroadcastdtls,
                    session.query(Model.models.Application.M_Broadcast.MBID.label('Id'),
                                Model.models.Application.M_Broadcast.MB_Title.label('Title'),
                                Model.models.Application.M_Broadcast.MB_Message.label('Message'),
                                Model.models.Application.M_Broadcast.MB_IsActive.label('Active')
                                ).filter_by(MB_IsDeleted=0).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteBroadcast', methods=['POST','GET'])
def deleteBroadcast():
    session=Session()
    try:
        if(request.method == "POST"):
            Id= request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_Broadcast
                              ).filter(Model.models.Application.M_Broadcast.MBID==Id
                                       ).update({Model.models.Application.M_Broadcast.MB_IsDeleted:1,
                                                 Model.models.Application.M_Broadcast.MB_ModDate:datetime.datetime.now()})
                session.commit()
                return jsonify({'msg':'Broadcast Deleted Successfully'})
            else:
                return jsonify({'err':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()

@app.route('/getBroadcastNotify', methods=['GET','POST'])
def getBroadcastNotify():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getBroadcastNotify,
                    session.query(Model.models.Application.M_Broadcast.MBID.label('Id'),
                                Model.models.Application.M_Broadcast.MB_Title.label('Title'),
                                Model.models.Application.M_Broadcast.MB_Message.label('Message'),
                                Model.models.Application.M_Broadcast.MB_AddDate.label('Time')
                                ).filter_by(MB_IsDeleted=0).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddproductCatalogCategoryForm', methods=['POST','GET'])
def AddproductCatalogCategoryForm():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddProductcatalogCategoryRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddProductcatalogCategoryRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddProductcatalogCategory,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddProductcatalogCategory',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField2= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddProductcatalogCategory1,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddProductcatalogCategory1',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        # Validation= Common_Function.CommonFun.convertToJson(
        #         Constant.constant.constant.Validation,
        #         session.query(Model.models.Application.M_validations.MV_Name.label('name'),
        #                     Model.models.Application.M_validations.MV_Pattern.label('pattern'),
        #                     Model.models.Application.M_validations.MV_Message.label('message')
        #                         ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
        #                 )

        # getTextField[0]['validations']= Validation
        # getTextField2[0]['validations']= Validation
        # getTextField2[1]['validations']= Validation

        getFormRow[0]['childControl']= getTextField
        getFormRow[1]['childControl']= getTextField2
        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()

            queryresult= session.query(func.concat(Model.models.Application.M_ProductCatalogCateg.MPC_FilePath,'/',Model.models.Application.M_ProductCatalogCateg.MPC_FileName).label('Image'),
                                Model.models.Application.M_ProductCatalogCateg.MPC_CategoryName,
                                Model.models.Application.M_ProductCatalogCateg.MPC_Description,
                                ).filter_by(MPCID=Id,MPC_IsActive=1,MPC_IsDeleted=0).all()
            getTextField[0]['value']=queryresult[0].Image
            getTextField2[0]['value']=queryresult[0].MPC_CategoryName
            getTextField2[1]['value']=queryresult[0].MPC_Description

            return jsonify(result=getFormRow)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitproductCatalogCategoryForm', methods=['GET','POST'])
def submitproductCatalogCategoryForm():
    session=Session()
    try:
        if(request.method == "POST"):
            Data= request.form.get('data')
            if(Data!='' or Data !=None):
                getjson= json.loads(Data)
                categoryName =getjson['CategoryName']
                description =getjson['Discription']
                ServiceFile = request.files['files[]']
                FilePath = 'static/ProductcatalogCategory'
                if(ServiceFile.filename!='' and ServiceFile.filename!= None):
                    date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                    name, ext = os.path.splitext(ServiceFile.filename)
                    files = 'ProductcatalogCategory_'+ name +'_' + date  + ext
                    fileName=files
                    if(os.path.exists(FilePath)):
                        ServiceFile.save(os.path.join(FilePath, fileName))
                        print(ServiceFile.filename)
                    else:
                        os.makedirs(FilePath)
                        ServiceFile.save(os.path.join(FilePath, fileName))
                ID = getjson['Id']
                if(ID=='' or ID==None):
                    Insert=Model.models.Application.M_ProductCatalogCateg()
                    Insert.MPC_FileName=fileName
                    Insert.MPC_FilePath=FilePath
                    Insert.MPC_CategoryName=categoryName
                    Insert.MPC_Description=description
                    Insert.MPC_AddIP= flask.request.remote_addr
                    Insert.MPC_AddDate=datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'Category Added Successfully'})

                else:
                    Insert=session.query(Model.models.Application.M_ProductCatalogCateg).get(ID)
                    Insert.MPC_FileName=fileName
                    Insert.MPC_FilePath=FilePath
                    Insert.MPC_CategoryName=categoryName
                    Insert.MPC_Description=description
                    Insert.MPC_AddIP= flask.request.remote_addr
                    Insert.MPC_ModDate=datetime.datetime.now()
                    session.commit()
                    return jsonify({'msg':'Category Updated Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getproductCatalogCategory', methods=['GET','POST'])
def getproductCatalogCategory():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getproductCatalogCategory,
                    session.query(Model.models.Application.M_ProductCatalogCateg.MPCID.label('Id'),
                                Model.models.Application.M_ProductCatalogCateg.MPC_CategoryName.label('Name'),
                                Model.models.Application.M_ProductCatalogCateg.MPC_Description.label('Description'),
                                Model.models.Application.M_ProductCatalogCateg.MPC_IsActive.label('Active')
                                ).filter_by(MPC_IsDeleted=0
                                ).order_by(Model.models.Application.M_ProductCatalogCateg.MPCID.desc()).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
        # elif(request.method == "POST"):
        #     request_json = request.get_json(force = True)
        #     Name = request_json.get('Name')
        #     Discription = request_json.get('Discription')
        #     apply = []
        #     if(Name !='' and Name !=None):
        #         apply.append(Model.models.Application.M_Service.MS_CategoryName.contains(Name))
        #     if(Discription !='' and Discription !=None):
        #         apply.append(Model.models.Application.M_Service.MS_Description.contains(Discription))

        #     if((Name!='' and Name !=None) or (Discription!='' and Discription !=None)):
        #         queryresult= Common_Function.CommonFun.convertToJson(
        #             Constant.constant.constant.getService,
        #             session.query(Model.models.Application.M_Service.MS_CategoryName.label('Name'),
        #                         Model.models.Application.M_Service.MS_Description.label('Discription')
        #                         ).filter_by(MS_IsDeleted=0).filter(*apply).all()
        #                     )
        #         session.commit()
        #         return jsonify(result=queryresult)
        #     else:
        #         queryresult= Common_Function.CommonFun.convertToJson(
        #             Constant.constant.constant.getService,
        #             session.query(Model.models.Application.M_Service.MS_CategoryName.label('Name'),
        #                         Model.models.Application.M_Service.MS_Description.label('Discription')
        #                         ).filter_by(MS_IsDeleted=0).all()
        #                     )
        #         session.commit()
        #         return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteproductCatalogCategory', methods=['POST','GET'])
def deleteproductCatalogCategory():
    session=Session()
    try:
        if(request.method == "POST"):
            Id= request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.M_ProductCatalogCateg
                              ).filter(Model.models.Application.M_ProductCatalogCateg.MPCID==Id
                                       ).update({Model.models.Application.M_ProductCatalogCateg.MPC_IsDeleted:1})
                session.commit()
                return jsonify({'msg':'category Deleted Successfully'})
            else:
                return jsonify({'msg':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()

@app.route('/ActivateproductCatalogCategory', methods=['POST'])
def ActivateproductCatalogCategory():
    session=Session()
    try:
        if(request.method == "POST"):
            Id=request.get_json()

            if(Id != '' and Id != None):
                Status = session.query(Model.models.Application.M_ProductCatalogCateg.MPC_IsActive
                              ).filter_by(MPCID=Id).all()
                if(Status[0]==1):

                    session.query(Model.models.Application.M_ProductCatalogCateg
                                ).filter_by(MPCID = Id
                                ).update({Model.models.Application.M_ProductCatalogCateg.MPC_IsActive:0})
                    session.commit()
                    return jsonify({'msg':'Product Catalog InActivated Successfully'})
                else:
                    session.query(Model.models.Application.M_ProductCatalogCateg
                        ).filter_by(MPCID = Id).update({Model.models.Application.M_ProductCatalogCateg.MPC_IsActive:1})
                    session.commit()
                    return jsonify({'msg':'Product Catalog Activated Successfully'})
            else:
                return jsonify({'err':'Something went wrong'})
        else:
            return jsonify({'err':'Wrong method used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/AddproductCatalogForm', methods=['POST','GET'])
def AddproductCatalogForm():
    session=Session()
    try:

        getFormRow= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddProductCatalogRow,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddProductCatalogRow',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddProductCatalogRow1,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddProductCatalogRow1',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField2= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddProductCatalogRow2,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddProductCatalogRow2',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField3= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddProductCatalogRow3,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddProductCatalogRow3',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())
        getTextField4= Common_Function.CommonFun.convertToJson(Constant.constant.constant.AddProductCatalogRow4,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className')
                        ).filter_by(MFC_FormName='AddProductCatalogRow4',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all())

        # Validation= Common_Function.CommonFun.convertToJson(
        #         Constant.constant.constant.Validation,
        #         session.query(Model.models.Application.M_validations.MV_Name.label('name'),
        #                     Model.models.Application.M_validations.MV_Pattern.label('pattern'),
        #                     Model.models.Application.M_validations.MV_Message.label('message')
        #                         ).filter_by(MV_Type='required',MV_IsActive=1,MV_IsDeleted=0).order_by(Model.models.Application.M_validations.MVID).all()
        #                 )
        ProductCatalogType = Common_Function.CommonFun.ProductCatalogType()
        getClinic = Common_Function.CommonFun.getClinic()
        CatelogItemtype = Common_Function.CommonFun.CatelogItemtype()
        getTextField4[0]['options']= ProductCatalogType
        getTextField2[1]['options'] = CatelogItemtype
        getTextField[1]['options'] = getClinic
        # getTextField2[0]['validations']= Validation
        # getTextField2[1]['validations']= Validation

        getFormRow[0]['childControl']= getTextField
        getFormRow[1]['childControl']= getTextField2
        getFormRow[2]['childControl']= getTextField3
        getFormRow[3]['childControl']= getTextField4
        if(request.method == "GET"):
            return jsonify(result=getFormRow)
        elif(request.method == "POST"):
            Id=request.get_json()

            queryresult= session.query(Model.models.Application.productCatalog.MPC_ItemName,
                                Model.models.Application.productCatalog.MPC_ItemType,
                                Model.models.Application.productCatalog.M_Branch_MBID,
                                Model.models.Application.productCatalog.MPC_LoyalityPoint,
                                Model.models.Application.productCatalog.MPC_Description,
                                Model.models.Application.productCatalog.MPC_SuitedFor,
                                Model.models.Application.productCatalog.MPC_Ingredients,
                                Model.models.Application.productCatalog.MPC_categories,
                                Model.models.Application.productCatalog.MPC_Menufacturer,
                                Model.models.Application.productCatalog.MPC_Recommendation
                                ).filter_by(MPCID=Id,MPC_IsActive=1,MPC_IsDeleted=0).all()
            getTextField[1]['value']=queryresult[0].M_Branch_MBID
            getTextField2[0]['value']=queryresult[0].MPC_ItemName
            getTextField2[1]['value']=queryresult[0].MPC_ItemType
            getTextField2[2]['value']=queryresult[0].MPC_LoyalityPoint
            getTextField2[3]['value']=queryresult[0].MPC_Description
            getTextField3[0]['value']=queryresult[0].MPC_Menufacturer
            getTextField3[1]['value']=queryresult[0].MPC_SuitedFor
            getTextField3[2]['value']=queryresult[0].MPC_Recommendation
            getTextField3[3]['value']=queryresult[0].MPC_Ingredients
            getTextField4[0]['value']=queryresult[0].MPC_categories

            return jsonify(result=getFormRow)
    finally:
        session.close()

@app.route('/submitproductCatalogForm', methods=['GET','POST'])
def submitproductCatalogForm():
    session=Session()
    try:
        if(request.method == "POST"):
            Data= request.form.get('data')
            if(Data!='' or Data !=None):
                getjson= json.loads(Data)
                branch =getjson['branch']
                ItemName =getjson['ItemName']
                ItemType =getjson['ItemType']
                LoyalityPoints =getjson['LoyalityPoints']
                Description =getjson['Description']
                Manufacturer =getjson['Manufacturer']
                BestSuitedFor =getjson['BestSuitedFor']
                Recommendation =getjson['Recommendation']
                Ingredients =getjson['Ingredients']
                Categories =getjson['Categories']
                fileName = ''
                FilePath = 'static/productCatalog'

                if('files[]' in getjson):
                    ServiceFile = request.files['files[]']

                    if(ServiceFile.filename!='' and ServiceFile.filename!= None):
                        date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                        name, ext = os.path.splitext(ServiceFile.filename)
                        files = 'productCatalog_'+ name +'_' + date  + ext
                        fileName=files
                        if(os.path.exists(FilePath)):
                            ServiceFile.save(os.path.join(FilePath, fileName))
                            print(ServiceFile.filename)
                        else:
                            os.makedirs(FilePath)
                            ServiceFile.save(os.path.join(FilePath, fileName))
                ID = getjson['ID']
                if(ID=='' or ID==None):
                    Insert=Model.models.Application.productCatalog()
                    Insert.MPC_FileName=fileName
                    Insert.MPC_FilePath=FilePath
                    Insert.MPC_categories=Categories
                    Insert.MPC_Description=Description
                    Insert.MPC_Recommendation=Recommendation
                    Insert.MPC_Ingredients=Ingredients
                    Insert.MPC_ItemName=ItemName
                    Insert.MPC_ItemType=ItemType
                    Insert.M_Branch_MBID=branch
                    Insert.MPC_LoyalityPoint=LoyalityPoints
                    Insert.MPC_SuitedFor=BestSuitedFor
                    Insert.MPC_Menufacturer=Manufacturer
                    Insert.MPC_AddIP= flask.request.remote_addr
                    Insert.MPC_AddDate=datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'Product Catalog Added Successfully'})

                else:
                    Insert=session.query(Model.models.Application.productCatalog).get(ID)
                    Insert.MPC_FileName=fileName
                    Insert.MPC_FilePath=FilePath
                    Insert.MPC_categories=Categories
                    Insert.MPC_Description=Description
                    Insert.MPC_Recommendation=Recommendation
                    Insert.MPC_Ingredients=Ingredients
                    Insert.MPC_ItemName=ItemName
                    Insert.MPC_ItemType=ItemType
                    Insert.M_Branch_MBID=branch
                    Insert.MPC_LoyalityPoint=LoyalityPoints
                    Insert.MPC_SuitedFor=BestSuitedFor
                    Insert.MPC_Menufacturer=Manufacturer
                    Insert.MPC_AddIP= flask.request.remote_addr
                    Insert.MPC_ModDate=datetime.datetime.now()
                    session.commit()
                    return jsonify({'msg':'Product Catalog Updated Successfully'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteproductCatalog', methods=['POST','GET'])
def deleteproductCatalog():
    session=Session()
    try:
        if(request.method == "POST"):
            Id= request.get_json()

            if(Id != '' and Id != None):
                session.query(Model.models.Application.productCatalog
                              ).filter(Model.models.Application.productCatalog.MPCID==Id
                              ).update({Model.models.Application.productCatalog.MPC_IsDeleted:1})
                session.commit()
                return jsonify({'msg':'Product Catalog Deleted Successfully'})
            else:
                return jsonify({'err':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()

@app.route('/getproductCatalogPro', methods=['GET','POST'])
def getproductCatalogPro():
    session=Session()
    try:
        if(request.method == "GET"):

            queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getproductCatalogPro,
                    session.query(Model.models.Application.productCatalog.MPCID.label('Id'),
                                Model.models.Application.productCatalog.MPC_ItemName.label('Item Name'),
                                Model.models.Application.productCatalog.MPC_ItemType.label('Items Type'),
                                Model.models.Application.T_Details.TD_Name.label('Item Type'),
                                Model.models.Application.productCatalog.MPC_SuitedFor.label('Suited For'),
                                Model.models.Application.productCatalog.MPC_categories.label('Categoreey'),
                                Model.models.Application.M_ProductCatalogCateg.MPC_CategoryName.label('Category')
                                ).filter_by(MPC_IsDeleted=0
                                ).join(Model.models.Application.T_Details,Model.models.Application.T_Details.TDID==Model.models.Application.productCatalog.MPC_ItemType
                                ).join(Model.models.Application.M_ProductCatalogCateg,Model.models.Application.M_ProductCatalogCateg.MPCID==Model.models.Application.productCatalog.MPC_categories
                                ).order_by(Model.models.Application.productCatalog.MPCID.desc()
                                ).all()
                            )
            session.commit()
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/ValidateLogin', methods=['GET','POST'])
def ValidateLogin():
    session=Session()
    try:
        if(request.method == "POST"):
            request_json = request.get_json()
            username = request_json.get('username')
            pswd = request_json.get('pswd')
            print(username,pswd)
            getDbUserName = session.query(Model.models.Application.M_Users.MU_Name,
                                          Model.models.Application.M_Users.MUID,
                                          Model.models.Application.M_Users.MU_UserType,
                                          sqlalchemy.func.coalesce(Model.models.Application.M_Users.MU_BranchId,'').label('MU_BranchId'),
                                          Model.models.Application.M_Users.MU_Password).filter_by(
                    MU_Username=username, MU_IsActive=1, MU_IsDeleted=0).all()
            session.commit()
            if(len(getDbUserName) > 0):
                Password = getDbUserName[0].MU_Password
                pswrd= hashlib.sha1(Password.encode())
                ChcekPWd = pswrd.hexdigest()
                print(pswrd.hexdigest())
                if(ChcekPWd==pswd):
                    token = encode_auth_token(username,getDbUserName[0].MUID)
                    print(token)
                    return jsonify({'token':token, 'Name':getDbUserName[0].MU_Name,'userid':getDbUserName[0].MUID,'branchId':getDbUserName[0].MU_BranchId,'usertype':getDbUserName[0].MU_UserType})
                else:
                    return jsonify({'err':'Incorrect Password'})
            else:
                return jsonify({'err':'Incorrect Username'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/chooseBranch', methods=['POST','GET'])
def chooseBranch():
    session=Session()
    try:
        if(request.method == "POST"):
            request_json = request.get_json()
            UserId = request_json.get('userId')
            brachId = request_json.get('branchId')
            if(UserId != '' and UserId != None and brachId != '' and brachId != None):
                session.query(Model.models.Application.M_Users
                              ).filter(Model.models.Application.M_Users.MUID==UserId
                              ).update({Model.models.Application.M_Users.MU_BranchId:brachId,
                                        Model.models.Application.M_Users.MU_ModDate:datetime.datetime.now()})
                session.commit()
                return jsonify({'msg':'Branch selected Successfully'})
            else:
                return jsonify({'err':'Something went wrong (Id was not there)'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
          session.close()


def encode_auth_token(username,UserId):

    try:
        payload = {
            'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=2000),
            'id': UserId
            
        }
        print(payload)
        print('################################# Token')
        token = jwt.encode(
            payload,
            app.config['SECRET_KEY'],
            algorithm='HS256'
        )
        # token = token.decode("utf-8")
        return token
    except Exception as e:
        print(e)







@app.route('/getAllControl', methods=['GET'])
def getAllControl():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getAllControl,
                session.query(Model.models.Application.M_Control.MCID.label('ID'),
                            Model.models.Application.M_Control.MC_ControlName.label('name'),
                            Model.models.Application.M_Control.MC_ControlType.label('type')
                                ).filter_by(MC_IsActive=1,MC_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/getOrgAllDtls', methods=['GET'])
def getOrgAllDtls():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.OrgAllDtl,
                session.query(Model.models.Application.M_Organisation.MOID.label('ID'),
                            Model.models.Application.M_Organisation.MO_Name.label('Name'),
                            Model.models.Application.M_Organisation.MO_Email.label('Email'),
                            Model.models.Application.M_Organisation.MO_Mobile.label('Mobile'),
                            Model.models.Application.M_Organisation.MO_About.label('About')
                                ).filter_by(MO_IsActive=1,MO_IsDeleted=0
                            ).order_by(Model.models.Application.M_Organisation.MOID.desc()).all()
                        )
            return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/getCountry', methods=['GET'])
def getCountry():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.GetCountry,
                session.query(Model.models.Application.T_Details.TDID,
                            Model.models.Application.T_Details.TD_Name
                                ).filter_by(M_Details_MDID=1,TD_IsActive=1,TD_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/getPeriod', methods=['GET'])
def getPeriod():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getPeriod,
                session.query(Model.models.Application.T_Details.TDID,
                            Model.models.Application.T_Details.TD_Name
                                ).filter_by(M_Details_MDID=5,TD_IsActive=1,TD_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/getState', methods=['GET'])
def getState():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.GetState,
                session.query(Model.models.Application.T_Details.TDID,
                            Model.models.Application.T_Details.TD_Name
                                ).filter_by(M_Details_MDID=2,TD_IsActive=1,TD_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getVaccineType', methods=['GET'])
def getVaccineType():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getVaccineType,
                session.query(Model.models.Application.M_VaccineType.MVTID.label('ID'),
                            Model.models.Application.M_VaccineType.MVT_Name.label('Vaccine_Name')
                                ).filter_by(MVT_IsActive=1,MVT_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/getCity', methods=['GET','POST'])
def getCity():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.GetCity,
                session.query(Model.models.Application.T_Details.TDID,
                            Model.models.Application.T_Details.TD_Name
                                ).filter_by(M_Details_MDID=3,TD_IsActive=1,TD_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getGender', methods=['GET'])
def getGender():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.GetGender,
                session.query(Model.models.Application.T_Details.TDID,
                            Model.models.Application.T_Details.TD_Name
                                ).filter_by(M_Details_MDID=4,TD_IsActive=1,TD_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/addProcedure', methods=['GET'])
def addProcedure():
    session=Session()
    try:
        if(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')

            Insert=Model.models.Application.T_Details()
            Insert.TD_Name=Name
            Insert.M_Details_MDID=6
            Insert.MD_AddIP= flask.request.remote_addr
            session.add(Insert)
            session.commit()
            print("success")
                    #return "inserted Successfully"

            ORGID= session.query(Model.models.Application.T_Details.TDID).order_by(Model.models.Application.T_Details.TDID.desc()).first()


            return jsonify({'msg':'Procedure Added Successfully', 'data': {'ProcedureId':ORGID[0]}})
    finally:
        session.close()

@app.route('/addBloodgrp', methods=['GET'])
def addBloodgrp():
    session=Session()
    try:
        if(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')

            Insert=Model.models.Application.T_Details()
            Insert.TD_Name=Name
            Insert.M_Details_MDID=7
            Insert.MD_AddIP= flask.request.remote_addr
            session.add(Insert)
            session.commit()
            print("success")
                    #return "inserted Successfully"

            ORGID= session.query(Model.models.Application.T_Details.TDID).order_by(Model.models.Application.T_Details.TDID.desc()).first()


            return jsonify({'msg':'Blood group Added Successfully', 'data': {'BloodGrpId':ORGID[0]}})
    finally:
        session.close()

@app.route('/addDepartment', methods=['GET'])
def addDepartment():
    session=Session()
    try:
        if(request.method == "POST"):
            request_json = request.get_json(force = True)
            Name = request_json.get('Name')

            Insert=Model.models.Application.T_Details()
            Insert.TD_Name=Name
            Insert.M_Details_MDID=8
            Insert.MD_AddIP= flask.request.remote_addr
            session.add(Insert)
            session.commit()


            print("success")
                    #return "inserted Successfully"

            ORGID= session.query(Model.models.Application.T_Details.TDID).order_by(Model.models.Application.T_Details.TDID.desc()).first()


            return jsonify({'msg':'Department Added Successfully', 'data': {'DepartmentId':ORGID[0]}})
    finally:
        session.close()

@app.route('/getProcedure', methods=['GET'])
def getProcedure():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getProcedure,
                session.query(Model.models.Application.T_Details.TDID,
                            Model.models.Application.T_Details.TD_Name
                                ).filter_by(M_Details_MDID=6,TD_IsActive=1,TD_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/getbloodgrp', methods=['GET'])
def getbloodgrp():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getbloodgrp,
                session.query(Model.models.Application.T_Details.TDID,
                            Model.models.Application.T_Details.TD_Name
                                ).filter_by(M_Details_MDID=7,TD_IsActive=1,TD_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDepartment', methods=['GET'])
def getDepartment():
    session=Session()
    try:
        if(request.method == "GET"):
            queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getDepartment,
                session.query(Model.models.Application.T_Details.TDID,
                            Model.models.Application.T_Details.TD_Name
                                ).filter_by(M_Details_MDID=8,TD_IsActive=1,TD_IsDeleted=0).all()
                        )
            return jsonify(result=queryresult)
    finally:
        session.close()

@app.route('/', methods=['GET'])
def home():
    session=Session()

    queryresult= Common_Function.CommonFun.convertToJson(
        Constant.constant.constant.OrgDtls,
        session.query(Model.models.Application.M_Organisation.MOID,
                        Model.models.Application.M_Organisation.MO_Name,
                        Model.models.Application.M_Organisation.MO_Email
                            ).filter_by(MO_IsActive=1,MO_IsDeleted=0).all()
                      )

    return jsonify({'MSG':'WelCome to Continua Kids'})

@app.route('/insert', methods=['GET','POST','OPTIONS'])
def insert():

    token=jwt.encode({'user':'vipul Kumar','exp':datetime.datetime.now() + datetime.timedelta(minutes=300)},app.config['SECRET_KEY'])

    return jsonify({'token': token})

@login_manager.user_loader
def load_user(userid):
    return Model.models.Employee.Temp_IndividualDtl(userid)

@app.route('/methodcheck', methods=['GET','POST'])
def methodcheck():
    session=Session()
    if flask.request.method=='POST':
        title= flask.request.form.get('Title')
        description= flask.request.form.get('txtEditor')
        file= flask.request.files[str('Document')]
        FilePath = 'static/Media_Document'
        if(file.filename!='' and file.filename!= None):
            date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
            name, ext = os.path.splitext(file.filename)
            files = str('vipul')+ '_'+ 'notification' +'_' + date  + ext
            fileName=files
            if(os.path.exists(FilePath)):
                file.save(os.path.join(FilePath, fileName))
                print(file.filename)
            else:
                os.makedirs(FilePath)
                file.save(os.path.join(FilePath, fileName))

        return "<h1>User "+title+" Created Successfully</h1>"
    else:
        return "<h1>Wrong method used for this</h1>"

@app.route('/adminReport', methods=['GET','POST'])
def adminReport():
    session=Session()
    try:
        if flask.request.method=='POST':
            request_json = request.get_json()
            ReportType = request_json.get('ReportType')
            Location = request_json.get('Location')
            From = request_json.get('From')
            To = request_json.get('To')


            

            if(ReportType == 511):
                apply = []
                if(Location !='' and Location !=None):
                    apply.append(Model.models.Application.M_Appointment.M_Branch_MBID.in_(Location))
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_Appointment.MA_Date >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_Appointment.MA_Date <=To)

                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.AllAppointmentadminReport,
                    session.query(Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('doctorId'),
                                                            Model.models.Application.M_Patient.MP_Name.label('PATIENT NAME'),
                                                            Model.models.Application.M_Patient.MP_UHID.label('PATIENT ID'),
                                                            Model.models.Application.M_Appointment.MAID.label('VISIT ID'),
                                                            Model.models.Application.M_Appointment.M_Patient_MPID.label('Patient'),
                                                            Model.models.Application.M_Appointment.MP_Procedure.label('SER'),
                                                            Model.models.Application.M_Service.MS_CategoryName.label('SERVICE'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('DATE'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Time,'%I:%i %p').label('TIME'),
                                                            Model.models.Application.M_Appointment.MP_AppointmentType.label('VISIT TYPE'),
                                                            sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,'',Model.models.Application.M_DoctorDetails.MDD_LastName).label('HCP NAME'),
                                                            Model.models.Application.M_Branch.MB_Name.label('LOCATION'),
                                                            Model.models.Application.M_Appointment.MP_Status.label('patientStatus'),
                                                            Model.models.Application.M_Appointment.MP_Notes.label('patientNotes'),
                                                            Model.models.Application.M_Appointment.MA_PaymentMode.label('PAYMENT MODE'),
                                                            Model.models.Application.M_Appointment.MA_Fee.label('FEES'),
                                                            Model.models.Application.M_Appointment.MA_Discount.label('DISCOUNT'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_ReceiptDate,'%d-%b-%Y').label('DATE OF RECEIPT'),
                                                            Model.models.Application.M_Appointment.MA_InvoiceNo.label('INVOICE NO.'),
                                                            Model.models.Application.M_Appointment.MA_CGST.label('CGST'),
                                                            Model.models.Application.M_Appointment.MA_SGST.label('SGST'),
                                                            Model.models.Application.M_Appointment.MA_TotalAmount.label('TOTAL AMOUNT'),
                                                            Model.models.Application.M_Appointment.MA_PackageName.label('PACKAGE NAME'),
                                                            Model.models.Application.M_Appointment.MA_SessionsAvailed.label('SESSIONS AVAILED'),
                                                            Model.models.Application.M_Appointment.MA_RemoteSessions.label('REMOTE SESSION'),
                                                            Model.models.Application.M_Appointment.MA_AppStatus.label('STATUS'),
                                                            Model.models.Application.T_Details.TD_Name.label('DURATION')
                                            ).filter_by(MP_IsActive=1,MP_IsDeleted=0,
                                                        MP_IsCancelled=0
                                            ).filter(*apply).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                            ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                            ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                            ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                            ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Duration
                                                    ).all())

                return jsonify(result=queryresult)
            elif(ReportType == 512):
                apply = []
                if(Location !='' and Location !=None):
                    apply.append(Model.models.Application.M_Appointment.M_Branch_MBID.in_(Location))
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_Appointment.MA_Date >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_Appointment.MA_Date <=To)

                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.CompletedClinicVisit,
                    session.query(Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('doctorId'),
                                                            Model.models.Application.M_Patient.MP_Name.label('PATIENT NAME'),
                                                            Model.models.Application.M_Patient.MP_UHID.label('PATIENT ID'),
                                                            Model.models.Application.M_Appointment.MAID.label('VISIT ID'),
                                                            Model.models.Application.M_Appointment.M_Patient_MPID.label('Patient'),
                                                            Model.models.Application.M_Appointment.MP_Procedure.label('SER'),
                                                            Model.models.Application.M_Service.MS_CategoryName.label('SERVICE'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('DATE'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Time,'%I:%i %p').label('TIME'),
                                                            Model.models.Application.M_Appointment.MP_AppointmentType.label('VISIT TYPE'),
                                                            sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,'',Model.models.Application.M_DoctorDetails.MDD_LastName).label('HCP NAME'),
                                                            Model.models.Application.M_Branch.MB_Name.label('LOCATION'),
                                                            Model.models.Application.M_Appointment.MP_Status.label('patientStatus'),
                                                            Model.models.Application.M_Appointment.MP_Notes.label('patientNotes'),
                                                            Model.models.Application.M_Appointment.MA_PaymentMode.label('PAYMENT MODE'),
                                                            Model.models.Application.M_Appointment.MA_Fee.label('FEES'),
                                                            Model.models.Application.M_Appointment.MA_Discount.label('DISCOUNT'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_ReceiptDate,'%d-%b-%Y').label('DATE OF RECEIPT'),
                                                            Model.models.Application.M_Appointment.MA_InvoiceNo.label('INVOICE NO.'),
                                                            Model.models.Application.M_Appointment.MA_CGST.label('CGST'),
                                                            Model.models.Application.M_Appointment.MA_SGST.label('SGST'),
                                                            Model.models.Application.M_Appointment.MA_TotalAmount.label('TOTAL AMOUNT'),
                                                            Model.models.Application.M_Appointment.MA_PackageName.label('PACKAGE NAME'),
                                                            Model.models.Application.M_Appointment.MA_SessionsAvailed.label('SESSIONS AVAILED'),
                                                            Model.models.Application.M_Appointment.MA_RemoteSessions.label('REMOTE SESSION'),
                                                            sqlalchemy.func.coalesce(Model.models.Application.M_Appointment.MA_AppStatus,'Not Completed').label('STATUS'),
                                                            Model.models.Application.T_Details.TD_Name.label('DURATION')
                                            ).filter_by(MP_IsActive=1,MP_IsDeleted=0,
                                                        MP_IsCancelled=0
                                            ).filter(Model.models.Application.M_Appointment.MP_Status.in_([393,527])            
                                            ).filter(*apply).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                            ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                            ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                            ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                            ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Duration
                                                    ).all())

                return jsonify(result=queryresult)
            elif(ReportType == 513):
                apply = []
                if(Location !='' and Location !=None):
                    apply.append(Model.models.Application.M_Appointment.M_Branch_MBID.in_(Location))
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_Appointment.MA_Date >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_Appointment.MA_Date <=To)

                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.AllClinicVisit,
                    session.query(Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('doctorId'),
                                                            Model.models.Application.M_Patient.MP_Name.label('PATIENT NAME'),
                                                            Model.models.Application.M_Patient.MP_UHID.label('PATIENT ID'),
                                                            Model.models.Application.M_Appointment.MAID.label('VISIT ID'),
                                                            Model.models.Application.M_Appointment.M_Patient_MPID.label('Patient'),
                                                            Model.models.Application.M_Appointment.MP_Procedure.label('SER'),
                                                            Model.models.Application.M_Service.MS_CategoryName.label('SERVICE'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('DATE'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Time,'%I:%i %p').label('TIME'),
                                                            Model.models.Application.M_Appointment.MP_AppointmentType.label('VISIT TYPE'),
                                                            sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,'',Model.models.Application.M_DoctorDetails.MDD_LastName).label('HCP NAME'),
                                                            Model.models.Application.M_Branch.MB_Name.label('LOCATION'),
                                                            Model.models.Application.M_Appointment.MP_Status.label('patientStatus'),
                                                            Model.models.Application.M_Appointment.MP_Notes.label('patientNotes'),
                                                            Model.models.Application.M_Appointment.MA_PaymentMode.label('PAYMENT MODE'),
                                                            Model.models.Application.M_Appointment.MA_Fee.label('FEES'),
                                                            Model.models.Application.M_Appointment.MA_Discount.label('DISCOUNT'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_ReceiptDate,'%d-%b-%Y').label('DATE OF RECEIPT'),
                                                            Model.models.Application.M_Appointment.MA_InvoiceNo.label('INVOICE NO.'),
                                                            Model.models.Application.M_Appointment.MA_CGST.label('CGST'),
                                                            Model.models.Application.M_Appointment.MA_SGST.label('SGST'),
                                                            Model.models.Application.M_Appointment.MA_TotalAmount.label('TOTAL AMOUNT'),
                                                            Model.models.Application.M_Appointment.MA_PackageName.label('PACKAGE NAME'),
                                                            Model.models.Application.M_Appointment.MA_SessionsAvailed.label('SESSIONS AVAILED'),
                                                            Model.models.Application.M_Appointment.MA_RemoteSessions.label('REMOTE SESSION'),
                                                            Model.models.Application.M_Appointment.MA_AppStatus.label('STATUS'),
                                                            Model.models.Application.T_Details.TD_Name.label('DURATION')
                                            ).filter_by(MP_IsActive=1,MP_IsDeleted=0,
                                                        MP_IsCancelled=0,MP_AppointmentType=31
                                            ).filter(*apply).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                            ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                            ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                            ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                            ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Duration
                                                    ).all())

                return jsonify(result=queryresult)
            elif(ReportType == 525):
                apply = []
                if(Location !='' and Location !=None):
                    apply.append(Model.models.Application.M_Appointment.M_Branch_MBID.in_(Location))
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_Appointment.MA_Date >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_Appointment.MA_Date <=To)

                queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.AllOnlineVisit,
                    session.query(Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('doctorId'),
                                                            Model.models.Application.M_Patient.MP_Name.label('PATIENT NAME'),
                                                            Model.models.Application.M_Patient.MP_UHID.label('PATIENT ID'),
                                                            Model.models.Application.M_Appointment.MAID.label('VISIT ID'),
                                                            Model.models.Application.M_Appointment.M_Patient_MPID.label('Patient'),
                                                            Model.models.Application.M_Appointment.MP_Procedure.label('SER'),
                                                            Model.models.Application.M_Service.MS_CategoryName.label('SERVICE'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('DATE'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Time,'%I:%i %p').label('TIME'),
                                                            Model.models.Application.M_Appointment.MP_AppointmentType.label('VISIT TYPE'),
                                                            sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,'',Model.models.Application.M_DoctorDetails.MDD_LastName).label('HCP NAME'),
                                                            Model.models.Application.M_Branch.MB_Name.label('LOCATION'),
                                                            Model.models.Application.M_Appointment.MP_Status.label('patientStatus'),
                                                            Model.models.Application.M_Appointment.MP_Notes.label('patientNotes'),
                                                            Model.models.Application.M_Appointment.MA_PaymentMode.label('PAYMENT MODE'),
                                                            Model.models.Application.M_Appointment.MA_Fee.label('FEES'),
                                                            Model.models.Application.M_Appointment.MA_Discount.label('DISCOUNT'),
                                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_ReceiptDate,'%d-%b-%Y').label('DATE OF RECEIPT'),
                                                            Model.models.Application.M_Appointment.MA_InvoiceNo.label('INVOICE NO.'),
                                                            Model.models.Application.M_Appointment.MA_CGST.label('CGST'),
                                                            Model.models.Application.M_Appointment.MA_SGST.label('SGST'),
                                                            Model.models.Application.M_Appointment.MA_TotalAmount.label('TOTAL AMOUNT'),
                                                            Model.models.Application.M_Appointment.MA_PackageName.label('PACKAGE NAME'),
                                                            Model.models.Application.M_Appointment.MA_SessionsAvailed.label('SESSIONS AVAILED'),
                                                            Model.models.Application.M_Appointment.MA_RemoteSessions.label('REMOTE SESSION'),
                                                            Model.models.Application.M_Appointment.MA_AppStatus.label('STATUS'),
                                                            Model.models.Application.T_Details.TD_Name.label('DURATION')
                                            ).filter_by(MP_IsActive=1,MP_IsDeleted=0,
                                                        MP_IsCancelled=0,MP_AppointmentType=32
                                            ).filter(*apply).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                            ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                            ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                            ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                            ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Appointment.MP_Duration
                                                    ).all())

                return jsonify(result=queryresult)
            elif(ReportType == 526):
                apply = []
                if(Location !='' and Location !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.M_Branch_MBID.in_(Location))
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.MI_Date >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.MI_Date <=To)

                queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.NonGstInvoices,
                                session.query(sqlalchemy.func.concat(Model.models.Application.M_InvoiceMaster.MPP_Prefix,'/',Model.models.Application.M_InvoiceMaster.MIID).label('INVOICE NO.'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_Date,'%d-%b-%Y').label('DATE'),
                                            Model.models.Application.M_InvoiceMaster.MI_bankName.label('BANK NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_Card.label('CARD AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_CardType.label('CARD TYPE'),
                                            Model.models.Application.M_InvoiceMaster.MI_Cash.label('CASH AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_CGST.label('CGST'),
                                            Model.models.Application.M_InvoiceMaster.MI_SGST.label('SGST'),
                                            Model.models.Application.M_InvoiceMaster.MI_Discount.label('DISCOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_discountPercent.label('discountPercent'),
                                            Model.models.Application.M_InvoiceMaster.MI_DiscountReason.label('DISCOUNT REASON'),
                                            Model.models.Application.M_InvoiceMaster.MI_Cheque.label('CHEQUE AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_Comments.label('COMMENTS'),
                                            Model.models.Application.M_InvoiceMaster.dueSettle.label('AMOUNT BALANCE'),
                                            Model.models.Application.M_InvoiceMaster.MI_InvoiceTotal.label('SERVICE FEE'),
                                            Model.models.Application.M_InvoiceMaster.MI_invoiceType.label('invoiceType'),
                                            Model.models.Application.M_InvoiceMaster.MI_lastDigits.label('CARD NUMBER'),
                                            Model.models.Application.M_InvoiceMaster.MI_Online.label('ONLINE AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_Prepaid.label('PREPAID AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_TotalPayable.label('AMOUNT PAYABLE'),
                                            Model.models.Application.M_InvoiceMaster.MI_Upi.label('UPI AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_AmountPaid.label('AMOUNT PAID'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceId.label('ServiceId'),
                                            Model.models.Application.M_InvoiceMaster.MI_SettleInvoice.label('SettleInvoice'),
                                            Model.models.Application.M_InvoiceMaster.MainInvoiceNo.label('MainInvoiceNo'),
                                            Model.models.Application.M_InvoiceMaster.MI_TotalAmount.label('TotalAmount'),
                                            Model.models.Application.M_InvoiceMaster.MI_PaidByPartner.label('CO-PAY AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_PaidByPatient.label('PaidByPatient'),
                                            Model.models.Application.M_InvoiceMaster.MPIA_TotalSessions.label('TotalSessions'),
                                            Model.models.Application.M_InvoiceMaster.MPIA_UsedSession.label('UsedSession'),
                                            Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode.label('PaymentMode'),
                                            Model.models.Application.M_InvoiceMaster.MIP_InvoiceType.label('InvoiceType'),
                                            Model.models.Application.M_InvoiceMaster.MIP_MedicineDetails.label('MedicineDetails'),
                                            Model.models.Application.M_InvoiceMaster.M_PartnerOrgId.label('PartnerOrgId'),
                                            Model.models.Application.M_InvoiceMaster.M_PartnerOrgName.label('CO-PAY ORG NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceName.label('SERVICE NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_AppointmentId.label('VISIT ID'),
                                            Model.models.Application.M_InvoiceMaster.M_Branch_MBID.label('M_Branch_MBID'),
                                            Model.models.Application.M_InvoiceMaster.M_Patient_MPID.label('M_Patient_MPID'),
                                            Model.models.Application.M_InvoiceMaster.MPP_PackageName.label('MPP_PackageName'),
                                            Model.models.Application.M_InvoiceMaster.MPP_PackagePrice.label('MPP_PackagePrice'),
                                            Model.models.Application.M_InvoiceMaster.MPP_PackageId.label('MPP_PackageId'),
                                            Model.models.Application.M_Patient.MP_Name.label('PATIENT NAME'),
                                            Model.models.Application.M_Patient.MP_UHID.label('PATIENT ID'),
                                            Model.models.Application.M_Branch.MB_Name.label('LOCATION'),
                                            # Model.models.Application.M_DueBalanceInvoice.MI_ServiceId.label('Procedure'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB')
                                            ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                            ).filter(*apply
                                            ).filter(Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode!='Due Balance'
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_InvoiceMaster.M_Patient_MPID
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_InvoiceMaster.M_Branch_MBID
                                ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all())
                session.commit()
                return jsonify(result=queryresult)
            elif(ReportType == 528):
                apply = []
                if(Location !='' and Location !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.M_Branch_MBID.in_(Location))
                if(From !='' and From !=None):
                    apply.append(sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_AddDate,'%Y-%m-%d') >= From)
                if(To !='' and To !=None):
                    apply.append(sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_AddDate,'%Y-%m-%d') <=To)

                queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.CollectionReport,
                                session.query(sqlalchemy.func.concat(Model.models.Application.M_InvoiceMaster.MPP_Prefix,'/',Model.models.Application.M_InvoiceMaster.MainInvoiceNo).label('INVOICE/RECEIPT NO.'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_Date,'%d-%b-%Y').label('DATE'),
                                            Model.models.Application.M_InvoiceMaster.MI_bankName.label('BANK NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_Card.label('CARD AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_CardType.label('CARD TYPE'),
                                            Model.models.Application.M_InvoiceMaster.MI_Cash.label('CASH AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_CGST.label('CGST'),
                                            Model.models.Application.M_InvoiceMaster.MI_SGST.label('SGST'),
                                            Model.models.Application.M_InvoiceMaster.MI_Discount.label('DISCOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_discountPercent.label('DISCOUNT PERCENTAGE'),
                                            Model.models.Application.M_InvoiceMaster.MI_DiscountReason.label('DISCOUNT REASON'),
                                            Model.models.Application.M_InvoiceMaster.MI_Cheque.label('CHEQUE AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_Comments.label('COMMENTS'),
                                            Model.models.Application.M_InvoiceMaster.dueSettle.label('AMOUNT BALANCE'),
                                            Model.models.Application.M_InvoiceMaster.MI_InvoiceTotal.label('SERVICE FEE'),
                                            Model.models.Application.M_InvoiceMaster.MI_invoiceType.label('invoiceType'),
                                            Model.models.Application.M_InvoiceMaster.MI_lastDigits.label('CARD NUMBER'),
                                            Model.models.Application.M_InvoiceMaster.MI_Online.label('ONLINE AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_Prepaid.label('PREPAID AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_TotalPayable.label('AMOUNT PAYABLE'),
                                            Model.models.Application.M_InvoiceMaster.MI_Upi.label('UPI AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_AmountPaid.label('AMOUNT PAID'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceId.label('ServiceId'),
                                            Model.models.Application.M_InvoiceMaster.MI_SettleInvoice.label('SettleInvoice'),
                                            Model.models.Application.M_InvoiceMaster.MainInvoiceNo.label('MainInvoiceNo'),
                                            Model.models.Application.M_InvoiceMaster.MI_TotalAmount.label('TotalAmount'),
                                            Model.models.Application.M_InvoiceMaster.MI_PaidByPartner.label('CO-PAY AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_PaidByPatient.label('PaidByPatient'),
                                            Model.models.Application.M_InvoiceMaster.MPIA_TotalSessions.label('TotalSessions'),
                                            sqlalchemy.func.concat(Model.models.Application.M_InvoiceMaster.MPIA_UsedSession,'/',Model.models.Application.M_InvoiceMaster.MPIA_TotalSessions).label('SESSION AVAILED'),
                                            Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode.label('PAYMENT MODE'),
                                            Model.models.Application.M_InvoiceMaster.MIP_InvoiceType.label('InvoiceType'),
                                            Model.models.Application.M_InvoiceMaster.MIP_MedicineDetails.label('MedicineDetails'),
                                            Model.models.Application.M_InvoiceMaster.M_PartnerOrgId.label('PartnerOrgId'),
                                            Model.models.Application.M_InvoiceMaster.M_PartnerOrgName.label('CO-PAY ORG NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceName.label('SERVICE NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_AppointmentId.label('VISIT ID'),
                                            Model.models.Application.M_InvoiceMaster.M_Branch_MBID.label('M_Branch_MBID'),
                                            Model.models.Application.M_InvoiceMaster.M_Patient_MPID.label('M_Patient_MPID'),
                                            Model.models.Application.M_InvoiceMaster.MPP_PackageName.label('PACKAGE NAME'),
                                            Model.models.Application.M_InvoiceMaster.MPP_PackagePrice.label('MPP_PackagePrice'),
                                            Model.models.Application.M_InvoiceMaster.MPP_PackageId.label('MPP_PackageId'),
                                            Model.models.Application.M_InvoiceMaster.MI_AddUser.label('BILLED BY'),
                                            Model.models.Application.M_InvoiceMaster.MPP_PaymentType.label('Payment Type'),
                                            Model.models.Application.M_Patient.MP_Name.label('PATIENT NAME'),
                                            Model.models.Application.M_Patient.MP_UHID.label('PATIENT ID'),
                                            Model.models.Application.M_Branch.MB_Name.label('LOCATION'),
                                            # Model.models.Application.M_DueBalanceInvoice.MI_ServiceId.label('Procedure'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB')
                                            ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                            ).filter(*apply
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_InvoiceMaster.M_Patient_MPID
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_InvoiceMaster.M_Branch_MBID
                                ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all())
                session.commit()
                return jsonify(result=queryresult)
            elif(ReportType == 529):
                apply = []
                if(Location !='' and Location !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.M_Branch_MBID.in_(Location))
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.MI_Date >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.MI_Date <=To)

                queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.UnsettledDues,
                                session.query(sqlalchemy.func.concat(Model.models.Application.M_InvoiceMaster.MPP_Prefix,'/',Model.models.Application.M_InvoiceMaster.MIID).label('INVOICE NO.'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_Date,'%d-%b-%Y').label('DATE'),
                                            Model.models.Application.M_InvoiceMaster.MI_Discount.label('DISCOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_Comments.label('COMMENTS'),
                                            Model.models.Application.M_InvoiceMaster.dueSettle.label('AMOUNT BALANCE'),
                                            Model.models.Application.M_InvoiceMaster.MI_InvoiceTotal.label('SERVICE FEE'),
                                            Model.models.Application.M_InvoiceMaster.MI_TotalPayable.label('AMOUNT PAYABLE'),
                                            Model.models.Application.M_InvoiceMaster.MI_AmountPaid.label('AMOUNT PAID'),
                                            Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode.label('PaymentMode'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceName.label('SERVICE NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_AppointmentId.label('VISIT ID'),
                                            Model.models.Application.M_InvoiceMaster.M_Patient_MPID.label('M_Patient_MPID'),
                                            Model.models.Application.M_Patient.MP_Name.label('PATIENT NAME'),
                                            Model.models.Application.M_Patient.MP_Mobile.label('PATIENT MOBILE'),
                                            Model.models.Application.M_Patient.MP_UHID.label('PATIENT ID'),
                                            Model.models.Application.M_Branch.MB_Name.label('LOCATION'),
                                            ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                            ).filter(Model.models.Application.M_InvoiceMaster.dueSettle != '',Model.models.Application.M_InvoiceMaster.dueSettle != 0,
                                                     *apply
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_InvoiceMaster.M_Patient_MPID
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_InvoiceMaster.M_Branch_MBID
                                ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all())
                session.commit()
                return jsonify(result=queryresult)
            elif(ReportType == 530):
                apply = []
                if(Location !='' and Location !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.M_Branch_MBID.in_(Location))
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.MI_Date >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.MI_Date <=To)

                CardType = session.query(Model.models.Application.T_Details.TD_Name.label('CardTypes'),
                                          Model.models.Application.T_Details.TDID.label('IDs')).subquery()
                CreditType = session.query(Model.models.Application.T_Details.TD_Name.label('CreditTypes'),
                                           Model.models.Application.T_Details.TDID.label('IDs')).subquery()
                queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDetailedCreditReceipts,
                                session.query(
                                            Model.models.Application.T_Credit.TCID.label('RECEIPT NO.'),
                                            sqlalchemy.func.date_format(Model.models.Application.T_Credit.TC_Date,'%d-%b-%Y').label('DATE'),
                                            Model.models.Application.T_Details.TD_Name.label('PAYMENT MODE'),
                                            Model.models.Application.T_Credit.TC_Amount.label('AMOUNT'),
                                            Model.models.Application.T_Credit.TC_BankName.label('BANK NAME'),
                                            Model.models.Application.T_Credit.TC_CardNumber.label('CARD NUMBER'),
                                            Model.models.Application.T_Credit.TC_Comment.label('TRANSACTION COMMENTS'),
                                            Model.models.Application.M_Patient.MP_Name.label('PATIENT NAME'),
                                            Model.models.Application.M_Patient.MP_UHID.label('PATIENT ID'),
                                            sqlalchemy.func.coalesce(CardType.c.CardTypes,'').label('CARD TYPE'),
                                            CreditType.c.CreditTypes.label('Description'),
                                            # Model.models.Application.M_DueBalanceInvoice.MI_ServiceId.label('Procedure'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB')
                                                ).filter_by(TC_IsActive=1,TC_IsDeleted=0
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.T_Credit.TC_PatientID
                                ).outerjoin(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.T_Credit.TC_PaymentMode
                                ).outerjoin(CardType, CardType.c.IDs==Model.models.Application.T_Credit.TC_CardType
                                ).outerjoin(CreditType, CreditType.c.IDs==Model.models.Application.T_Credit.TC_CreditType
                
                                ).order_by(Model.models.Application.T_Credit.TCID.desc()).all())
                session.commit()
                return jsonify(result=queryresult)
            elif(ReportType == 531):
                apply = []
                if(Location !='' and Location !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.M_Branch_MBID.in_(Location))
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.MI_Date >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_InvoiceMaster.MI_Date <=To)

                queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.CopayInvoices,
                                session.query(sqlalchemy.func.concat(Model.models.Application.M_InvoiceMaster.MPP_Prefix,'/',Model.models.Application.M_InvoiceMaster.MIID).label('INVOICE NO.'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_Date,'%d-%b-%Y').label('DATE'),
                                            Model.models.Application.M_InvoiceMaster.MI_AppointmentId.label('VISIT ID'),
                                            Model.models.Application.M_Patient.MP_UHID.label('PATIENT ID'),
                                            Model.models.Application.M_Patient.MP_Name.label('PATIENT NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceName.label('SERVICE NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_InvoiceTotal.label('SERVICE FEE'),
                                            Model.models.Application.M_InvoiceMaster.MI_Discount.label('DISCOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_TotalPayable.label('AMOUNT PAYABLE'),
                                            Model.models.Application.M_InvoiceMaster.MI_AmountPaid.label('AMOUNT PAID'),
                                            Model.models.Application.M_InvoiceMaster.dueSettle.label('AMOUNT BALANCE'),
                                            Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode.label('PAYMENT MODE'),
                                            Model.models.Application.M_InvoiceMaster.MI_Comments.label('COMMENTS'),
                                            Model.models.Application.M_InvoiceMaster.M_PartnerOrgName.label('CO-PAY ORG NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_PaidByPartner.label('CO-PAY AMOUNT'),
                                            Model.models.Application.M_InvoiceMaster.MI_bankName.label('BANK NAME'),
                                            Model.models.Application.M_InvoiceMaster.MI_CardType.label('CARD TYPE'),
                                            Model.models.Application.M_InvoiceMaster.MI_lastDigits.label('CARD NUMBER'),
                                            Model.models.Application.M_InvoiceMaster.MI_DiscountReason.label('DISCOUNT REASON'),
                                            Model.models.Application.M_Branch.MB_Name.label('LOCATION'),
                                            ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                            ).filter(Model.models.Application.M_InvoiceMaster.M_PartnerOrgName != '',
                                                     *apply
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_InvoiceMaster.M_Patient_MPID
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_InvoiceMaster.M_Branch_MBID
                                ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all())
                session.commit()
                return jsonify(result=queryresult)
            elif(ReportType == 532):
                apply = []
                if(Location !='' and Location !=None):
                    apply.append(Model.models.Application.M_PatientPackageDetailed.MPP_BranchId.in_(Location))
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_PatientPackageDetailed.MPP_AddDate >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_PatientPackageDetailed.MPP_AddDate <=To)

                queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PackageMembership,
                                session.query(sqlalchemy.func.date_format(Model.models.Application.M_PatientPackageDetailed.MPP_AddDate,'%d-%b-%Y').label('DATE'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_PatientId.label('PATIENT ID'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_PackageName.label('PACKAGE NAME'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_TotalSessions.label('TOTAL SESSIONS'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_UsedSessions.label('SESSIONS AVAILED'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions.label('SESSIONS AVAILABLE'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_BranchId.label('BranchId'),
                                            Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                            Model.models.Application.M_Patient.MP_Name.label('PATIENT NAME'),
                                            ).filter_by(MPP_IsActive=1,MPP_IsDeleted=0
                                            ).filter(*apply
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_PatientPackageDetailed.MPP_PatientId
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_PatientPackageDetailed.MPP_BranchId
                                ).order_by(Model.models.Application.M_PatientPackageDetailed.MPPID.desc()).all())
                session.commit()
                return jsonify(result=queryresult)
            
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()
    
@app.route('/getSearchAdminReport',methods=['POST','GET'])
def getSearchAdminReport():
    try:
        if(request.method == "GET"):
            session=Session()

            getTextField= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getSearchAdminReport,
                    session.query(Model.models.Application.M_FormControl,
                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                ).filter_by(MFC_FormName='SearchAdminReport',MFC_IsActive=1,MFC_IsDeleted=0
                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                ).all()
            )
            getReportType= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getReportType,
                                session.query(Model.models.Application.T_Details.TDID.label('key'),
                                Model.models.Application.T_Details.TD_Name.label('label')
                                ).filter_by(M_Details_MDID=129,TD_IsActive=1,TD_IsDeleted=0
                                ).order_by(Model.models.Application.T_Details.TDID).all()
                                        )
            getReportBranch= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getReportBranch,
                                session.query(Model.models.Application.M_Branch.MBID.label('key'),
                            Model.models.Application.M_Branch.MB_Name.label('label')
                            ).filter_by(MB_IsActive=1,MB_IsDeleted=0
                            ).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                        )
            # getservice= Common_Function.CommonFun.getservice()
            # getPatient = Common_Function.CommonFun.getPatient()
            # getPackage = Common_Function.CommonFun.getPackage()

            getTextField[0]['options'] = getReportType
            getTextField[1]['options'] = getReportBranch
            # getTextField[2]['options'] = Common_Function.CommonFun.getPackage()


            return jsonify(result=getTextField)
    finally:
        session.close()   

@app.route('/getCollectionAdminReport',methods=['POST','GET'])
def getCollectionAdminReport():
    try:
        if(request.method == "GET"):
            
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()

                    getTextField= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getSearchAdminReport,
                            session.query(Model.models.Application.M_FormControl,
                                    sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                    Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                    sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                        ).filter_by(MFC_FormName='SearchAdminReport',MFC_IsActive=1,MFC_IsDeleted=0
                                    ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                        ).all()
                    )
                    getReportType= Common_Function.CommonFun.convertToJson(
                                        Constant.constant.constant.getReportType,
                                        session.query(Model.models.Application.T_Details.TDID.label('key'),
                                        Model.models.Application.T_Details.TD_Name.label('label')
                                        ).filter_by(M_Details_MDID=129,TD_IsActive=1,TD_IsDeleted=0
                                        ).filter(Model.models.Application.T_Details.TDID.in_([528,529])
                                        ).order_by(Model.models.Application.T_Details.TDID).all()
                                                )
                    ids = data['id']
                    Branch = session.query(Model.models.Application.M_AssignRole.M_Users_MUID,
                                    Model.models.Application.M_AssignRole.M_Branch_MBID
                                    ).filter_by(M_Users_MUID=int(ids),MP_IsActive=1,MP_IsDeleted=0).all()
                    Branch_MBID = [b['M_Branch_MBID'] for b in Branch]
                    getReportBranch = Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.getReportBranch,
                            session.query(Model.models.Application.M_Branch.MBID.label('key'),
                                        Model.models.Application.M_Branch.MB_Name.label('label')
                                        ).filter(Model.models.Application.M_Branch.MBID.in_(Branch_MBID)
                                        ).filter_by(MB_IsActive=1,MB_IsDeleted=0).order_by(Model.models.Application.M_Branch.MB_Name).all()
                                    )
                    session.commit()    
                    # getReportBranch= Common_Function.CommonFun.convertToJson(
                    #                         Constant.constant.constant.getReportBranch,
                    #                         session.query(Model.models.Application.M_Branch.MBID.label('key'),
                    #                     Model.models.Application.M_Branch.MB_Name.label('label')
                    #                     ).filter_by(MB_IsActive=1,MB_IsDeleted=0
                    #                     ).order_by(Model.models.Application.M_Branch.MB_Name).all()
                    #                                 )
                        # getservice= Common_Function.CommonFun.getservice()
                        # getPatient = Common_Function.CommonFun.getPatient()
                        # getPackage = Common_Function.CommonFun.getPackage()

                    getTextField[0]['options'] = getReportType
                    getTextField[1]['options'] = getReportBranch
            # getTextField[2]['options'] = Common_Function.CommonFun.getPackage()


                    return jsonify(result=getTextField)
    finally:
        session.close()   



@app.route('/submitPrescription',methods=['GET','POST'])
def submitPrescription():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    hson = request.get_json()
                    ReqData  = hson.get('prescription')
                    
                    
                    
                    for getjson in ReqData:
                        PID =getjson['PID']
                        AID =getjson['AID']
                        showData= getjson['showData']
                        medication =getjson['medication']
                        ptype =getjson['type']
                        MP_route =getjson['route']
                        MP_times =getjson['times']
                        MP_duration =getjson['duration']
                        MP_dosage =getjson['dosage']
                        MP_comments =getjson['comments']
                        Appoint = session.query(Model.models.Application.M_Prescription
                                    ).filter_by(M_AppointmentID=int(AID),MP_IsDeleted=0).all()
                        
                        if(len(Appoint)==0):
                            Insert=Model.models.Application.M_Prescription()
                            Insert.M_Patient_MPID=PID
                            Insert.M_AppointmentID=AID
                            Insert.MP_medication=medication
                            Insert.MP_type=ptype
                            Insert.MP_route=MP_route
                            Insert.MP_times=MP_times
                            Insert.MP_duration=MP_duration
                            Insert.MP_dosage=MP_dosage
                            Insert.MP_comments=MP_comments
                            if(showData==1):
                                Insert.ShowData=1
                            else:
                                Insert.ShowData=0
                    
                            Insert.MP_AddIP= flask.request.remote_addr
                            Insert.MP_AddDate = datetime.datetime.now()
                            session.add(Insert)
                            session.commit()
                        else:
                            session.query(Model.models.Application.M_Prescription
                                ).filter(Model.models.Application.M_Prescription.M_AppointmentID==AID
                                            ).update({Model.models.Application.M_Prescription.MP_IsDeleted:1,
                                                    Model.models.Application.M_Prescription.MP_ModDate:datetime.datetime.now()})
                            session.commit()
                            Insert=Model.models.Application.M_Prescription()
                            Insert.M_Patient_MPID=PID
                            Insert.M_AppointmentID=AID
                            Insert.MP_medication=medication
                            Insert.MP_type=ptype
                            Insert.MP_route=MP_route
                            Insert.MP_times=MP_times
                            Insert.MP_duration=MP_duration
                            Insert.MP_dosage=MP_dosage
                            Insert.MP_comments=MP_comments
                            if(showData==1):
                                Insert.ShowData=1
                            else:
                                Insert.ShowData=0
                    
                            Insert.MP_AddIP= flask.request.remote_addr
                            Insert.MP_AddDate = datetime.datetime.now()
                            session.add(Insert)
                            session.commit()
                    return jsonify({'msg':'Prescription saved Successfully'})
                    
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/editPrescriptionDtl',methods=['POST','GET'])
def editPrescriptionDtl():
    try:
        if(request.method == "POST"):
            session=Session()
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # session=Session()
                    request_json = request.get_json(force = True)
                    aid = request_json.get('appointmentId')
                    
                    if(aid != '' and aid != None):
                        Prescrip = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.editPrescriptionDtl,
                                session.query(Model.models.Application.M_Prescription.MP_medication,
                                                       Model.models.Application.M_Prescription.MP_type,
                                                       Model.models.Application.M_Prescription.MP_route,
                                                       Model.models.Application.M_Prescription.MP_times,
                                                       Model.models.Application.M_Prescription.MP_duration,
                                                       Model.models.Application.M_Prescription.MP_dosage,
                                                       Model.models.Application.M_Prescription.MP_comments,
                                                       Model.models.Application.M_Prescription.MP_Prescription,
                            ).filter(Model.models.Application.M_Prescription.M_AppointmentID == aid
                            ).filter_by(MP_IsDeleted=0).all())
                                        
                        session.commit()
                        
                        return jsonify(result=Prescrip)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPrescriptionDtl',methods=['POST','GET'])
def getPrescriptionDtl():
    try:
        if(request.method == "POST"):
            session=Session()
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # session=Session()
                    request_json = request.get_json(force = True)
                    aid = request_json.get('appointmentId')
                    
                    if(aid != '' and aid != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPrescriptionDtl,
                                session.query(Model.models.Application.M_Appointment.MAID.label('visitId'),
                                              Model.models.Application.M_Appointment.MP_Procedure.label('Service'),
                                            
                                            Model.models.Application.M_Appointment.MAID.label('visitType'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('AppointDate'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB'),
                                            Model.models.Application.M_Patient.MP_Name.label('Name'),
                                            Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                            Model.models.Application.M_Branch.MB_Address.label('Branch'),
                                            Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                                            func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,' ',Model.models.Application.M_DoctorDetails.MDD_LastName).label('DoctorName'),
                                            ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MAID=aid
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                
                                ).order_by(Model.models.Application.M_Appointment.MAID.desc()).all())
                        session.commit()
                
                        Prescrip = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.Prescrip,
                                session.query(Model.models.Application.M_Prescription.MP_medication,
                                                       Model.models.Application.M_Prescription.MP_type,
                                                       Model.models.Application.M_Prescription.MP_route,
                                                       Model.models.Application.M_Prescription.MP_times,
                                                       Model.models.Application.M_Prescription.MP_duration,
                                                       Model.models.Application.M_Prescription.MP_dosage,
                                                       Model.models.Application.M_Prescription.MP_comments,
                                                       Model.models.Application.M_Prescription.MP_Prescription,
                            ).filter(Model.models.Application.M_Prescription.M_AppointmentID == aid
                            ).filter_by(ShowData=1,MP_IsDeleted=0).all())
                                        
                        session.commit()
                        queryresult[0]['Prescription']=Prescrip
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getpackagedetailedview',methods=['POST'])
def getpackagedetailedview():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    requestdata=request.get_json()
                    Id= requestdata.get('PID')
                    #Id=request.get_json()
                    if(Id != '' and Id != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getpackagedetailedview,
                                session.query(Model.models.Application.M_PatientPackageDetailed.MPP_PackageForPatientId.label('IDs'),
                                            Model.models.Application.M_PatientPackageDetailed.MPPID.label('ID'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_PackageName.label('Package Name'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_ServiceId.label('ServiceId'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_ServiceName.label('Service'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_BranchId.label('BranchId'),
                                            Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                            Model.models.Application.M_PatientPackageDetailed.MPP_TotalPayable.label('Total Payable'),
                                            # Model.models.Application.M_PatientPackageDetailed.MPP_TotalSessions.label('Total Sessions'),
                                            sqlalchemy.func.concat(Model.models.Application.M_PatientPackageDetailed.MPP_UsedSessions,'/',Model.models.Application.M_PatientPackageDetailed.MPP_TotalSessions).label('Usage'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_PatientPackageDetailed.MPP_StartDate,'%d-%b-%Y').label('Start Date'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_PatientPackageDetailed.MPP_EndDate,'%d-%b-%Y').label('End Date'),
                                            # Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions.label('Available Session'),
                                            # Model.models.Application.M_Service.MS_CategoryName.label('Servicess'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_PatientPackageDetailed.MPP_AddDate,'%d-%b-%Y').label('Date')
                                                ).filter_by(MPP_IsActive=1,MPP_IsDeleted=0,MPP_PatientId=Id
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_PatientPackageDetailed.MPP_BranchId
                                # ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_PatientPackageDetailed.MPP_ServiceId
                                ).order_by(Model.models.Application.M_PatientPackageDetailed.MPPID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/packageInvDetails',methods=['POST'])
def packageInvDetails():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request_json = request.get_json(force = True)
                    packid = request_json.get('packageId')
                    
                    if(packid != '' and packid != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.packageInvDetails,
                                session.query(Model.models.Application.M_PackageForPatient.MPPID.label('PackageNo'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_PackageForPatient.MPP_Date,'%d-%b-%Y').label('Date'),
                                            Model.models.Application.M_PackageForPatient.MPP_Total.label('PackageTotal'),
                                            Model.models.Application.M_PackageForPatient.MPP_DueBalance.label('Balance'),
                                            Model.models.Application.M_PackageForPatient.MPP_Comments.label('Description'),
                                            Model.models.Application.M_PackageForPatient.MPP_PackagePrice.label('PackagePrice'),
                                            Model.models.Application.M_PackageForPatient.MPP_TotalPayable.label('TotalPayable'),
                                            Model.models.Application.M_PackageForPatient.MPP_DiscountPersent.label('discountPercent'),
                                            Model.models.Application.M_PackageForPatient.MPP_TaxDiscount.label('Tax'),
                                            Model.models.Application.M_PackageForPatient.MPP_cgst.label('cgst'),
                                            Model.models.Application.M_PackageForPatient.MPP_sgst.label('sgst'),
                                            Model.models.Application.M_PackageForPatient.MPP_CardType.label('CardType'),
                                            Model.models.Application.M_PackageForPatient.MPP_Comments.label('Comments'),
                                            Model.models.Application.M_PackageForPatient.MPP_LastDigit.label('Card'),
                                            Model.models.Application.M_PackageForPatient.MPP_AmountPaid.label('AmountPaid'),
                                            Model.models.Application.M_Patient.MP_Name.label('Name'),
                                            Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                            Model.models.Application.M_ServicePackage.MSPID.label('ProcedureID'),
                                            Model.models.Application.M_ServicePackage.MSP_Sessions.label('Sessions'),
                                            Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB')
                                                ).filter_by(MPP_IsActive=1,MPP_IsDeleted=0,MPPID=packid
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_PackageForPatient.MPP_PatientId
                                ).join(Model.models.Application.M_ServicePackage, Model.models.Application.M_ServicePackage.MSPID==Model.models.Application.M_PackageForPatient.MPP_PackageId
                                ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_ServicePackage.MSP_ServiceName
                                ).order_by(Model.models.Application.M_PackageForPatient.MPPID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/CreateInvoiceFromPackage',methods=['POST'])
def CreateInvoiceFromPackage():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    # request_json = request.get_json(force = True)
                    # Id=request_json.get('id')
                    request1=request.get_json()
                    Id=request1.get('AID')
                    if(Id != '' and Id != None):
                        
                        
                        Servicedata = session.query(Model.models.Application.M_Appointment.MP_Procedure,
                                                    Model.models.Application.M_Appointment.M_Patient_MPID
                                      ).filter_by(MAID=Id).all()
                        Service = Servicedata[0].MP_Procedure
                        Pid = Servicedata[0].M_Patient_MPID
                        
                        queryresult2= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.CreateInvoiceFromPackage2,
                                session.query(Model.models.Application.M_Appointment.MAID,
                                              Model.models.Application.M_Appointment.M_Patient_MPID,
                                                   Model.models.Application.M_Appointment.MP_Procedure,
                                                   Model.models.Application.M_Service.MS_CategoryName,
                                                   Model.models.Application.M_ServicePro.MSP_Fee,
                                                   Model.models.Application.M_ServicePro.MSP_Duration
                                                   
                                    ).filter(Model.models.Application.M_Appointment.MAID==Id
                                    ).join(Model.models.Application.M_ServicePro,
                                    and_(Model.models.Application.M_ServicePro.MSP_serviceId==Model.models.Application.M_Appointment.MP_Procedure,
                                         Model.models.Application.M_ServicePro.MSP_IsDeleted==0)
                                    ).join(Model.models.Application.M_Service,
                                    Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                    ).all())
                        session.commit()
                        
                        curDte = datetime.datetime.now()
                        
                        package = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.packageDetail,
                                session.query(Model.models.Application.M_PatientPackageDetailed.MPP_PackageId,
                                    Model.models.Application.M_PatientPackageDetailed.MPPID,
                                    Model.models.Application.M_PatientPackageDetailed.MPP_TotalSessions,
                                    Model.models.Application.M_PatientPackageDetailed.MPP_PackageName,
                                    Model.models.Application.M_PatientPackageDetailed.MPP_UsedSessions,
                                    Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions,
                                    Model.models.Application.M_ServicePackage.MSP_Price
                                    
                                    ).filter_by(MPP_PatientId=Pid,MPP_IsActive=1,MPP_IsDeleted=0
                                    ).filter(Model.models.Application.M_PatientPackageDetailed.MPP_ServiceId.ilike(f'%{Service}%'),
                                             Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions!=0
                                    ).join(Model.models.Application.M_ServicePackage,
                                    Model.models.Application.M_ServicePackage.MSPID==Model.models.Application.M_PatientPackageDetailed.MPP_PackageId
                                             ).all())
                        obje = []
                        obje.append({'package':package,'datas':queryresult2})
                        
                        if(len(package)>0):
                            return jsonify(result=obje)
                        else:
                            return jsonify(result=package)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/CreateInvoiceForPartnerOrg',methods=['POST'])
def CreateInvoiceForPartnerOrg():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request_json=request.get_json()
                    Id=request_json.get('AID')
                    PartnerOrgName = request_json.get('partnerOrg')
                    if(Id != '' and Id != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.CreateInvoiceForPartnerOrg,
                                session.query(Model.models.Application.M_Appointment.MAID,
                                              Model.models.Application.M_Appointment.M_Patient_MPID,
                                                   Model.models.Application.M_Appointment.MP_Procedure,
                                                   Model.models.Application.M_Service.MS_CategoryName
                                                   
                                    ).filter(Model.models.Application.M_Appointment.MAID==Id
                                    ).join(Model.models.Application.M_Service,
                                    Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                    ).all())
                        session.commit()
                        queryresult2 = session.query(Model.models.Application.M_PartnerOrg.MPID,
                                                       Model.models.Application.M_PartnerOrg.OrgName,
                                                       Model.models.Application.M_PartnerOrg.Amount
                            ).filter(Model.models.Application.M_PartnerOrg.MPID == PartnerOrgName).all()
                                        
                        session.commit()
                        queryresult[0]['MSP_Fee'] =queryresult2[0].Amount
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/addPartnerInvoice',methods=['GET','POST'])
def addPartnerInvoice():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:
        branchId= request.headers.get('branchId')
        if(request.method == "POST"):
            request_json = request.get_json()
            bankName = request_json.get('bankName')
            card = request_json.get('card')
            cardType = request_json.get('cardType')
            cash = request_json.get('cash')
            cheque = request_json.get('cheque')
            comments = request_json.get('comments')
            date = request_json.get('invoiceDate')
            serviceName = request_json.get('serviceName')
            invoiceTotal = request_json.get('invoiceTotal')
            lastDigits = request_json.get('lastDigits')
            online = request_json.get('online')
            prepaid = request_json.get('prepaid')
            totalPayable = request_json.get('totalPayable')
            upi = request_json.get('upi')
            Pid = request_json.get('Pid')
            AID = request_json.get('AID')
            PartnerId = request_json.get('PartnerId')
            partnerName = request_json.get('partnerName')
            PaidByPartner = request_json.get('PaidByPartner')
            PaidByPatient = request_json.get('PaidByPatient')
            # ID = request_json.get('ID')
            checkAppointment = session.query(Model.models.Application.M_InvoiceMaster
                                    ).filter(Model.models.Application.M_InvoiceMaster.MI_AppointmentId==AID
                                    ).filter_by(MI_IsDeleted=0,MI_IsActive=1).all()
            if(len(checkAppointment)==0):            
                Insert=Model.models.Application.M_PartnerInvoice()
                Insert.MI_bankName=bankName
                Insert.M_Branch_MBID=branchId
                Insert.MI_Card=card
                Insert.MI_AppointmentId=AID
                Insert.MI_ServiceName=serviceName
                if(cardType!=''and cardType!=None):
                    Insert.MI_CardType=cardType
                Insert.MI_Cash=cash
                Insert.MI_Cheque=cheque
                Insert.MI_Comments=comments
                Insert.MI_Date=datetime.datetime.now()
                Insert.MI_InvoiceTotal=invoiceTotal
                Insert.M_PartnerOrgId=PartnerId
                Insert.MI_PaidByPartner=PaidByPartner
                Insert.MI_PaidByPatient=PaidByPatient
                Insert.MI_lastDigits=lastDigits
                Insert.MI_Online=online
                Insert.MI_Prepaid=prepaid
                Insert.MI_TotalPayable=totalPayable
                Insert.MI_Upi=upi
                Insert.M_Patient_MPID=Pid

                Insert.MI_AddIP= flask.request.remote_addr
                Insert.MI_AddDate = datetime.datetime.now()
                Insert.MI_AddUser = 1 #data['id']
                session.add(Insert)
                session.commit()
                getClinic= session.query(Model.models.Application.M_Branch.MB_Code
                                        ).filter_by(MBID=int(branchId),MB_IsActive=1,MB_IsDeleted=0).all()
                getInvoiceNo= session.query(Model.models.Application.M_InvoiceMaster.MainInvoiceNo
                                        ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                        # ).filter(Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode!='Package'
                                        ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
                clinicname=getClinic[0].MB_Code
                # sn=len(totalPatientinbranch) + 1
                lastInvoice = getInvoiceNo[0].MainInvoiceNo
                NewInvoice=  int(lastInvoice) + 1
                # sn=len(totalPatientinbranch) + 1
                # lastPatientIDs = totalPatientinbranch[0]
                # lastPatientID=  lastPatientIDs[-5:]
                # newPatientID= str(int(lastPatientID)+1).zfill(5)
                Prefix='CK'+str(clinicname)
                mod = ''
                if(prepaid!='' and prepaid!=None and prepaid!=0):
                    mod = 'Prepaid'
                if(online !='' and online !=None and online!=0):
                    mod = 'Online'
                if(upi !='' and upi !=None and upi!=0):
                    mod = 'UPI'
                if(cash !='' and cash !=None and cash!=0):
                    mod = 'Cash'
                if(card !='' and card !=None and card!=0):
                    mod = 'Card'
                if(cheque !='' and cheque !=None and cheque!=0):
                    mod = 'Cheque'
                Insert=Model.models.Application.M_InvoiceMaster()
                Insert.MI_bankName=bankName
                Insert.M_Branch_MBID=branchId
                Insert.MI_Card=card
                Insert.MI_AppointmentId=AID
                Insert.MI_ServiceName=serviceName
                if(cardType!=''and cardType!=None):
                    Insert.MI_CardType=cardType
                Insert.MI_Cash=cash
                Insert.MI_Cheque=cheque
                Insert.MI_CGST=0
                Insert.MI_SGST=0
                Insert.MI_discountPercent=0
                Insert.MainInvoiceNo=NewInvoice
                Insert.MI_Comments=comments
                Insert.MI_Date=datetime.datetime.now()
                Insert.MI_InvoiceTotal=invoiceTotal
                Insert.MI_AmountPaid=PaidByPatient
                Insert.M_PartnerOrgId=PartnerId
                Insert.M_PartnerOrgName=partnerName
                Insert.MI_PaidByPartner=PaidByPartner
                Insert.MI_PaidByPatient=PaidByPatient
                Insert.MI_bankName=bankName
                Insert.MI_lastDigits=lastDigits
                Insert.MI_Online=online
                Insert.MI_Prepaid=prepaid
                Insert.MI_TotalPayable=totalPayable
                Insert.MI_Upi=upi
                Insert.M_Patient_MPID=Pid
                Insert.MI_DueBalance=0
                Insert.dueSettle=0
                Insert.MPP_Prefix=Prefix
                Insert.MPIA_PaymentMode=''
                Insert.MPP_PaymentType=mod
                Insert.MI_AddIP= flask.request.remote_addr
                Insert.MI_AddDate = datetime.datetime.now()
                Insert.MI_AddUser = 1 #data['id']
                session.add(Insert)
                session.commit()
                
                if(int(prepaid)>0):
                    prepaiddata = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                                Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount
                                ).filter_by(TP_PatientID=Pid,TP_IsActive=1,TP_IsDeleted=0).all()
                    Insert=Model.models.Application.T_CreditMaster()
                    Insert.TC_Date=datetime.datetime.now()
                    Insert.TC_Amount=prepaid
                    Insert.TC_PatientID=Pid
                    Insert.TC_Comment='ACCDebit'
                    Insert.TC_Description=serviceName
                    
                    Insert.TC_AddIP= flask.request.remote_addr
                    Insert.TC_AddDate = datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                    
                    PrepaidAm = prepaiddata[0].TP_PrepaidAmount
                    amountnow = PrepaidAm - float(prepaid)
                    session.query(Model.models.Application.T_PrepaidAmt
                                ).filter(Model.models.Application.T_PrepaidAmt.TP_PatientID==Pid
                                            ).update({Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount:amountnow,
                                                    Model.models.Application.T_PrepaidAmt.TP_ModDate:datetime.datetime.now()})
                    session.commit()
                
                print("success")
                Invoice = session.query(sqlalchemy.func.concat(Model.models.Application.M_InvoiceMaster.MPP_Prefix,
                                                               '/',Model.models.Application.M_InvoiceMaster.MIID).label('MIIID'),
                                                    Model.models.Application.M_InvoiceMaster.MPP_Prefix
                                    ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                    ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
                InvoiceNo= Invoice[0].MIIID
                mod = ''
                if(prepaid!='' and prepaid!=None and prepaid!=0):
                    mod = 'Prepaid'
                if(online !='' and online !=None and online!=0):
                    mod = 'Online'
                if(upi !='' and upi !=None and upi!=0):
                    mod = 'UPI'
                if(cash !='' and cash !=None and cash!=0):
                    mod = 'Cash'
                if(card !='' and card !=None and card!=0):
                    mod = 'Card'
                if(cheque !='' and cheque !=None and cheque!=0):
                    mod = 'Cheque'
                Insert=session.query(Model.models.Application.M_Appointment).get(AID)
                Insert.MP_Status=527
                Insert.MP_ModDate=datetime.datetime.now()
                Insert.MA_PaymentMode=mod
                Insert.MA_Fee=invoiceTotal
                Insert.MA_Discount=''
                Insert.MA_ReceiptDate=datetime.datetime.now()
                Insert.MA_InvoiceNo= InvoiceNo
                Insert.MA_CGST=''
                Insert.MA_SGST=''
                Insert.MA_TotalAmount=totalPayable
                Insert.MA_AppStatus='Completed'
                session.commit()
                ORGID= session.query(Model.models.Application.M_Appointment.MAID,
                                                     Model.models.Application.M_Patient.MPID,
                                                     Model.models.Application.M_Patient.MP_Mobile,
                                                     Model.models.Application.M_Patient.MP_Name,
                                                     ).filter(Model.models.Application.M_Appointment.MAID==AID
                                                    ).join(Model.models.Application.M_Patient,Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                                    ).all()

                if(ORGID[0].MP_Mobile !=''):
                    Name= ORGID[0].MP_Name
                    Mobile= ''#ORGID[0].MP_Mobile
                    x= 'https://rb.gy/b8iod'
                    if(Mobile!='' and Mobile!=None):
                        msg = 'https://api.pinnacle.in/index.php/sms/urlsms?sender=CONKID&numbers=91' + str(Mobile) +'&messagetype=TXT&message=Thank you for visiting Continua Kids. View your visit details in the app '+x+'. Thank you!&response=Y&apikey=bb4d93-a1481e-f7c2a2-67d92c-2d3477'
                        # rese = requests.get('https://api.pinnacle.in/index.php/sms/urlsms?sender=CONKID&numbers=918544388788&messagetype=TXT&message=Dear member Vipul, your appointment at Continua Kids for Test has been created for 20-07-2023_11:00 AM&response=Y&apikey=bb4d93-a1481e-f7c2a2-67d92c-2d3477')
                        rese = requests.get(msg)
                        print(rese)
                else:
                    pass
                return jsonify({'msg':'Invoice Created Successfully'})
            else:
                return jsonify({'err':'Invoice already generated'})
        else:
            return jsonify({'err':'Wrong Method Used'})
    except:
        return jsonify({'err':'token is invalid'})
    finally:
        session.close()


@app.route('/checkPartnerOrg', methods=['POST','GET'])
def checkPartnerOrg():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            PID = request_json.get('PID')
            queryResult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.checkPartnerOrg,
                        session.query(Model.models.Application.M_PartnerOrgPatient.MPP_OrgId,
                                    Model.models.Application.M_PartnerOrgPatient.MPPID,
                                    Model.models.Application.M_PartnerOrg.OrgName,
                                    Model.models.Application.M_PartnerOrgPatient.MPP_PatientId,
                                    sqlalchemy.func.date_format(Model.models.Application.M_PartnerOrgPatient.MP_AddDate,'%d-%b-%Y').label('Add Date'),
                                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MPP_PatientId=PID
                                    ).join(Model.models.Application.M_PartnerOrg, Model.models.Application.M_PartnerOrg.MPID==Model.models.Application.M_PartnerOrgPatient.MPP_OrgId       
                                    ).all()
                                )
            session.commit()
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/PartnerinvoiceDetails',methods=['POST'])
def PartnerinvoiceDetails():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request_json = request.get_json(force = True)
                    aid = request_json.get('appointmentId')
                    
                    if(aid != '' and aid != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PartnerinvoiceDetails,
                                session.query(Model.models.Application.M_PartnerInvoice.MIID.label('InvoiceNo'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_PartnerInvoice.MI_Date,'%d-%b-%Y').label('Date'),
                                            Model.models.Application.M_PartnerInvoice.MI_InvoiceTotal.label('InvoiceTotal'),
                                            Model.models.Application.M_PartnerInvoice.MI_DueBalance.label('Balance'),
                                            Model.models.Application.M_PartnerInvoice.MI_Comments.label('Description'),
                                            Model.models.Application.M_PartnerInvoice.MI_TotalPayable.label('TotalPayable'),
                                            Model.models.Application.M_PartnerInvoice.MI_discountPercent.label('discountPercent'),
                                            Model.models.Application.M_PartnerInvoice.MI_CGST.label('CGST'),
                                            Model.models.Application.M_PartnerInvoice.MI_SGST.label('SGST'),
                                            Model.models.Application.M_PartnerInvoice.MI_AmountPaid.label('AmountPaid'),
                                            Model.models.Application.M_PartnerInvoice.MI_Comments.label('Comments'),
                                            Model.models.Application.M_PartnerInvoice.MI_lastDigits.label('CardNo'),
                                            Model.models.Application.M_PartnerInvoice.MI_CardType.label('CardType'),
                                            Model.models.Application.M_PartnerInvoice.MI_PaidByPatient.label('PaidByPatient'),
                                            Model.models.Application.M_PartnerInvoice.MI_PaidByPartner.label('PaidByPartner'),
                                            Model.models.Application.M_Patient.MP_Name.label('Name'),
                                            Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                            Model.models.Application.M_Appointment.MP_Procedure.label('Service'),
                                            Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB')
                                                ).filter_by(MI_IsActive=1,MI_IsDeleted=0,MI_AppointmentId=aid
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_PartnerInvoice.M_Patient_MPID
                                ).join(Model.models.Application.M_Appointment, Model.models.Application.M_Appointment.MAID==Model.models.Application.M_PartnerInvoice.MI_AppointmentId
                                ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                
                                ).order_by(Model.models.Application.M_PartnerInvoice.MIID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/adddueBalanceInvoice',methods=['GET','POST'])
def adddueBalanceInvoice():
    # token=request.args.get('token')

    # if not token:
    #     return jsonify({'MSG':'Token is missing'})
    session=Session()
    try:

        if(request.method == "POST"):
            branchId= request.headers.get('branchId')
            request_json = request.get_json()
            amountPaid = request_json.get('amountPaid')
            bankName = request_json.get('bankName')
            branch = request_json.get('branch')
            card = request_json.get('card')
            cardType = request_json.get('cardType')
            cash = request_json.get('cash')
            cheque = request_json.get('cheque')
            comments = request_json.get('comments')
            date = request_json.get('invoiceDate')
            dueBalance = request_json.get('dueBalance')
            lastDigits = request_json.get('last4digit')
            online = request_json.get('online')
            prepaid = request_json.get('prepaid')
            totalPayable = request_json.get('totalPayable')
            upi = request_json.get('upi')
            Service = request_json.get('serviceName')
            InvNo = request_json.get('InvNo')
            TotalAmount = request_json.get('TotalAmount')
            getAppointment = session.query(Model.models.Application.M_InvoiceMaster,
                                    Model.models.Application.M_InvoiceMaster.M_Patient_MPID,
                                    Model.models.Application.M_InvoiceMaster.dueSettle,
                                    Model.models.Application.M_InvoiceMaster.MI_Date,
                                    ).filter(Model.models.Application.M_InvoiceMaster.MIID==InvNo).all()
            pid = getAppointment[0].M_Patient_MPID 
            due = getAppointment[0].dueSettle 
            MIDate = getAppointment[0].MI_Date
                       
            Insert=Model.models.Application.M_DueBalanceInvoice()
            Insert.MI_AmountPaid=amountPaid
            Insert.M_Patient_MPID=pid
            Insert.MI_bankName=bankName
            Insert.M_Branch_MBID=branchId
            Insert.MI_Card=card
            if(cardType!='' and cardType!=None):
                Insert.MI_CardType=cardType
            Insert.MI_Cash=cash
            Insert.MI_Cheque=cheque
            Insert.MI_Comments=comments
            Insert.MI_Date=date
            Insert.MI_ServiceId=Service
            Insert.MainInvoiceNo=InvNo
            Insert.MI_TotalAmount=TotalAmount
            Insert.MI_DueBalance=dueBalance

            Insert.MI_lastDigits=lastDigits
            Insert.MI_Online=online
            Insert.MI_Prepaid=prepaid
            Insert.MI_TotalPayable=totalPayable
            Insert.MI_Upi=upi
            
            Insert.MI_AddIP= flask.request.remote_addr
            Insert.MI_AddDate = datetime.datetime.now()
            Insert.MI_AddUser = 1 #data['id']
            session.add(Insert)
            session.commit()
            getClinic= session.query(Model.models.Application.M_Branch.MB_Code
                                        ).filter_by(MBID=int(branchId),MB_IsActive=1,MB_IsDeleted=0).all()
            getInvoiceNo= session.query(Model.models.Application.M_InvoiceMaster.MainInvoiceNo
                                        ).filter_by(MI_IsActive=1,MI_IsDeleted=0
                                        # ).filter(Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode!='Package'
                                        ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
            clinicname=getClinic[0].MB_Code
            # sn=len(totalPatientinbranch) + 1
            lastInvoice = getInvoiceNo[0].MainInvoiceNo
            NewInvoice=  int(lastInvoice) + 1
            # sn=len(totalPatientinbranch) + 1
            # lastPatientIDs = totalPatientinbranch[0]
            # lastPatientID=  lastPatientIDs[-5:]
            # newPatientID= str(int(lastPatientID)+1).zfill(5)
            Prefix='CK'+str(clinicname)
            mod = ''
            if(prepaid!='' and prepaid!=None and prepaid!=0):
                mod = 'Prepaid'
            if(online !='' and online !=None and online!=0):
                mod = 'Online'
            if(upi !='' and upi !=None and upi!=0):
                mod = 'UPI'
            if(cash !='' and cash !=None and cash!=0):
                mod = 'Cash'
            if(card !='' and card !=None and card!=0):
                mod = 'Card'
            if(cheque !='' and cheque !=None and cheque!=0):
                mod = 'Cheque'
            Insert=Model.models.Application.M_InvoiceMaster()
            Insert.MI_AmountPaid=int(amountPaid)
            Insert.M_Patient_MPID=pid
            Insert.MI_bankName=bankName
            Insert.M_Branch_MBID=branchId
            Insert.MI_Card=card
            if(cardType!='' and cardType!=None):
                Insert.MI_CardType=cardType
            Insert.MI_Cash=cash
            Insert.MI_Cheque=cheque
            Insert.MI_Comments=comments
            Insert.MI_Date= MIDate#datetime.datetime.now()
            Insert.MI_ServiceId=Service
            Insert.MI_ServiceName=Service
            Insert.MI_CGST=0
            Insert.MI_SGST=0
            Insert.MI_discountPercent=0
            Insert.MainInvoiceNo=NewInvoice
            Insert.MPP_Prefix=Prefix
            Insert.MPIA_PaymentMode='Due Balance'
            Insert.MainInvoiceNo=InvNo
            Insert.MI_TotalAmount=totalPayable
            Insert.MI_InvoiceTotal=totalPayable
            Insert.MI_DueBalance=dueBalance
            Insert.dueSettle=dueBalance

            Insert.MI_lastDigits=lastDigits
            Insert.MI_Online=online
            Insert.MI_Prepaid=prepaid
            Insert.MI_TotalPayable=totalPayable
            Insert.MI_Upi=upi
            Insert.MPP_PaymentType=mod
            
            Insert.MI_AddIP= flask.request.remote_addr
            Insert.MI_AddDate = datetime.datetime.now()
            Insert.MI_AddUser = 1 #data['id']
            session.add(Insert)
            session.commit()
            
            getAppointments = session.query(Model.models.Application.M_InvoiceMaster.MIID
                                ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all()
            
            print("success")
            if(int(totalPayable)>0):
                dueBalancedtl = session.query(Model.models.Application.T_DueBalanceAmt.TDID,
                                                Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount
                                ).filter_by(TD_PatientID=pid,TP_IsActive=1,TP_IsDeleted=0).all()
                
                PrepaidAm = dueBalancedtl[0].TD_PrepaidAmount
                amountnow = PrepaidAm - float(totalPayable)
                session.query(Model.models.Application.T_DueBalanceAmt
                        ).filter(Model.models.Application.T_DueBalanceAmt.TD_PatientID==pid
                                    ).update({Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount:amountnow,
                                            Model.models.Application.T_DueBalanceAmt.TP_ModDate:datetime.datetime.now()})
                session.commit()
            
            
            if(int(prepaid)>0):
                prepaiddata = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                            Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount
                            ).filter_by(TP_PatientID=pid,TP_IsActive=1,TP_IsDeleted=0).all()
                Insert=Model.models.Application.T_CreditMaster()
                Insert.TC_Date=datetime.datetime.now()
                Insert.TC_Amount=prepaid
                Insert.TC_PatientID=pid
                Insert.TC_Comment='ACCDebit'
                Insert.TC_Description=Service
                
                Insert.TC_AddIP= flask.request.remote_addr
                Insert.TC_AddDate = datetime.datetime.now()
                session.add(Insert)
                session.commit()
                
                PrepaidAm = prepaiddata[0].TP_PrepaidAmount
                amountnow = PrepaidAm - float(prepaid)
                session.query(Model.models.Application.T_PrepaidAmt
                            ).filter(Model.models.Application.T_PrepaidAmt.TP_PatientID==pid
                                        ).update({Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount:amountnow,
                                                Model.models.Application.T_PrepaidAmt.TP_ModDate:datetime.datetime.now()})
                session.commit()
            balance = int(due) - int(amountPaid)
            
            getAppointment = session.query(Model.models.Application.M_InvoiceMaster,
                                    ).filter(Model.models.Application.M_InvoiceMaster.MIID==InvNo
                                ).update({Model.models.Application.M_InvoiceMaster.dueSettle:balance,
                                          Model.models.Application.M_InvoiceMaster.MI_SettleInvoice:getAppointments[0].MIID})
            session.commit()
            return jsonify({'msg':'Invoice Created Successfully'})
            
        else:
            return jsonify({'err':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/dueBalanceDetails',methods=['POST'])
def dueBalanceDetails():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request_json = request.get_json(force = True)
                    aid = request_json.get('invId')
                    
                    if(aid != '' and aid != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.dueBalanceDetails,
                                session.query(Model.models.Application.M_DueBalanceInvoice.MIID.label('InvoiceNo'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_DueBalanceInvoice.MI_Date,'%d-%b-%Y').label('Date'),
                                            Model.models.Application.M_DueBalanceInvoice.MI_TotalAmount.label('InvoiceTotal'),
                                            Model.models.Application.M_DueBalanceInvoice.MI_DueBalance.label('Balance'),
                                            Model.models.Application.M_DueBalanceInvoice.MI_Comments.label('Description'),
                                            Model.models.Application.M_DueBalanceInvoice.MI_TotalPayable.label('TotalPayable'),
                                            Model.models.Application.M_DueBalanceInvoice.MI_AmountPaid.label('AmountPaid'),
                                            Model.models.Application.M_DueBalanceInvoice.MI_Comments.label('Comments'),
                                            Model.models.Application.M_DueBalanceInvoice.MI_lastDigits.label('CardNo'),
                                            Model.models.Application.M_DueBalanceInvoice.MI_CardType.label('CardType'),
                                            Model.models.Application.M_Patient.MP_Name.label('Name'),
                                            Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                            Model.models.Application.M_DueBalanceInvoice.MI_ServiceId.label('Procedure'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB')
                                                ).filter_by(MI_IsActive=1,MI_IsDeleted=0,MainInvoiceNo=aid
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_DueBalanceInvoice.M_Patient_MPID
                                ).order_by(Model.models.Application.M_PartnerInvoice.MIID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getPrepaidbalance', methods=['POST','GET'])
def getPrepaidbalance():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            PID = request_json.get('PID')
            prepaiddata = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                        Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount
                                    ).filter_by(TP_PatientID=PID,TP_IsActive=1,TP_IsDeleted=0).all()
            obje = []
            if(len(prepaiddata)>0):
                obje.append({'Prepaid':prepaiddata[0].TP_PrepaidAmount})
            else:
                obje.append({'Prepaid':0})
            return jsonify(result=obje)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close() 

@app.route('/getDetailedViewInvoice',methods=['POST'])
def getDetailedViewInvoice():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request_json = request.get_json(force = True)
                    invId = request_json.get('invId')
                    
                    if(invId != '' and invId != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDetailedViewInvoice,
                                session.query(sqlalchemy.func.concat(Model.models.Application.M_InvoiceMaster.MPP_Prefix,'/',Model.models.Application.M_InvoiceMaster.MainInvoiceNo).label('InvoiceNo'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_Date,'%d-%b-%Y').label('Date'),
                                            Model.models.Application.M_InvoiceMaster.MI_bankName.label('bankName'),
                                            Model.models.Application.M_InvoiceMaster.MI_Card.label('Card'),
                                            Model.models.Application.M_InvoiceMaster.MI_CardType.label('CardType'),
                                            Model.models.Application.M_InvoiceMaster.MI_Cash.label('Cash'),
                                            Model.models.Application.M_InvoiceMaster.MI_CGST.label('CGST'),
                                            Model.models.Application.M_InvoiceMaster.MI_SGST.label('SGST'),
                                            Model.models.Application.M_InvoiceMaster.MI_Discount.label('Discount'),
                                            Model.models.Application.M_InvoiceMaster.MI_discountPercent.label('discountPercent'),
                                            Model.models.Application.M_InvoiceMaster.MI_DiscountReason.label('DiscountReason'),
                                            Model.models.Application.M_InvoiceMaster.MI_Cheque.label('Cheque'),
                                            Model.models.Application.M_InvoiceMaster.MI_Comments.label('Comments'),
                                            Model.models.Application.M_InvoiceMaster.MI_DueBalance.label('DueBalance'),
                                            Model.models.Application.M_InvoiceMaster.MI_InvoiceTotal.label('InvoiceTotal'),
                                            Model.models.Application.M_InvoiceMaster.MI_invoiceType.label('invoiceType'),
                                            Model.models.Application.M_InvoiceMaster.MI_lastDigits.label('lastDigits'),
                                            Model.models.Application.M_InvoiceMaster.MI_Online.label('Online'),
                                            Model.models.Application.M_InvoiceMaster.MI_Prepaid.label('Prepaid'),
                                            Model.models.Application.M_InvoiceMaster.MI_TotalPayable.label('TotalPayable'),
                                            Model.models.Application.M_InvoiceMaster.MI_Upi.label('Upi'),
                                            Model.models.Application.M_InvoiceMaster.MI_AmountPaid.label('AmountPaid'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceId.label('ServiceId'),
                                            Model.models.Application.M_InvoiceMaster.MI_SettleInvoice.label('SettleInvoice'),
                                            Model.models.Application.M_InvoiceMaster.MainInvoiceNo.label('MainInvoiceNo'),
                                            Model.models.Application.M_InvoiceMaster.MI_TotalAmount.label('TotalAmount'),
                                            Model.models.Application.M_InvoiceMaster.MI_PaidByPartner.label('PaidByPartner'),
                                            Model.models.Application.M_InvoiceMaster.MI_PaidByPatient.label('PaidByPatient'),
                                            Model.models.Application.M_InvoiceMaster.MPIA_TotalSessions.label('TotalSessions'),
                                            Model.models.Application.M_InvoiceMaster.MPIA_UsedSession.label('UsedSession'),
                                            Model.models.Application.M_InvoiceMaster.MPIA_PaymentMode.label('PaymentMode'),
                                            Model.models.Application.M_InvoiceMaster.MIP_InvoiceType.label('InvoiceType'),
                                            Model.models.Application.M_InvoiceMaster.MIP_MedicineDetails.label('MedicineDetails'),
                                            Model.models.Application.M_InvoiceMaster.M_PartnerOrgId.label('PartnerOrgId'),
                                            Model.models.Application.M_InvoiceMaster.M_PartnerOrgName.label('PartnerOrgName'),
                                            Model.models.Application.M_InvoiceMaster.MI_ServiceName.label('ServiceName'),
                                            Model.models.Application.M_InvoiceMaster.MI_AppointmentId.label('AppointmentId'),
                                            Model.models.Application.M_InvoiceMaster.M_Branch_MBID.label('M_Branch_MBID'),
                                            Model.models.Application.M_InvoiceMaster.M_Patient_MPID.label('M_Patient_MPID'),
                                            Model.models.Application.M_InvoiceMaster.MPP_PackageName.label('MPP_PackageName'),
                                            Model.models.Application.M_InvoiceMaster.MPP_PackagePrice.label('MPP_PackagePrice'),
                                            Model.models.Application.M_InvoiceMaster.MPP_PackageId.label('MPP_PackageId'),
                                            
                                            Model.models.Application.M_Patient.MP_Name.label('Name'),
                                            Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                            Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('M_DoctorDetails_MDDID'),
                                            sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,Model.models.Application.M_DoctorDetails.MDD_LastName).label('doctorName'),
                                            Model.models.Application.M_Branch.MB_Address.label('Branch'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB')
                                                ).filter_by(MI_IsActive=1,MI_IsDeleted=0,MIID=invId
                                                
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_InvoiceMaster.M_Patient_MPID
                                ).outerjoin(Model.models.Application.M_Appointment, Model.models.Application.M_Appointment.MAID==Model.models.Application.M_InvoiceMaster.MI_AppointmentId
                                ).outerjoin(Model.models.Application.M_DoctorDetails, and_(Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID,Model.models.Application.M_DoctorDetails.MDD_Type != 'Therapist')
                                ).outerjoin(Model.models.Application.M_Branch,Model.models.Application.M_Branch.MBID==Model.models.Application.M_InvoiceMaster.M_Branch_MBID
                                ).order_by(Model.models.Application.M_InvoiceMaster.MIID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    finally:
        session.close()


@app.route('/getDuebalance', methods=['POST','GET'])
def getDuebalance():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            PID = request_json.get('PID')
            prepaiddata = session.query(Model.models.Application.T_DueBalanceAmt.TDID,
                                        Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount
                                    ).filter_by(TD_PatientID=PID,TP_IsActive=1,TP_IsDeleted=0).all()
            obje = []
            if(len(prepaiddata)>0):
                obje.append({'DueBalance':prepaiddata[0].TD_PrepaidAmount})
            else:
                obje.append({'DueBalance':0})
            return jsonify(result=obje)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDetailedCreditReceipt',methods=['POST'])
def getDetailedCreditReceipt():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request_json = request.get_json(force = True)
                    creditId = request_json.get('creditId')
                    
                    if(creditId != '' and creditId != None):
                        CardType = session.query(Model.models.Application.T_Details.TD_Name.label('CardTypes'),
                                          Model.models.Application.T_Details.TDID.label('IDs')).subquery()
                        CreditType = session.query(Model.models.Application.T_Details.TD_Name.label('CreditTypes'),
                                          Model.models.Application.T_Details.TDID.label('IDs')).subquery()
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDetailedCreditReceipt,
                                session.query(
                                            Model.models.Application.T_Credit.TCID.label('ReceiptNo'),
                                            sqlalchemy.func.date_format(Model.models.Application.T_Credit.TC_Date,'%d-%b-%Y').label('Date'),
                                            Model.models.Application.T_Credit.TC_PaymentMode.label('PaymentMod'),
                                            Model.models.Application.T_Details.TD_Name.label('PaymentMode'),
                                            Model.models.Application.T_Credit.TC_Amount.label('Amount'),
                                            Model.models.Application.T_Credit.TC_BankName.label('BankName'),
                                            Model.models.Application.T_Credit.TC_CardType.label('CardTyp'),
                                            Model.models.Application.T_Credit.TC_CardNumber.label('CardNumber'),
                                            Model.models.Application.T_Credit.TC_CreditType.label('CreditTyp'),
                                            Model.models.Application.T_Credit.TC_Comment.label('Comment'),
                                            Model.models.Application.M_Patient.MP_Name.label('Name'),
                                            Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                            Model.models.Application.M_Branch.MB_Address.label('Branch'),
                                            sqlalchemy.func.coalesce(CardType.c.CardTypes,'').label('CardType'),
                                            CreditType.c.CreditTypes.label('CreditType'),
                                            # Model.models.Application.M_DueBalanceInvoice.MI_ServiceId.label('Procedure'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB')
                                                ).filter_by(TC_IsActive=1,TC_IsDeleted=0,TCID=creditId
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.T_Credit.TC_PatientID
                                ).outerjoin(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.T_Credit.TC_PaymentMode
                                ).outerjoin(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.T_Credit.M_Branch_MBID
                                ).outerjoin(CardType, CardType.c.IDs==Model.models.Application.T_Credit.TC_CardType
                                ).outerjoin(CreditType, CreditType.c.IDs==Model.models.Application.T_Credit.TC_CreditType
                
                                ).order_by(Model.models.Application.T_Credit.TCID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getpackageAlldetailedview',methods=['POST'])
def getpackageAlldetailedview():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    requestdata=request.get_json()
                    packageId= requestdata.get('packageId')
                    #Id=request.get_json()
                    if(packageId != '' and packageId != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getpackageAlldetailedview,
                                session.query(Model.models.Application.M_PackageInvoiceForAppointment.MPIA_ServiceName.label('ServiceName'),
                                            Model.models.Application.M_PackageInvoiceForAppointment.MPIA_UsedSession.label('sessionNo'),
                                            Model.models.Application.M_PackageInvoiceForAppointment.MPIAID.label('PackageId'),
                                            Model.models.Application.M_Appointment.MAID.label('AppointmentNo'),
                                            sqlalchemy.func.concat(sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y'),' ',Model.models.Application.M_Appointment.MA_Time).label('ConsultTime'),
                                            sqlalchemy.func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,' ',Model.models.Application.M_DoctorDetails.MDD_LastName).label('DoctorName'),
                                            ).filter_by(MPIA_IsActive=1,MPIA__IsDeleted=0,MP_PackageId=packageId
                                ).join(Model.models.Application.M_Appointment, Model.models.Application.M_Appointment.MAID==Model.models.Application.M_PackageInvoiceForAppointment.MPIA_AppointId
                                ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                ).order_by(Model.models.Application.M_PackageInvoiceForAppointment.MPIAID.desc()).all())
                        session.commit()
                        
                        Packahedata = session.query(Model.models.Application.M_PatientPackageDetailed.MPP_PackageId,
                                    Model.models.Application.M_PatientPackageDetailed.MPP_PackageName,
                                    Model.models.Application.M_PatientPackageDetailed.MPPID,
                                    Model.models.Application.M_PatientPackageDetailed.MPP_TotalSessions,
                                    Model.models.Application.M_PatientPackageDetailed.MPP_UsedSessions,
                                    Model.models.Application.M_PatientPackageDetailed.MPP_AvailSessions
                                    ).filter_by(MPPID=packageId,MPP_IsDeleted=0,MPP_IsActive=1).all()
                        session.commit()
                        
                        obje = []
                        if(len(Packahedata)>0):
                            obje.append({'PackageName':Packahedata[0].MPP_PackageName,
                                         'UsedSessions':Packahedata[0].MPP_UsedSessions,
                                         'TotalSessions':Packahedata[0].MPP_TotalSessions,
                                         'data':queryresult
                                         })
                        else:
                            obje.append({'PackageName':'',
                                         'UsedSessions':0,
                                         'TotalSessions':0,
                                         'data':queryresult
                                         })
                        
                        return jsonify(result=obje)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDetailedPackageReceipt',methods=['POST'])
def getDetailedPackageReceipt():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request_json = request.get_json(force = True)
                    PackageId = request_json.get('PackageId')
                    
                    if(PackageId != '' and PackageId != None):
                        queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDetailedPackageReceipt,
                                session.query(Model.models.Application.M_PackageInvoiceForAppointment.MPIAID.label('ReceiptNo'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_PackageInvoiceForAppointment.MPIA_AddDate,'%d-%b-%Y').label('Date'),
                                            Model.models.Application.M_PackageInvoiceForAppointment.MPIA_PaymentMode.label('PaymentMode'),
                                            Model.models.Application.M_PackageInvoiceForAppointment.MPIA_InvoiceTotal.label('InvoiceTotal'),
                                            Model.models.Application.M_PackageInvoiceForAppointment.MPIA_ServiceName.label('ServiceName'),
                                            Model.models.Application.M_PackageInvoiceForAppointment.MPIA_TotalSessions.label('TotalSessions'),
                                            Model.models.Application.M_PackageInvoiceForAppointment.MPIA_UsedSession.label('UsedSession'),
                                            Model.models.Application.M_PackageInvoiceForAppointment.MPIA_SessionName.label('PackageName'),
                                            Model.models.Application.M_Patient.MP_Name.label('Name'),
                                            Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                            Model.models.Application.M_Appointment,
                                            Model.models.Application.M_Branch.MB_Address.label('Branch'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB')
                                                ).filter_by(MPIA_IsActive=1,MPIA__IsDeleted=0,MPIAID=PackageId
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_PackageInvoiceForAppointment.MPIA_PatientId
                                ).join(Model.models.Application.M_Appointment, Model.models.Application.M_Appointment.MAID==Model.models.Application.M_PackageInvoiceForAppointment.MPIA_AppointId
                                # ).join(Model.models.Application.M_Appointment, Model.models.Application.M_Appointment.MAID==Model.models.Application.M_PackageInvoiceForAppointment.MPIA_AppointId
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                ).order_by(Model.models.Application.M_PackageInvoiceForAppointment.MPIAID.desc()).all())
                        session.commit()
                        return jsonify(result=queryresult)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteCreatedInvoice', methods=['GET','POST'])
def deleteCreatedInvoice():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request1=request.get_json()
                    Id=request1.get('invNo')
                    if(Id != '' and Id != None):
                        invoicedata = session.query(Model.models.Application.M_InvoiceMaster,
                                        Model.models.Application.M_InvoiceMaster.MI_AppointmentId,
                                        Model.models.Application.M_InvoiceMaster.MI_Prepaid,
                                        Model.models.Application.M_InvoiceMaster.M_Patient_MPID,
                                        Model.models.Application.M_InvoiceMaster.dueSettle
                                    ).filter_by(MIID=Id,MI_IsActive=1,MI_IsDeleted=0).all()
                        session.commit()
                        
                        if(len(invoicedata)>0):
                            Aid = invoicedata[0].MI_AppointmentId
                            Prepaid = invoicedata[0].MI_Prepaid
                            duebalance = invoicedata[0].dueSettle
                            Pid = invoicedata[0].M_Patient_MPID
                            session.query(Model.models.Application.M_InvoiceMaster
                                        ).filter(Model.models.Application.M_InvoiceMaster.MIID==Id
                                                ).update({Model.models.Application.M_InvoiceMaster.MI_IsDeleted:1,
                                                        Model.models.Application.M_InvoiceMaster.MI_ModUser:data['id'],
                                                        Model.models.Application.M_InvoiceMaster.MI_ModDate:datetime.datetime.now()})
                            session.commit()
                            if(Aid !='' and Aid !=None):
                                session.query(Model.models.Application.M_Appointment
                                    ).filter(Model.models.Application.M_Appointment.MAID==Aid
                                             ).update({Model.models.Application.M_Appointment.MP_Status:393,
                                                       Model.models.Application.M_Appointment.MP_ModDate:datetime.datetime.now()})
                                session.commit()
                            if(Prepaid !='' and Prepaid !=None and Prepaid !=0 and Prepaid !='0'):
                                prepaiddata = session.query(Model.models.Application.T_PrepaidAmt.TPID,
                                        Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount
                                    ).filter_by(TP_PatientID=Pid,TP_IsActive=1,TP_IsDeleted=0).all()
                                curAmount= prepaiddata[0].TP_PrepaidAmount
                                nowAmt = int(curAmount) + int(Prepaid)
                                session.query(Model.models.Application.T_PrepaidAmt
                                    ).filter(Model.models.Application.T_PrepaidAmt.TP_PatientID==Pid
                                             ).update({Model.models.Application.T_PrepaidAmt.TP_PrepaidAmount:nowAmt,
                                                       Model.models.Application.T_PrepaidAmt.TP_ModDate:datetime.datetime.now()})
                                session.commit()
                                Insert=Model.models.Application.T_CreditMaster()
                                Insert.TC_Date=datetime.datetime.now()
                                Insert.TC_Amount=Prepaid
                                Insert.TC_PatientID=Pid
                                Insert.TC_Comment='REFUND'
                                
                                Insert.TC_AddIP= flask.request.remote_addr
                                Insert.TC_AddDate = datetime.datetime.now()
                                session.add(Insert)
                                session.commit()
                            if(duebalance !='' and duebalance !=None and duebalance !=0):
                                duebalancedata = session.query(Model.models.Application.T_DueBalanceAmt.TDID,
                                        Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount
                                    ).filter_by(TD_PatientID=Pid,TP_IsActive=1,TP_IsDeleted=0).all()
                                curAmount= duebalancedata[0].TD_PrepaidAmount
                                nowAmt = int(curAmount) - int(duebalance)
                                session.query(Model.models.Application.T_DueBalanceAmt
                                    ).filter(Model.models.Application.T_DueBalanceAmt.TD_PatientID==Pid
                                             ).update({Model.models.Application.T_DueBalanceAmt.TD_PrepaidAmount:nowAmt,
                                                       Model.models.Application.T_DueBalanceAmt.TP_ModDate:datetime.datetime.now()})
                                session.commit()
                            return jsonify({'msg':'Invoice Deleted Successfully'})
                        else:
                            return jsonify({'err':'Invoice already Deleted'})
                        
                        
                    else:
                        return jsonify({'msg':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/patientSessionNotes', methods=['POST','GET'])
def patientSessionNotes():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            PID = request_json.get('PID')
            StartedDtl = session.query(Model.models.Application.T_Details.TD_Name.label('StartedDl'),
                                          Model.models.Application.T_Details.TDID.label('IDs')).subquery()
            todayfeelDtl = session.query(Model.models.Application.T_Details.TD_Name.label('todayfeelDl'),
                                          Model.models.Application.T_Details.TDID.label('IDss')).subquery()
            queryResult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.patientSessionNotes,
                        session.query(Model.models.Application.M_SessionNotes.MSN_started.label('Staed'),
                        Model.models.Application.M_SessionNotes.M_AppointmentID.label('AppointmentId'),
                        StartedDtl.c.StartedDl.label('Started'),
                        todayfeelDtl.c.todayfeelDl.label('todayfeel'),
                        
                                    Model.models.Application.M_SessionNotes.MSN_todayfeeling.label('todaeel'),
                                    Model.models.Application.M_SessionNotes.MSN_dotoday.label('dotod'),
                                    Model.models.Application.T_Details.TD_Name.label('dotoday'),
                                    Model.models.Application.M_SessionNotes.MSN_Notes.label('Notes'),
                                    sqlalchemy.func.date_format(Model.models.Application.M_SessionNotes.MSN_AddDate,'%d-%b-%Y').label('Date'),
                                    ).filter_by(MSN_IsActive=1,MSN_IsDeleted=0,M_Patient_MPID=PID
                                    ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_SessionNotes.MSN_dotoday       
                                    ).outerjoin(StartedDtl, StartedDtl.c.IDs==Model.models.Application.M_SessionNotes.MSN_started
                                    ).outerjoin(todayfeelDtl, todayfeelDtl.c.IDss==Model.models.Application.M_SessionNotes.MSN_todayfeeling
                                    ).all()
                                )
            session.commit()
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/patientPastConsults', methods=['POST','GET'])
def patientPastConsults():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            PID = request_json.get('PID')
            queryResult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.patientPastConsults,
                        session.query(Model.models.Application.M_Appointment.MAID.label('MAID'),
                                    Model.models.Application.M_Appointment.MP_Procedure.label('AppointmentId'),
                                    Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('ICDCode'),
                                    Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                    Model.models.Application.M_DoctorDetails.MDD_FirstName.label('Doctor'),
                                    Model.models.Application.M_Appointment.M_Branch_MBID.label('ICDDescription'),
                                    Model.models.Application.M_Service.MS_CategoryName.label('Service'),
                                    sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MP_AddDate,'%d-%b-%Y').label('Date'),
                                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0,M_Patient_MPID=PID
                                    ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID       
                                    ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID       
                                    ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure       
                                    ).all()
                                )
            session.commit()
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/patientProvisionalDiagnosis', methods=['POST','GET'])
def patientProvisionalDiagnosis():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            PID = request_json.get('PID')
            queryResult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.patientProvisionalDiagnosis,
                        session.query(Model.models.Application.M_ProvisionalDiagnosis.MPD_ProvisionalDiagnosis.label('ProvisionalDiagnosis'),
                                    Model.models.Application.M_ProvisionalDiagnosis.M_AppointmentID.label('AppointmentId'),
                                    Model.models.Application.M_ProvisionalDiagnosis.MPD_ICDCode.label('ICDCode'),
                                    Model.models.Application.M_ProvisionalDiagnosis.MPD_ICDDescription.label('ICDDescription'),
                                    sqlalchemy.func.date_format(Model.models.Application.M_ProvisionalDiagnosis.MPD_AddDate,'%d-%b-%Y').label('Date'),
                                    ).filter_by(MPD_IsActive=1,MPD_IsDeleted=0,M_PatientID=PID,MPD_ShowDtl=1
                                    # ).join(Model.models.Application.M_PartnerOrg, Model.models.Application.M_PartnerOrg.MPID==Model.models.Application.M_PartnerOrgPatient.MPP_OrgId       
                                    ).all()
                                )
            session.commit()
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/forgetPassword', methods=['POST','GET'])
def forgetPassword():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            email = request_json.get('email')
            queryResult = session.query(Model.models.Application.M_Users.MUID.label('ProvisionalDiagnosis'),
                        Model.models.Application.M_Users.MU_PersonalEmail.label('PersonalEmail'),
                        Model.models.Application.M_Users.MU_Email.label('Email'),
                        Model.models.Application.M_Users.MU_Username.label('Username'),
                        Model.models.Application.M_Users.MU_Password.label('Password'),
                        Model.models.Application.M_Users.MU_Name.label('Name'),
                       ).filter_by(MU_IsActive=1,MU_IsDeleted=0,MU_Email=email
                        ).all()
            session.commit()
            if(len(queryResult)>0):
                email = queryResult[0].Email
                Username = queryResult[0].Username
                Password = queryResult[0].Password
                Name = queryResult[0].Name
                
                URL = 'https://portal.continuakids.com/login'
                Common_Function.MailFun.SendForgetCredentials_Mail(Name,email,Username,Password,URL)
                return jsonify({'msg':'Credentials Reset Successfully, Please check mail'})
            else:
                return jsonify({'err':'Email Id Not found, Please check Email'})                   
            
           
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/changePassword', methods=['POST','GET'])
def changePassword():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    user = data['id']
                    request_json = request.get_json()
                    OldPassword = request_json.get('OldPassword')
                    NewPassword = request_json.get('NewPassword')
                    ConfirmPassword = request_json.get('ConfirmPassword')
                    queryResult = session.query(Model.models.Application.M_Users.MUID.label('MUID'),
                                Model.models.Application.M_Users.MU_PersonalEmail.label('PersonalEmail'),
                                Model.models.Application.M_Users.MU_Email.label('Email'),
                                Model.models.Application.M_Users.MU_Username.label('Username'),
                                Model.models.Application.M_Users.MU_Password.label('Password'),
                                Model.models.Application.M_Users.MU_Name.label('Name'),
                            ).filter_by(MU_IsActive=1,MU_IsDeleted=0,MUID=user
                                ).all()
                    session.commit()
                    if(len(queryResult)>0):
                        email = queryResult[0].Email
                        Name = queryResult[0].Name
                        Password = queryResult[0].Password
                        if(Password==OldPassword):
                            Insert=session.query(Model.models.Application.M_Users).get(user)
                            Insert.MU_Password= NewPassword
                            Insert.MU_ConfirmPassword= ConfirmPassword
                            Insert.MU_ModDate=datetime.datetime.now()
                            session.commit()
                            URL = 'https://portal.continuakids.com/login'
                            Common_Function.MailFun.SendChangePassword_Mail(Name,email,Password)
                            return jsonify({'msg':'Password Changed Successfully'})
                        else:
                            return jsonify({'err':'Old Password not matched'})    
                        # URL = 'http://3.111.190.80:8082/'
                        # Common_Function.MailFun.SendRegistration_Mail(Name,email,Username,Password,URL)
                    else:
                        return jsonify({'err':'Email Id Not found, Please check Email'})                   
            
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAllPolicy', methods=['GET','POST'])
def getAllPolicy():
    
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    queryresult= Common_Function.CommonFun.convertToJson(
                    Constant.constant.constant.getAllPolicy,
                    session.query(Model.models.Application.M_Policy.MPID.label('Id'),
                                Model.models.Application.M_Policy.MP_PolicyName.label('Policy Name'),
                                
                                sqlalchemy.func.date_format(Model.models.Application.M_Policy.MP_AddDate,'%d-%b-%Y').label('Add Date'),
                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0
                                            ).order_by(Model.models.Application.M_Policy.MP_PolicyName).all()
                        )
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getPatientDetailFromAppointment', methods=['GET','POST'])
def getPatientDetailFromAppointment():
    
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request1= request.get_json()
                    AID = request1.get('AID')
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPatientDetailFromAppointment,
                                session.query(Model.models.Application.M_Appointment.MAID.label('AppointId'),
                                    Model.models.Application.M_Appointment.M_Patient_MPID.label('Pid'),
                                    Model.models.Application.M_Appointment.MP_Procedure.label('procedure'),
                                    sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('date'),
                                    Model.models.Application.M_Appointment.MA_Time.label('time'),
                                    Model.models.Application.M_Appointment.MP_Duration.label('duration'),
                                    Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('doctor'),
                                    Model.models.Application.M_Patient.MP_Name.label('Patient'),
                                    Model.models.Application.M_Patient.MP_Mobile.label('Mobile'),
                                    Model.models.Application.M_Patient.MP_Address.label('Address'),
                                    # Model.models.Application.M_Patient.MP_DOB.label('DOB'),
                                    sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB'),
                                    Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                    Model.models.Application.M_Patient.MP_Email.label('Email'),
                                    Model.models.Application.M_DoctorDetails.MDD_FirstName.label('Doctor Name'),
                                    Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                    Model.models.Application.T_Details.TD_Name.label('Gender'),
                                    
                                        ).filter_by(MAID=AID,MP_IsActive=1,MP_IsDeleted=0
                                    ).join(Model.models.Application.M_Patient,Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                    ).join(Model.models.Application.M_DoctorDetails,Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                    ).join(Model.models.Application.M_Branch,Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                    ).outerjoin(Model.models.Application.T_Details,Model.models.Application.T_Details.TDID==Model.models.Application.M_Patient.MP_Gender
                                    ).all()
                        )
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSequinFormBoardTestReport', methods=['GET','POST'])
def viewSequinFormBoardTestReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewSequinFormBoardTestReport,
                            session.query(Model.models.Application.M_SequinFormBoardTest.MSFBID.label('ID'),
                                        Model.models.Application.M_SequinFormBoardTest.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_MentalAge.label('Mental Age'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_IQ.label('IQ'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_ShortestTime.label('Shortest Time'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_TotalTime.label('Total Time'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_CorrespondsMentalAge.label('Corresponds Mental Age'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_suggestingIntellectualfunctioning.label('Suggesting Intellectual Functioning'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MSFB_IsActive=1,MSFB_IsDeleted=0
                            ).order_by(Model.models.Application.M_SequinFormBoardTest.MSFBID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()
        
@app.route('/viewGeselsDrawingTestofintelligenceReport', methods=['GET','POST'])
def viewGeselsDrawingTestofintelligenceReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewGeselsDrawingTestofintelligenceReport,
                            session.query(Model.models.Application.M_GeselsDrawingTestofintelligence.MGDIID.label('ID'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_MentalAge.label('Mental Age'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_IQ.label('IQ'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_MentalAgeMonths.label('Mental Age Months'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_MentalAgeYears.label('Mental Age Years'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_IQof.label('IQ of'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_Depicting.label('Depicting'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MGDI_IsActive=1,MGDI_IsDeleted=0
                            ).order_by(Model.models.Application.M_GeselsDrawingTestofintelligence.MGDIID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()        

@app.route('/viewRavenStandardProgressiveMatricesReport', methods=['GET','POST'])
def viewRavenStandardProgressiveMatricesReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewRavenStandardProgressiveMatricesReport,
                            session.query(Model.models.Application.M_RavenStandardProgressiveMatrices.MRSPID.label('ID'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_RawScore.label('Raw Score'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Percentile.label('Percentile'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Grade.label('Grade'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Interpretation.label('Interpretation'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_CorrespondsTo.label('Corresponds To'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MRSP_IsActive=1,MRSP_IsDeleted=0
                            ).order_by(Model.models.Application.M_RavenStandardProgressiveMatrices.MRSPID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewDevelopmentalProfileReport', methods=['GET','POST'])
def viewDevelopmentalProfileReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewDevelopmentalProfileReport,
                            session.query(Model.models.Application.M_DevelopmentalProfile.MDPID.label('ID'),
                                        Model.models.Application.M_DevelopmentalProfile.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_PhysicalStandardScore.label('Physical Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_PhysicalDescCategory.label('Physical Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_PhysicalAgeEquivalent.label('Physical Age Equivalent'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_AdaptiveBehaviorStandardScore.label('Adaptive Behavior Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_AdaptiveBehaviorDescCategory.label('Adaptive Behavior Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_AdaptiveBehaviorAgeEquivalent.label('Adaptive Behavior Age Equivalent'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_SocialEmoStandardScore.label('Social Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_SocialEmoDescCategory.label('Social Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_SocialEmoAgeEquivalent.label('Social Equivalent'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CognitiveStandardScore.label('Cognitive Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CognitiveDescCategory.label('Cognitive Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CognitiveAgeEquivalent.label('Cognitive Age Equivalent'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CommStandardScore.label('Comm Standard Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CommDescCategory.label('Comm Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CommAgeEquivalent.label('Comm Age Equivalent'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_GeneralDevScoreStandardScore.label('General Dev Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_GeneralDevScoreDescCategory.label('General Dev Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_GeneralDevScoreAgeEquivalent.label('General Age Equivalent')
                                        
                                            ).filter_by(M_AppointmentID=AID,MDP_IsActive=1,MDP_IsDeleted=0
                            ).order_by(Model.models.Application.M_DevelopmentalProfile.MDPID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
        # else:
        #     return jsonify({'err':request.method})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitWechslerTestForm',methods=['GET','POST'])
def submitWechslerTestForm():

    session=Session()
    try:

        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                BranchId= request.headers.get('branchId')
                request_json = request.get_json()
                SubsetScore = request_json.get('subsetScore')
                ReadingComprehensionStandardScore = request_json.get('readingComprehensionStandardScore')
                ReadingComprehensionConfidenceInterval = request_json.get('readingComprehensionConfidenceInterval')
                ReadingComprehensionPercentileRank = request_json.get('readingComprehensionPercentileRank')
                ReadingComprehensionGradeEquivalent = request_json.get('readingComprehensionGradeEquivalent')
                WordReadingStandardScore = request_json.get('wordReadingStandardScore')
                WordReadingConfidenceInterval = request_json.get('wordReadingConfidenceInterval')
                WordReadingPercentileRank = request_json.get('wordReadingPercentileRank')
                WordReadingGradeEquivalent = request_json.get('wordReadingGradeEquivalent')
                EssayCompositionStandardScore = request_json.get('essayCompositionStandardScore')
                EssayCompositionConfidenceInterval = request_json.get('essayCompositionConfidenceInterval')
                EssayCompositionPercentileRank = request_json.get('essayCompositionPercentileRank')
                EssayCompositionGradeEquivalent = request_json.get('essayCompositionGradeEquivalent')
                NumericalOperationsStandardScore = request_json.get('numericalOperationsStandardScore')
                NumericalOperationsConfidenceInterval = request_json.get('numericalOperationsConfidenceInterval')
                NumericalOperationsPercentileRank = request_json.get('numericalOperationsPercentileRank')
                NumericalOperationsGradeEquivalent = request_json.get('numericalOperationsGradeEquivalent')
                SpellingStandardScore = request_json.get('spellingStandardScore')
                SpellingConfidenceInterval = request_json.get('spellingConfidenceInterval')
                SpellingPercentileRank = request_json.get('spellingPercentileRank')
                SpellingGradeEquivalent = request_json.get('spellingGradeEquivalent')
                Comment = request_json.get('comment')
                MathematicsComment = request_json.get('mathematicsComment')
                WrittenExpressionComment = request_json.get('writtenExpressionComment')

                Aid = request_json.get('Aid')
                PID = request_json.get('PID')
                Id = request_json.get('Id')
                if(Id=='' or Id ==None):
                    Insert=Model.models.Application.M_WechslerTest()
                    Insert.M_Patient_MPID=PID
                    Insert.MI_AppointmentId=Aid
                    Insert.M_Branch_MBID=BranchId

                    Insert.SubsetScore=SubsetScore
                    Insert.ReadCompStandardScore=ReadingComprehensionStandardScore
                    Insert.ReadCompConfidenceInterval=ReadingComprehensionConfidenceInterval
                    Insert.ReadCompPercentileRank=ReadingComprehensionPercentileRank
                    Insert.ReadCompGradeEquivalent=ReadingComprehensionGradeEquivalent
                    Insert.WordReadStandardScore=WordReadingStandardScore
                    Insert.WordReadConfidence=WordReadingConfidenceInterval
                    Insert.WordReadPercentileRank=WordReadingPercentileRank
                    Insert.WordReadGradeEquivalent=WordReadingGradeEquivalent
                    Insert.EssayCompStandardScore=EssayCompositionStandardScore
                    Insert.EssayCompConfidence=EssayCompositionConfidenceInterval
                    Insert.EssayCompPercentileRank=EssayCompositionPercentileRank
                    Insert.EssayCompGradeEquivalent=EssayCompositionGradeEquivalent
                    Insert.NumOperStandardScore=NumericalOperationsStandardScore
                    Insert.NumOperConfidence=NumericalOperationsConfidenceInterval
                    Insert.NumOperPercentileRank=NumericalOperationsPercentileRank
                    Insert.NumOperGradeEquivalent=NumericalOperationsGradeEquivalent
                    Insert.SpelStandardScore=SpellingStandardScore
                    Insert.SpelConfidence=SpellingConfidenceInterval
                    Insert.SpelPercentileRank=SpellingPercentileRank
                    Insert.SpelGradeEquivalent=SpellingGradeEquivalent
                    Insert.Comment=Comment
                    Insert.MathematicsComment=MathematicsComment
                    Insert.WrittenExpComment=WrittenExpressionComment
                    
                    Insert.AddUser= data['id']
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'Wechsler Test Added Successfully'})
                else:
                    Insert=session.query(Model.models.Application.M_WechslerTest).get(Id)
                    Insert.M_Patient_MPID=PID
                    Insert.MI_AppointmentId=Aid
                    Insert.M_Branch_MBID=BranchId
                    Insert.SubsetScore=SubsetScore
                    Insert.ReadCompStandardScore=ReadingComprehensionStandardScore
                    Insert.ReadCompConfidenceInterval=ReadingComprehensionConfidenceInterval
                    Insert.ReadCompPercentileRank=ReadingComprehensionPercentileRank
                    Insert.ReadCompGradeEquivalent=ReadingComprehensionGradeEquivalent
                    Insert.WordReadStandardScore=WordReadingStandardScore
                    Insert.WordReadConfidence=WordReadingConfidenceInterval
                    Insert.WordReadPercentileRank=WordReadingPercentileRank
                    Insert.WordReadGradeEquivalent=WordReadingGradeEquivalent
                    Insert.EssayCompStandardScore=EssayCompositionStandardScore
                    Insert.EssayCompConfidence=EssayCompositionConfidenceInterval
                    Insert.EssayCompPercentileRank=EssayCompositionPercentileRank
                    Insert.EssayCompGradeEquivalent=EssayCompositionGradeEquivalent
                    Insert.NumOperStandardScore=NumericalOperationsStandardScore
                    Insert.NumOperConfidence=NumericalOperationsConfidenceInterval
                    Insert.NumOperPercentileRank=NumericalOperationsPercentileRank
                    Insert.NumOperGradeEquivalent=NumericalOperationsGradeEquivalent
                    Insert.SpelStandardScore=SpellingStandardScore
                    Insert.SpelConfidence=SpellingConfidenceInterval
                    Insert.SpelPercentileRank=SpellingPercentileRank
                    Insert.SpelGradeEquivalent=SpellingGradeEquivalent
                    Insert.Comment=Comment
                    Insert.MathematicsComment=MathematicsComment
                    Insert.WrittenExpComment=WrittenExpressionComment
                    
                    Insert.AddUser= data['id']
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    
                    session.commit()
                    return jsonify({'msg':'Wechsler Test Updated Successfully'})
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewWechslerTestForm', methods=['GET','POST'])
def viewWechslerTestForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewWechslerTestForm,
                                session.query(Model.models.Application.M_WechslerTest.MIID.label('ID'),
                                            Model.models.Application.M_WechslerTest.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_WechslerTest.SubsetScore.label('SubsetScore'),
                                            Model.models.Application.M_WechslerTest.ReadCompStandardScore.label('ReadCompStandardScore'),
                                            Model.models.Application.M_WechslerTest.ReadCompConfidenceInterval.label('ReadCompConfidenceInterval'),
                                            Model.models.Application.M_WechslerTest.ReadCompPercentileRank.label('ReadCompPercentileRank'),
                                            Model.models.Application.M_WechslerTest.ReadCompGradeEquivalent.label('ReadCompGradeEquivalent'),
                                            Model.models.Application.M_WechslerTest.WordReadStandardScore.label('WordReadStandardScore'),
                                            Model.models.Application.M_WechslerTest.WordReadConfidence.label('WordReadConfidence'),
                                            Model.models.Application.M_WechslerTest.WordReadPercentileRank.label('WordReadPercentileRank'),
                                            Model.models.Application.M_WechslerTest.WordReadGradeEquivalent.label('WordReadGradeEquivalent'),
                                            Model.models.Application.M_WechslerTest.EssayCompStandardScore.label('EssayCompStandardScore'),
                                            Model.models.Application.M_WechslerTest.EssayCompConfidence.label('EssayCompConfidence'),
                                            Model.models.Application.M_WechslerTest.EssayCompPercentileRank.label('EssayCompPercentileRank'),
                                            Model.models.Application.M_WechslerTest.EssayCompGradeEquivalent.label('EssayCompGradeEquivalent'),
                                            Model.models.Application.M_WechslerTest.NumOperStandardScore.label('NumOperStandardScore'),
                                            Model.models.Application.M_WechslerTest.NumOperConfidence.label('NumOperConfidence'),
                                            Model.models.Application.M_WechslerTest.NumOperPercentileRank.label('NumOperPercentileRank'),
                                            Model.models.Application.M_WechslerTest.NumOperGradeEquivalent.label('NumOperGradeEquivalent'),
                                            Model.models.Application.M_WechslerTest.SpelStandardScore.label('SpelStandardScore'),
                                            Model.models.Application.M_WechslerTest.SpelConfidence.label('SpelConfidence'),
                                            Model.models.Application.M_WechslerTest.SpelPercentileRank.label('SpelPercentileRank'),
                                            Model.models.Application.M_WechslerTest.SpelGradeEquivalent.label('SpelGradeEquivalent'),
                                            Model.models.Application.M_WechslerTest.Comment.label('Comment'),
                                            Model.models.Application.M_WechslerTest.MathematicsComment.label('MathematicsComment'),
                                            Model.models.Application.M_WechslerTest.WrittenExpComment.label('WrittenExpComment'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_WechslerTest.MIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitPerceptualAndVisualMotorAbilityForm',methods=['GET','POST'])  
def submitPerceptualAndVisualMotorAbilityForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    
                    BranchId= request.headers.get('branchId')
                    request_json = request.get_json()
                    VisualDiscrimination = request_json.get('VisualDiscrimination')
                    VisualDiscriminationComments = request_json.get('VisualDiscriminationComments')
                    VisualMemoryTest = request_json.get('VisualMemoryTest')
                    VisualMemoryTestComments = request_json.get('VisualMemoryTestComments')
                    AuditoryMemorytest = request_json.get('AuditoryMemorytest')
                    AuditoryMemorytestComments = request_json.get('AuditoryMemorytestComments')
                    Attention = request_json.get('Attention')
                    AttentionComments = request_json.get('AttentionComments')
                    DoubleNumberCancellation = request_json.get('DoubleNumberCancellation')
                    DoubleNumberCancellationComments = request_json.get('DoubleNumberCancellationComments')
                    Language = request_json.get('Language')
                    LanguageComments = request_json.get('LanguageComments')
                    Reading = request_json.get('Reading')
                    ReadingComments = request_json.get('ReadingComments')
                    Comprehension = request_json.get('Comprehension')
                    ComprehensionComments = request_json.get('ComprehensionComments')
                    Spelling = request_json.get('Spelling')
                    SpellingComments = request_json.get('SpellingComments')
                    WritingAndCopying = request_json.get('WritingAndCopying')
                    WritingAndCopyingComments = request_json.get('WritingAndCopyingComments')
                    WritingSkills = request_json.get('WritingSkills')
                    WritingSkillsComments = request_json.get('WritingSkillsComments')
                    ExpressiveWriting = request_json.get('ExpressiveWriting')
                    ExpressiveWritingComments = request_json.get('ExpressiveWritingComments')
                    Copying = request_json.get('Copying')
                    CopyingComments = request_json.get('CopyingComments')
                    Arithmetic = request_json.get('Arithmetic')
                    ArithmeticComments = request_json.get('ArithmeticComments')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_PerceptualNvisual()
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid
                        Insert.M_Branch_MBID=BranchId
                        Insert.VisualDiscr=VisualDiscrimination
                        Insert.VisualDiscrComments=VisualDiscriminationComments
                        Insert.VisualMemoryTest=VisualMemoryTest
                        Insert.VisualMemoryTestComments=VisualMemoryTestComments
                        Insert.AuditoryMemory=AuditoryMemorytest
                        Insert.AuditoryMemoryComments=AuditoryMemorytestComments
                        Insert.Attention=Attention
                        Insert.AttentionComments=AttentionComments
                        Insert.DoubleNumCancel=DoubleNumberCancellation
                        Insert.DoubleNumCancelComments=DoubleNumberCancellationComments
                        Insert.Language=Language
                        Insert.LanguageComments=LanguageComments
                        Insert.Reading=Reading
                        Insert.ReadingComments=ReadingComments
                        Insert.Comprehension=Comprehension
                        Insert.ComprehensionComments=ComprehensionComments
                        Insert.Spelling=Spelling
                        Insert.SpellingComments=SpellingComments
                        Insert.WritingAndCopy=WritingAndCopying
                        Insert.WritingAndCopyComments=WritingAndCopyingComments
                        Insert.WritingSkills=WritingSkills
                        Insert.WritingSkillsComments=WritingSkillsComments
                        Insert.ExpressiveWriting=ExpressiveWriting
                        Insert.ExpressiveWritingComments=ExpressiveWritingComments
                        Insert.Copying=Copying
                        Insert.CopyingComments=CopyingComments
                        Insert.Arithmetic=Arithmetic
                        Insert.ArithmeticComments=ArithmeticComments

                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Perceptual And Visual Motor Ability Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_PerceptualNvisual).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid
                        Insert.M_Branch_MBID=BranchId
                        Insert.VisualDiscr=VisualDiscrimination
                        Insert.VisualDiscrComments=VisualDiscriminationComments
                        Insert.VisualMemoryTest=VisualMemoryTest
                        Insert.VisualMemoryTestComments=VisualMemoryTestComments
                        Insert.AuditoryMemory=AuditoryMemorytest
                        Insert.AuditoryMemoryComments=AuditoryMemorytestComments
                        Insert.Attention=Attention
                        Insert.AttentionComments=AttentionComments
                        Insert.DoubleNumCancel=DoubleNumberCancellation
                        Insert.DoubleNumCancelComments=DoubleNumberCancellationComments
                        Insert.Language=Language
                        Insert.LanguageComments=LanguageComments
                        Insert.Reading=Reading
                        Insert.ReadingComments=ReadingComments
                        Insert.Comprehension=Comprehension
                        Insert.ComprehensionComments=ComprehensionComments
                        Insert.Spelling=Spelling
                        Insert.SpellingComments=SpellingComments
                        Insert.WritingAndCopy=WritingAndCopying
                        Insert.WritingAndCopyComments=WritingAndCopyingComments
                        Insert.WritingSkills=WritingSkills
                        Insert.WritingSkillsComments=WritingSkillsComments
                        Insert.ExpressiveWriting=ExpressiveWriting
                        Insert.ExpressiveWritingComments=ExpressiveWritingComments
                        Insert.Copying=Copying
                        Insert.CopyingComments=CopyingComments
                        Insert.Arithmetic=Arithmetic
                        Insert.ArithmeticComments=ArithmeticComments

                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        
                        session.commit()
                        return jsonify({'msg':'Perceptual And Visual Motor Ability Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewPerceptualAndVisualMotorAbilityForm', methods=['GET','POST'])
def viewPerceptualAndVisualMotorAbilityForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPerceptualAndVisualMotorAbilityForm,
                                session.query(Model.models.Application.M_PerceptualNvisual.MIID.label('ID'),
                                            Model.models.Application.M_PerceptualNvisual.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_PerceptualNvisual.VisualDiscr.label('VisualDiscr'),
                                            Model.models.Application.M_PerceptualNvisual.VisualDiscrComments.label('VisualDiscrComments'),
                                            Model.models.Application.M_PerceptualNvisual.VisualMemoryTest.label('VisualMemoryTest'),
                                            Model.models.Application.M_PerceptualNvisual.VisualMemoryTestComments.label('VisualMemoryTestComments'),
                                            Model.models.Application.M_PerceptualNvisual.AuditoryMemory.label('AuditoryMemory'),
                                            Model.models.Application.M_PerceptualNvisual.AuditoryMemoryComments.label('AuditoryMemoryComments'),
                                            Model.models.Application.M_PerceptualNvisual.Attention.label('Attention'),
                                            Model.models.Application.M_PerceptualNvisual.AttentionComments.label('AttentionComments'),
                                            Model.models.Application.M_PerceptualNvisual.DoubleNumCancel.label('DoubleNumCancel'),
                                            Model.models.Application.M_PerceptualNvisual.DoubleNumCancelComments.label('DoubleNumCancelComments'),
                                            Model.models.Application.M_PerceptualNvisual.Language.label('Language'),
                                            Model.models.Application.M_PerceptualNvisual.LanguageComments.label('LanguageComments'),
                                            Model.models.Application.M_PerceptualNvisual.Reading.label('Reading'),
                                            Model.models.Application.M_PerceptualNvisual.ReadingComments.label('ReadingComments'),
                                            Model.models.Application.M_PerceptualNvisual.Comprehension.label('Comprehension'),
                                            Model.models.Application.M_PerceptualNvisual.ComprehensionComments.label('ComprehensionComments'),
                                            Model.models.Application.M_PerceptualNvisual.Spelling.label('Spelling'),
                                            Model.models.Application.M_PerceptualNvisual.SpellingComments.label('SpellingComments'),
                                            Model.models.Application.M_PerceptualNvisual.WritingAndCopy.label('WritingAndCopy'),
                                            Model.models.Application.M_PerceptualNvisual.WritingAndCopyComments.label('WritingAndCopyComments'),
                                            Model.models.Application.M_PerceptualNvisual.WritingSkills.label('WritingSkills'),
                                            Model.models.Application.M_PerceptualNvisual.WritingSkillsComments.label('WritingSkillsComments'),
                                            Model.models.Application.M_PerceptualNvisual.ExpressiveWriting.label('ExpressiveWriting'),
                                            Model.models.Application.M_PerceptualNvisual.ExpressiveWritingComments.label('ExpressiveWritingComments'),
                                            Model.models.Application.M_PerceptualNvisual.Copying.label('Copying'),
                                            Model.models.Application.M_PerceptualNvisual.CopyingComments.label('CopyingComments'),
                                            Model.models.Application.M_PerceptualNvisual.Arithmetic.label('Arithmetic'),
                                            Model.models.Application.M_PerceptualNvisual.ArithmeticComments.label('ArithmeticComments'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_PerceptualNvisual.MIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/viewPerceptualAndVisualMotorAbilityReport', methods=['GET','POST'])
def viewPerceptualAndVisualMotorAbilityReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewPerceptualAndVisualMotorAbilityReport,
                            session.query(Model.models.Application.M_PerceptualNvisual.MIID.label('ID'),
                                        Model.models.Application.M_PerceptualNvisual.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_PerceptualNvisual.VisualDiscr.label('VisualDiscr'),
                                        Model.models.Application.M_PerceptualNvisual.VisualDiscrComments.label('VisualDiscrComments'),
                                        Model.models.Application.M_PerceptualNvisual.VisualMemoryTest.label('VisualMemoryTest'),
                                        Model.models.Application.M_PerceptualNvisual.VisualMemoryTestComments.label('VisualMemoryTestComments'),
                                        Model.models.Application.M_PerceptualNvisual.AuditoryMemory.label('AuditoryMemory'),
                                        Model.models.Application.M_PerceptualNvisual.AuditoryMemoryComments.label('AuditoryMemoryComments'),
                                        Model.models.Application.M_PerceptualNvisual.Attention.label('Attention'),
                                        Model.models.Application.M_PerceptualNvisual.AttentionComments.label('AttentionComments'),
                                        Model.models.Application.M_PerceptualNvisual.DoubleNumCancel.label('DoubleNumCancel'),
                                        Model.models.Application.M_PerceptualNvisual.DoubleNumCancelComments.label('DoubleNumCancelComments'),
                                        Model.models.Application.M_PerceptualNvisual.Language.label('Language'),
                                        Model.models.Application.M_PerceptualNvisual.LanguageComments.label('LanguageComments'),
                                        Model.models.Application.M_PerceptualNvisual.Reading.label('Reading'),
                                        Model.models.Application.M_PerceptualNvisual.ReadingComments.label('ReadingComments'),
                                        Model.models.Application.M_PerceptualNvisual.Comprehension.label('Comprehension'),
                                        Model.models.Application.M_PerceptualNvisual.ComprehensionComments.label('ComprehensionComments'),
                                        Model.models.Application.M_PerceptualNvisual.Spelling.label('Spelling'),
                                        Model.models.Application.M_PerceptualNvisual.SpellingComments.label('SpellingComments'),
                                        Model.models.Application.M_PerceptualNvisual.WritingAndCopy.label('WritingAndCopy'),
                                        Model.models.Application.M_PerceptualNvisual.WritingAndCopyComments.label('WritingAndCopyComments'),
                                        Model.models.Application.M_PerceptualNvisual.WritingSkills.label('WritingSkills'),
                                        Model.models.Application.M_PerceptualNvisual.WritingSkillsComments.label('WritingSkillsComments'),
                                        Model.models.Application.M_PerceptualNvisual.ExpressiveWriting.label('ExpressiveWriting'),
                                        Model.models.Application.M_PerceptualNvisual.ExpressiveWritingComments.label('ExpressiveWritingComments'),
                                        Model.models.Application.M_PerceptualNvisual.Copying.label('Copying'),
                                        Model.models.Application.M_PerceptualNvisual.CopyingComments.label('CopyingComments'),
                                        Model.models.Application.M_PerceptualNvisual.Arithmetic.label('Arithmetic'),
                                        Model.models.Application.M_PerceptualNvisual.ArithmeticComments.label('ArithmeticComments'),
                                        
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_PerceptualNvisual.MIID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewWechslerTestReport', methods=['GET','POST'])
def viewWechslerTestReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewWechslerTestReport,
                            session.query(Model.models.Application.M_WechslerTest.MIID.label('ID'),
                                        Model.models.Application.M_WechslerTest.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_WechslerTest.SubsetScore.label('SubsetScore'),
                                        Model.models.Application.M_WechslerTest.ReadCompStandardScore.label('ReadCompStandardScore'),
                                        Model.models.Application.M_WechslerTest.ReadCompConfidenceInterval.label('ReadCompConfidenceInterval'),
                                        Model.models.Application.M_WechslerTest.ReadCompPercentileRank.label('ReadCompPercentileRank'),
                                        Model.models.Application.M_WechslerTest.ReadCompGradeEquivalent.label('ReadCompGradeEquivalent'),
                                        Model.models.Application.M_WechslerTest.WordReadStandardScore.label('WordReadStandardScore'),
                                        Model.models.Application.M_WechslerTest.WordReadConfidence.label('WordReadConfidence'),
                                        Model.models.Application.M_WechslerTest.WordReadPercentileRank.label('WordReadPercentileRank'),
                                        Model.models.Application.M_WechslerTest.WordReadGradeEquivalent.label('WordReadGradeEquivalent'),
                                        Model.models.Application.M_WechslerTest.EssayCompStandardScore.label('EssayCompStandardScore'),
                                        Model.models.Application.M_WechslerTest.EssayCompConfidence.label('EssayCompConfidence'),
                                        Model.models.Application.M_WechslerTest.EssayCompPercentileRank.label('EssayCompPercentileRank'),
                                        Model.models.Application.M_WechslerTest.EssayCompGradeEquivalent.label('EssayCompGradeEquivalent'),
                                        Model.models.Application.M_WechslerTest.NumOperStandardScore.label('NumOperStandardScore'),
                                        Model.models.Application.M_WechslerTest.NumOperConfidence.label('NumOperConfidence'),
                                        Model.models.Application.M_WechslerTest.NumOperPercentileRank.label('NumOperPercentileRank'),
                                        Model.models.Application.M_WechslerTest.NumOperGradeEquivalent.label('NumOperGradeEquivalent'),
                                        Model.models.Application.M_WechslerTest.SpelStandardScore.label('SpelStandardScore'),
                                        Model.models.Application.M_WechslerTest.SpelConfidence.label('SpelConfidence'),
                                        Model.models.Application.M_WechslerTest.SpelPercentileRank.label('SpelPercentileRank'),
                                        Model.models.Application.M_WechslerTest.SpelGradeEquivalent.label('SpelGradeEquivalent'),
                                        Model.models.Application.M_WechslerTest.Comment.label('Comment'),
                                        Model.models.Application.M_WechslerTest.MathematicsComment.label('MathematicsComment'),
                                        Model.models.Application.M_WechslerTest.WrittenExpComment.label('WrittenExpComment'),
                                        
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_WechslerTest.MIID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewMalinIntelligenceScaleforIndianChildrenReport', methods=['GET','POST'])
def viewMalinIntelligenceScaleforIndianChildrenReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewMalinIntelligenceScaleforIndianChildrenReport,
                            session.query(Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISIID.label('ID'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_InformationTestScores.label('InformationTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_PictureTestScores.label('PictureTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_GeneralTestScores.label('GeneralTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_BlockDesignTestScores.label('BlockDesignTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_ArithmeticTestScores.label('ArithmeticTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_ObjectScores.label('ObjectScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_VocabularyTestScores.label('VocabularyTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_MazeTestScores.label('MazeTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_AnalogiesScores.label('AnalogiesScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_CodingScores.label('CodingScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_VQ.label('VQ'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_PQ.label('PQ'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_FullScaleIQ.label('FullScaleIQ'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_Comment.label('Comment'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MISI_IsActive=1,MISI_IsDeleted=0
                            ).order_by(Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISIID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitChildAnxietyRelatedDisordersForm',methods=['GET','POST'])   
def submitChildAnxietyRelatedDisordersForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    PanicDisorderScore = request_json.get('panicDisorderScore')
                    GeneralizedAnxietyDisorderScore = request_json.get('generalizedAnxietyDisorderScore')
                    SeparationAnxietyDisorderScore = request_json.get('separationAnxietyDisorderScore')
                    SocialAnxietyDisorderScore = request_json.get('socialAnxietyDisorderScore')
                    SchoolAvoidanceScore = request_json.get('schoolAvoidanceScore')
                    AnxietyDisorderScore = request_json.get('anxietyDisorderScore')
                    Comment = request_json.get('comment')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_ChildAnxietyRelatedDisorders()
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid

                        Insert.PanicDisScore=PanicDisorderScore
                        Insert.GenAnxietyDisScore=GeneralizedAnxietyDisorderScore
                        Insert.SepAnxietyDisScore=SeparationAnxietyDisorderScore
                        Insert.SocialAnxietyDisScore=SocialAnxietyDisorderScore
                        Insert.SchoolAvoidScore=SchoolAvoidanceScore
                        Insert.AnxietyDisScore=AnxietyDisorderScore
                        Insert.Comment=Comment

                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Child Anxiety Related Disorders Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_ChildAnxietyRelatedDisorders).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid
                        Insert.PanicDisScore=PanicDisorderScore
                        Insert.GenAnxietyDisScore=GeneralizedAnxietyDisorderScore
                        Insert.SepAnxietyDisScore=SeparationAnxietyDisorderScore
                        Insert.SocialAnxietyDisScore=SocialAnxietyDisorderScore
                        Insert.SchoolAvoidScore=SchoolAvoidanceScore
                        Insert.AnxietyDisScore=AnxietyDisorderScore
                        Insert.Comment=Comment

                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        
                        session.commit()
                        return jsonify({'msg':'Child Anxiety Related Disorders Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewChildAnxietyRelatedDisordersForm', methods=['GET','POST'])
def viewChildAnxietyRelatedDisordersForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewChildAnxietyRelatedDisordersForm,
                                session.query(Model.models.Application.M_ChildAnxietyRelatedDisorders.MIID.label('ID'),
                                            Model.models.Application.M_ChildAnxietyRelatedDisorders.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_ChildAnxietyRelatedDisorders.PanicDisScore.label('PanicDisorderScore'),
                                            Model.models.Application.M_ChildAnxietyRelatedDisorders.GenAnxietyDisScore.label('GeneralizedAnxietyDisorderScore'),
                                            Model.models.Application.M_ChildAnxietyRelatedDisorders.SepAnxietyDisScore.label('SeparationAnxietyDisorderScore'),
                                            Model.models.Application.M_ChildAnxietyRelatedDisorders.SocialAnxietyDisScore.label('SocialAnxietyDisorderScore'),
                                            Model.models.Application.M_ChildAnxietyRelatedDisorders.SchoolAvoidScore.label('SchoolAvoidanceScore'),
                                            Model.models.Application.M_ChildAnxietyRelatedDisorders.AnxietyDisScore.label('AnxietyDisorderScore'),
                                            Model.models.Application.M_ChildAnxietyRelatedDisorders.Comment.label('Comment'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_ChildAnxietyRelatedDisorders.MIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/viewChildAnxietyRelatedDisordersReport', methods=['GET','POST'])
def viewChildAnxietyRelatedDisordersReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewChildAnxietyRelatedDisordersReport,
                            session.query(Model.models.Application.M_ChildAnxietyRelatedDisorders.MIID.label('ID'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.PanicDisScore.label('PanicDisorderScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.GenAnxietyDisScore.label('GeneralizedAnxietyDisorderScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.SepAnxietyDisScore.label('SeparationAnxietyDisorderScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.SocialAnxietyDisScore.label('SocialAnxietyDisorderScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.SchoolAvoidScore.label('SchoolAvoidanceScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.AnxietyDisScore.label('AnxietyDisorderScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.Comment.label('Comment'),
                                        
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_ChildAnxietyRelatedDisorders.MIID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitHumanFormDrawingtestForm',methods=['GET','POST'])   
def submitHumanFormDrawingtestForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    BranchId= request.headers.get('branchId')
                    request_json = request.get_json()
                    hfdtData = request_json.get('htpData')
                    # findings = hfdtData.get('findings')
                    # indicators = hfdtData.get('indicators')
                    comment = request_json.get('comment')
                    # for getjson in ReqData:
                    #     PID =getjson['PID']
                    #     AID =getjson['AID']
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        for x in hfdtData:
                            findings = x['findings']
                            indicators = x['indicators']
                            Insert=Model.models.Application.M_HumanFormDrawingtest()
                            Insert.M_Patient_MPID=PID
                            Insert.MI_AppointmentId=Aid
                            Insert.M_Branch_MBID=BranchId
                            Insert.findings=findings
                            Insert.indicators=indicators
                            Insert.comment=comment
                            

                            Insert.AddUser= data['id']
                            Insert.AddDate = datetime.datetime.now()
                            Insert.AddIP= flask.request.remote_addr
                            session.add(Insert)
                            session.commit()
                            return jsonify({'msg':'Human Form Drawing test Added Successfully'})
                    else:
                        for x in hfdtData:
                            findings = x['findings']
                            indicators = x['indicators']
                            Insert=session.query(Model.models.Application.M_HumanFormDrawingtest).get(Id)
                            Insert.M_Patient_MPID=PID
                            Insert.MI_AppointmentId=Aid
                            Insert.M_Branch_MBID=BranchId
                            Insert.findings=findings
                            Insert.indicators=indicators
                            Insert.comment=comment

                            Insert.AddUser= data['id']
                            Insert.AddDate = datetime.datetime.now()
                            Insert.AddIP= flask.request.remote_addr
                            
                            session.commit()
                            return jsonify({'msg':'Human Form Drawing test Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewHumanFormDrawingtestForm', methods=['GET','POST'])
def viewHumanFormDrawingtestForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewHumanFormDrawingtestForm,
                                session.query(Model.models.Application.M_HumanFormDrawingtest.MIID.label('ID'),
                                            Model.models.Application.M_HumanFormDrawingtest.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_HumanFormDrawingtest.findings.label('findings'),
                                            Model.models.Application.M_HumanFormDrawingtest.indicators.label('indicators'),
                                            Model.models.Application.M_HumanFormDrawingtest.comment.label('comment')
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_HumanFormDrawingtest.MIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/viewHumanFormDrawingtestReport', methods=['GET','POST'])
def viewHumanFormDrawingtestReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewHumanFormDrawingtestReport,
                            session.query(Model.models.Application.M_HumanFormDrawingtest.MIID.label('ID'),
                                        Model.models.Application.M_HumanFormDrawingtest.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_HumanFormDrawingtest.findings.label('findings'),
                                        Model.models.Application.M_HumanFormDrawingtest.indicators.label('indicators'),
                                        Model.models.Application.M_HumanFormDrawingtest.comment.label('comment')
                                        
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_HumanFormDrawingtest.MIID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/submitHumanTreePersonTestForm',methods=['GET','POST'])   
def submitHumanTreePersonTestForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    BranchId= request.headers.get('branchId')
                    request_json = request.get_json()
                    hfdtData = request_json.get('hfdtData')
                    # findings = hfdtData.get('findings')
                    # indicators = hfdtData.get('indicators')
                    comment = request_json.get('comment')
                    # for getjson in ReqData:
                    #     PID =getjson['PID']
                    #     AID =getjson['AID']
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        for x in hfdtData:
                            findings = x['findings']
                            indicators = x['indicators']
                            Insert=Model.models.Application.M_HumanTreePersonTest()
                            Insert.M_Patient_MPID=PID
                            Insert.MI_AppointmentId=Aid
                            Insert.M_Branch_MBID=BranchId

                            Insert.findings=findings
                            Insert.indicators=indicators
                            Insert.comment=comment
                            

                            Insert.AddUser= data['id']
                            Insert.AddDate = datetime.datetime.now()
                            Insert.AddIP= flask.request.remote_addr
                            session.add(Insert)
                            session.commit()
                            return jsonify({'msg':'House Tree Person test Added Successfully'})
                    else:
                        for x in hfdtData:
                            findings = x['findings']
                            indicators = x['indicators']
                            Insert=session.query(Model.models.Application.M_HumanTreePersonTest).get(Id)
                            Insert.M_Patient_MPID=PID
                            Insert.MI_AppointmentId=Aid
                            Insert.M_Branch_MBID=BranchId
                            
                            Insert.findings=findings
                            Insert.indicators=indicators
                            Insert.comment=comment

                            Insert.AddUser= data['id']
                            Insert.AddDate = datetime.datetime.now()
                            Insert.AddIP= flask.request.remote_addr
                            
                            session.commit()
                            return jsonify({'msg':'House Tree Person test Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewHumanTreePersonTestForm', methods=['GET','POST'])
def viewHumanTreePersonTestForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewHumanTreePersonTestForm,
                                session.query(Model.models.Application.M_HumanTreePersonTest.MIID.label('ID'),
                                            Model.models.Application.M_HumanTreePersonTest.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_HumanTreePersonTest.findings.label('findings'),
                                            Model.models.Application.M_HumanTreePersonTest.indicators.label('indicators'),
                                            Model.models.Application.M_HumanTreePersonTest.comment.label('comment')
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_HumanTreePersonTest.MIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/viewHumanTreePersonTestReport', methods=['GET','POST'])
def viewHumanTreePersonTestReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewHumanTreePersonTestReport,
                            session.query(Model.models.Application.M_HumanTreePersonTest.MIID.label('ID'),
                                        Model.models.Application.M_HumanTreePersonTest.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_HumanTreePersonTest.findings.label('findings'),
                                        Model.models.Application.M_HumanTreePersonTest.indicators.label('indicators'),
                                        Model.models.Application.M_HumanTreePersonTest.comment.label('comment')
                                        
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_HumanTreePersonTest.MIID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitDSMVCriteriaForm',methods=['GET','POST'])   
def submitDSMVCriteriaForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    ACriteria = request_json.get('ACriteria')
                    ACriteriaComment = request_json.get('ACriteriaComment')
                    BCriteria = request_json.get('BCriteria')
                    BCriteriaComment = request_json.get('BCriteriaComment')
                    CCriteria = request_json.get('CCriteria')
                    CCriteriaComment = request_json.get('CCriteriaComment')
                    DCriteria = request_json.get('DCriteria')
                    DCriteriaComment = request_json.get('DCriteriaComment')
                    Question5 = request_json.get('question5')
                    Question5Comment = request_json.get('question5Comment')
                    Question6 = request_json.get('question6')
                    Question6Comment = request_json.get('question6Comment')
                    Question7 = request_json.get('question7')
                    Question7Comment = request_json.get('question7Comment')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_DSMVCriteria()
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid

                        Insert.ACriteria=ACriteria
                        Insert.ACriteriaComment=ACriteriaComment
                        Insert.BCriteria=BCriteria
                        Insert.BCriteriaComment=BCriteriaComment
                        Insert.CCriteria=CCriteria
                        Insert.CCriteriaComment=CCriteriaComment
                        Insert.DCriteria=DCriteria
                        Insert.DCriteriaComment=DCriteriaComment
                        Insert.Question5=Question5
                        Insert.Question5Comment=Question5Comment
                        Insert.Question6=Question6
                        Insert.Question6Comment=Question6Comment
                        Insert.Question7=Question7
                        Insert.Question7Comment=Question7Comment

                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'DSM-V Criteria Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_DSMVCriteria).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid
                        Insert.ACriteria=ACriteria
                        Insert.ACriteriaComment=ACriteriaComment
                        Insert.BCriteria=BCriteria
                        Insert.BCriteriaComment=BCriteriaComment
                        Insert.CCriteria=CCriteria
                        Insert.CCriteriaComment=CCriteriaComment
                        Insert.DCriteria=DCriteria
                        Insert.DCriteriaComment=DCriteriaComment
                        Insert.Question5=Question5
                        Insert.Question5Comment=Question5Comment
                        Insert.Question6=Question6
                        Insert.Question6Comment=Question6Comment
                        Insert.Question7=Question7
                        Insert.Question7Comment=Question7Comment

                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        
                        session.commit()
                        return jsonify({'msg':'DSM-V Criteria Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewDSMVCriteriaForm', methods=['GET','POST'])
def viewDSMVCriteriaForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewDSMVCriteriaForm,
                                session.query(Model.models.Application.M_DSMVCriteria.MIID.label('ID'),
                                            Model.models.Application.M_DSMVCriteria.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_DSMVCriteria.ACriteria.label('ACriteria'),
                                            Model.models.Application.M_DSMVCriteria.ACriteriaComment.label('ACriteriaComment'),
                                            Model.models.Application.M_DSMVCriteria.BCriteria.label('BCriteria'),
                                            Model.models.Application.M_DSMVCriteria.BCriteriaComment.label('BCriteriaComment'),
                                            Model.models.Application.M_DSMVCriteria.CCriteria.label('CCriteria'),
                                            Model.models.Application.M_DSMVCriteria.CCriteriaComment.label('CCriteriaComment'),
                                            Model.models.Application.M_DSMVCriteria.DCriteria.label('DCriteria'),
                                            Model.models.Application.M_DSMVCriteria.DCriteriaComment.label('DCriteriaComment'),
                                            Model.models.Application.M_DSMVCriteria.Question5.label('Question5'),
                                            Model.models.Application.M_DSMVCriteria.Question5Comment.label('Question5Comment'),
                                            Model.models.Application.M_DSMVCriteria.Question6.label('Question6'),
                                            Model.models.Application.M_DSMVCriteria.Question6Comment.label('Question6Comment'),
                                            Model.models.Application.M_DSMVCriteria.Question7.label('Question7'),
                                            Model.models.Application.M_DSMVCriteria.Question7Comment.label('Question7Comment'),
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_DSMVCriteria.MIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()
        
@app.route('/viewDSMVCriteriaReport', methods=['GET','POST'])
def viewDSMVCriteriaReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewDSMVCriteriaReport,
                            session.query(Model.models.Application.M_DSMVCriteria.MIID.label('ID'),
                                        Model.models.Application.M_DSMVCriteria.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_DSMVCriteria.ACriteria.label('ACriteria'),
                                        Model.models.Application.M_DSMVCriteria.ACriteriaComment.label('ACriteriaComment'),
                                        Model.models.Application.M_DSMVCriteria.BCriteria.label('BCriteria'),
                                        Model.models.Application.M_DSMVCriteria.BCriteriaComment.label('BCriteriaComment'),
                                        Model.models.Application.M_DSMVCriteria.CCriteria.label('CCriteria'),
                                        Model.models.Application.M_DSMVCriteria.CCriteriaComment.label('CCriteriaComment'),
                                        Model.models.Application.M_DSMVCriteria.DCriteria.label('DCriteria'),
                                        Model.models.Application.M_DSMVCriteria.DCriteriaComment.label('DCriteriaComment'),
                                        Model.models.Application.M_DSMVCriteria.Question5.label('Question5'),
                                        Model.models.Application.M_DSMVCriteria.Question5Comment.label('Question5Comment'),
                                        Model.models.Application.M_DSMVCriteria.Question6.label('Question6'),
                                        Model.models.Application.M_DSMVCriteria.Question6Comment.label('Question6Comment'),
                                        Model.models.Application.M_DSMVCriteria.Question7.label('Question7'),
                                        Model.models.Application.M_DSMVCriteria.Question7Comment.label('Question7Comment'),
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_DSMVCriteria.MIID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()        

@app.route('/submitEpidemiologicalStudiesDepressionScaleForm',methods=['GET','POST'])   
def submitEpidemiologicalStudiesDepressionScaleForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    NotAtAllScore = request_json.get('notAtAllScore')
                    ALittleScore = request_json.get('aLittleScore')
                    SomeScore = request_json.get('someScore')
                    ALotScore = request_json.get('aLotScore')
                    TotalRawScore = request_json.get('totalRawScore')
                    Comment = request_json.get('comment')

                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_EpidemiologicalStudiesDepression()
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid

                        Insert.NotAtAllScore=NotAtAllScore
                        Insert.ALittleScore=ALittleScore
                        Insert.SomeScore=SomeScore
                        Insert.ALotScore=ALotScore
                        Insert.TotalRawScore=TotalRawScore
                        Insert.Comment=Comment

                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Childhood Autism Rating Scale Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_EpidemiologicalStudiesDepression).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid
                        Insert.NotAtAllScore=NotAtAllScore
                        Insert.ALittleScore=ALittleScore
                        Insert.SomeScore=SomeScore
                        Insert.ALotScore=ALotScore
                        Insert.TotalRawScore=TotalRawScore
                        Insert.Comment=Comment
                        
                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        
                        session.commit()
                        return jsonify({'msg':'Childhood Autism Rating Scale Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewEpidemiologicalStudiesDepressionScaleForm', methods=['GET','POST'])
def viewEpidemiologicalStudiesDepressionScaleForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewEpidemiologicalStudiesDepressionScaleForm,
                                session.query(Model.models.Application.M_EpidemiologicalStudiesDepression.MIID.label('ID'),
                                            Model.models.Application.M_EpidemiologicalStudiesDepression.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_EpidemiologicalStudiesDepression.NotAtAllScore.label('NotAtAllScore'),
                                            Model.models.Application.M_EpidemiologicalStudiesDepression.ALittleScore.label('ALittleScore'),
                                            Model.models.Application.M_EpidemiologicalStudiesDepression.SomeScore.label('SomeScore'),
                                            Model.models.Application.M_EpidemiologicalStudiesDepression.ALotScore.label('ALotScore'),
                                            Model.models.Application.M_EpidemiologicalStudiesDepression.TotalRawScore.label('TotalRawScore'),
                                            Model.models.Application.M_EpidemiologicalStudiesDepression.Comment.label('Comment')
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_EpidemiologicalStudiesDepression.MIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/viewEpidemiologicalStudiesDepressionScaleReport', methods=['GET','POST'])
def viewEpidemiologicalStudiesDepressionScaleReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewEpidemiologicalStudiesDepressionScaleReport,
                            session.query(Model.models.Application.M_EpidemiologicalStudiesDepression.MIID.label('ID'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.NotAtAllScore.label('NotAtAllScore'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.ALittleScore.label('ALittleScore'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.SomeScore.label('SomeScore'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.ALotScore.label('ALotScore'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.TotalRawScore.label('TotalRawScore'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.Comment.label('Comment')
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_EpidemiologicalStudiesDepression.MIID.desc()).all())

                session.commit()
                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewVinelandSocialMaturityScaleReport', methods=['GET','POST'])
def viewVinelandSocialMaturityScaleReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewVinelandSocialMaturityScaleReport,
                            session.query(Model.models.Application.M_VinelandSocialMaturityScale.MVAMID.label('ID'),
                                        Model.models.Application.M_VinelandSocialMaturityScale.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_VinelandSocialMaturityScale.MVAM_SocialAge.label('Social Age'),
                                        Model.models.Application.M_VinelandSocialMaturityScale.MVAM_IQ.label('Social Quotient'),
                                        Model.models.Application.M_VinelandSocialMaturityScale.MVAM_Observations.label('Observations'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MVAM_IsActive=1,MVAM_IsDeleted=0
                            ).order_by(Model.models.Application.M_VinelandSocialMaturityScale.MVAMID.desc()).all())

                session.commit()
                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewChildhoodAutismRatingScaleReport', methods=['GET','POST'])
def viewChildhoodAutismRatingScaleReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewChildhoodAutismRatingScaleReport,
                            session.query(Model.models.Application.M_ChildhoodAutismRatingScale.MCARID.label('ID'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_RelatingtoPeople.label('Relating to People'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Imitation.label('Imitation'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_EmotionalResponse.label('Emotional Response'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_BodyUse.label('Body Use'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_ObjectUse.label('Object Use'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_AdaptationChange.label('Daptation Change'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_VisualResponse.label('Visual Response'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_ListeningResponse.label('Listening Response'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_TasteSmellUse.label('Taste Smell Use'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Fearornervousness.label('Fear or Nervousness'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Verbal.label('Verbal'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Nonverbal.label('Non Verbal'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_ActivityLevel.label('Activity Level'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Consistencyresponse.label('Consistency Response'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_GeneralImpression.label('General Impression'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Concludinremark.label('Concluding Remark')
                                        
                                            ).filter_by(M_AppointmentID=AID,MCAR_IsActive=1,MCAR_IsDeleted=0
                            ).order_by(Model.models.Application.M_ChildhoodAutismRatingScale.MCARID.desc()).all())
                session.commit()

                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewIndianScaleAssessmentAutismReport', methods=['GET','POST'])
def viewIndianScaleAssessmentAutismReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewIndianScaleAssessmentAutismReport,
                            session.query(Model.models.Application.M_IndianScaleAssessmentAutism.MIID.label('ID'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.SOCIALRECIPROCITY.label('SOCIAL RECIPROCITY'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.EMOTIONALRESPONSIVENESS.label('EMOTIONAL RESPONSIVENESS'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.SPEECHCOMMUNICATION.label('SPEECH COMMUNICATION'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.BEHAVIOURPATTERNS.label('BEHAVIOUR PATTERNS'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.SENSORYASPECTS.label('SENSORY ASPECTS'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.COGNITIVECOMPONENT.label('COGNITIVE COMPONENT'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.FinalComment.label('Final Comment')
                                        
                                            ).filter_by(M_AppointmentID=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_IndianScaleAssessmentAutism.MIID.desc()).all())
                session.commit()

                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitIndianScaleAssessmentAutismForm',methods=['GET','POST'])
def submitIndianScaleAssessmentAutismForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    SOCIALRECIPROCITY = request_json.get('SOCIALRECIPROCITY')
                    EMOTIONALRESPONSIVENESS = request_json.get('EMOTIONALRESPONSIVENESS')
                    SPEECHCOMMUNICATION = request_json.get('SPEECHCOMMUNICATION')
                    BEHAVIOURPATTERNS = request_json.get('BEHAVIOURPATTERNS')
                    SENSORYASPECTS = request_json.get('SENSORYASPECTS')
                    COGNITIVECOMPONENT = request_json.get('COGNITIVECOMPONENT')
                    FinalComment = request_json.get('FinalComment')
                    
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_IndianScaleAssessmentAutism()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.SOCIALRECIPROCITY=SOCIALRECIPROCITY
                        Insert.EMOTIONALRESPONSIVENESS=EMOTIONALRESPONSIVENESS
                        Insert.SPEECHCOMMUNICATION=SPEECHCOMMUNICATION
                        Insert.SENSORYASPECTS=SENSORYASPECTS
                        Insert.BEHAVIOURPATTERNS=BEHAVIOURPATTERNS
                        Insert.COGNITIVECOMPONENT=COGNITIVECOMPONENT
                        Insert.FinalComment=FinalComment
                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Indian Scale for Assessment of Autism Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_IndianScaleAssessmentAutism).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.SOCIALRECIPROCITY=SOCIALRECIPROCITY
                        Insert.EMOTIONALRESPONSIVENESS=EMOTIONALRESPONSIVENESS
                        Insert.SPEECHCOMMUNICATION=SPEECHCOMMUNICATION
                        Insert.SENSORYASPECTS=SENSORYASPECTS
                        Insert.BEHAVIOURPATTERNS=BEHAVIOURPATTERNS
                        Insert.COGNITIVECOMPONENT=COGNITIVECOMPONENT
                        Insert.FinalComment=FinalComment
                        Insert.ModUser= data['id']
                        Insert.ModDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Indian Scale for Assessment of Autism Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/viewIndianScaleAssessmentAutismForm', methods=['GET','POST'])
def viewIndianScaleAssessmentAutismForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewIndianScaleAssessmentAutismForm,
                                session.query(Model.models.Application.M_IndianScaleAssessmentAutism.MIID.label('ID'),
                                            Model.models.Application.M_IndianScaleAssessmentAutism.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_IndianScaleAssessmentAutism.SOCIALRECIPROCITY.label('SOCIAL RECIPROCITY'),
                                            Model.models.Application.M_IndianScaleAssessmentAutism.EMOTIONALRESPONSIVENESS.label('EMOTIONAL RESPONSIVENESS'),
                                            Model.models.Application.M_IndianScaleAssessmentAutism.SPEECHCOMMUNICATION.label('SPEECH COMMUNICATION'),
                                            Model.models.Application.M_IndianScaleAssessmentAutism.BEHAVIOURPATTERNS.label('BEHAVIOUR PATTERNS'),
                                            Model.models.Application.M_IndianScaleAssessmentAutism.SENSORYASPECTS.label('SENSORY ASPECTS'),
                                            Model.models.Application.M_IndianScaleAssessmentAutism.COGNITIVECOMPONENT.label('COGNITIVE COMPONENT'),
                                            Model.models.Application.M_IndianScaleAssessmentAutism.FinalComment.label('Final Comment')
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_IndianScaleAssessmentAutism.MIID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/viewChildBehaviorChecklistReport', methods=['GET','POST'])
def viewChildBehaviorChecklistReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewChildBehaviorChecklistReport,
                            session.query(Model.models.Application.M_ChildBehaviorChecklist.MCBCID.label('ID'),
                                        Model.models.Application.M_ChildBehaviorChecklist.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AnxiousScores.label('AnxiousScores'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AnxiousTscore.label('AnxiousTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AnxiousRange.label('AnxiousRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.WithdrawnScores.label('WithdrawnScores'),
                                        Model.models.Application.M_ChildBehaviorChecklist.WithdrawnTscore.label('WithdrawnTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.WithdrawnRange.label('WithdrawnRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SomaticComplaintScores.label('SomaticComplaintScores'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SomaticComplaintTscore.label('SomaticComplaintTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SomaticComplaintRange.label('SomaticComplaintRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SocialProblemScores.label('SocialProblemScores'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SocialProblemTscore.label('SocialProblemTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SocialProblemRange.label('SocialProblemRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.ThoughtProblemScore.label('ThoughtProblemScore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.ThoughtProblemTscore.label('ThoughtProblemTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.ThoughtProblemRange.label('ThoughtProblemRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AttentionProblemScore.label('AttentionProblemScore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AttentionProblemTscore.label('AttentionProblemTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AttentionProblemRange.label('AttentionProblemRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.RuleBreakingBehaviorScore.label('RuleBreakingBehaviorScore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.RuleBreakingBehaviorTscore.label('RuleBreakingBehaviorTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.RuleBreakingBehaviorRange.label('RuleBreakingBehaviorRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AggressiveBehaviorScores.label('AggressiveBehaviorScores'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AggressiveBehaviorTscore.label('AggressiveBehaviorTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AggressiveBehaviorRange.label('AggressiveBehaviorRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.Comment.label('Comment')

                                        ).filter_by(M_AppointmentID=AID,MCBC_IsActive=1,MCBC_IsDeleted=0
                            ).order_by(Model.models.Application.M_ChildBehaviorChecklist.MCBCID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewNICHQVanderbiltADHDParentReport', methods=['GET','POST'])
def viewNICHQVanderbiltADHDParentReport():
    session=Session()
    try:
        # if(request.method == "POST"):
        if('Authorization' in request.headers):
            token= request.headers.get('Authorization')

            if not token:
                return jsonify({'MSG':'Token is missing'})
            data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
            if(data):
                request1= request.get_json()
                AID = request1.get('AID')
                
                queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewNICHQVanderbiltADHDParentReport,
                            session.query(Model.models.Application.M_NICHQVanderbiltADHDParent.MVAID.label('ID'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_InattentionScore.label('Inattention Score'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_HyperactivityScore.label('Hyperactivity Score'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_CombinedScore.label('Combined Score'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_OppositionalScore.label('Oppositional Score'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_ConductScore.label('Conduct Score'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_AnxietyScore.label('Anxiety Score'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MVA_IsActive=1,MVA_IsDeleted=0
                            ).order_by(Model.models.Application.M_NICHQVanderbiltADHDParent.MVAID.desc()).all())


                return jsonify(result=queryresult)
            else:
                return jsonify({'err':'Token is expired'})
        else:
            return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitPrescription2',methods=['GET','POST'])
def submitPrescription2():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    hson = request.get_json()
                    ReqData  = hson.get('prescription')
                    AID  = hson.get('AID')
                    PID  = hson.get('PID')
                    showData  = hson.get('showData')
                    
                    Appoint = session.query(Model.models.Application.M_Prescription
                                    ).filter_by(M_AppointmentID=int(AID),MP_IsDeleted=0).all()
                    
                    
                    # if(len(Appoint)==0):
                    Insert=Model.models.Application.M_Prescription()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=AID
                    Insert.MP_Prescription=ReqData
                    if(showData==1):
                        Insert.ShowData=1
                    else:
                        Insert.ShowData=0
            
                    Insert.MP_AddIP= flask.request.remote_addr
                    Insert.MP_AddDate = datetime.datetime.now()
                    session.add(Insert)
                    session.commit()
                        
                    return jsonify({'msg':'Prescription saved Successfully'})
                    
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDoctorMenu', methods=['POST','GET'])
def getDoctorMenu():
    session=Session()
    try:
        if(request.method == "POST"):
            Id=request.get_json()
            
            if(Id != '' and Id != None):

                queryresult= Common_Function.CommonFun.convertToJson(
                Constant.constant.constant.getdoctormenu,
                session.query(Model.models.Application.M_Appointment.MAID.label('ID'),
                            Model.models.Application.M_Branch.MB_Name.label('Branch'),
                            Model.models.Application.M_Patient.MP_Name.label('Patient'),
                            Model.models.Application.M_Patient.MP_DOB.label('Age'),
                            Model.models.Application.M_Patient.MP_Gender.label('Reason'),
                            Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                            Model.models.Application.M_Appointment.MA_Date.label('Date'),
                            Model.models.Application.T_Details.TD_Name.label('Gender'),
                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MAID = Id
                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                ).outerjoin(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_Patient.MP_Gender).all())
                

            return jsonify(result=queryresult)
    finally:
        session.close()
@app.route('/deleteAccount', methods=['POST','GET'])
def deleteAccount():
    session = Session()
    try:
        if(flask.request.method == 'POST'):
            
            request_json = request.get_json() #'Vipul'#
            if(request_json!='' and request_json!=None):
                mobileNo =request_json.get('mobileNo') # 8544388789 #
                
                Insert = Model.models.Application.T_DeleteAccount()
                Insert.TD_Phone = mobileNo
                
                Insert.TAF_AddDate = datetime.datetime.now()
                Insert.TAF_IsActive = 1
                Insert.TAF_IsDeleted = 0
                session.add(Insert)
                session.commit()
                session.close()       
                return jsonify({'success':'Deleted successfully'}),201 
            else:
                return jsonify({'error':'JSON not available'}),400
            
        else:
            return jsonify({'error':'Method is not allowed'}),405
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/patientMedicalHistory', methods=['POST','GET'])
def patientMedicalHistory():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            PID = request_json.get('PID')
            queryResult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.patientMedicalHistory,
                        # session.query(Model.models.Application.M_Appointment.MAID.label('MAID'),
                        #             Model.models.Application.M_Appointment.MP_Procedure.label('AppointmentId'),
                        #             Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('ICDCode'),
                        #             Model.models.Application.M_Branch.MB_Name.label('Branch'),
                        #             Model.models.Application.M_DoctorDetails.MDD_FirstName.label('Doctor'),
                        #             Model.models.Application.M_Appointment.M_Branch_MBID.label('ICDDescription'),
                        #             Model.models.Application.M_Service.MS_CategoryName.label('Service'),
                        #             sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MP_AddDate,'%d-%b-%Y').label('Date'),
                        #             ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0,M_Patient_MPID=PID
                        #             ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID       
                        #             ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID       
                        #             ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure       
                        #             ).all()
                        session.query(Model.models.Application.M_Prescription.MPID.label('MPID'),
                                    Model.models.Application.M_Prescription.M_AppointmentID.label('AppointmentId'),
                                    Model.models.Application.M_Prescription.MP_medication.label('medication'),
                                    Model.models.Application.M_Prescription.MP_type.label('type'),
                                    Model.models.Application.M_Prescription.MP_route.label('route'),
                                    Model.models.Application.M_Prescription.MP_times.label('times'),
                                    Model.models.Application.M_Prescription.MP_duration.label('duration'),
                                    Model.models.Application.M_Prescription.MP_dosage.label('dosage'),
                                    Model.models.Application.M_Prescription.MP_comments.label('comments'),
                                    Model.models.Application.M_Prescription.MP_Prescription.label('Prescription'),
                                    Model.models.Application.M_Appointment,
                                    sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MP_AddDate,'%d-%b-%Y').label('AddDate'),
                                    Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                    Model.models.Application.M_DoctorDetails.MDD_FirstName.label('Doctor'),
                                    Model.models.Application.M_Service.MS_CategoryName.label('Service')
                                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0,M_Patient_MPID=PID
                                    ).join(Model.models.Application.M_Appointment, Model.models.Application.M_Appointment.MAID==Model.models.Application.M_Prescription.M_AppointmentID       
                                    ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID       
                                    ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID       
                                    ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure       
                                    ).group_by(Model.models.Application.M_Prescription.M_AppointmentID
                                    ).all()
                        
                                )
            session.commit()
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close() 

@app.route('/patientExamHistory', methods=['POST','GET'])
def patientExamHistory():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            PID = request_json.get('PID')
            queryResult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.patientExamHistory,
                        session.query(Model.models.Application.M_Appointment.MAID.label('MAID'),
                                    Model.models.Application.M_Appointment.MP_Procedure.label('AppointmentId'),
                                    Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('ICDCode'),
                                    Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                    Model.models.Application.M_DoctorDetails.MDD_FirstName.label('Doctor'),
                                    Model.models.Application.M_Appointment.M_Branch_MBID.label('ICDDescription'),
                                    Model.models.Application.M_Service.MS_CategoryName.label('Service'),
                                    sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MP_AddDate,'%d-%b-%Y').label('Date'),
                                    ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MP_IsCancelled=0,M_Patient_MPID=PID
                                    ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID       
                                    ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID       
                                    ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure       
                                    ).all()
                                )
            session.commit()
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/publishReport',methods=['POST'])
def publishReport():
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    session=Session()
                    request_json = request.get_json()
                    Id = request_json.get('Aid')
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.M_Appointment
                                    ).filter(Model.models.Application.M_Appointment.MAID==Id
                                             ).update({Model.models.Application.M_Appointment.MA_ShowReport:1,
                                                       Model.models.Application.M_Appointment.MP_ModUser:data['id'],
                                                       Model.models.Application.M_Appointment.MP_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Report Published Successfully'})
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

# @app.route('/submitArticles', methods=['POST','GET'])
# def submitArticles():
#     session = Session()
#     try:
#         if(request.method == 'POST'):
#             if('Authorization' in request.headers):
#                 token= request.headers.get('Authorization')

#                 if not token:
#                     return jsonify({'MSG':'Token is missing'})
#                 data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
#                 if(data):
                    
#                     request_json = request.form.get('data') #'Vipul'
#                     if(request_json!='' and request_json!=None):
#                         getjson= json.loads(request_json)
#                         Title =getjson['title']
#                         Description =getjson['description']
                        
#                         files= request.files.getlist(str('files[]'))
#                         FilePath = 'static/ActivityCategory/'
#                         for file in files:
#                             if(file.filename!='' and file.filename!= None):
#                                 date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
#                                 name, ext = os.path.splitext(file.filename)
#                                 files = 'AC'+ '_'+ name +'_' + date  + ext
#                                 fileName=files
#                                 if(os.path.exists(FilePath)):
#                                     file.save(os.path.join(FilePath, fileName))
#                                     print(file.filename)
#                                 else:
#                                     os.makedirs(FilePath)
#                                     file.save(os.path.join(FilePath, fileName))

                        
#                             Insert=Model.models.Application.T_Articles()
#                             Insert.TA_Thumbnail=FilePath + fileName
#                             Insert.TA_Title=Title
#                             Insert.TA_Description=Description
#                             # Insert.TA_FilePath=1
#                             # Insert.TA_FileType=emojiId
#                             Insert.TA_AddDate=datetime.datetime.now()
#                             Insert.TA_AddIP=request.remote_addr
#                             session.add(Insert)
#                             session.commit()
#                             return jsonify({'msg':'Activity Added successfully'})
                        
#                 else:
#                     #return jsonify({'error':'Token is expired'})
#                     return redirect('/')
#             else:
#                 return redirect('/')
#         else:
#             return jsonify({'error':'Method is not allowed'})
#     except Exception as identifier:
#         return jsonify({'error':identifier})
#     finally:
#         session.close() 

@app.route('/submitArticles', methods=['POST','GET'])
def submitArticles():
    session = Session()
    try:
        if(request.method == 'POST'):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    
                    request_json = request.form.get('data') #'Vipul'
                    if(request_json!='' and request_json!=None):
                        getjson= json.loads(request_json)
                        Title =getjson['title']
                        Description =getjson['description']
                        
                        files= request.files.getlist(str('files[]'))
                        FilePath2 = 'static/ActivityCategory/'
                        FilePath = 'C:/inetpub/wwwroot/Continua_Patient/ContinuaPatientAPIs/static/ActivityCategory/'
                        for file in files:
                            if(file.filename!='' and file.filename!= None):
                                date = str(datetime.datetime.now().strftime('%d%m%Y%H%M%S'))
                                name, ext = os.path.splitext(file.filename)
                                files = 'AC'+ '_'+ (name.replace(" ", "")) +'_' + date  + ext
                                fileName=files
                                if(os.path.exists(FilePath)):
                                    file.save(os.path.join(FilePath, fileName))
                                    print(file.filename)
                                else:
                                    os.makedirs(FilePath)
                                    file.save(os.path.join(FilePath, fileName))

                                if(os.path.exists(FilePath2)):
                                    file.save(os.path.join(FilePath2, fileName))
                                    print(file.filename)
                                else:
                                    os.makedirs(FilePath2)
                                    file.save(os.path.join(FilePath2, fileName))

                        
                            Insert=Model.models.Application.T_Articles()
                            Insert.TA_Thumbnail=FilePath2 + fileName
                            Insert.TA_Title=Title
                            Insert.TA_ArticleHtml=Description
                            # Insert.TA_FilePath=1
                            # Insert.TA_FileType=emojiId
                            Insert.TA_AddDate=datetime.datetime.now()
                            Insert.TA_AddIP=request.remote_addr
                            session.add(Insert)
                            session.commit()
                            return jsonify({'msg':'Activity Added successfully'})
                        
                else:
                    #return jsonify({'error':'Token is expired'})
                    return redirect('/')
            else:
                return redirect('/')
        else:
            return jsonify({'error':'Method is not allowed'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()




@app.route('/SubmitTherapistsBranch', methods=['GET','POST'])
def SubmitTherapistsBranch():
    session=Session()
    try:
        if(request.method == "POST"):
            request1= request.get_json()
            Branch = request1.get('branch')
            Therapist = request1.get('Tid')
            
            session.query(Model.models.Application.M_Therapist
                              ).filter(Model.models.Application.M_Therapist.MTID==Therapist
                              ).update({Model.models.Application.M_Therapist.Clinic:Branch})
            session.commit()
            session.query(Model.models.Application.M_DoctorDetails
                            ).filter(Model.models.Application.M_DoctorDetails.DoctorId==Therapist
                            ).update({Model.models.Application.M_DoctorDetails.MDD_Clinic:Branch})
            session.commit()
            
            return jsonify({'msg':'Therapist Branch added Successfully'})  
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/PatientsReport', methods=['GET','POST'])
def PatientsReport():
    session=Session()
    try:
        if flask.request.method=='POST':
            request_json = request.get_json()
            ReportType = request_json.get('analytics')
            From = request_json.get('From')
            To = request_json.get('To')

            apply = []

            if(ReportType == str(700)):
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate <=To)

                queryresult = session.query(
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%b-%Y').label('Date'),
                                            func.coalesce(sqlalchemy.func.count(),0).label('TotalCount'),
                                            ).filter_by(MP_IsActive=1, MP_IsDeleted=0
                                            ).order_by(Model.models.Application.M_Patient.MP_AddDate
                                            ).group_by(func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%Y-%b')
                                            ).filter(*apply
                                            ).all()
                data_count = {}
                for row in queryresult:
                    date = row[0]
                    count = row[1]
                    data_count[date] = count

                datelist = pd.date_range(From,To, freq='MS').strftime("%b-%Y").tolist()
                data = []
                for x in datelist:
                    value = data_count.get(x)

                    if value is not None:
                        data.append({'Date':x, 'count':value})
                    else:
                        data.append({'Date':x, 'count':0})
                
                return jsonify(data = data)
                
                              
            elif ReportType == str(701):
                if From != '' and From is not None:
                    apply.append(Model.models.Application.M_Patient.MP_AddDate >= From)
                if To != '' and To is not None:
                    apply.append(Model.models.Application.M_Patient.MP_AddDate <= To)

                queryresult = session.query(
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%b-%Y').label('Date'),
                                            sqlalchemy.func.count().label('TotalCount'),
                                            Model.models.Application.T_Details.TD_Name
                                            ).join(
                                                Model.models.Application.T_Details,
                                                Model.models.Application.T_Details.TDID == Model.models.Application.M_Patient.MP_Gender
                                                # isouter=True
                                            ).order_by(Model.models.Application.M_Patient.MP_AddDate
                                            ).filter(Model.models.Application.M_Patient.MP_IsActive==1,
                                                    Model.models.Application.M_Patient.MP_IsDeleted==0,
                                                    *apply
                                            ).group_by(
                                                sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%Y-%b'),
                                                sqlalchemy.func.coalesce(Model.models.Application.M_Patient.MP_Gender, '')
                                            ).all()

                
                datelist = pd.date_range(From,To, freq='MS').strftime("%b-%Y").tolist()
                null_data = {}
                male_data = {}
                female_data = {}
                others_data = {}

                for row in queryresult:
                    date = row[0]
                    count = row[1]
                    gender = row[2]

                    if gender == 'Male':
                        male_data[date] = count
                    elif gender == 'Female':
                        female_data[date] = count
                    elif gender is None:
                        null_data[date] = count
                    else:
                        others_data[date] = count
                
                null_data2 = []
                male_data2 = []
                female_data2 = []
                others_data2 = []
                for x in datelist:
                    value = male_data.get(x)

                    if value is not None:
                        male_data2.append({'Date':x, 'count':value})
                    else:
                        male_data2.append({'Date':x, 'count':0})
                    
                    value2 = female_data.get(x)
                    if value2 is not None:
                        female_data2.append({'Date':x, 'count':value2})
                    else:
                        female_data2.append({'Date':x, 'count':0})
                    
                    value3 = null_data.get(x)
                    if value3 is not None:
                        null_data2.append({'Date':x, 'count':value3})
                    else:
                        null_data2.append({'Date':x, 'count':0})
                    
                    value4 = others_data.get(x)
                    if value4 is not None:
                        others_data2.append({'Date':x, 'count':value4})
                    else:
                        others_data2.append({'Date':x, 'count':0})    
                    
                data = {
                    'Null_data': null_data2,
                    'Male': male_data2,
                    'Female': female_data2,
                    'Others': others_data2
                    }

                return jsonify(data=data)


            elif(ReportType == str(702)):
                if(From !='' and From !=None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate >= From)
                if(To !='' and To !=None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate <=To)

                queryresult = session.query(
                                        sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%b-%Y').label('Date'),                                       
                                        Model.models.Application.M_Branch.MB_Name,
                                        sqlalchemy.func.count(Model.models.Application.M_Patient.M_Branch_MBID).label('NewResistrationByCenter')
                                        ).filter(Model.models.Application.M_Patient.MP_IsActive==1,
                                                 Model.models.Application.M_Patient.MP_IsDeleted==0,
                                                 *apply
                                        ).group_by(sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%Y-%b'),Model.models.Application.M_Patient.M_Branch_MBID
                                        ).join(Model.models.Application.M_Patient,Model.models.Application.M_Patient.M_Branch_MBID==
                                               Model.models.Application.M_Branch.MBID
                                        ).order_by(sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%b-%Y').desc()
                                        ).all()   

                Noida = {}
                Gurugram28 = {}
                Gurugram5 = {}
                Qutab = {}
                Rainbow = {}
                Ghaziabad = {}
                Indirapuram = {}
                Faridabad = {}
                Lajpat = {}
                Bhiwadi = {}
                Pitampura = {}
                Noida19 = {}
                Dwarka = {}
                Amritsar = {}
                Patna = {}
                Vatika = {}
                Rohtak = {}
                Rajouri = {}
                Kanpur = {}
                SLok1 = {}
                Noida122 = {}
                Gurugram82 = {}
                Gurugram27 = {}

                for row in queryresult:
                    date = row[0]
                    branch = row[1]
                    count = row[2]

                    if branch == 'Continua Kids, Noida':
                        Noida[date] = count
                    elif branch == 'Continua Kids, Sector 28, Gurugram':
                        Gurugram28[date] = count
                    elif branch == 'Continua Kids, Sector 5, Gurugram':
                        Gurugram5[date] = count
                    elif branch == 'Continua Kids, Qutab':
                        Qutab[date] = count
                    elif branch == 'Continua Kids, Rainbow':
                        Rainbow[date] = count
                    elif branch == 'Continua Kids, Ghaziabad':
                        Ghaziabad[date] = count
                    elif branch == 'Continua Kids, Indirapuram':
                        Indirapuram[date] = count
                    elif branch == 'Continua Kids, Faridabad':
                        Faridabad[date] = count
                    elif branch == 'Continua Kids, Lajpat Nagar':
                        Lajpat[date] = count
                    elif branch == 'Continua Kids, Bhiwadi':
                        Bhiwadi[date] = count
                    elif branch == 'Continua Kids, Pitampura':
                        Pitampura[date] = count
                    elif branch == 'Continua Kids, Sector 19, Noida':
                        Noida19[date] = count
                    elif branch == 'Continua Kids, Dwarka':
                        Dwarka[date] = count
                    elif branch == 'Continua Kids, Amritsar':
                        Amritsar[date] = count
                    elif branch == 'Continua Kids, Patna':
                        Patna[date] = count
                    elif branch == 'Continua Kids, Vatika':
                        Vatika[date] = count
                    elif branch == 'Continua Kids, Rohtak':
                        Rohtak[date] = count
                    elif branch == 'Continua Kids, Rajouri':
                        Rajouri[date] = count
                    elif branch == 'Continua Kids, Kanpur':
                        Kanpur[date] = count
                    elif branch == 'Continua Kids, SLok1':
                        Rajouri[date] = count
                    elif branch == 'Continua Kids, Sector 122, Noida':
                        Noida122[date] = count
                    elif branch == 'Continua Kids, Sector 82, Gurugram':
                        Gurugram82[date] = count
                    elif branch == 'Continua Kids, Sector 27, Gurugram':
                        Gurugram27[date] = count
                datelist = pd.date_range(From,To, freq='MS').strftime("%b-%Y").tolist()    
                NoidaV2 = []
                Gurugram28V2 = []
                Gurugram5V2 = []
                QutabV2 = []
                RainbowV2 = []
                GhaziabadV2 = []
                IndirapuramV2 = []
                FaridabadV2 = []
                LajpatV2 = []
                BhiwadiV2 = []
                PitampuraV2 = []
                Noida19V2 = []
                DwarkaV2 = []
                AmritsarV2 = []
                PatnaV2 = []
                VatikaV2 = []
                RohtakV2 = []
                RajouriV2 = []
                KanpurV2 = []
                SLok1V2 = []
                Noida122V2 = []
                Gurugram82V2 = []
                Gurugram27V2 = []
                for x in datelist:
                    value = Noida.get(x)
                    if value is not None:
                        NoidaV2.append({'Date':x, 'count':value})
                    else:
                        NoidaV2.append({'Date':x, 'count':0})
                    
                    value2 = Gurugram28.get(x)
                    if value2 is not None:
                        Gurugram28V2.append({'Date':x, 'count':value2})
                    else:
                        Gurugram28V2.append({'Date':x, 'count':0})
                    
                    value3 = Gurugram5.get(x)
                    if value3 is not None:
                        Gurugram5V2.append({'Date':x, 'count':value3})
                    else:
                        Gurugram5V2.append({'Date':x, 'count':0})
                    
                    value4 = Qutab.get(x)
                    if value4 is not None:
                        QutabV2.append({'Date':x, 'count':value4})
                    else:
                        QutabV2.append({'Date':x, 'count':0})
                    
                    value5 = Rainbow.get(x)
                    if value5 is not None:
                        RainbowV2.append({'Date':x, 'count':value5})
                    else:
                        RainbowV2.append({'Date':x, 'count':0})
                    
                    value6 = Ghaziabad.get(x)
                    if value6 is not None:
                        GhaziabadV2.append({'Date':x, 'count':value6})
                    else:
                        GhaziabadV2.append({'Date':x, 'count':0})
                    
                    value7 = Indirapuram.get(x)
                    if value7 is not None:
                        IndirapuramV2.append({'Date':x, 'count':value7})
                    else:
                        IndirapuramV2.append({'Date':x, 'count':0})
                    
                    value8 = Faridabad.get(x)
                    if value8 is not None:
                        FaridabadV2.append({'Date':x, 'count':value8})
                    else:
                        FaridabadV2.append({'Date':x, 'count':0})
                    
                    value9 = Lajpat.get(x)
                    if value9 is not None:
                        LajpatV2.append({'Date':x, 'count':value9})
                    else:
                        LajpatV2.append({'Date':x, 'count':0})
                    
                    value10 = Bhiwadi.get(x)
                    if value10 is not None:
                        BhiwadiV2.append({'Date':x, 'count':value10})
                    else:
                        BhiwadiV2.append({'Date':x, 'count':0})
                    
                    value11 = Pitampura.get(x)
                    if value11 is not None:
                        PitampuraV2.append({'Date':x, 'count':value11})
                    else:
                        PitampuraV2.append({'Date':x, 'count':0})
                    
                    value12 = Noida19.get(x)
                    if value12 is not None:
                        Noida19V2.append({'Date':x, 'count':value12})
                    else:
                        Noida19V2.append({'Date':x, 'count':0})
                    
                    value13 = Dwarka.get(x)
                    if value13 is not None:
                        DwarkaV2.append({'Date':x, 'count':value13})
                    else:
                        DwarkaV2.append({'Date':x, 'count':0})
                    
                    value14 = Amritsar.get(x)
                    if value14 is not None:
                        AmritsarV2.append({'Date':x, 'count':value14})
                    else:
                        AmritsarV2.append({'Date':x, 'count':0})
                    
                    value15 = Patna.get(x)
                    if value15 is not None:
                        PatnaV2.append({'Date':x, 'count':value15})
                    else:
                        PatnaV2.append({'Date':x, 'count':0})
                    
                    value16 = Vatika.get(x)
                    if value16 is not None:
                        VatikaV2.append({'Date':x, 'count':value16})
                    else:
                        VatikaV2.append({'Date':x, 'count':0})
                    
                    value17 = Rohtak.get(x)
                    if value17 is not None:
                        RohtakV2.append({'Date':x, 'count':value17})
                    else:
                        RohtakV2.append({'Date':x, 'count':0})
                    
                    value18 = Rajouri.get(x)
                    if value18 is not None:
                        RajouriV2.append({'Date':x, 'count':value18})
                    else:
                        RajouriV2.append({'Date':x, 'count':0})
                    
                    value19 = Kanpur.get(x)
                    if value19 is not None:
                        KanpurV2.append({'Date':x, 'count':value19})
                    else:
                        KanpurV2.append({'Date':x, 'count':0})
                    
                    value20 = SLok1.get(x)
                    if value20 is not None:
                        SLok1V2.append({'Date':x, 'count':value20})
                    else:
                        SLok1V2.append({'Date':x, 'count':0})
                    
                    value21 = Noida122.get(x)
                    if value21 is not None:
                        Noida122V2.append({'Date':x, 'count':value21})
                    else:
                        Noida122V2.append({'Date':x, 'count':0})
                    
                    value22 = Gurugram82.get(x)
                    if value22 is not None:
                        Gurugram82V2.append({'Date':x, 'count':value22})
                    else:
                        Gurugram82V2.append({'Date':x, 'count':0})
                    
                    value23 = Gurugram27.get(x)
                    if value23 is not None:
                        Gurugram27V2.append({'Date':x, 'count':value23})
                    else:
                        Gurugram27V2.append({'Date':x, 'count':0})
                data = {
                    'New Enrollments center wise':{
                    'Continua Kids, Noida':NoidaV2,   
                    'Continua Kids, Sector 28, Gurugram': Gurugram28V2,
                    'Continua Kids, Sector 5, Gurugram': Gurugram5V2,
                    'Continua Kids, Qutab': QutabV2,
                    'Continua Kids, Rainbow': RainbowV2,
                    'Continua Kids, Continua Kids, Ghaziabad': GhaziabadV2,
                    'Continua Kids, Indirapuram': IndirapuramV2,
                    'Continua Kids, Faridabad': FaridabadV2,
                    'Continua Kids, Lajpat Nagar': LajpatV2,
                    'Continua Kids, Bhiwadi': BhiwadiV2,
                    'Continua Kids, Pitampura': PitampuraV2,
                    'Continua Kids, Sector 19, Noida': Noida19V2,
                    'Continua Kids, Dwarka': DwarkaV2,
                    'Continua Kids, Amritsar': AmritsarV2,
                    'Continua Kids, Patna': PatnaV2,
                    'Continua Kids, Vatika': VatikaV2,
                    'Continua Kids, Rohtak': RohtakV2,
                    'Continua Kids, Rajouri': RajouriV2,
                    'Continua Kids, Kanpur': KanpurV2,
                    'Continua Kids, S Lok 1': SLok1V2,
                    'Continua Kids, Sector 122, Noida': Noida122V2,
                    'Continua Kids, Sector 82, Gurugram': Gurugram82V2,
                    'Continua Kids, Sector 27, Gurugram': Gurugram27V2,
                    }
                }
                print(data)
                return jsonify(data=data)
 

            elif(ReportType == str(703)):
                if(From != '' and From != None):
                    apply.append(Model.models.Application.M_Appointment.MP_AddDate >= From)
                if(To != '' and To != None):
                    apply.append(Model.models.Application.M_Appointment.MP_AddDate <= To)

                queryresult = session.query(
                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MP_AddDate, '%b-%Y').label('Date'),
                                            sqlalchemy.func.count().label('Count'),
                                            ).filter(Model.models.Application.M_Appointment.MP_IsActive==1,
                                                      Model.models.Application.M_Appointment.MP_IsDeleted==0,
                                                      Model.models.Application.M_Appointment.MP_AppointmentType==32,
                                                      *apply
                                            ).group_by(sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MP_AddDate, '%Y-%b')
                                            
                                            ).all()
                data_count = {}
                for row in queryresult:
                    date = row[0]
                    count = row[1]
                    data_count[date] = count

                datelist = pd.date_range(From,To, freq='MS').strftime("%b-%Y").tolist()
                data = []
                for x in datelist:
                    value = data_count.get(x)

                    if value is not None:
                        data.append({'Date':x, 'count':value})
                    else:
                        data.append({'Date':x, 'count':0})
                
                return jsonify(data = data)

        
            elif ReportType == str(704):
                if From != '' and From is not None:
                    apply.append(Model.models.Application.M_Patient.MP_AddDate >= From)
                if To != '' and To is not None:
                    apply.append(Model.models.Application.M_Patient.MP_AddDate <= To)

                queryresult = session.query(
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%b-%Y').label('Date'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB, '%Y-%m-%d').label('DOB'),
                                            sqlalchemy.func.count(Model.models.Application.M_Patient.MP_DOB).label('count')
                                        ).filter(
                                            Model.models.Application.M_Patient.MP_IsActive == 1,
                                            Model.models.Application.M_Patient.MP_IsDeleted == 0,
                                            Model.models.Application.M_Patient.MP_DOB.isnot(None),
                                            *apply
                                        ).order_by(
                                            Model.models.Application.M_Patient.MP_AddDate
                                        ).group_by(
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%Y-%b')
                                        ).all()

                data_count = defaultdict(int)

                six = []
                sixToone = []
                oneToTwo = []
                twoTofive = []
                fiveToten = []
                aboveTen = []

                for row in queryresult:
                    date = row[0]
                    dob = row[1]
                    count = row[2]

                    if dob is not None:
                        dob_date = datetime.datetime.strptime(dob, '%Y-%m-%d').date()
                        today = datetime.date.today()
                        age_in_months = (today - dob_date) // datetime.timedelta(days=30)

                        if age_in_months <= 6:
                            six.append({'Date': date, 'DOB': dob, 'count': count})
                        elif 6 < age_in_months <= 12:
                            sixToone.append({'Date': date, 'DOB': dob, 'count': count})
                        elif 12 < age_in_months <= 24:
                            oneToTwo.append({'Date': date, 'DOB': dob, 'count': count})
                        elif age_in_months <= 60:
                            twoTofive.append({'Date': date, 'DOB': dob, 'count': count})
                        elif age_in_months <= 120:
                            fiveToten.append({'Date': date, 'DOB': dob, 'count': count})
                        else:
                            aboveTen.append({'Date': date, 'DOB': dob, 'count': count})

                    data_count[date] += count

                result = {
                    'Six Months': six,
                    'Six Months to One Year': sixToone,
                    'One Year to Two Years': oneToTwo,
                    'Two Years to Five Years': twoTofive,
                    'Five Years to Ten Years': fiveToten,
                    'Above Ten Years': aboveTen
                }

                print(result)
                return jsonify(data=result)

            
            
            elif(ReportType == str(705)):
                if(From != '' and From != None):
                    apply.append(Model.models.Application.M_InvoiceMaster.MI_AddDate >= From)
                if(To != '' and To != None):
                    apply.append(Model.models.Application.M_InvoiceMaster.MI_AddDate <= To)

                queryresult = session.query(sqlalchemy.func.date_format(Model.models.Application.M_InvoiceMaster.MI_AddDate, '%b-%Y').label('Date'),
                                            sqlalchemy.func.avg(Model.models.Application.M_InvoiceMaster.MI_InvoiceTotal).label("Total invoice")
                                            ).join(Model.models.Application.M_Patient,Model.models.Application.M_Patient.MPID ==
                                                   Model.models.Application.M_InvoiceMaster.M_Patient_MPID
                                            ).filter(Model.models.Application.M_InvoiceMaster.MI_IsActive==1,
                                                    Model.models.Application.M_InvoiceMaster.MI_IsDeleted==0,
                                                    *apply
                                            ).group_by(Model.models.Application.M_InvoiceMaster.MI_AddDate
                                            ).order_by(Model.models.Application.M_InvoiceMaster.MI_AddDate
                                            ).all()
                data_count = {}
                for row in queryresult:
                    date = row[0]
                    total = row[1]
                    data_count[date] = total

                datelist = pd.date_range(From,To, freq='MS').strftime("%b-%Y").tolist()
                data = []
                for x in datelist:
                    value = data_count.get(x)

                    if value is not None:
                        data.append({'Date':x, 'count':round(value,2)})
                        # data.append({'Date':x, 'count':'{:20,.2f}'.format(float(value))})
                    else:
                        data.append({'Date':x, 'count':0})
                
                
                return jsonify (data = {'price':data})


            elif (ReportType == str(706)):
                if (From != '' and From != None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate >= From)

                if(To != '' and To != None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate <= To)

                    queryresult = session.query(sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%b-%Y').label("date"),
                                                sqlalchemy.func.count().label('Count'),
                                                Model.models.Application.M_Patient.MP_Country
                                                ).filter(Model.models.Application.M_Patient.MP_IsDeleted==0,
                                                        Model.models.Application.M_Patient.MP_IsActive==1,
                                                        Model.models.Application.M_Patient.MP_Country!='India',
                                                        Model.models.Application.M_Patient.MP_Country!=1,
                                                        Model.models.Application.M_Patient.MP_Country != None,
                                                        *apply
                                                ).group_by(
                                                        sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_AddDate, '%Y-%b')
                                                ).order_by(Model.models.Application.M_Patient.MP_AddDate
                                                ).all()

                    data_count = {}
                for row in queryresult:
                    date = row[0]
                    count = row[1]
                    data_count[date] = count

                datelist = pd.date_range(From,To, freq='MS').strftime("%b-%Y").tolist()
                data = []
                for x in datelist:
                    value = data_count.get(x)

                    if value is not None:
                        data.append({'Date':x, 'count':value})
                    else:
                        data.append({'Date':x, 'count':0})
                
                return jsonify(data = data)

            elif ReportType == str(707):
                if From != '' and From is not None:
                    apply.append(Model.models.Application.M_Patient.MP_AddDate >= From)
                if To != '' and To is not None:
                    apply.append(Model.models.Application.M_Patient.MP_AddDate <= To)

                
                Total_report_dob  = {}
                xAxis = []
                yAxis = []
                Total_report_dob = {
                        "xAxis": xAxis,
                        "yAxis": yAxis,
                        }
                ################
                from datetime import date
                from dateutil.relativedelta import relativedelta

                six_months_ago = date.today() - relativedelta(months=6)
                six_to_year_one = six_months_ago - relativedelta(months=6)
                one_to_year_two = six_to_year_one - relativedelta(years=1)
                two_to_five_years = one_to_year_two - relativedelta(years=3)
                five_to_ten_years = two_to_five_years - relativedelta(years=5)
                more_than_ten_years = five_to_ten_years - relativedelta(years=5)

                queryresultM_Patient1 = session.query(
                    sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB, '%b-%Y').label('Date'),
                    sqlalchemy.func.count().label('Count')
                    ).filter(
                        Model.models.Application.M_Patient.MP_IsActive == 1,
                        Model.models.Application.M_Patient.MP_IsDeleted == 0,
                        Model.models.Application.M_Patient.MP_DOB >= six_months_ago  # Add the filter for age less than 6 months
                    ).order_by(
                        Model.models.Application.M_Patient.MP_DOB.desc()
                    ).group_by(
                        func.date_format(Model.models.Application.M_Patient.MP_DOB, '%Y-%b')
                    ).filter(*apply).all()
                session.close()
                xAxis.append('Six Months')
                yAxis.append(sum(Count for Date, Count in queryresultM_Patient1))
                
                queryresultM_Patient2 = session.query(
                    sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB, '%b-%Y').label('Date'),
                    sqlalchemy.func.count().label('Count')
                    ).filter(
                        Model.models.Application.M_Patient.MP_IsActive == 1,
                        Model.models.Application.M_Patient.MP_IsDeleted == 0,
                        Model.models.Application.M_Patient.MP_DOB.between(six_to_year_one,six_months_ago)  
                    ).order_by(
                        Model.models.Application.M_Patient.MP_DOB.desc()
                    ).group_by(
                        func.date_format(Model.models.Application.M_Patient.MP_DOB, '%Y-%b')
                    ).filter(*apply).all() 
                session.close() 
                xAxis.append('Six Months to One Year')
                yAxis.append(sum(Count for Date, Count in queryresultM_Patient2))

                queryresultM_Patient3 = session.query(
                    sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB, '%b-%Y').label('Date'),
                    sqlalchemy.func.count().label('Count')
                    ).filter(
                        Model.models.Application.M_Patient.MP_IsActive == 1,
                        Model.models.Application.M_Patient.MP_IsDeleted == 0,
                        Model.models.Application.M_Patient.MP_DOB.between(one_to_year_two,six_to_year_one) #<= one_to_year_two   
                    ).order_by(
                        Model.models.Application.M_Patient.MP_DOB.desc()
                    ).group_by(
                        func.date_format(Model.models.Application.M_Patient.MP_DOB, '%Y-%b')
                    ).filter(*apply).all() 
                session.close()
                xAxis.append('One Year to Two Years')
                yAxis.append(sum(Count for Date, Count in queryresultM_Patient3))

                queryresultM_Patient4 = session.query(
                    sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB, '%b-%Y').label('Date'),
                    sqlalchemy.func.count().label('Count')
                    ).filter(
                        Model.models.Application.M_Patient.MP_IsActive == 1,
                        Model.models.Application.M_Patient.MP_IsDeleted == 0,
                        Model.models.Application.M_Patient.MP_DOB.between(two_to_five_years,one_to_year_two) #<= two_to_five_years   
                    ).order_by(
                        Model.models.Application.M_Patient.MP_DOB.desc()
                    ).group_by(
                        func.date_format(Model.models.Application.M_Patient.MP_DOB, '%Y-%b')
                    ).filter(*apply).all() 
                session.close()
                xAxis.append('Two Years to Five Years')
                yAxis.append(sum(Count for Date, Count in queryresultM_Patient4))

                queryresultM_Patient5 = session.query(
                    sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB, '%b-%Y').label('Date'),
                    sqlalchemy.func.count().label('Count')
                    ).filter(
                        Model.models.Application.M_Patient.MP_IsActive == 1,
                        Model.models.Application.M_Patient.MP_IsDeleted == 0,
                        Model.models.Application.M_Patient.MP_DOB.between(five_to_ten_years,two_to_five_years) #<= five_to_ten_years   
                    ).order_by(
                        Model.models.Application.M_Patient.MP_DOB.desc()
                    ).group_by(
                        func.date_format(Model.models.Application.M_Patient.MP_DOB, '%Y-%b')
                    ).filter(*apply).all() 
                session.close()
                xAxis.append('Five Years to Ten Years')
                yAxis.append(sum(Count for Date, Count in queryresultM_Patient5))

                queryresultM_Patient6 = session.query(
                    sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB, '%b-%Y').label('Date'),
                    sqlalchemy.func.count().label('Count')
                    ).filter(
                        Model.models.Application.M_Patient.MP_IsActive == 1,
                        Model.models.Application.M_Patient.MP_IsDeleted == 0,
                        Model.models.Application.M_Patient.MP_DOB < five_to_ten_years   
                    ).order_by(
                        Model.models.Application.M_Patient.MP_DOB.desc()
                    ).group_by(
                        func.date_format(Model.models.Application.M_Patient.MP_DOB, '%Y-%b')
                    ).filter(*apply).all() 
                session.close()
                xAxis.append('Above Ten Years')
                yAxis.append(sum(Count for Date, Count in queryresultM_Patient6))

                # print(Total_report_dob)
                return jsonify(result=Total_report_dob)

            elif (ReportType == str(708)):
                if (From != '' and From != None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate >= From)

                if(To != '' and To != None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate <= To)

                queryresult_MPIA = session.query(Model.models.Application.M_PackageInvoiceForAppointment.MPIA_PatientId,
                                    func.MIN(Model.models.Application.M_PackageInvoiceForAppointment.MPIA_AddDate).label('first_date'),
                                    func.MAX(Model.models.Application.M_PackageInvoiceForAppointment.MPIA_AddDate).label('last_date'),
                                    ).filter(Model.models.Application.M_PackageInvoiceForAppointment.MPIA_IsActive==1,
                                                Model.models.Application.M_PackageInvoiceForAppointment.MPIA__IsDeleted==0
                                    ).group_by(Model.models.Application.M_PackageInvoiceForAppointment.MPIA_PatientId
                                    ).order_by(Model.models.Application.M_PackageInvoiceForAppointment.MPIA_PatientId.asc()
                                    ).all()
                session.close()
                M_package_data = {
                    'Less than 30 days': 0,
                    '30-60 days': 0,
                    '60-90 days': 0,
                    '90-120 days': 0,
                    '120-180 days': 0,
                    'More than 180 days': 0
                }
                my_package_data = {}
                xAxis =[]
                yAxis= []
                my_package_data = {
                    'xAxis':xAxis,
                    'yAxis':yAxis
                }

                for data_MPID in queryresult_MPIA:
                    total_days_of = 1
                    days_diff = (data_MPID.last_date - data_MPID.first_date).days
                    total_days_of += days_diff

                    if 1 <= total_days_of < 30:
                        M_package_data['Less than 30 days'] += 1
                    elif 30 <= total_days_of < 60:
                        M_package_data['30-60 days'] += 1
                    elif 60 <= total_days_of < 90:
                        M_package_data['60-90 days'] += 1
                    elif 90 <= total_days_of < 120:
                        M_package_data['90-120 days'] += 1
                    elif 120 <= total_days_of < 180:
                        M_package_data['120-180 days'] += 1
                    else:
                        M_package_data['More than 180 days'] += 1

                for range_name, count in M_package_data.items():
                    xAxis.append(range_name)
                    yAxis.append(count)
                    # print(f"{range_name}: {count}")
                return jsonify(result=my_package_data)

            elif (ReportType == str(709)):
                if (From != '' and From != None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate >= From)

                if(To != '' and To != None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate <= To)

                    queryresult_branch_MPID = session.query(Model.models.Application.M_Appointment.M_Patient_MPID,
                                        #  Model.models.Application.M_Appointment.M_Branch_MBID,
                                         Model.models.Application.M_Branch.MB_Name.label('M_Branch_MBID'),
                                        func.MIN(Model.models.Application.M_Appointment.MP_AddDate).label('first_date'),
                                        func.MAX(Model.models.Application.M_Appointment.MP_AddDate).label('last_date'),
                                        ).filter(Model.models.Application.M_Appointment.MP_IsActive==1,
                                                 Model.models.Application.M_Appointment.MP_IsDeleted==0,
                                                 Model.models.Application.M_Branch.MB_IsActive==1,
                                                 Model.models.Application.M_Branch.MB_IsDeleted==0        
                                        ).join(Model.models.Application.M_Branch,Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                        ).group_by(Model.models.Application.M_Appointment.M_Patient_MPID,Model.models.Application.M_Appointment.M_Branch_MBID
                                        ).order_by(Model.models.Application.M_Appointment.M_Patient_MPID.asc()
                                        ).all()
                    session.close()
                    MPID_all = []
                    for data_MPID in queryresult_branch_MPID:
                        total_dayss = 1
                        days_diff = (data_MPID.last_date - data_MPID.first_date).days
                        total_dayss += days_diff
                    ##############################################################
                        MPID_all.append({'MPID':data_MPID.M_Patient_MPID,'M_Branch_MBID':data_MPID.M_Branch_MBID,'Total_Days':total_dayss})

                    # MPID_data=[date_ranges['Total_Days'] for date_ranges in MPID_all]
                    # avg_MPID_data=sum(MPID_data)//len(MPID_data)
                    # print(avg_MPID_data)
                    ###############################################################
                    # Dictionary to store the sum of Total_Days and count for each M_Branch_MBID
                    branch_data = {}

                    # Loop through the data to calculate the sum and count of Total_Days for each M_Branch_MBID
                    for item in MPID_all:
                        m_branch_mbid = item["M_Branch_MBID"]
                        total_days = item["Total_Days"]

                        if m_branch_mbid not in branch_data:
                            branch_data[m_branch_mbid] = {"sum": total_days, "count": 1}
                        else:
                            branch_data[m_branch_mbid]["sum"] += total_days
                            branch_data[m_branch_mbid]["count"] += 1

                    # Dictionary to store the average Total_Days for each M_Branch_MBID
                    branch_avg_data = {}
                    xAxis = []
                    yAxis = []
                    branch_avg_data = {
                        'xAxis':xAxis,
                        'yAxis':yAxis
                    }
                    
                    # Calculate the average Total_Days for each M_Branch_MBID
                    for m_branch_mbid, values in branch_data.items():
                        xAxis.append(str(m_branch_mbid))
                        yAxis.append(values["sum"] // values["count"])

                    return jsonify(result=branch_avg_data)   

            elif (ReportType == str(710)):
                if (From != '' and From != None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate >= From)

                if(To != '' and To != None):
                    apply.append(Model.models.Application.M_Patient.MP_AddDate <= To)

                    query_m_invoicemaster = session.query(#Model.models.Application.M_InvoiceMaster.MI_TotalAmount,
                                                  sqlalchemy.func.sum(Model.models.Application.M_InvoiceMaster.MI_TotalAmount).label('TotalRevenue'),
                                                  Model.models.Application.M_InvoiceMaster.MI_ServiceName,
                                                  sqlalchemy.func.count().label('Count'), 
                                                ).filter(Model.models.Application.M_InvoiceMaster.MI_IsActive==1,
                                                        Model.models.Application.M_InvoiceMaster.MI_IsDeleted==0,
                                                        Model.models.Application.M_InvoiceMaster.MI_ServiceName.is_not(None),
                                                        Model.models.Application.M_InvoiceMaster.MI_ServiceName!=''
                                                ).group_by(Model.models.Application.M_InvoiceMaster.MI_ServiceName
                                                ).all()
                    session.close()
                    result_dict = {}

                    for revenue, service_name, count in query_m_invoicemaster:
                        if service_name not in result_dict:
                            result_dict[service_name] = []

                        result_dict[service_name].append({
                            'TotalRevenue': revenue or 0,
                            'count': count or 0,
                            'Avg': round(revenue / count) if revenue is not None and count is not None else 0
                        })

                    xAxis = list(result_dict.keys())
                    yAxis = [val['Avg'] for values in result_dict.values() for val in values]

                    ServiceName_avg_data = {
                        'xAxis': xAxis,
                        'yAxis': yAxis
                    }
                    return jsonify(result=ServiceName_avg_data) 









    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/editProvisionalDi',methods=['POST','GET'])
def editProvisionalDi():
    try:
        if(request.method == "POST"):
            session=Session()
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    # session=Session()
                    request_json = request.get_json(force = True)
                    aid = request_json.get('appointmentId')
                    
                    if(aid != '' and aid != None):
                        Prescrip = Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.editProvisionalDi,
                                session.query(Model.models.Application.M_ProvisionalDiagnosis.MPD_ProvisionalDiagnosis,
                                                       Model.models.Application.M_ProvisionalDiagnosis.MPD_ICDCode,
                                                       Model.models.Application.M_ProvisionalDiagnosis.MPD_ICDDescription,
                                                       Model.models.Application.M_ProvisionalDiagnosis.MPDID,
                                                       
                            ).filter(Model.models.Application.M_ProvisionalDiagnosis.M_AppointmentID == aid
                            ).filter_by(MPD_IsActive=1,MPD_IsDeleted=0).all())
                                        
                        session.commit()
                        
                        return jsonify(result=Prescrip)
                    else:
                        return jsonify({'err':'something went wrong please try again'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close() 

@app.route('/getFollowUpDate', methods=['GET','POST'])
def getFollowUpDate():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= session.query(Model.models.Application.M_PatientReview.MPDID.label('ID'),
                                            Model.models.Application.M_PatientReview.M_AppointmentID,
                                            Model.models.Application.M_PatientReview.MPR_FollowDate,
                                            sqlalchemy.func.date_format(Model.models.Application.M_PatientReview.MPR_FollowDate,'%d-%b-%Y').label('Date')
                                            ).filter_by(M_AppointmentID=AID,MPR_IsActive=1,MPR_IsDeleted=0
                                            ).order_by(Model.models.Application.M_PatientReview.MPDID.desc()).all()
                    if(len(queryresult)>0):
                        return jsonify(result={'Follow Date':queryresult[0].Date})
                    else:
                        return jsonify(result={'Follow Date':''})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/ProvisionalDiagnosisReport', methods=['POST','GET'])
def ProvisionalDiagnosisReport():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            AID = request_json.get('AID')
            queryResult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.ProvisionalDiagnosisReport,
                        session.query(Model.models.Application.M_ProvisionalDiagnosis.MPD_ProvisionalDiagnosis.label('ProvisionalDiagnosis'),
                                    Model.models.Application.M_ProvisionalDiagnosis.M_AppointmentID.label('AppointmentId'),
                                    Model.models.Application.M_ProvisionalDiagnosis.MPD_ICDCode.label('ICDCode'),
                                    Model.models.Application.M_ProvisionalDiagnosis.MPD_ICDDescription.label('ICDDescription'),
                                    sqlalchemy.func.date_format(Model.models.Application.M_ProvisionalDiagnosis.MPD_AddDate,'%d-%b-%Y').label('Date'),
                                    ).filter_by(MPD_IsActive=1,MPD_IsDeleted=0,M_AppointmentID=AID,MPD_ShowDtl=1
                                    ).all()
                                )
            session.commit()
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/SessionNotesReport', methods=['POST','GET'])
def SessionNotesReport():
    session=Session()
    try:
        if(request.method == "POST"):
            
            request_json = request.get_json()
            AID = request_json.get('AID')
            StartedDtl = session.query(Model.models.Application.T_Details.TD_Name.label('StartedDl'),
                                          Model.models.Application.T_Details.TDID.label('IDs')).subquery()
            todayfeelDtl = session.query(Model.models.Application.T_Details.TD_Name.label('todayfeelDl'),
                                          Model.models.Application.T_Details.TDID.label('IDs')).subquery()
            queryResult= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.SessionNotesReport,
                        session.query(Model.models.Application.M_SessionNotes.MSN_started.label('Staed'),
                        Model.models.Application.M_SessionNotes.M_AppointmentID.label('AppointmentId'),
                        StartedDtl.c.StartedDl.label('Started'),
                        todayfeelDtl.c.todayfeelDl.label('todayfeel'),
                        
                                    Model.models.Application.M_SessionNotes.MSN_todayfeeling.label('todaeel'),
                                    Model.models.Application.M_SessionNotes.MSN_dotoday.label('dotod'),
                                    Model.models.Application.T_Details.TD_Name.label('dotoday'),
                                    Model.models.Application.M_SessionNotes.MSN_Notes.label('Notes'),
                                    sqlalchemy.func.date_format(Model.models.Application.M_SessionNotes.MSN_AddDate,'%d-%b-%Y').label('Date'),
                                    ).filter_by(MSN_IsActive=1,MSN_IsDeleted=0,M_AppointmentID=AID
                                    ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_SessionNotes.MSN_dotoday       
                                    ).outerjoin(StartedDtl, StartedDtl.c.IDs==Model.models.Application.M_SessionNotes.MSN_todayfeeling
                                    ).outerjoin(todayfeelDtl, todayfeelDtl.c.IDs==Model.models.Application.M_SessionNotes.MSN_started
                                    ).all()
                                )
            session.commit()
            return jsonify(result=queryResult)
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/VisitReasonReport', methods=['GET','POST'])
def VisitReasonReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.VisitReasonReport,
                                session.query(Model.models.Application.M_ReasonForVisit.MRVID.label('ID'),
                                            Model.models.Application.M_ReasonForVisit.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ReasonForVisit.MRV_PresentConcerns.label('Present Concerns'),
                                            Model.models.Application.M_ReasonForVisit.MRV_InformedBy.label('Informed By'),
                                            Model.models.Application.M_ReasonForVisit.MRV_AgeWhenNoticed.label('Noticed Age'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MRV_IsActive=1,MRV_IsDeleted=0
                                ).order_by(Model.models.Application.M_ReasonForVisit.MRVID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/PastHistoryReport', methods=['GET','POST'])
def PastHistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PastHistoryReport,
                                session.query(Model.models.Application.M_PastHistory.MPHID.label('ID'),
                                            Model.models.Application.M_PastHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PastHistory.MPH_PastMedications.label('Past Medications')
                                            
                                                ).filter_by(M_AppointmentID=AID,MPH_IsActive=1,MPH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PastHistory.MPHID.desc()).all())
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/PrenatalHistoryReport', methods=['GET','POST'])
def PrenatalHistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PrenatalHistoryReport,
                                session.query(Model.models.Application.M_PrenatalHistory.MPHID.label('ID'),
                                            Model.models.Application.M_PrenatalHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PrenatalHistory.MPH_MotheraAgeAtConception.label('Mother Conception'),
                                            Model.models.Application.M_PrenatalHistory.MPH_MotherHealthAtPregnancy.label('Mother Pregnancy'),
                                            Model.models.Application.M_PrenatalHistory.MPH_HistoryofAbortions.label('History Abortions'),
                                            Model.models.Application.M_PrenatalHistory.MPH_GestationalDiabetes.label('Gestational Diabetes'),
                                            Model.models.Application.M_PrenatalHistory.MPH_NeurologicalDisorder.label('Neurological Disorder'),
                                            Model.models.Application.M_PrenatalHistory.MPH_PhysicalEmotionalTrauma.label('Physical Emotional'),
                                            Model.models.Application.M_PrenatalHistory.MPH_RhInompatibility.label('Inompatibility'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Jaundice.label('Jaundice'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Seizures.label('Seizures'),
                                            Model.models.Application.M_PrenatalHistory.MPH_TraumaInjury.label('TraumaInjury'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Bleedinginlatepregnancy.label('Bleeding pregnancy'),
                                            Model.models.Application.M_PrenatalHistory.MPH_AdequateNutrition.label('Adequate Nutrition'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Infections.label('Infections'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Smoking.label('Smoking'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPH_IsActive=1,MPH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PrenatalHistory.MPHID.desc()).all())
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/PatientBirthHistoryReport', methods=['GET','POST'])
def PatientBirthHistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PatientBirthHistoryReport,
                                session.query(Model.models.Application.M_PatientBirthHistory.MPBHID.label('ID'),
                                            Model.models.Application.M_PatientBirthHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_MotherHealth.label('Mother Health'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_DeliveryType.label('Delivery Type'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_typeofdelivery.label('Type of Delivery'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_DeliveryLocationh.label('Delivery Location'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_MultiplePregnancies.label('Multiple Pregnancies'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_ComplicationDuringPregnancy.label('Complication Pregnancy'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_ChildBirth.label('Child Birth'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_ChildBirthWeek.label('Child Birth Week'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_BirthWeight.label('Birth Weight'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_BirthCry.label('Birth Cry'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_NeonatalConditionint.label('Neonatal Condition'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_SpecialCareAny.label('Special CareAny'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_AnyMedicalEvents.label('Any Medical Events'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_Congenital.label('Congenital'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPBH_IsActive=1,MPBH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PatientBirthHistory.MPBHID.desc()).all())
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/DevelopmentalHistoryReport', methods=['GET','POST'])
def DevelopmentalHistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.DevelopmentalHistoryReport,
                                session.query(Model.models.Application.M_DevelopmentalHistory.MDHID.label('ID'),
                                            Model.models.Application.M_DevelopmentalHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_HoldUpHeadAge.label('HoldUp HeadAge'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_Rolloverage.label('Rollover age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_SitAge.label('Sit Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_StandAloneAge.label('Stand Alone Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_WalkAge.label('Walk Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_TalkAge.label('Talk Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_ToiletTrainAge.label('Toilet Train Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_FeedAge.label('Feed Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_DresshimAge.label('Dresshim Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MDH_IsActive=1,MDH_IsDeleted=0
                                ).order_by(Model.models.Application.M_DevelopmentalHistory.MDHID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()




@app.route('/SpeechDevelopmentHistoryReport', methods=['GET','POST'])
def SpeechDevelopmentHistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpeechDevelopmentHistoryReport,
                                session.query(Model.models.Application.M_SpeechDevelopmentalHistory.MSDHID.label('ID'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Vocalization.label('Vocalization'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Babbling.label('Babbling'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_FirstWord.label('First Word'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Phrases.label('Phrases'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_SimpleSentences.label('Simple Sentences'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSDH_IsActive=1,MSDH_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpeechDevelopmentalHistory.MSDHID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()



@app.route('/socialhistoryReport', methods=['GET','POST'])
def socialhistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.socialhistoryReport,
                                session.query(Model.models.Application.M_SocialHistory.MSHID.label('ID'),
                                            Model.models.Application.M_SocialHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_SocialHistory.MSH_Aggressive.label('Social History'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSH_IsActive=1,MSH_IsDeleted=0
                                ).order_by(Model.models.Application.M_SocialHistory.MSHID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/medicalhistoryReport', methods=['GET','POST'])
def medicalhistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.medicalhistoryReport,
                                session.query(Model.models.Application.M_MedicalHistory.MSHID.label('ID'),
                                            Model.models.Application.M_MedicalHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_MedicalHistory.MMH_observations.label('Medical History'),

                                                ).filter_by(M_AppointmentID=AID,MMH_IsActive=1,MMH_IsDeleted=0
                                ).order_by(Model.models.Application.M_MedicalHistory.MSHID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/familyhistoryReport', methods=['GET','POST'])
def familyhistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.familyhistoryReport,
                                session.query(Model.models.Application.M_FamilyHistory.MFHID.label('ID'),
                                            Model.models.Application.M_FamilyHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_FamilyHistory.MFH_Familytype.label('Family type'),
                                            Model.models.Application.M_FamilyHistory.MFH_Consanguinity.label('Consanguinity'),
                                            Model.models.Application.M_FamilyHistory.MFH_Observations.label('Family History'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MFH_IsActive=1,MFH_IsDeleted=0
                                ).order_by(Model.models.Application.M_FamilyHistory.MFHID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/educationhistoryReport', methods=['GET','POST'])
def educationhistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.educationhistoryReport,
                                session.query(Model.models.Application.M_EducationHistory.MEHID.label('ID'),
                                            Model.models.Application.M_EducationHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_EducationHistory.MEH_CommunicationMode.label('Education History'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MEH_IsActive=1,MEH_IsDeleted=0
                                ).order_by(Model.models.Application.M_EducationHistory.MEHID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/GeneralExamReport', methods=['GET','POST'])
def GeneralExamReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.GeneralExamReport,
                                session.query(Model.models.Application.M_GeneralExamForm.MGEFID.label('ID'),
                                            Model.models.Application.M_GeneralExamForm.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_Height.label('Height'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_Weight.label('Weight'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_HeadCircumference.label('Head Circumference'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_Observations.label('Observations'),

                                                ).filter_by(M_AppointmentID=AID,MGEF_IsActive=1,MGEF_IsDeleted=0
                                ).order_by(Model.models.Application.M_GeneralExamForm.MGEFID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()



@app.route('/VitalsExamReport', methods=['GET','POST'])
def VitalsExamReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.VitalsExamReport,
                                session.query(Model.models.Application.M_VitalsExamForm.MVEFID.label('ID'),
                                            Model.models.Application.M_VitalsExamForm.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_BloodPressure.label('Blood Pressure'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_PulseRate.label('Pulse Rate'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_RespiratoryRate.label('Respiratory Rate'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_Temperator.label('Temperator'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MVEF_IsActive=1,MVEF_IsDeleted=0
                                ).order_by(Model.models.Application.M_VitalsExamForm.MVEFID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/SystemicExamReport', methods=['GET','POST'])
def SystemicExamReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SystemicExamReport,
                                session.query(Model.models.Application.M_SystemicExam.MSEID.label('ID'),
                                            Model.models.Application.M_SystemicExam.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SystemicExam.MSE_Observations.label('Observations'),
                                                ).filter_by(M_AppointmentID=AID,MSE_IsActive=1,MSE_IsDeleted=0
                                ).order_by(Model.models.Application.M_SystemicExam.MSEID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/STOroperipheralExam', methods=['GET','POST'])
def STOroperipheralExam():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.STOroperipheralExam,
                                session.query(Model.models.Application.M_STOroperipheralExam.MSPEID.label('ID'),
                                            Model.models.Application.M_STOroperipheralExam.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_LipsAppearance.label('Lips Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_LipsMovements.label('Lips Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TongueAppearance.label('Tongue Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TongueMovements.label('Tongue Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TeethAppearance.label('Teeth Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TeethMovements.label('Teeth Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_HardPalateAppearance.label('Hard Palate Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_SoftPalateAppearance.label('Soft Palate Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_SoftPalateMovements.label('Soft Palate Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_UvulaAppearance.label('Uvula Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_UvulaMovements.label('Uvula Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_MandibleAppearance.label('Mandible Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_MandibleMovements.label('Mandible Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Drooling.label('Drooling'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Blowing.label('Blowing'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Biting.label('Biting'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Sucking.label('Sucking'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Swallowing.label('Swallowing'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSPE_IsActive=1,MSPE_IsDeleted=0
                                ).order_by(Model.models.Application.M_STOroperipheralExam.MSPEID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/STArticulationSpeechIntelligibilityReport', methods=['GET','POST'])
def STArticulationSpeechIntelligibilityReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.STArticulationSpeechIntelligibilityReport,
                                session.query(Model.models.Application.M_STArticulationSpeechIntelligibility.MSSIID.label('ID'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Noonecan.label('Noonecan'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_memberscan.label('memberscan'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Strangerscan.label('Strangerscan'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSSI_IsActive=1,MSSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_STArticulationSpeechIntelligibility.MSSIID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/STArticulationVoiceReport', methods=['GET','POST'])
def STArticulationVoiceReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.STArticulationVoiceReport,
                                session.query(Model.models.Application.M_STArticulationVoice.MSAVID.label('ID'),
                                            Model.models.Application.M_STArticulationVoice.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Pitch.label('Pitch'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Loudness.label('Loudness'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Quality.label('Quality'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSAV_IsActive=1,MSAV_IsDeleted=0
                                ).order_by(Model.models.Application.M_STArticulationVoice.MSAVID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/CognitivePrerequitesReport', methods=['GET','POST'])
def CognitivePrerequitesReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.CognitivePrerequitesReport,
                                session.query(Model.models.Application.M_CognitivePrerequites.MCPID.label('ID'),
                                            Model.models.Application.M_CognitivePrerequites.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Imitation.label('Imitation'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Objectpermanence.label('Objectpermanence'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Timeconcept.label('Timeconcept'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Colourconcept.label('Colourconcept'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Moneyconcept.label('Moneyconcept'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Sequencing.label('Sequencing'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Matching.label('Matching'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Meanendrelationship.label('Meanendrelationship'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Observations.label('Observations'),

                                                ).filter_by(M_AppointmentID=AID,MCP_IsActive=1,MCP_IsDeleted=0
                                ).order_by(Model.models.Application.M_CognitivePrerequites.MCPID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/STVerbalCommunication', methods=['GET','POST'])
def STVerbalCommunication():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.STVerbalCommunication,
                                session.query(Model.models.Application.M_STVerbalCommunication.MVCID.label('ID'),
                                            Model.models.Application.M_STVerbalCommunication.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STVerbalCommunication.MVC_Expression.label('Expression'),
                                            Model.models.Application.M_STVerbalCommunication.MVC_Comprehension.label('Comprehension'),
                                            Model.models.Application.M_STVerbalCommunication.MVC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MVC_IsActive=1,MVC_IsDeleted=0
                                ).order_by(Model.models.Application.M_STVerbalCommunication.MVCID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/STNonVerbalCommunicationReport', methods=['GET','POST'])
def STNonVerbalCommunicationReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.STNonVerbalCommunicationReport,
                                session.query(Model.models.Application.M_STNonVerbalCommunication.MNVCID.label('ID'),
                                            Model.models.Application.M_STNonVerbalCommunication.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Expression.label('Expression'),
                                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Comprehension.label('Comprehension'),
                                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MNVC_IsActive=1,MNVC_IsDeleted=0
                                ).order_by(Model.models.Application.M_STNonVerbalCommunication.MNVCID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/OTHandFunctionsReport', methods=['GET','POST'])
def OTHandFunctionsReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.OTHandFunctionsReport,
                                session.query(Model.models.Application.M_OTHandFunctions.MHFID.label('ID'),
                                            Model.models.Application.M_OTHandFunctions.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTHandFunctions.MHF_HandDominance.label('Hand Dominance'),
                                            Model.models.Application.M_OTHandFunctions.MHF_HandPreference.label('Hand Preference'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachForward.label('Reach Forward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachBackward.label('Reach Backward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachLateral.label('Reach Lateral'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachDownward.label('Reach Downward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspUlnarPalmar.label('Grasp UlnarPalmar'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspPalmar.label('Grasp Palmar'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspRadialPalmar.label('Grasp RadialPalmar'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspRadialDigital.label('Grasp RadialDigital'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspInferiorPincer.label('Grasp InferiorPincer'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachUpward.label('Reach Upward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspNeatPincer.label('Grasp NeatPincer'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspPalmarsupinate.label('Grasp Palmarsupinate'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspDigitalpronate.label('Grasp Digitalpronate'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspStatictripod.label('Grasp Statictripod'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspDynamictripod.label('Grasp Dynamictripod'),
                                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionPadtoPad.label('Prehension PadtoPad'),
                                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionTiptoTip.label('Prehension TiptoTip'),
                                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionPadtoSide.label('Prehension PadtoSide'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MHF_IsActive=1,MHF_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTHandFunctions.MHFID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/OTNonEquilibriumCoordinationReport', methods=['GET','POST'])
def OTNonEquilibriumCoordinationReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewOTNonEquilibriumCoordinationForm,
                                session.query(Model.models.Application.M_NonEquilibrium.MNEID.label('ID'),
                                            Model.models.Application.M_NonEquilibrium.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingertonose.label('Fingertonose'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingertotherapistfinger.label('Fingertotherapistfinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingertofinger.label('Fingertofinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Alternatnosefinger.label('Alternatnosefinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingeropposition.label('Fingeropposition'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Massgrasp.label('Massgrasp'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Pronationsupination.label('Pronationsupination'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Reboundtest.label('Reboundtest'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Tappinghand.label('Tappinghand'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Tappingfeet.label('Tappingfeet'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Pointingandpastpointing.label('Pointingandpastpointing'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Alternateheeltokneeheeltoe.label('Alternateheeltokneeheeltoe'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Toetoexaminersfinger.label('Toetoexaminersfinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Heeltoshin.label('Heeltoshin'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Drawingacircle.label('Drawingacircle'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fixationorpositionholding.label('Fixationorpositionholding'),

                                                ).filter_by(M_AppointmentID=AID,MNE_IsActive=1,MNE_IsDeleted=0
                                ).order_by(Model.models.Application.M_NonEquilibrium.MNEID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/OTEquilibriumCoordinationReport', methods=['GET','POST'])
def OTEquilibriumCoordinationReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.OTEquilibriumCoordinationReport,
                                session.query(Model.models.Application.M_Equilibrium.MNEID.label('ID'),
                                            Model.models.Application.M_Equilibrium.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingwithnormalbaseofsupport.label('Standingwithnormalbaseofsupport'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingwithnarrowbaseofsupport.label('Standingwithnarrowbaseofsupport'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingintandemposition.label('Standingintandemposition'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingononefeet.label('Standingononefeet'),
                                            Model.models.Application.M_Equilibrium.MNE_Perturbation.label('Perturbation'),
                                            Model.models.Application.M_Equilibrium.MNE_Standinginfunctionalreach.label('Standinginfunctionalreach'),
                                            Model.models.Application.M_Equilibrium.MNE_Standinglateralflexionofthetrunktoeachside.label('Standinglateralflexionofthetrunktoeachside'),
                                            Model.models.Application.M_Equilibrium.MNE_Tandemwalking.label('Tandemwalking'),
                                            Model.models.Application.M_Equilibrium.MNE_WalkingInastraightline.label('WalkingInastraightline'),
                                            Model.models.Application.M_Equilibrium.MNE_Walksidewaysbackwards.label('Walksidewaysbackwards'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkinhorizontalvertical.label('Walkinhorizontalvertical'),
                                            Model.models.Application.M_Equilibrium.MNE_Marchinplace.label('Marchinplace'),
                                            Model.models.Application.M_Equilibrium.MNE_Startstopabruptly.label('Startstopabruptly'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkandpivotincommand.label('Walkandpivotincommand'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkincircle.label('Walkincircle'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkonheelsandtoes.label('Walkonheelsandtoes'),
                                            Model.models.Application.M_Equilibrium.MNE_Turnsoncommand.label('Turnsoncommand'),
                                            Model.models.Application.M_Equilibrium.MNE_Stepoveraroundobstacles.label('Stepoveraroundobstacles'),
                                            Model.models.Application.M_Equilibrium.MNE_Stairclimbingwithhandrails.label('Stairclimbingwithhandrails'),
                                            Model.models.Application.M_Equilibrium.MNE_Jumpingjacks.label('Jumpingjacks'),
                                            Model.models.Application.M_Equilibrium.MNE_Sittingontherapybal.label('Sittingontherapybal'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MNE_IsActive=1,MNE_IsDeleted=0
                                ).order_by(Model.models.Application.M_Equilibrium.MNEID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/OTCognitionAndPerceptionReport', methods=['GET','POST'])
def OTCognitionAndPerceptionReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.OTCognitionAndPerceptionReport,
                                session.query(Model.models.Application.M_OTCognition.MOCID.label('ID'),
                                            Model.models.Application.M_OTCognition.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTCognition.MOC_Praxis.label('Praxis'),
                                            Model.models.Application.M_OTCognition.MOC_Rightleftdiscrimination.label('Rightleftdiscrimination'),
                                            Model.models.Application.M_OTCognition.MOC_Fingerindentification.label('Fingerindentification'),
                                            Model.models.Application.M_OTCognition.MOC_Orientationtoperson.label('Orientationtoperson'),
                                            Model.models.Application.M_OTCognition.MOC_Orientationtoplace.label('Orientationtoplace'),
                                            Model.models.Application.M_OTCognition.MOC_Conceputalseriescompletion.label('Conceputalseriescompletion'),
                                            Model.models.Application.M_OTCognition.MOC_Selectiveattention.label('Selectiveattention'),
                                            Model.models.Application.M_OTCognition.MOC_Focusedattention.label('Focusedattention'),
                                            Model.models.Application.M_OTCognition.MOC_Spatialperception.label('Spatialperception'),
                                            Model.models.Application.M_OTCognition.MOC_Visualmemory.label('Visualmemory'),
                                            Model.models.Application.M_OTCognition.MOC_Verbalmemory.label('Verbalmemory'),
                                            Model.models.Application.M_OTCognition.MOC_Identificationofobjects.label('Identificationofobjects'),
                                            Model.models.Application.M_OTCognition.MOC_Proverbinterpretation.label('Proverbinterpretation'),
                                            Model.models.Application.M_OTCognition.MOC_Randomlettertest.label('Randomlettertest'),
                                            Model.models.Application.M_OTCognition.MOC_Overlappingfigures.label('Overlappingfigures'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MOC_IsActive=1,MOC_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTCognition.MOCID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/OTSensoryExamReport', methods=['GET','POST'])
def OTSensoryExamReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.OTSensoryExamReport,
                                session.query(Model.models.Application.M_OTSensoryExam.MSEID.label('ID'),
                                            Model.models.Application.M_OTSensoryExam.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Visualtracking.label('Visual tracking'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Choreiformmovements.label('Choreiform movements'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Tremor.label('Tremor'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Exaggeratedassociated.label('Exaggerated associated'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Graphesthesis.label('Graphesthesis'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Stereognosis.label('Stereognosis'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Weightbearinghands.label('Weight bearing hands'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Proneextensionpattern.label('Prone extension pattern'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSE_IsActive=1,MSE_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTSensoryExam.MSEID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/OTSensoryProfileReport', methods=['GET','POST'])
def OTSensoryProfileReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.OTSensoryProfileReport,
                                session.query(Model.models.Application.M_OTSensoryProfile.MSPID.label('ID'),
                                            Model.models.Application.M_OTSensoryProfile.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTSensoryProfile.MSP_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSP_IsActive=1,MSP_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTSensoryProfile.MSPID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/AddtionalinfoReport', methods=['GET','POST'])
def AddtionalinfoReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.AddtionalinfoReport,
                                session.query(Model.models.Application.M_Addtionalinfo.MAIID.label('ID'),
                                            Model.models.Application.M_Addtionalinfo.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_Addtionalinfo.MAI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MAI_IsActive=1,MAI_IsDeleted=0
                                ).order_by(Model.models.Application.M_Addtionalinfo.MAIID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTFunctionalAbilitiesReport', methods=['GET','POST'])
def PTFunctionalAbilitiesReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTFunctionalAbilitiesReport,
                                session.query(Model.models.Application.M_PTFunctionalAbilities.MFAID.label('ID'),
                                            Model.models.Application.M_PTFunctionalAbilities.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_GrossMotor.label('Gross Motor'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_FineMotor.label('Fine Motor'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_CommunicationSpeech.label('Communication Speech'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_Feeding.label('Feeding'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_Playskills.label('Playskills'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_ADL.label('ADL'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MFA_IsActive=1,MFA_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTFunctionalAbilities.MFAID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTFunctionalLimitationsReport', methods=['GET','POST'])
def PTFunctionalLimitationsReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTFunctionalLimitationsReport,
                                session.query(Model.models.Application.M_PTFunctionalLimitations.MFLID.label('ID'),
                                            Model.models.Application.M_PTFunctionalLimitations.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_GrossMotor.label('Gross Motor'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_FineMotor.label('Fine Motor'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_CommunicationSpeech.label('Communication Speech'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_Feeding.label('Feeding'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_Playskills.label('Playskills'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_ADL.label('ADL'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MFL_IsActive=1,MFL_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTFunctionalLimitations.MFLID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTPosturalSystemAlignmentReport', methods=['GET','POST'])
def PTPosturalSystemAlignmentReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTPosturalSystemAlignmentReport,
                                session.query(Model.models.Application.M_PosturalSystemAlignments.MPSAID.label('ID'),
                                            Model.models.Application.M_PosturalSystemAlignments.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HeadNeck.label('Head Neck'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShoulderScapular.label('Shoulder Scapular'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShoulderandScapular.label('Shoulder and Scapular'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShouldernScapular.label('Shouldern Scapular'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_RibcageandChest.label('Ribcage and Chest'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Trunk.label('Trunk'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Trunks.label('Trunks'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_PelvicComplexRight.label('Pelvic Complex Right'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_PelvicComplexLeft.label('Pelvic Complex Left'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointAbduction.label('Hipjoint Abduction'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointAdduction.label('Hipjoint Adduction'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointRotation.label('Hipjoint Rotation'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Symmetrical.label('Symmetrical'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Assymetrical.label('Assymetrical'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPSA_IsActive=1,MPSA_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemAlignments.MPSAID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTPosturalSystemBOSReport', methods=['GET','POST'])
def PTPosturalSystemBOSReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTPosturalSystemBOSReport,
                                session.query(Model.models.Application.M_PosturalSystemBOS.MPSBID.label('ID'),
                                            Model.models.Application.M_PosturalSystemBOS.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemBOS.MPSB_BaseofSupport.label('Base of Support'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPSB_IsActive=1,MPSB_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemBOS.MPSBID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/PTPosturalSystemCOMReport', methods=['GET','POST'])
def PTPosturalSystemCOMReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTPosturalSystemCOMReport,
                                session.query(Model.models.Application.M_PosturalSystemCOM.MPSBID.label('ID'),
                                            Model.models.Application.M_PosturalSystemCOM.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemCOM.MPSC_CenterofMass.label('Center of Mass'),
                                            Model.models.Application.M_PosturalSystemCOM.MPSC_Withinsupport.label('Within support'),
                                            Model.models.Application.M_PosturalSystemCOM.MPSC_Strategiesposture.label('Strategies posture'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPSC_IsActive=1,MPSC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemCOM.MPSBID.desc()).all())
                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTAnticipatoryControlReport', methods=['GET','POST'])
def PTAnticipatoryControlReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTAnticipatoryControlReport,
                                session.query(Model.models.Application.M_PTAnticipatoryControl.MACID.label('ID'),
                                            Model.models.Application.M_PTAnticipatoryControl.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTAnticipatoryControl.MAC_Canchildanti.label('Canchildanti'),
                                            Model.models.Application.M_PTAnticipatoryControl.MAC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MAC_IsActive=1,MAC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTAnticipatoryControl.MACID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTPosturalCounterbalanceReport', methods=['GET','POST'])
def PTPosturalCounterbalanceReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTPosturalCounterbalanceReport,
                                session.query(Model.models.Application.M_PTPosturalCounterbalance.MPCID.label('ID'),
                                            Model.models.Application.M_PTPosturalCounterbalance.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTPosturalCounterbalance.MPC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPC_IsActive=1,MPC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTPosturalCounterbalance.MPCID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTPosturalSystemImpairmentsReport', methods=['GET','POST'])
def PTPosturalSystemImpairmentsReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTPosturalSystemImpairments,
                                session.query(Model.models.Application.M_PosturalSystemImpairments.MPSIID.label('ID'),
                                            Model.models.Application.M_PosturalSystemImpairments.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_MuscleArchitecture.label('Muscle Architecture'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Anycallosities.label('Anycallosities'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Anyotherspecificposture.label('Anyother specific posture'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPSI_IsActive=1,MPSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemImpairments.MPSIID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTMovementSystemReport', methods=['GET','POST'])
def PTMovementSystemReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTMovementSystemReport,
                                session.query(Model.models.Application.M_PTMovementSystem.MPMSID.label('ID'),
                                            Model.models.Application.M_PTMovementSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMovementSystem.MPMS_Cantheyovercome.label('Canthey overcome'),
                                            Model.models.Application.M_PTMovementSystem.MPMS_Howdoesthe.label('How do'),
                                            Model.models.Application.M_PTMovementSystem.MPMS_Strategiesused.label('Strategies used'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPMS_IsActive=1,MPMS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementSystem.MPMSID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/PTMovementStrategiesReport', methods=['GET','POST'])
def PTMovementStrategiesReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTMovementStrategiesReport,
                                session.query(Model.models.Application.M_PTMovementStrategies.MMSID.label('ID'),
                                            Model.models.Application.M_PTMovementStrategies.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_Childgenerallyperformsactivitie.label('Childgenerallyperformsactivitie'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformLateralweightshifts.label('CanperformLateralweightshifts'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformLateralweightshiftsleft.label('CanperformLateralweightshiftsleft'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformDiagonalweightRight.label('CanperformDiagonalweightRight'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformDiagonalweightLeft.label('CanperformDiagonalweightLeft'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformneckthoracicspineRight.label('CanperformneckthoracicspineRight'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformneckthoracicspineLeft.label('CanperformneckthoracicspineLeft'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowarethedissociationsPelvicfemoral.label('HowarethedissociationsPelvicfemoral'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowaredissociationsInterlimb.label('HowaredissociationsInterlimb'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowthedissociationsScapulohumeral.label('HowthedissociationsScapulohumeral'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowthedissociationsUpperLowerbody.label('HowthedissociationsUpperLowerbody'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MMS_IsActive=1,MMS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementStrategies.MMSID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTRangeSpeedofMovementReport', methods=['GET','POST'])
def PTRangeSpeedofMovementReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTRangeSpeedofMovementReport,
                                session.query(Model.models.Application.M_PTRangeSpeed.MPMSID.label('ID'),
                                            Model.models.Application.M_PTRangeSpeed.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTRangeSpeed.MRS_Rangespeedmovement.label('Range Speed Movement'),
                                            Model.models.Application.M_PTRangeSpeed.MRS_atTrunk.label('at Trunk'),
                                            Model.models.Application.M_PTRangeSpeed.MRS_HowisitatExtremities.label('Extremities'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MRS_IsActive=1,MRS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTRangeSpeed.MPMSID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/PTStabilityMobilityReport', methods=['GET','POST'])
def PTStabilityMobilityReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTStabilityMobilityReport,
                                session.query(Model.models.Application.M_PTStabilityMobility.MSMID.label('ID'),
                                            Model.models.Application.M_PTStabilityMobility.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTStabilityMobility.MSM_StrategiesforStabilityMobility.label('Mobility Strategies'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSM_IsActive=1,MSM_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTStabilityMobility.MSMID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTMovementSystemImpairmentReport', methods=['GET','POST'])
def PTMovementSystemImpairmentReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTMovementSystemImpairmentReport,
                                session.query(Model.models.Application.M_PTMovementSystemImpairment.MSIID.label('ID'),
                                            Model.models.Application.M_PTMovementSystemImpairment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Excessivemovementfortasks.label('Excessive movement'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Lackofmovementstaticpostures.label('movement StaticPostures'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_IntegrationofPostureMovement.label('Integration of PostureMovement'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Howdoeschildmaintainbalanceintransitions.label('Balance Transitions'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Accuracyofmovements.label('Accuracy of Movements'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSI_IsActive=1,MSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementSystemImpairment.MSIID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTRegulatorySystemReport', methods=['GET','POST'])
def PTRegulatorySystemReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTRegulatorySystemReport,
                                session.query(Model.models.Application.M_PTRegulatorySystem.MRSID.label('ID'),
                                            Model.models.Application.M_PTRegulatorySystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Affect.label('Affect'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Arousal.label('Arousal'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Attention.label('Attention'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Action.label('Action'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MRS_IsActive=1,MRS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTRegulatorySystem.MRSID.desc()).all())
                    session.commit()


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()



@app.route('/PTNeurometerSystemReport', methods=['GET','POST'])
def PTNeurometerSystemReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTNeurometerSystemReport,
                                session.query(Model.models.Application.M_PTNeurometerSystem.MPSBID.label('ID'),
                                            Model.models.Application.M_PTNeurometerSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Initiation.label('Initiation'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Sustenance.label('Sustenance'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Termination.label('Termination'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Controlandgradation.label('Control and Gradation'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionConcentric.label('Contraction Concentric'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionIsometric.label('Contraction Isometric'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionEccentric.label('Contraction Eccentric'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_CoactivationReciprocalinhibition.label('Reciprocal Inhibition'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_MasssynergyIsolatedwork.label('Isolated work'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Dynamicstiffness.label('Dynamic stiffness'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Extraneousmovement.label('Extraneous Movement'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MNS_IsActive=1,MNS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTNeurometerSystem.MPSBID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTMusculoskeletalSystemReport', methods=['GET','POST'])
def PTMusculoskeletalSystemReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTMusculoskeletalSystemReport,
                                session.query(Model.models.Application.M_PTMusculoskeletalSystem.MKSID.label('ID'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Muscleendurance.label('Muscle Endurance'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Skeletalcomments.label('Skeletal Comments'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR1.label('Tardieu ScaleTR1'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR2.label('Tardieu ScaleTR2'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR3.label('Tardieu ScaleTR3'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuscaleHamsR1.label('Tardieu ScaleHamsR1'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuscaleHamsR2.label('Tardieu ScaleHamsR2'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MKS_IsActive=1,MKS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMusculoskeletalSystem.MKSID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTSensorySystemReport', methods=['GET','POST'])
def PTSensorySystemReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTSensorySystemReport,
                                session.query(Model.models.Application.M_PTSensorySystem.MSSID.label('ID'),
                                            Model.models.Application.M_PTSensorySystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTSensorySystem.MSS_sensorymodulationissues.label('Modulation Issues'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Visualsystem.label('Visual system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Auditorysystem.label('Auditory system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_AuditorysystemResponse.label('Auditory system Response'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Vestibularsystem.label('Vestibular system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Somatosensorysystem.label('Somatosensory system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Oromotorsystem.label('Oromotor system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Olfactorysystem.label('Olfactory system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSS_IsActive=1,MSS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTSensorySystem.MSSID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/PTCognitiveSystemReport', methods=['GET','POST'])
def PTCognitiveSystemReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTCognitiveSystemReport,
                                session.query(Model.models.Application.M_PTCognitiveSystem.MCSID.label('ID'),
                                            Model.models.Application.M_PTCognitiveSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Intelligence.label('Intelligence'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Memory.label('Memory'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Adaptability.label('Adaptability'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_MotorPlanning.label('Motor Planning'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MCS_IsActive=1,MCS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTCognitiveSystem.MCSID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/ReceptiveLanguageAssessmentReport', methods=['GET','POST'])
def ReceptiveLanguageAssessmentReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.ReceptiveLanguageAssessmentReport,
                                session.query(Model.models.Application.M_ReceptiveLanguageAssessment.MRLAID.label('ID'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendssounds.label('Comprehends sounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsloud.label('Comprehends loud'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendscategorizesounds.label('Comprehends categorizesounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsanimalsounds.label('Comprehends animalsounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsfruitsname.label('Comprehends fruitsname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendscolorsname.label('Comprehends colorsname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsanimalname.label('Comprehends animalname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsvegetablename.label('Comprehends vegetablename'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsshapesname.label('Comprehends shapesname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsbodyparts.label('Comprehends bodyparts'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsvehiclenames.label('Comprehends vehiclenames'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understandingrhymes.label('Understandingrhymes'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Respondscorrectly.label('Respondscorrectly'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Identifiessounds.label('Identifiessounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Actsoutcommands.label('Actsoutcommands'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsstepscommands.label('Comprehends stepscommands'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understandinggreeting.label('Understandinggreeting'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understanding.label('Understanding'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MRLA_IsActive=1,MRLA_IsDeleted=0
                                ).order_by(Model.models.Application.M_ReceptiveLanguageAssessment.MRLAID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/ExpressiveLanguageAssessmentReport', methods=['GET','POST'])
def ExpressiveLanguageAssessmentReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.ExpressiveLanguageAssessmentReport,
                                session.query(Model.models.Application.M_ExpressiveLanguageAssessment.MELAID.label('ID'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesenvironmentalsounds.label('Imitates environmental sounds'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesloudandsoftsounds.label('Imitates loud and softsounds'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitateslexicalcategories.label('Imitates lexical categories'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescolorsname.label('Imitates colors name'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesbodyparts.label('Imitates body parts'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatessingingandphrases.label('Imitates singing and phrases'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_ImitatesalphabetsAtoZ.label('Imitates alphabets AtoZ'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Usesnounwitharticles.label('articles'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Watchesfaceandbody.label('Watches'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescounting.label('Imitates counting'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Clapstobeatoffamiliarsongs.label('Claps'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Respondstosinglesigns.label('Respondstosinglesigns'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatessocialgreetings.label('Imitates socialgreetings'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Occassionallytrytoimitate.label('Occassionallytrytoimitate'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescommonsyllables.label('Imitates commonsyllables'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MELA_IsActive=1,MELA_IsDeleted=0
                                ).order_by(Model.models.Application.M_ExpressiveLanguageAssessment.MELAID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/ConnersParentRatingScaleReport', methods=['GET','POST'])
def ConnersParentRatingScaleReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.ConnersParentRatingScaleReport,
                                session.query(Model.models.Application.M_ConnersParentRatingScale.MCPRID.label('ID'),
                                            Model.models.Application.M_ConnersParentRatingScale.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Scores.label('Scores'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Tscores.label('Tscores'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Range.label('Range'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MCPR_IsActive=1,MCPR_IsDeleted=0
                                ).order_by(Model.models.Application.M_ConnersParentRatingScale.MCPRID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/SpecialEdassessmenttwoyearsReport', methods=['GET','POST'])
def SpecialEdassessmenttwoyearsReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpecialEdassessmenttwoyearsReport,
                                session.query(Model.models.Application.M_SpecialEdassessmenttwoyears.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Respondstoname.label('Respondstoname'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Makeseyecontact.label('Makeseyecontact'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Respondstolightandsoundtoys.label('Respondstolightandsoundtoys'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmoveeyesupanddown.label('canmoveeyesupanddown'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmoveeyesleftandright.label('canmoveeyesleftandright'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_repeatswords.label('repeatswords'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsidentificationofnumber.label('knowsidentificationofnumber'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canrollpoundandsqueezeclay.label('canrollpoundandsqueezeclay'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyMom.label('vocabularyMom'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyDad.label('vocabularyDad'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Vocabularydog.label('Vocabularydog'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycat.label('vocabularycat'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularytree.label('vocabularytree'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularytable.label('vocabularytable'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularychair.label('vocabularychair'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycow.label('vocabularycow'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycrayons.label('vocabularycrayons'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybus.label('vocabularybus'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycar.label('vocabularycar'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybook.label('vocabularybook'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyapple.label('vocabularyapple'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybanana.label('vocabularybanana'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybottle.label('vocabularybottle'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Candostacking.label('Candostacking'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmaketower.label('canmaketower'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_respondstobubbles.label('respondstobubbles'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Identifieshappyandsad.label('Identifieshappyandsad'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Knowsshapes.label('Knowsshapes'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowscolors.label('knowscolors'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsanimals.label('knowsanimals'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsvehicles.label('knowsvehicles'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsbodyparts.label('knowsbodyparts'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsidentificationofalphabets.label('knowsidentificationofalphabets'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsmoreorless.label('knowsmoreorless'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsbigandsmall.label('knowsbigandsmall'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsnearandfar.label('knowsnearandfar'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifhisorher.label('canidentifhisorher'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifybag.label('canidentifybag'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifyshoes.label('canidentifyshoes'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifybottle.label('canidentifybottle'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialEdassessmenttwoyears.MSATWID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/SpecialEdassessmentthreeyearsReport', methods=['GET','POST'])
def SpecialEdassessmentthreeyearsReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpecialEdassessmentthreeyearsReport,
                                session.query(Model.models.Application.M_SpecialEdassessmentThreeyears.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_respondstoname.label('respondstoname'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_makeseyecontact.label('makeseyecontact'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cansitformins.label('cansitformins'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canmoveeyesupanddown.label('canmoveeyesupanddown'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canmoveeyesleftandright.label('canmoveeyesleftandright'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerfullname.label('cananswerfullname'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularybodyparts.label('vocabularybodyparts'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfollowstepsinstruction.label('canfollowstepsinstruction'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerold.label('cananswerold'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerwhatsyourmothersname.label('cananswerwhatsyourmothersname'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerwhichisyoufavoritecolour.label('cananswerwhichisyoufavoritecolour'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfixpiecepuzzle.label('canfixpiecepuzzle'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularyshapescircle.label('vocabularyshapescircle'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularycolors.label('vocabularycolors'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularywild.label('vocabularywild'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_Vocabularyfruits.label('Vocabularyfruits'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfollowstepinstruction.label('canfollowstepinstruction'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cansingrhymes.label('cansingrhymes'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerseeinsky.label('cangiveanswerseeinsky'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerswiminwater.label('cangiveanswerswiminwater'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerseeontree.label('cangiveanswerseeontree'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_knowsidentificationofalphabets.label('knowsidentificationofalphabets'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_knowsidentificationofnumbers.label('knowsidentificationofnumbers'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_Canholdapencilcrayon.label('Canholdapencilcrayon'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canscribble.label('canscribble'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cancoloringivenshape.label('cancoloringivenshape'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cantearandpaste.label('cantearandpaste'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionshappy.label('canidentifyemotionshappy'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionssad.label('canidentifyemotionssad'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionsangry.label('canidentifyemotionsangry'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionsupset.label('canidentifyemotionsupset'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialEdassessmentThreeyears.MSATWID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/SpecialEdassessmentthreefouryearsReport', methods=['GET','POST'])
def SpecialEdassessmentthreefouryearsReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpecialEdassessmentthreefouryearsReport,
                                session.query(Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_doesrespondtonamecall.label('doesrespondtonamecall'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_doesmakeseyecontact.label('doesmakeseyecontact'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_initiatesinteractiontoward.label('initiatesinteractiontoward'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cansitformins.label('cansitformins'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_understandinstructionslikestand.label('understandinstructionslikestand'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_getthatputthere.label('getthatputthere'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_givemegetthis.label('givemegetthis'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_runwalkjump.label('runwalkjump'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_lookdownup.label('lookdownup'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cananswerwhatis.label('cananswerwhatis'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cananswerfavoritecolour.label('cananswerfavoritecolour'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canfixpiecepuzzle.label('canfixpiecepuzzle'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularyshapes.label('vocabularyshapes'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularycolors.label('vocabularycolors'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularywild.label('vocabularywild'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularyfruits.label('vocabularyfruits'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularybodyparts.label('vocabularybodyparts'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_Canunderstandpositions.label('Canunderstandpositions'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cansingrhymes.label('cansingrhymes'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canunderstandstories.label('canunderstandstories'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canWhatquestions.label('canWhatquestions'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canidentifybasicobjects.label('canidentifybasicobjects'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canholdacrayonpencil.label('canholdacrayonpencil'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canmaketower.label('canmaketower'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canimitate.label('canimitate'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canplaydoughballs.label('canplaydoughballs'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canheshethrow.label('canheshethrow'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canrecognisealphabet.label('canrecognisealphabet'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_Canrecognisenumerals.label('Canrecognisenumerals'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cancolourgivenshape.label('cancolourgivenshape'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATWID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/SpecialEdassessmentfouryearsReport', methods=['GET','POST'])
def SpecialEdassessmentfouryearsReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpecialEdassessmentfouryearsReport,
                                session.query(Model.models.Application.M_SpecialAssessmentfourYrs.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_respondnamecall.label('respondnamecall'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_makeseyecontact.label('makeseyecontact'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_interactiontowardothers.label('interactiontowardothers'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cansitformins.label('cansitformins'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cananswerwhatname.label('cananswerwhatname'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_answerfavoritecolour.label('answerfavoritecolour'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canfixpiecepuzzle.label('canfixpiecepuzzle'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularyshapes.label('vocabularyshapes'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularycolors.label('vocabularycolors'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularywild.label('vocabularywild'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularybody.label('vocabularybody'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_Vocabularyfruits.label('Vocabularyfruits'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canunderstandpositions.label('canunderstandpositions'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cansingrhymes.label('cansingrhymes'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canunderstandstories.label('canunderstandstories'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_replyWhatquestions.label('replyWhatquestions'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_identifybasicobjects.label('identifybasicobjects'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_holdcrayonpencil.label('holdcrayonpencil'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canimitate.label('canimitate'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_doughmakeballs.label('doughmakeballs'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canthrow.label('canthrow'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_recognisealphabets.label('recognisealphabets'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_recognisenumerals.label('recognisenumerals'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cancolourshape.label('cancolourshape'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentfourYrs.MSATWID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/SpecialEdassessmentsevenyearsReport', methods=['GET','POST'])
def SpecialEdassessmentsevenyearsReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpecialEdassessmentsevenyearsReport,
                                session.query(Model.models.Application.M_SpecialAssessmentSevenYrs.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_putneedsminimalassistance.label('putneedsminimalassistance'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_eathandsonly.label('eathandsonly'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_fixasandwich.label('fixasandwich'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_givefirstlastname.label('givefirstlastname'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_cangiveaddress.label('cangiveaddress'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_awareofemotions.label('awareofemotions'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_canzipper.label('canzipper'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_independentlyassistanct.label('independentlyassistanct'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_asksmeaningfulquestions.label('asksmeaningfulquestions'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_tellsstorieswords.label('tellsstorieswords'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_Doestellage.label('Doestellage'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_canobeysimplecommands.label('canobeysimplecommands'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_readsimplewords.label('readsimplewords'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_writesimplewords.label('writesimplewords'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_namethingsaround.label('namethingsaround'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_alternatesfeetupdownstairs.label('alternatesfeetupdownstairs'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_pedaltricycle.label('pedaltricycle'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_catchandthrowball.label('catchandthrowball'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_towersmallblocks.label('towersmallblocks'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_doughmakeballs.label('doughmakeballs'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_tieshoes.label('tieshoes'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_holdpencilproperly.label('holdpencilproperly'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_drawsanyshape.label('drawsanyshape'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_usescissorscutshape.label('usescissorscutshape'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentSevenYrs.MSATWID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getSpecialedPage', methods=['POST','GET'])
def getSpecialedPage():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getSpecialedPage,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='getSpecialedPage',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    session.commit()
                    return jsonify(result=getTextField)

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getAssessmentPhycologyPage', methods=['POST','GET'])
def getAssessmentPhycologyPage():
    session=Session()
    try:
        if(request.method == "GET"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.getAssessmentPhycologyPage,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Path,'').label('path'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='getPhycologyPage',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )
                    session.commit()
                    return jsonify(result=getTextField)

                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DSMVASDCriteriaReport', methods=['GET','POST'])
def DSMVASDCriteriaReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.DSMVASDCriteriaReport,
                                session.query(Model.models.Application.M_DSMVASDCriteria.persistentDeficit.label('persistentDeficit'),
                                            Model.models.Application.M_DSMVASDCriteria.persistentDeficitComment.label('persistentDeficitComment'),
                                            Model.models.Application.M_DSMVASDCriteria.restrictedRepetitive.label('restrictedRepetitive'),
                                            Model.models.Application.M_DSMVASDCriteria.restrictedRepetitiveComment.label('restrictedRepetitiveComment'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsMust.label('symptomsMust'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsMustComment.label('symptomsMustComment'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsCause.label('symptomsCause'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsCauseComment.label('symptomsCauseComment'),
                                            Model.models.Application.M_DSMVASDCriteria.theseDisturbances.label('theseDisturbances'),
                                            Model.models.Application.M_DSMVASDCriteria.theseDisturbancesComment.label('theseDisturbancesComment'),
                                            Model.models.Application.M_DSMVASDCriteria.question7.label('question7'),
                                            Model.models.Application.M_DSMVASDCriteria.question7Comment.label('question7Comment'),
                                            Model.models.Application.M_DSMVASDCriteria.MDCID.label('Id')
                                                ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_DSMVASDCriteria.MDCID.desc()).all())

                    session.commit()
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitDSMVASDCriteria',methods=['GET','POST'])
def submitDSMVASDCriteria():
    session=Session()
    try:

        if(request.method == "POST"):
            BranchId= request.headers.get('branchId')
            request_json = request.get_json()
            persistentDeficit = request_json.get('persistentDeficit')
            restrictedRepetitive = request_json.get('restrictedRepetitive')
            persistentDeficitComment = request_json.get('persistentDeficitComment')
            restrictedRepetitiveComment = request_json.get('restrictedRepetitiveComment')
            symptomsCauseComment = request_json.get('symptomsCauseComment')
            symptomsCause = request_json.get('symptomsCause')
            symptomsMust = request_json.get('symptomsMust')
            symptomsMustComment = request_json.get('symptomsMustComment')
            theseDisturbances = request_json.get('theseDisturbances')
            theseDisturbancesComment = request_json.get('theseDisturbancesComment')
            question7 = request_json.get('question7')
            question7Comment = request_json.get('question7Comment')
            PID = request_json.get('PID')
            Aid = request_json.get('Aid')
            Id = request_json.get('Id')
            if(Id=='' or Id==None):
                Insert=Model.models.Application.M_DSMVASDCriteria()
                Insert.MI_AppointmentId=Aid
                Insert.M_Branch_MBID=int(BranchId)
                Insert.M_Patient_MPID=PID
                Insert.persistentDeficit=persistentDeficit
                Insert.persistentDeficitComment=persistentDeficitComment
                Insert.restrictedRepetitive=restrictedRepetitive
                Insert.restrictedRepetitiveComment=restrictedRepetitiveComment
                Insert.symptomsMust=symptomsMust
                Insert.symptomsMustComment=symptomsMustComment
                Insert.symptomsCause=symptomsCause
                Insert.symptomsCauseComment=symptomsCauseComment
                Insert.theseDisturbances=theseDisturbances
                Insert.theseDisturbancesComment=theseDisturbancesComment
                Insert.question7=question7
                Insert.question7Comment=question7Comment
                Insert.AddIP= flask.request.remote_addr
                Insert.AddDate= datetime.datetime.now()
                session.add(Insert)
                session.commit()
                session.close()
                print("success")

                return jsonify({'msg':'DSMVASD Criteria Added Successfully'})
            else:
                Insert=session.query(Model.models.Application.M_DSMVASDCriteria).get(Id)
                Insert.MI_AppointmentId=Aid
                Insert.M_Branch_MBID=int(BranchId)
                Insert.M_Patient_MPID=PID
                Insert.persistentDeficit=persistentDeficit
                Insert.persistentDeficitComment=persistentDeficitComment
                Insert.restrictedRepetitive=restrictedRepetitive
                Insert.restrictedRepetitiveComment=restrictedRepetitiveComment
                Insert.symptomsMust=symptomsMust
                Insert.symptomsMustComment=symptomsMustComment
                Insert.symptomsCause=symptomsCause
                Insert.symptomsCauseComment=symptomsCauseComment
                Insert.theseDisturbances=theseDisturbances
                Insert.theseDisturbancesComment=theseDisturbancesComment
                Insert.question7=question7
                Insert.question7Comment=question7Comment
                Insert.AddIP= flask.request.remote_addr
                Insert.ModDate = datetime.datetime.now()
                session.commit()
                session.close()
                print("success")

                return jsonify({'msg':'DSMVASD Criteria Updated Successfully'})
        else:
            return jsonify({'msg':'Wrong Method Used'})
    except:
        return jsonify({'msg':'token is invalid'})
    finally:
        session.close()

@app.route('/editDSMVASDCriteria', methods=['GET','POST'])
def editDSMVASDCriteria():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.editDSMVASDCriteria,
                                session.query(Model.models.Application.M_DSMVASDCriteria.persistentDeficit.label('persistentDeficit'),
                                            Model.models.Application.M_DSMVASDCriteria.persistentDeficitComment.label('persistentDeficitComment'),
                                            Model.models.Application.M_DSMVASDCriteria.restrictedRepetitive.label('restrictedRepetitive'),
                                            Model.models.Application.M_DSMVASDCriteria.restrictedRepetitiveComment.label('restrictedRepetitiveComment'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsMust.label('symptomsMust'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsMustComment.label('symptomsMustComment'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsCause.label('symptomsCause'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsCauseComment.label('symptomsCauseComment'),
                                            Model.models.Application.M_DSMVASDCriteria.theseDisturbances.label('theseDisturbances'),
                                            Model.models.Application.M_DSMVASDCriteria.theseDisturbancesComment.label('theseDisturbancesComment'),
                                            Model.models.Application.M_DSMVASDCriteria.question7.label('question7'),
                                            Model.models.Application.M_DSMVASDCriteria.question7Comment.label('question7Comment'),
                                            Model.models.Application.M_DSMVASDCriteria.MDCID.label('Id')
                                                ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_DSMVASDCriteria.MDCID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/viewDSMVASDCriteria', methods=['GET','POST'])
def viewDSMVASDCriteria():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    PID = request1.get('PID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewDSMVASDCriteria,
                                session.query(Model.models.Application.M_DSMVASDCriteria.persistentDeficit.label('persistentDeficit'),
                                            Model.models.Application.M_DSMVASDCriteria.persistentDeficitComment.label('persistentDeficitComment'),
                                            Model.models.Application.M_DSMVASDCriteria.restrictedRepetitive.label('restrictedRepetitive'),
                                            Model.models.Application.M_DSMVASDCriteria.restrictedRepetitiveComment.label('restrictedRepetitiveComment'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsMust.label('symptomsMust'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsMustComment.label('symptomsMustComment'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsCause.label('symptomsCause'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsCauseComment.label('symptomsCauseComment'),
                                            Model.models.Application.M_DSMVASDCriteria.theseDisturbances.label('theseDisturbances'),
                                            Model.models.Application.M_DSMVASDCriteria.theseDisturbancesComment.label('theseDisturbancesComment'),
                                            Model.models.Application.M_DSMVASDCriteria.question7.label('question7'),
                                            Model.models.Application.M_DSMVASDCriteria.question7Comment.label('question7Comment'),
                                            Model.models.Application.M_DSMVASDCriteria.MDCID.label('Id')
                                                ).filter_by(M_Patient_MPID=PID,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_DSMVASDCriteria.MDCID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

# @app.route('/DSMVASDCriteriaReport', methods=['GET','POST'])
# def DSMVASDCriteriaReport():
#     session=Session()
#     try:
#         if(request.method == "POST"):
#             if('Authorization' in request.headers):
#                 token= request.headers.get('Authorization')

#                 if not token:
#                     return jsonify({'MSG':'Token is missing'})
#                 data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
#                 if(data):
#                     request1= request.get_json()
#                     AID = request1.get('AID')
                    
#                     queryresult= Common_Function.CommonFun.convertToJson(
#                                 Constant.constant.constant.DSMVASDCriteriaReport,
#                                 session.query(Model.models.Application.M_DSMVASDCriteria.persistentDeficit.label('persistentDeficit'),
#                                             Model.models.Application.M_DSMVASDCriteria.persistentDeficitComment.label('persistentDeficitComment'),
#                                             Model.models.Application.M_DSMVASDCriteria.restrictedRepetitive.label('restrictedRepetitive'),
#                                             Model.models.Application.M_DSMVASDCriteria.restrictedRepetitiveComment.label('restrictedRepetitiveComment'),
#                                             Model.models.Application.M_DSMVASDCriteria.symptomsMust.label('symptomsMust'),
#                                             Model.models.Application.M_DSMVASDCriteria.symptomsMustComment.label('symptomsMustComment'),
#                                             Model.models.Application.M_DSMVASDCriteria.symptomsCause.label('symptomsCause'),
#                                             Model.models.Application.M_DSMVASDCriteria.symptomsCauseComment.label('symptomsCauseComment'),
#                                             Model.models.Application.M_DSMVASDCriteria.theseDisturbances.label('theseDisturbances'),
#                                             Model.models.Application.M_DSMVASDCriteria.theseDisturbancesComment.label('theseDisturbancesComment'),
#                                             Model.models.Application.M_DSMVASDCriteria.question7.label('question7'),
#                                             Model.models.Application.M_DSMVASDCriteria.question7Comment.label('question7Comment'),
#                                             Model.models.Application.M_DSMVASDCriteria.MDCID.label('Id')
#                                                 ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
#                                 ).order_by(Model.models.Application.M_DSMVASDCriteria.MDCID.desc()).all())


#                     return jsonify(result=queryresult)
#                 else:
#                     return jsonify({'err':'Token is expired'})
#             else:
#                 return jsonify({'err':'Please Login'})
#     finally:
#         session.close()


@app.route('/getIndianScaleAssessmentAutismForm', methods=['POST','GET'])
def getIndianScaleAssessmentAutismForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    queryResult= session.query(Model.models.Application.M_IndianScaleAssessmentAutism.MIID.label('Id'),
                            Model.models.Application.M_IndianScaleAssessmentAutism.SOCIALRECIPROCITY.label('SOCIALRECIPROCITY'),
                            Model.models.Application.M_IndianScaleAssessmentAutism.EMOTIONALRESPONSIVENESS.label('EMOTIONALRESPONSIVENESS'),
                            Model.models.Application.M_IndianScaleAssessmentAutism.SPEECHCOMMUNICATION.label('SPEECHCOMMUNICATION'),
                            Model.models.Application.M_IndianScaleAssessmentAutism.BEHAVIOURPATTERNS.label('BEHAVIOURPATTERNS'),
                            Model.models.Application.M_IndianScaleAssessmentAutism.SENSORYASPECTS.label('SENSORYASPECTS'),
                            Model.models.Application.M_IndianScaleAssessmentAutism.COGNITIVECOMPONENT.label('COGNITIVECOMPONENT'),
                            Model.models.Application.M_IndianScaleAssessmentAutism.FinalComment.label('FinalComment')
                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_IndianScaleAssessmentAutism.MIID.desc()).all()
                    getTextField= Common_Function.CommonFun.convertToJson(
                                    Constant.constant.constant.IndianScaleAssessmentAutism,
                                    session.query(Model.models.Application.M_FormControl,
                                            sqlalchemy.func.coalesce(Model.models.Application.M_Control.MC_ControlType,'').label('type'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('name'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Name,'').label('formControlName'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Label,'').label('label'),
                                            Model.models.Application.M_FormControl.MFC_Align.label('align'),
                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_Class_Name,'').label('className'),

                                            sqlalchemy.func.coalesce(Model.models.Application.M_FormControl.MFC_InitialValue,'').label('value')
                                ).filter_by(MFC_FormName='IndianScaleAssessmentAutism',MFC_IsActive=1,MFC_IsDeleted=0
                                            ).join(Model.models.Application.M_Control, Model.models.Application.M_Control.MCID==Model.models.Application.M_FormControl.M_Control_MCID
                                                ).all()
                            )

                    if(len(queryResult)==0):
                        return jsonify(result=getTextField)
                    else:
                        getTextField[0]['value'] = queryResult[0].SOCIALRECIPROCITY
                        getTextField[1]['value'] = queryResult[0].EMOTIONALRESPONSIVENESS
                        getTextField[2]['value'] = queryResult[0].SPEECHCOMMUNICATION
                        getTextField[3]['value'] = queryResult[0].BEHAVIOURPATTERNS
                        getTextField[4]['value'] = queryResult[0].SENSORYASPECTS
                        getTextField[5]['value'] = queryResult[0].COGNITIVECOMPONENT
                        getTextField[6]['value'] = queryResult[0].FinalComment
                        return jsonify({'result':getTextField , 'Id':queryResult[0].Id})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/getAllArticles', methods=['POST','GET'])
def getAllArticles():
    session = Session()
    try:
        if(flask.request.method == 'GET'):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    Articles= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getAllArticles,
                                    session.query(Model.models.Application.T_Articles.TAID.label('Id'),
                                                        sqlalchemy.func.coalesce(Model.models.Application.T_Articles.TA_Title,'').label('articleTitle'),
                                                        Model.models.Application.T_Articles.TA_Thumbnail.label('articleThumbnail'),
                                                        Model.models.Application.T_Articles.TA_Description.label('articleDesc'),
                                                        ).filter_by(TA_IsActive=1,TA_IsDeleted=0).all())
                    
                    return jsonify(result=Articles)
                    
                else:
                    return redirect('/')
            else:
                return redirect('/')
        else:
            return jsonify({'error':'Method is not allowed'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/deleteArticle', methods=['POST','GET'])
def deleteArticle():
    session = Session()
    try:
        if(flask.request.method == 'POST'):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    Id=request.get_json()
                    if(Id != '' and Id != None):
                        session.query(Model.models.Application.T_Articles
                                    ).filter(Model.models.Application.T_Articles.TAID==Id
                                    ).update({Model.models.Application.T_Articles.TA_IsDeleted:1,
                                              Model.models.Application.T_Articles.TA_ModDate:datetime.datetime.now()})
                        session.commit()
                        return jsonify({'msg':'Article Deleted Successfully'})
                    
                else:
                    return redirect('/')
            else:
                return redirect('/')
        else:
            return jsonify({'error':'Method is not allowed'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitDSMVASDCriteriass',methods=['GET','POST'])
def submitDSMVASDCriteriass():
    session=Session()
    try:

        if(request.method == "POST"):
            
            file=flask.request.files['files[]']
            Excel_File=pd.read_excel(file)
            dataset=Excel_File.fillna("")
            col=list(dataset.columns.values.tolist())
            df = pd.DataFrame(dataset, columns=col)
            counter = 0
            for row in df.itertuples():
            
                pname = row[2]
                email = row[6]
                mobile = row[15]
                address = row[9]
                gender = row[8]
                dob = row[7]

                Allergies = row[11]
                state = row[13]
                Addate = row[14]
                oldid = row[16]
                city = row[12]
                BloodGroup = row[10]
                BranchId = row[1]
                
                getClinic= session.query(Model.models.Application.M_Branch.MB_Code
                                ).filter_by(MBID=int(BranchId),MB_IsActive=1,MB_IsDeleted=0).all()

                totalPatientinbranch= session.query(Model.models.Application.M_Patient.MP_UHID
                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0).order_by(Model.models.Application.M_Patient.MPID.desc()).first()
                clinicname=getClinic[0].MB_Code
                sn=len(totalPatientinbranch) + 1
                lastPatientIDs = totalPatientinbranch[0]
                lastPatientID=  lastPatientIDs[-5:]
                newPatientID= str(int(lastPatientID)+1).zfill(5)
                UHID='CK'+str(clinicname) + str(newPatientID)
                totalPatient= session.query(Model.models.Application.M_Patient.MP_UHID
                                ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MP_Mobile=mobile,MP_Name=pname).order_by(Model.models.Application.M_Patient.MPID.desc()).all()
                if(dob!=''):
                    if(type(dob)==str):
                        date2 = datetime.datetime.strptime(dob, '%m-%d-%Y').date()
                        date3 = date2.strftime('%Y-%m-%d')
                    else:
                        date3 = dob.strftime('%Y-%m-%d')
                else:
                    date3 =''
                
                if(len(totalPatient)==0):
                    Insert=Model.models.Application.M_Patient()
                    Insert.MP_UHID=UHID
                    Insert.MP_Name=pname
                    Insert.MP_Email=email
                    Insert.MP_Mobile=mobile
                    Insert.MP_Address=address
                    if(gender!='' and gender!=None):
                        Insert.MP_Gender=gender
                    if(date3!='' and date3!=None):
                        Insert.MP_DOB=date3
                    if(BloodGroup!='' and BloodGroup!=None):
                        Insert.MP_BloodGroup=BloodGroup
                    Insert.MP_City=city
                    Insert.MP_Code=oldid
                    Insert.MP_CountryCode='+91'
                    Insert.MP_Allergies=Allergies
                    Insert.MP_State=state
                    Insert.M_Branch_MBID=BranchId
                    Insert.MP_AddDate = Addate #datetime.datetime.now()
                    Insert.MP_AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    print("success")
                else:
                    counter += 1
            return jsonify({'msg':'Done','fail':counter})            
                
        else:
            return jsonify({'msg':'Wrong Method Used'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitCKASAssessmentForm', methods=['GET','POST'])
def submitCKASAssessmentForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    CKASConsistentEyeContact = request_json.get('question1')
                    CKASPointsTowardsObject = request_json.get('question2')
                    CKASFollowSimpleCommand = request_json.get('question3')
                    CKASRespondWhencalled = request_json.get('question4')
                    CKASTryToCopy = request_json.get('question5')
                    CKASCallOutMama = request_json.get('question6')
                    CKASInterestInplaying = request_json.get('question7')
                    CKASLimitedUseofLanguage = request_json.get('question8')
                    CKASFrequentEyeBlinkt = request_json.get('question9')
                    CKASClimbWithoutScare = request_json.get('question10')
                    CKASSpeakNonContextly = request_json.get('question11')
                    CKASIndicateTowardsObject = request_json.get('question12')
                    CKASAnyRegression = request_json.get('question13')
                    score = request_json.get('score')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    if(Id=='' or Id==None):
                        Insert=Model.models.Application.M_CKASAssessment()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MCA_CKASConsistentEyeContact=CKASConsistentEyeContact
                        Insert.MCA_CKASPointsTowardsObject=CKASPointsTowardsObject
                        Insert.MCA_CKASFollowSimpleCommand=CKASFollowSimpleCommand
                        Insert.MCA_CKASRespondWhencalled=CKASRespondWhencalled
                        Insert.MCA_CKASTryToCopy=CKASTryToCopy
                        Insert.MCA_CKASCallOutMama=CKASCallOutMama
                        Insert.MCA_CKASInterestInplaying=CKASInterestInplaying
                        Insert.MCA_CKASLimitedUseofLanguage=CKASLimitedUseofLanguage
                        Insert.MCA_CKASFrequentEyeBlinkt=CKASFrequentEyeBlinkt
                        Insert.MCA_CKASClimbWithoutScare=CKASClimbWithoutScare
                        Insert.MCA_CKASSpeakNonContextly=CKASSpeakNonContextly
                        Insert.MCA_CKASIndicateTowardsObject=CKASIndicateTowardsObject
                        Insert.MCA_CKASAnyRegression=CKASAnyRegression
                        Insert.MCA_CKASscore=score
                        
                        Insert.MCA_AddDate = datetime.datetime.now()
                        Insert.MCA_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'CKAS Assessment Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_CKASAssessment).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MCA_CKASConsistentEyeContact=CKASConsistentEyeContact
                        Insert.MCA_CKASPointsTowardsObject=CKASPointsTowardsObject
                        Insert.MCA_CKASFollowSimpleCommand=CKASFollowSimpleCommand
                        Insert.MCA_CKASRespondWhencalled=CKASRespondWhencalled
                        Insert.MCA_CKASTryToCopy=CKASTryToCopy
                        Insert.MCA_CKASCallOutMama=CKASCallOutMama
                        Insert.MCA_CKASInterestInplaying=CKASInterestInplaying
                        Insert.MCA_CKASLimitedUseofLanguage=CKASLimitedUseofLanguage
                        Insert.MCA_CKASFrequentEyeBlinkt=CKASFrequentEyeBlinkt
                        Insert.MCA_CKASClimbWithoutScare=CKASClimbWithoutScare
                        Insert.MCA_CKASSpeakNonContextly=CKASSpeakNonContextly
                        Insert.MCA_CKASIndicateTowardsObject=CKASIndicateTowardsObject
                        Insert.MCA_CKASAnyRegression=CKASAnyRegression
                        Insert.MCA_CKASscore=score
                        
                        Insert.MCA_AddDate = datetime.datetime.now()
                        Insert.MCA_AddIP= flask.request.remote_addr
                        session.commit()
                        return jsonify({'msg':'CKAS Assessment Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewCKASAssessmentForm', methods=['GET','POST'])
def viewCKASAssessmentForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewCKASAssessmentForm,
                                session.query(Model.models.Application.M_CKASAssessment.MCAID.label('ID'),
                            Model.models.Application.M_CKASAssessment.M_AppointmentID.label('Appointment ID'),
                            sqlalchemy.func.date_format(Model.models.Application.M_CKASAssessment.MCA_AddDate,'%d-%b-%Y').label('Date'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASscore.label('Score')
                                            
                                                ).filter_by(M_Patient_MPID=pid,MCA_IsActive=1,MCA_IsDeleted=0
                                ).order_by(Model.models.Application.M_CKASAssessment.MCAID.desc()).all())
                    session.commit()
                    return jsonify(result=queryresult)
                    # queryresult= session.query(Model.models.Application.M_CKASAssessment.MCAID.label('ID'),
                    #                         Model.models.Application.M_CKASAssessment.MCA_CKASscore.label('Score')
                                            
                    #                             ).filter_by(M_Patient_MPID=pid,MCA_IsActive=1,MCA_IsDeleted=0
                    #             ).order_by(Model.models.Application.M_CKASAssessment.MCAID.desc()).all()

                    # if(len(queryresult)>0):
                    #     return jsonify(result={'Score':queryresult[0].Score})
                    # else:
                    #     return jsonify(result={'Score':''})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitCKADHDScreening', methods=['GET','POST'])
def submitCKADHDScreening():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    question1 = request_json.get('question1')
                    question2 = request_json.get('question2')
                    question3 = request_json.get('question3')
                    question4 = request_json.get('question4')
                    question5 = request_json.get('question5')
                    question6 = request_json.get('question6')
                    question7 = request_json.get('question7')
                    question8 = request_json.get('question8')
                    question9 = request_json.get('question9')
                    question10 = request_json.get('question10')
                    question11 = request_json.get('question11')
                    question12 = request_json.get('question12')
                    question13 = request_json.get('question13')
                    question14 = request_json.get('question14')
                    question15 = request_json.get('question15')
                    question16 = request_json.get('question16')
                    question17 = request_json.get('question17')
                    question18 = request_json.get('question18')
                    question19 = request_json.get('question19')
                    question20 = request_json.get('question20')
                    question21 = request_json.get('question21')
                    
                    often23Count = request_json.get('often2Count')
                    often23Count2 = request_json.get('often2Count2')
                    often23Count3 = request_json.get('often2Count3')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    if(Id=='' or Id==None):
                        Insert=Model.models.Application.M_CKADHDScreening()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.mistakesinschoolwork=question1
                        Insert.playactivities=question2
                        Insert.spokentodirectly=question3
                        Insert.failstofinishschool=question4
                        Insert.difficulttoorganize=question5
                        Insert.reluctantlyengages=question6
                        Insert.losethings=question7
                        Insert.distractedbyextraneous=question8
                        Insert.dailyactivities=question9
                        Insert.maintainalertness=question10
                        Insert.squirmsinseat=question11
                        Insert.seatinclassroom=question12
                        Insert.climbsexcessively=question13
                        Insert.leisureactivities=question14
                        Insert.drivenbyamotor=question15
                        Insert.Talksexcessively=question16
                        Insert.answersbefore=question17
                        Insert.difficulttosit=question18
                        Insert.symptomspresent=question19
                        Insert.symptomsleading=question20
                        Insert.symptomsaffecting=question21
                        
                        Insert.Score1to9=often23Count
                        Insert.Score10to18=often23Count2
                        Insert.Score19to21=often23Count3
                        
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'CK-ADHD Screening Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_CKADHDScreening).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.mistakesinschoolwork=question1
                        Insert.playactivities=question2
                        Insert.spokentodirectly=question3
                        Insert.failstofinishschool=question4
                        Insert.difficulttoorganize=question5
                        Insert.reluctantlyengages=question6
                        Insert.losethings=question7
                        Insert.distractedbyextraneous=question8
                        Insert.dailyactivities=question9
                        Insert.maintainalertness=question10
                        Insert.squirmsinseat=question11
                        Insert.seatinclassroom=question12
                        Insert.climbsexcessively=question13
                        Insert.leisureactivities=question14
                        Insert.drivenbyamotor=question15
                        Insert.Talksexcessively=question16
                        Insert.answersbefore=question17
                        Insert.difficulttosit=question18
                        Insert.symptomspresent=question19
                        Insert.symptomsleading=question20
                        Insert.symptomsaffecting=question21
                        
                        Insert.Score1to9=often23Count
                        Insert.Score10to18=often23Count2
                        Insert.Score19to21=often23Count3
                        
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        session.commit()
                        return jsonify({'msg':'CK-ADHD Screening Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewCKADHDScreening', methods=['GET','POST'])
def viewCKADHDScreening():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewCKADHDScreening,
                                session.query(Model.models.Application.M_CKADHDScreening.MCKID.label('ID'),
                                            Model.models.Application.M_CKADHDScreening.Score1to9.label('A19'),
                                            Model.models.Application.M_CKADHDScreening.Score10to18.label('B1018'),
                                            Model.models.Application.M_CKADHDScreening.Score19to21.label('C1921'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKADHDScreening.MCKID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()                    
                    

@app.route('/submitCKFU', methods=['GET','POST'])
def submitCKFU():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    question1 = request_json.get('question1')
                    question2 = request_json.get('question2')
                    question3 = request_json.get('question3')
                    question4 = request_json.get('question4')
                    question5 = request_json.get('question5')
                    question6 = request_json.get('question6')
                    question7 = request_json.get('question7')
                    question8 = request_json.get('question8')
                    question9 = request_json.get('question9')
                    question10 = request_json.get('question10')
                    question11 = request_json.get('question11')
                    question12 = request_json.get('question12')
                    question13 = request_json.get('question13')
                    question14 = request_json.get('question14')
                    question15 = request_json.get('question15')
                    question16 = request_json.get('question16')
                    question17 = request_json.get('question17')
                    question18 = request_json.get('question18')
                    question19 = request_json.get('question19')
                    question20 = request_json.get('question20')
                    question21 = request_json.get('question21')
                    question22 = request_json.get('question22')
                    question23 = request_json.get('question23')
                    question24 = request_json.get('question24')
                    question25 = request_json.get('question25')
                    question26 = request_json.get('question26')
                    question27 = request_json.get('question27')
                    question28 = request_json.get('question28')
                    question29 = request_json.get('question29')
                    question30 = request_json.get('question30')
                    question31 = request_json.get('question31')
                    question32 = request_json.get('question32')
                    question33 = request_json.get('question33')
                    question34 = request_json.get('question34')
                    question35 = request_json.get('question35')
                    question36 = request_json.get('question36')
                    question37 = request_json.get('question37')
                    question38 = request_json.get('question38')
                    question39 = request_json.get('question39')
                    question40 = request_json.get('question40')
                    question41 = request_json.get('question41')
                    question42 = request_json.get('question42')
                    question43 = request_json.get('question43')
                    question44 = request_json.get('question44')
                    Score = request_json.get('Score')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_CKFUForm()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    Insert.Noncontextual=question1
                    Insert.Picapresent=question2
                    Insert.Responsetosound=question3
                    Insert.Indicatepottyneeds=question4
                    Insert.Givesattentionwhere=question5
                    Insert.Indicateurineneeds=question6
                    Insert.Walksbetweenpeople=question7
                    Insert.SleepProblemsinitiation=question8
                    Insert.DoesNotUnderstandtone=question9
                    Insert.Overtlysensitivetoweird=question10
                    Insert.Isnotimaginativebad=question11
                    Insert.Overtlysensitivetotextures=question12
                    Insert.Overtlysensitivetosmell=question13
                    Insert.Toewalkingpresent=question14
                    Insert.Notablecommunicatefeelings=question15
                    Insert.unusualeyecontact=question16
                    Insert.Likesshadowssideward=question17
                    Insert.Notabletoimitateothers=question18
                    Insert.Doesnotplayproperly=question19
                    Insert.Doesnotoffercomfort=question20
                    Insert.Difficultyrelatingtoadults=question21
                    Insert.Difficultyrelatingtopeers=question22
                    Insert.Doesnotrespondappropriately=question23
                    Insert.Wandersaimlessly=question24
                    Insert.Toosillyorlaughs=question25
                    Insert.Difficultyanswering=question26
                    Insert.Talkswithunusualtone=question27
                    Insert.Emotionallydistant=question28
                    Insert.Movingincirclespresent=question29
                    Insert.Seemsmorefidgety=question30
                    Insert.Wouldratherbealone=question31
                    Insert.Likesparallelplay=question32
                    Insert.Avoidsstartingsocial=question33
                    Insert.Staresorgazesoff=question34
                    Insert.Feedingchewingisaconcern=question35
                    Insert.Hyperactivitypresent=question36
                    Insert.Behavesinwaysthat=question37
                    Insert.Showsunusualsensory=question38
                    Insert.Thinksortalksabout=question39
                    Insert.Hasanunusuallynarrow=question40
                    Insert.Doesextremelywell=question41
                    Insert.Hasrepetitiveodd=question42
                    Insert.Dislikesbeing=question43
                    Insert.DoesntrespondtoNo=question44
                    Insert.Score=Score
                    
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'CK- Follow Up Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewCKFollowUp', methods=['GET','POST'])
def viewCKFollowUp():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= session.query(Model.models.Application.M_CKFUForm.FUID.label('ID'),
                                            Model.models.Application.M_CKFUForm.Score.label('Score')
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKFUForm.FUID.desc()).all()

                    if(len(queryresult)>0):
                        return jsonify(result={'Score':queryresult[0].Score})
                    else:
                        return jsonify(result={'Score':''})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    finally:
        session.close()

@app.route('/submitCKDevelopmental', methods=['GET','POST'])
def submitCKDevelopmental():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    question1 = request_json.get('question1')
                    question2 = request_json.get('question2')
                    question3 = request_json.get('question3')
                    question4 = request_json.get('question4')
                    question5 = request_json.get('question5')
                    question6 = request_json.get('question6')
                    question7 = request_json.get('question7')
                    question8 = request_json.get('question8')
                    question9 = request_json.get('question9')
                    question10 = request_json.get('question10')
                    question11 = request_json.get('question11')
                    question12 = request_json.get('question12')
                    question13 = request_json.get('question13')
                    question14 = request_json.get('question14')
                    question15 = request_json.get('question15')
                    question16 = request_json.get('question16')
                    question17 = request_json.get('question17')
                    question18 = request_json.get('question18')
                    question19 = request_json.get('question19')
                    question20 = request_json.get('question20')
                    question21 = request_json.get('question21')
                    question22 = request_json.get('question22')
                    question23 = request_json.get('question23')
                    question24 = request_json.get('question24')
                    question25 = request_json.get('question25')
                    question26 = request_json.get('question26')
                    question27 = request_json.get('question27')
                    question28 = request_json.get('question28')
                    question29 = request_json.get('question29')
                    question30 = request_json.get('question30')
                    question31 = request_json.get('question31')
                    question32 = request_json.get('question32')
                    question33 = request_json.get('question33')
                    question34 = request_json.get('question34')
                    question35 = request_json.get('question35')
                    question36 = request_json.get('question36')
                    question37 = request_json.get('question37')
                    question38 = request_json.get('question38')
                    question39 = request_json.get('question39')
                    question40 = request_json.get('question40')
                    question41 = request_json.get('question41')
                    question42 = request_json.get('question42')
                    question43 = request_json.get('question43')
                    question44 = request_json.get('question44')
                    question45 = request_json.get('question45')
                    question46 = request_json.get('question46')
                    question47 = request_json.get('question47')
                    question48 = request_json.get('question48')
                    question49 = request_json.get('question49')
                    question50 = request_json.get('question50')
                    question51 = request_json.get('question51')
                    question52 = request_json.get('question52')
                    question53 = request_json.get('question53')
                    question54 = request_json.get('question54')
                    question55 = request_json.get('question55')
                    question56 = request_json.get('question56')
                    question57 = request_json.get('question57')
                    question58 = request_json.get('question58')
                    question59 = request_json.get('question59')
                    question60 = request_json.get('question60')
                    question61 = request_json.get('question61')
                    question62 = request_json.get('question62')
                    question63 = request_json.get('question63')
                    question64 = request_json.get('question64')
                    question65 = request_json.get('question65')
                    question66 = request_json.get('question66')
                    question67 = request_json.get('question67')
                    question68 = request_json.get('question68')
                    question69 = request_json.get('question69')
                    question70 = request_json.get('question70')
                    question71 = request_json.get('question71')
                    question72 = request_json.get('question72')
                    question73 = request_json.get('question73')
                    question74 = request_json.get('question74')
                    question75 = request_json.get('question75')
                    question76 = request_json.get('question76')
                    question77 = request_json.get('question77')
                    question78 = request_json.get('question78')
                    question79 = request_json.get('question79')
                    question80 = request_json.get('question80')
                    question81 = request_json.get('question81')
                    question82 = request_json.get('question82')
                    question83 = request_json.get('question83')
                    question84 = request_json.get('question84')
                    question85 = request_json.get('question85')
                    question86 = request_json.get('question86')
                    question87 = request_json.get('question87')
                    question88 = request_json.get('question88')
                    question89 = request_json.get('question89')
                    question90 = request_json.get('question90')
                    question91 = request_json.get('question91')
                    question92 = request_json.get('question92')
                    question93 = request_json.get('question93')
                    question94 = request_json.get('question94')
                    question95 = request_json.get('question95')
                    question96 = request_json.get('question96')
                    question97 = request_json.get('question97')
                    question98 = request_json.get('question98')
                    question99 = request_json.get('question98')
                    question100 = request_json.get('question100')
                    question101 = request_json.get('question101')
                    question102 = request_json.get('question102')
                    question103 = request_json.get('question103')
                    question104 = request_json.get('question104')
                    question105 = request_json.get('question105')
                    question106 = request_json.get('question106')
                    question107 = request_json.get('question107')
                    
                    
                    
                    grossmotoryes = request_json.get('grossmotoryes')
                    grossmotorno = request_json.get('grossmotorno')
                    finemotoryes = request_json.get('finemotoryes')
                    finemotorno = request_json.get('finemotorno')
                    selfhelpyes = request_json.get('selfhelpyes')
                    selfhelpno = request_json.get('selfhelpno')
                    problemsolvingyes = request_json.get('problemsolvingyes')
                    problemsolvingno = request_json.get('problemsolvingno')
                    emotionalyes = request_json.get('emotionalyes')
                    emotionalno = request_json.get('emotionalno')
                    receptiveyes = request_json.get('receptiveyes')
                    receptiveno = request_json.get('receptiveno')
                    expressiveyes = request_json.get('expressiveyes')
                    expressiveno = request_json.get('expressiveno')
                    socialyes = request_json.get('socialyes')
                    socialno = request_json.get('socialno')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_CKDevelopmental()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    Insert.canlifttheheadup=question1
                    Insert.triestostabilizehead=question2
                    Insert.lessroundingofback=question3
                    Insert.canstabiliseheadfully=question4
                    Insert.Rollsfromfronttoback=question5
                    Insert.Cansitwithoutsupport=question6
                    Insert.Bearswholebodyweightonlegs=question7
                    Insert.Standswellwitharmshigh=question8
                    Insert.Cruisesfurnitureusinonehand=question9
                    Insert.Walkswithonehandheld=question10
                    Insert.Standsononefootwithslight=question11
                    Insert.Seatsselfinsmallchair=question12
                    Insert.Throwsballwhilestanding=question13
                    Insert.Walksdownstairsholdingrail=question14
                    Insert.Kicksballwithoutdemonstration=question15
                    Insert.Squatsinplay=question16
                    Insert.Walkupstairswithrail=question17
                    Insert.Jumpsinplace=question18
                    Insert.Standswithbothfeetonbalance=question19
                    Insert.Balancesononefootfor3seconds=question20
                    Insert.Goesupstairsnorails=question21
                    Insert.Pedalstricycle=question22
                    Insert.Balancesononefoot4to8second=question23
                    Insert.Hopononefoottwotothreetimes=question24
                    Insert.Standingbroadjump1to2feet=question25
                    Insert.Gallops=question26
                    Insert.Throwsballoverhand10feet=question27
                    Insert.Catchesbouncedball=question28
                    Insert.Walksdownstairswithrail=question29
                    Insert.Balanceononefoot8seconds=question30
                    Insert.Hopononefoot15times=question31
                    Insert.Canskip=question32
                    Insert.Runbroadjumpapproximately2to3feet=question33
                    Insert.Walksbackwardheeltoe=question34
                    
                    Insert.Handsunfisted=question35
                    Insert.Watchesmovement=question36
                    Insert.Whenrattleifplaced=question37
                    Insert.Dropsoneobjectfrom=question38
                    Insert.Abletoholdobjects=question39
                    Insert.Reachesdanglingobjects=question40
                    Insert.pickupobjectsofsmallsize=question41
                    Insert.Canbangtoysontable=question42
                    Insert.Cantransferobjectfromonehandtoanother=question43
                    Insert.Scribblesafterdemonstration=question44
                    Insert.Canholdacrayon=question45
                    Insert.Attemptsputtingoneblock=question46
                    Insert.Makesfourblocktower=question47
                    Insert.Places10blocksinacontainer=question48
                    Insert.Crudelycopiesverticallines=question49
                    Insert.Makesasinglelinetrain=question50
                    Insert.Imitatescircle=question51
                    Insert.Imitateshorizontalline=question52
                    Insert.Stringslargebeadsawkwardly=question53
                    Insert.Unscrewsjarlid=question54
                    Insert.Turnspaperpages=question55
                    Insert.Copiescircle=question56
                    Insert.Cutswithscissors=question57
                    Insert.Stringssmallbeadswell=question58
                    Insert.Imitatescomplexfigureswithblocks=question59
                    Insert.Canusescissorsinabetterway=question60
                    Insert.Washeshandonhisown=question61
                    Insert.Copiessquare=question62
                    Insert.Tiessingleknot=question63
                    Insert.Writespartoffirstname=question64
                    Insert.Putspapercliponpaper=question65
                    Insert.Canuseclothespins=question66
                    Insert.Cutswithscissors=question67
                    Insert.Buildsstairsfrommodel=question68
                    Insert.Drawsdiamond=question69
                    Insert.Writesfirstandlastname=question70
                    Insert.Turnsheadtowardssound=question71
                    Insert.Opensmouthatthesiteofbreast=question72
                    Insert.Suckingestablished=question73
                    Insert.Gumsmouthspureedfood=question74
                    Insert.Placeshandsonbottle=question75
                    Insert.Drinksfromcupwhen=question76
                    Insert.Canholdownbottle=question77
                    Insert.Canholdabiscuittofeed=question78
                    Insert.Biteschewsfood=question79
                    Insert.Cooperateswithdressing=question80
                    Insert.Fingerfeedspartofmeal=question81
                    Insert.Takesoffshoescapetc=question82
                    Insert.Removessocksshoes=question83
                    Insert.Putsspooninmouth=question84
                    Insert.Attemptstobrushownhair=question85
                    Insert.Opensdoorusingsknob=question86
                    Insert.Takesoffclotheswithoutbuttons=question87
                    Insert.Pullsoffpants=question88
                    Insert.Washeshands=question89
                    Insert.Putsthingsaway=question90
                    Insert.Brushesteethwithassistance=question91
                    Insert.Poursliquidfromonecontainer=question92
                    Insert.Independenteating=question93
                    Insert.Putsonshoeswithoutlaces=question94
                    Insert.Unbuttons=question95
                    Insert.Goestotoiletalone=question96
                    Insert.Washesafterbowelmovement=question97
                    Insert.Washesfaceonhisown=question98
                    Insert.Brushesteethalone=question99
                    Insert.Buttons=question100
                    Insert.Usesforkwell=question101
                    Insert.Spreadswithknife=question102
                    Insert.Independentdressing=question103
                    Insert.BathesIndependently=question104
                    Insert.Combshair=question105
                    Insert.Looksbothwaysatstreet=question106
                    
                    # Insert.Reachesforface=question107
                    # Insert.Followsdanglingobjectsfrom=question108
                    # Insert.Looksatobjectsinmidline=question109
                    # Insert.Touchesreflectioninmirror=question110
                    # Insert.Removesclothonface=question111
                    # Insert.Bangsandshakestoys=question112
                    # Insert.Imitatessimpleacts=question113
                    # Insert.Patsimageofselfinmirror=question114
                    # Insert.Reachespersistentlyforobjects=question115
                    # Insert.Couldlocaliseahiddentoy=question116
                    # Insert.Looksatpicturesinbook=question117
                    # Insert.Rattlesspoonincup=question118
                    # Insert.Dumpspelletoutofbottle=question119
                    # Insert.Turnspagesinbook=question120
                    # Insert.Findstoyobservedtobehidden=question121
                    # Insert.Matchesobjectstopictures=question122
                    # Insert.Sortsobjects=question123
                    # Insert.Showsuseoffamiliarobjects=question124
                    # Insert.Matchesshapes=question125
                    # Insert.Matchescolors=question126
                    # Insert.Pointstosmalldetails=question127
                    # Insert.Drawatwotothree=question128
                    # Insert.Understandslongshort=question129
                    # Insert.Knowsowngender=question130
                    # Insert.Knowsownage=question131
                    # Insert.Matcheslettersnumerals=question132
                    # Insert.Drawsafourtosixpartperson=question133
                    # Insert.Cangiveamounts=question134
                    # Insert.Understandssimplenalogies=question135
                    # Insert.Pointstofivetosixcolors=question136
                    # Insert.Pointstolettersnumerals=question137
                    # Insert.Readseveralcommon=question138
                    # Insert.Looksbothwaysatstreet=question139
                    # Insert.Looksbothwaysatstreet=question140
                    # Insert.Looksbothwaysatstreet=question141
                    # Insert.Looksbothwaysatstreet=question142
                    # Insert.Looksbothwaysatstreet=question143
                    
                    
                    
                    
                    Insert.grossmotoryes=grossmotoryes
                    Insert.grossmotorno =grossmotorno 
                    Insert.finemotoryes=finemotoryes
                    Insert.finemotorno=finemotorno
                    Insert.selfhelpyes=selfhelpyes
                    Insert.selfhelpno=selfhelpno
                    Insert.problemsolvingyes=problemsolvingyes
                    Insert.problemsolvingno=problemsolvingno
                    Insert.emotionalyes=emotionalyes
                    Insert.emotionalno=emotionalno
                    Insert.receptiveyes=receptiveyes
                    Insert.receptiveno=receptiveno
                    Insert.expressiveyes=expressiveyes
                    Insert.expressiveno=expressiveno
                    Insert.socialyes=socialyes
                    Insert.socialno=socialno
                    
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'CK Developmental Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewCKDevelopScreening', methods=['GET','POST'])
def viewCKDevelopScreening():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewCKDevelopScreening,
                                session.query(Model.models.Application.M_CKDevelopmental.CKDID.label('ID'),
                                            Model.models.Application.M_CKDevelopmental.grossmotoryes.label('grossmotoryes'),
                                            Model.models.Application.M_CKDevelopmental.grossmotorno.label('grossmotorno'),
                                            Model.models.Application.M_CKDevelopmental.finemotoryes.label('finemotoryes'),
                                            Model.models.Application.M_CKDevelopmental.finemotorno.label('finemotorno'),
                                            Model.models.Application.M_CKDevelopmental.selfhelpyes.label('selfhelpyes'),
                                            Model.models.Application.M_CKDevelopmental.selfhelpno.label('selfhelpno'),
                                            Model.models.Application.M_CKDevelopmental.problemsolvingyes.label('problemsolvingyes'),
                                            Model.models.Application.M_CKDevelopmental.problemsolvingno.label('problemsolvingno'),
                                            Model.models.Application.M_CKDevelopmental.emotionalyes.label('emotionalyes'),
                                            Model.models.Application.M_CKDevelopmental.emotionalno.label('emotionalno'),
                                            Model.models.Application.M_CKDevelopmental.receptiveyes.label('receptiveyes'),
                                            Model.models.Application.M_CKDevelopmental.receptiveno.label('receptiveno'),
                                            Model.models.Application.M_CKDevelopmental.expressiveyes.label('expressiveyes'),
                                            Model.models.Application.M_CKDevelopmental.expressiveno.label('expressiveno'),
                                            Model.models.Application.M_CKDevelopmental.socialyes.label('socialyes'),
                                            Model.models.Application.M_CKDevelopmental.socialno.label('socialno'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKDevelopmental.CKDID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()                    

@app.route('/submitProvisionalDiagForm',methods=['GET','POST'])
def submitProvisionalDiagForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Comment = request_json.get('comment')
                    Aid = request_json.get('AID')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_ProvisionalDiag()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MP_Comment=Comment
                        Insert.MP_AddUser= data['id']
                        Insert.MP_AddDate = datetime.datetime.now()
                        Insert.MP_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Provisional Diagnosis Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_ProvisionalDiag).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MP_Comment=Comment
                        Insert.MP_ModUser= data['id']
                        Insert.MP_ModDate = datetime.datetime.now()
                        Insert.MP_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Provisional Diagnosis Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitParentConcernForm',methods=['GET','POST'])
def submitParentConcernForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Comment = request_json.get('comment')
                    Aid = request_json.get('AID')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_ParentConcern()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MP_Comment=Comment
                        Insert.MP_AddUser= data['id']
                        Insert.MP_AddDate = datetime.datetime.now()
                        Insert.MP_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Parent Concern Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_ParentConcern).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MP_Comment=Comment
                        Insert.MP_ModUser= data['id']
                        Insert.MP_ModDate = datetime.datetime.now()
                        Insert.MP_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Parent Concern Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitlanguageExposureForm',methods=['GET','POST'])
def submitlanguageExposureForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    SpokenAtHome = request_json.get('languageSpoken')
                    FamilyModel = request_json.get('familyModel')
                    CommunicationMode = request_json.get('modeOfCommunication')
                    Aid = request_json.get('AID')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_LanguageExposure()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MP_SpokenAtHome=SpokenAtHome
                        Insert.MP_FamilyModel=FamilyModel
                        Insert.MP_CommunicationMode=CommunicationMode
                        Insert.MP_AddUser= data['id']
                        Insert.MP_AddDate = datetime.datetime.now()
                        Insert.MP_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Language Exposure Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_LanguageExposure).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MP_SpokenAtHome=SpokenAtHome
                        Insert.MP_FamilyModel=FamilyModel
                        Insert.MP_CommunicationMode=CommunicationMode
                        Insert.MP_ModUser= data['id']
                        Insert.MP_ModDate = datetime.datetime.now()
                        Insert.MP_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Language Exposure Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitDiagnosticFormulations',methods=['GET','POST'])
def submitDiagnosticFormulations():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    Type = request_json.get('type')
                    Comment = request_json.get('comment')
                    Aid = request_json.get('AID')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_DiagnosticFormulations()
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MP_Type=Type
                        Insert.MP_Comment=Comment
                        Insert.MP_AddUser= data['id']
                        Insert.MP_AddDate = datetime.datetime.now()
                        Insert.MP_AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Diagnostic Formulations Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_DiagnosticFormulations).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.M_AppointmentID=Aid
                        Insert.MP_Type=Type
                        Insert.MP_Comment=Comment
                        Insert.MP_ModUser= data['id']
                        Insert.MP_ModDate = datetime.datetime.now()
                        Insert.MP_AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Diagnostic Formulations Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/languageExposureReport', methods=['GET','POST'])
def languageExposureReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.languageExposureReport,
                                session.query(Model.models.Application.M_LanguageExposure.MPID.label('ID'),
                                            Model.models.Application.M_LanguageExposure.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_LanguageExposure.MP_SpokenAtHome.label('SpokenAtHome'),
                                            Model.models.Application.M_LanguageExposure.MP_FamilyModel.label('FamilyModel'),
                                            Model.models.Application.M_LanguageExposure.MP_CommunicationMode.label('CommunicationMode'),
                                            ).filter_by(M_AppointmentID=AID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_LanguageExposure.MPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()      
      
@app.route('/getlanguageExposure', methods=['GET','POST'])
def getlanguageExposure():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    PID = request1.get('PID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getlanguageExposure,
                                session.query(Model.models.Application.M_LanguageExposure.MPID.label('ID'),
                                            Model.models.Application.M_LanguageExposure.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_LanguageExposure.MP_SpokenAtHome.label('SpokenAtHome'),
                                            Model.models.Application.M_LanguageExposure.MP_FamilyModel.label('FamilyModel'),
                                            Model.models.Application.M_LanguageExposure.MP_CommunicationMode.label('CommunicationMode'),
                                            ).filter_by(M_Patient_MPID=PID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_LanguageExposure.MPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/ParentConcernReport', methods=['GET','POST'])
def ParentConcernReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.ParentConcernReport,
                                session.query(Model.models.Application.M_ParentConcern.MPID.label('ID'),
                                            Model.models.Application.M_ParentConcern.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ParentConcern.MP_Comment.label('Comment'),
                                            ).filter_by(M_AppointmentID=AID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_ParentConcern.MPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getParentConcern', methods=['GET','POST'])
def getParentConcern():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    PID = request1.get('PID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getParentConcern,
                                session.query(Model.models.Application.M_ParentConcern.MPID.label('ID'),
                                            Model.models.Application.M_ParentConcern.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ParentConcern.MP_Comment.label('Comment'),
                                            ).filter_by(M_Patient_MPID=PID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_LanguageExposure.MPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/ProvisionalDiagnosisFormReport', methods=['GET','POST'])
def ProvisionalDiagnosisFormReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.ProvisionalDiagnosisFormReport,
                                session.query(Model.models.Application.M_ProvisionalDiag.MPID.label('ID'),
                                            Model.models.Application.M_ProvisionalDiag.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ProvisionalDiag.MP_Comment.label('Comment'),
                                            ).filter_by(M_AppointmentID=AID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_ProvisionalDiag.MPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getProvisionalDiagnosis', methods=['GET','POST'])
def getProvisionalDiagnosis():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    PID = request1.get('PID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getProvisionalDiagnosis,
                                session.query(Model.models.Application.M_ProvisionalDiag.MPID.label('ID'),
                                            Model.models.Application.M_ProvisionalDiag.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ProvisionalDiag.MP_Comment.label('Comment'),
                                            ).filter_by(M_Patient_MPID=PID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_ProvisionalDiag.MPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DiagnosticFormulationsReport', methods=['GET','POST'])
def DiagnosticFormulationsReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.DiagnosticFormulationsReport,
                                session.query(Model.models.Application.M_DiagnosticFormulations.MPID.label('ID'),
                                            Model.models.Application.M_DiagnosticFormulations.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_DiagnosticFormulations.MP_Comment.label('Comment'),
                                            Model.models.Application.M_DiagnosticFormulations.MP_Type.label('Type'),
                                            ).filter_by(M_AppointmentID=AID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_DiagnosticFormulations.MPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/getDiagnosticFormulations', methods=['GET','POST'])
def getDiagnosticFormulations():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    PID = request1.get('PID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getDiagnosticFormulations,
                                session.query(Model.models.Application.M_DiagnosticFormulations.MPID.label('ID'),
                                            Model.models.Application.M_DiagnosticFormulations.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_DiagnosticFormulations.MP_Comment.label('Comment'),
                                            Model.models.Application.M_DiagnosticFormulations.MP_Type.label('Type'),
                                            ).filter_by(M_Patient_MPID=PID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_DiagnosticFormulations.MPID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/HistoryReport', methods=['GET','POST'])
def HistoryReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.VisitReasonReport,
                                session.query(Model.models.Application.M_ReasonForVisit.MRVID.label('ID'),
                                            Model.models.Application.M_ReasonForVisit.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ReasonForVisit.MRV_PresentConcerns.label('Present Concerns'),
                                            Model.models.Application.M_ReasonForVisit.MRV_InformedBy.label('Informed By'),
                                            Model.models.Application.M_ReasonForVisit.MRV_AgeWhenNoticed.label('Noticed Age'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MRV_IsActive=1,MRV_IsDeleted=0
                                ).order_by(Model.models.Application.M_ReasonForVisit.MRVID.desc()).all())
                    session.commit()
                    queryresult1= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PastHistoryReport,
                                session.query(Model.models.Application.M_PastHistory.MPHID.label('ID'),
                                            Model.models.Application.M_PastHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PastHistory.MPH_PastMedications.label('Past Medications')
                                            
                                                ).filter_by(M_AppointmentID=AID,MPH_IsActive=1,MPH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PastHistory.MPHID.desc()).all())
                    session.commit()
                    queryresult2= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PrenatalHistoryReport,
                                session.query(Model.models.Application.M_PrenatalHistory.MPHID.label('ID'),
                                            Model.models.Application.M_PrenatalHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PrenatalHistory.MPH_MotheraAgeAtConception.label('Mother Conception'),
                                            Model.models.Application.M_PrenatalHistory.MPH_MotherHealthAtPregnancy.label('Mother Pregnancy'),
                                            Model.models.Application.M_PrenatalHistory.MPH_HistoryofAbortions.label('History Abortions'),
                                            Model.models.Application.M_PrenatalHistory.MPH_GestationalDiabetes.label('Gestational Diabetes'),
                                            Model.models.Application.M_PrenatalHistory.MPH_NeurologicalDisorder.label('Neurological Disorder'),
                                            Model.models.Application.M_PrenatalHistory.MPH_PhysicalEmotionalTrauma.label('Physical Emotional'),
                                            Model.models.Application.M_PrenatalHistory.MPH_RhInompatibility.label('Inompatibility'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Jaundice.label('Jaundice'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Seizures.label('Seizures'),
                                            Model.models.Application.M_PrenatalHistory.MPH_TraumaInjury.label('TraumaInjury'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Bleedinginlatepregnancy.label('Bleeding pregnancy'),
                                            Model.models.Application.M_PrenatalHistory.MPH_AdequateNutrition.label('Adequate Nutrition'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Infections.label('Infections'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Smoking.label('Smoking'),
                                            Model.models.Application.M_PrenatalHistory.MPH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPH_IsActive=1,MPH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PrenatalHistory.MPHID.desc()).all())
                    session.commit()
                    queryresult3= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PatientBirthHistoryReport,
                                session.query(Model.models.Application.M_PatientBirthHistory.MPBHID.label('ID'),
                                            Model.models.Application.M_PatientBirthHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_MotherHealth.label('Mother Health'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_DeliveryType.label('Delivery Type'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_typeofdelivery.label('Type of Delivery'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_DeliveryLocationh.label('Delivery Location'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_MultiplePregnancies.label('Multiple Pregnancies'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_ComplicationDuringPregnancy.label('Complication Pregnancy'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_ChildBirth.label('Child Birth'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_ChildBirthWeek.label('Child Birth Week'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_BirthWeight.label('Birth Weight'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_BirthCry.label('Birth Cry'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_NeonatalConditionint.label('Neonatal Condition'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_SpecialCareAny.label('Special CareAny'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_AnyMedicalEvents.label('Any Medical Events'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_Congenital.label('Congenital'),
                                            Model.models.Application.M_PatientBirthHistory.MPBH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPBH_IsActive=1,MPBH_IsDeleted=0
                                ).order_by(Model.models.Application.M_PatientBirthHistory.MPBHID.desc()).all())
                    session.commit()
                    queryresult4= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.DevelopmentalHistoryReport,
                                session.query(Model.models.Application.M_DevelopmentalHistory.MDHID.label('ID'),
                                            Model.models.Application.M_DevelopmentalHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_HoldUpHeadAge.label('HoldUp HeadAge'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_Rolloverage.label('Rollover age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_SitAge.label('Sit Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_StandAloneAge.label('Stand Alone Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_WalkAge.label('Walk Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_TalkAge.label('Talk Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_ToiletTrainAge.label('Toilet Train Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_FeedAge.label('Feed Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_DresshimAge.label('Dresshim Age'),
                                            Model.models.Application.M_DevelopmentalHistory.MDH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MDH_IsActive=1,MDH_IsDeleted=0
                                ).order_by(Model.models.Application.M_DevelopmentalHistory.MDHID.desc()).all())
                    session.commit()
                    queryresult5= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpeechDevelopmentHistoryReport,
                                session.query(Model.models.Application.M_SpeechDevelopmentalHistory.MSDHID.label('ID'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Vocalization.label('Vocalization'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Babbling.label('Babbling'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_FirstWord.label('First Word'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Phrases.label('Phrases'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_SimpleSentences.label('Simple Sentences'),
                                            Model.models.Application.M_SpeechDevelopmentalHistory.MSDH_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSDH_IsActive=1,MSDH_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpeechDevelopmentalHistory.MSDHID.desc()).all())
                    session.commit()
                    queryresult6= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.socialhistoryReport,
                                session.query(Model.models.Application.M_SocialHistory.MSHID.label('ID'),
                                            Model.models.Application.M_SocialHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_SocialHistory.MSH_Aggressive.label('Social History'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSH_IsActive=1,MSH_IsDeleted=0
                                ).order_by(Model.models.Application.M_SocialHistory.MSHID.desc()).all())
                    session.commit()
                    queryresult7= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.medicalhistoryReport,
                                session.query(Model.models.Application.M_MedicalHistory.MSHID.label('ID'),
                                            Model.models.Application.M_MedicalHistory.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_MedicalHistory.MMH_observations.label('Medical History'),

                                                ).filter_by(M_AppointmentID=AID,MMH_IsActive=1,MMH_IsDeleted=0
                                ).order_by(Model.models.Application.M_MedicalHistory.MSHID.desc()).all())
                    session.commit()
                    queryresult8= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.familyhistoryReport,
                                session.query(Model.models.Application.M_FamilyHistory.MFHID.label('ID'),
                                            Model.models.Application.M_FamilyHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_FamilyHistory.MFH_Familytype.label('Family type'),
                                            Model.models.Application.M_FamilyHistory.MFH_Consanguinity.label('Consanguinity'),
                                            Model.models.Application.M_FamilyHistory.MFH_Observations.label('Family History'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MFH_IsActive=1,MFH_IsDeleted=0
                                ).order_by(Model.models.Application.M_FamilyHistory.MFHID.desc()).all())
                    session.commit()
                    queryresult9= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.educationhistoryReport,
                                session.query(Model.models.Application.M_EducationHistory.MEHID.label('ID'),
                                            Model.models.Application.M_EducationHistory.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_EducationHistory.MEH_CommunicationMode.label('Education History'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MEH_IsActive=1,MEH_IsDeleted=0
                                ).order_by(Model.models.Application.M_EducationHistory.MEHID.desc()).all())
                    session.commit()
                    return jsonify(result={'VisitReasonReport':queryresult,'PastHistoryReport':queryresult1,
                                           'PrenatalHistoryReport':queryresult2,'PatientBirthHistoryReport':queryresult3,
                                           'DevelopmentalHistoryReport':queryresult4,'SpeechDevelopmentHistoryReport':queryresult5,
                                           'socialhistoryReport':queryresult6,'medicalhistoryReport':queryresult7,
                                           'familyhistoryReport':queryresult8,'educationhistoryReport':queryresult9})
                    
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()
 
@app.route('/SpeechTherapy', methods=['GET','POST'])
def SpeechTherapy():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.ParentConcernReport,
                                session.query(Model.models.Application.M_ParentConcern.MPID.label('ID'),
                                            Model.models.Application.M_ParentConcern.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ParentConcern.MP_Comment.label('Comment'),
                                            ).filter_by(M_AppointmentID=AID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_ParentConcern.MPID.desc()).all())
                    session.commit()
                    
                    queryresult1= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.languageExposureReport,
                                session.query(Model.models.Application.M_LanguageExposure.MPID.label('ID'),
                                            Model.models.Application.M_LanguageExposure.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_LanguageExposure.MP_SpokenAtHome.label('SpokenAtHome'),
                                            Model.models.Application.M_LanguageExposure.MP_FamilyModel.label('FamilyModel'),
                                            Model.models.Application.M_LanguageExposure.MP_CommunicationMode.label('CommunicationMode'),
                                            ).filter_by(M_AppointmentID=AID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_LanguageExposure.MPID.desc()).all())
                    session.commit()
                    queryresult2= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.STOroperipheralExam,
                                session.query(Model.models.Application.M_STOroperipheralExam.MSPEID.label('ID'),
                                            Model.models.Application.M_STOroperipheralExam.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_LipsAppearance.label('Lips Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_LipsMovements.label('Lips Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TongueAppearance.label('Tongue Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TongueMovements.label('Tongue Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TeethAppearance.label('Teeth Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_TeethMovements.label('Teeth Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_HardPalateAppearance.label('Hard Palate Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_SoftPalateAppearance.label('Soft Palate Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_SoftPalateMovements.label('Soft Palate Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_UvulaAppearance.label('Uvula Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_UvulaMovements.label('Uvula Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_MandibleAppearance.label('Mandible Appearance'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_MandibleMovements.label('Mandible Movements'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Drooling.label('Drooling'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Blowing.label('Blowing'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Biting.label('Biting'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Sucking.label('Sucking'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Swallowing.label('Swallowing'),
                                            Model.models.Application.M_STOroperipheralExam.MSPE_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSPE_IsActive=1,MSPE_IsDeleted=0
                                ).order_by(Model.models.Application.M_STOroperipheralExam.MSPEID.desc()).all())
                    session.commit()
                    
                    queryresult3= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.STArticulationSpeechIntelligibilityReport,
                                session.query(Model.models.Application.M_STArticulationSpeechIntelligibility.MSSIID.label('ID'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Noonecan.label('Noonecan'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_memberscan.label('memberscan'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Strangerscan.label('Strangerscan'),
                                            Model.models.Application.M_STArticulationSpeechIntelligibility.MSSI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSSI_IsActive=1,MSSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_STArticulationSpeechIntelligibility.MSSIID.desc()).all())
                    session.commit()
                    queryresult4= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.STArticulationVoiceReport,
                                session.query(Model.models.Application.M_STArticulationVoice.MSAVID.label('ID'),
                                            Model.models.Application.M_STArticulationVoice.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Pitch.label('Pitch'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Loudness.label('Loudness'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Quality.label('Quality'),
                                            Model.models.Application.M_STArticulationVoice.MSAV_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSAV_IsActive=1,MSAV_IsDeleted=0
                                ).order_by(Model.models.Application.M_STArticulationVoice.MSAVID.desc()).all())

                    session.commit()
                    queryresult5= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.STVerbalCommunication,
                                session.query(Model.models.Application.M_STVerbalCommunication.MVCID.label('ID'),
                                            Model.models.Application.M_STVerbalCommunication.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STVerbalCommunication.MVC_Expression.label('Expression'),
                                            Model.models.Application.M_STVerbalCommunication.MVC_Comprehension.label('Comprehension'),
                                            Model.models.Application.M_STVerbalCommunication.MVC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MVC_IsActive=1,MVC_IsDeleted=0
                                ).order_by(Model.models.Application.M_STVerbalCommunication.MVCID.desc()).all())
                    session.commit()
                    
                    queryresult6= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.STNonVerbalCommunicationReport,
                                session.query(Model.models.Application.M_STNonVerbalCommunication.MNVCID.label('ID'),
                                            Model.models.Application.M_STNonVerbalCommunication.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Expression.label('Expression'),
                                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Comprehension.label('Comprehension'),
                                            Model.models.Application.M_STNonVerbalCommunication.MNVC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MNVC_IsActive=1,MNVC_IsDeleted=0
                                ).order_by(Model.models.Application.M_STNonVerbalCommunication.MNVCID.desc()).all())
                    session.commit()
                    queryresult7= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.ReceptiveLanguageAssessmentReport,
                                session.query(Model.models.Application.M_ReceptiveLanguageAssessment.MRLAID.label('ID'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendssounds.label('Comprehends sounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsloud.label('Comprehends loud'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendscategorizesounds.label('Comprehends categorizesounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsanimalsounds.label('Comprehends animalsounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsfruitsname.label('Comprehends fruitsname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendscolorsname.label('Comprehends colorsname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsanimalname.label('Comprehends animalname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsvegetablename.label('Comprehends vegetablename'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsshapesname.label('Comprehends shapesname'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsbodyparts.label('Comprehends bodyparts'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsvehiclenames.label('Comprehends vehiclenames'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understandingrhymes.label('Understandingrhymes'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Respondscorrectly.label('Respondscorrectly'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Identifiessounds.label('Identifiessounds'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Actsoutcommands.label('Actsoutcommands'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Comprehendsstepscommands.label('Comprehends stepscommands'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understandinggreeting.label('Understandinggreeting'),
                                            Model.models.Application.M_ReceptiveLanguageAssessment.MRLA_Understanding.label('Understanding'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MRLA_IsActive=1,MRLA_IsDeleted=0
                                ).order_by(Model.models.Application.M_ReceptiveLanguageAssessment.MRLAID.desc()).all())
                    session.commit()
                    
                    queryresult8= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.ExpressiveLanguageAssessmentReport,
                                session.query(Model.models.Application.M_ExpressiveLanguageAssessment.MELAID.label('ID'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesenvironmentalsounds.label('Imitates environmental sounds'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesloudandsoftsounds.label('Imitates loud and softsounds'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitateslexicalcategories.label('Imitates lexical categories'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescolorsname.label('Imitates colors name'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatesbodyparts.label('Imitates body parts'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatessingingandphrases.label('Imitates singing and phrases'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_ImitatesalphabetsAtoZ.label('Imitates alphabets AtoZ'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Usesnounwitharticles.label('articles'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Watchesfaceandbody.label('Watches'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescounting.label('Imitates counting'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Clapstobeatoffamiliarsongs.label('Claps'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Respondstosinglesigns.label('Respondstosinglesigns'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatessocialgreetings.label('Imitates socialgreetings'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Occassionallytrytoimitate.label('Occassionallytrytoimitate'),
                                            Model.models.Application.M_ExpressiveLanguageAssessment.MELA_Imitatescommonsyllables.label('Imitates commonsyllables'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MELA_IsActive=1,MELA_IsDeleted=0
                                ).order_by(Model.models.Application.M_ExpressiveLanguageAssessment.MELAID.desc()).all())

                    session.commit()
                    queryresult9= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.DiagnosticFormulationsReport,
                                session.query(Model.models.Application.M_DiagnosticFormulations.MPID.label('ID'),
                                            Model.models.Application.M_DiagnosticFormulations.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_DiagnosticFormulations.MP_Comment.label('Comment'),
                                            Model.models.Application.M_DiagnosticFormulations.MP_Type.label('Type'),
                                            ).filter_by(M_AppointmentID=AID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_DiagnosticFormulations.MPID.desc()).all())
                    session.commit()
                    queryresult10= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.ProvisionalDiagnosisFormReport,
                                session.query(Model.models.Application.M_ProvisionalDiag.MPID.label('ID'),
                                            Model.models.Application.M_ProvisionalDiag.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ProvisionalDiag.MP_Comment.label('Comment'),
                                            ).filter_by(M_AppointmentID=AID,MP_IsActive=1,MP_IsDeleted=0
                                ).order_by(Model.models.Application.M_ProvisionalDiag.MPID.desc()).all())
                    session.commit()
                    queryresult11= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.stutteringhistoryReport,
                                session.query(Model.models.Application.M_stutteringhistory.MPID,
                                    Model.models.Application.M_stutteringhistory.persistent,
                                    Model.models.Application.M_stutteringhistory.recovered,
                                    Model.models.Application.M_stutteringhistory.startedstuttering,
                                    Model.models.Application.M_stutteringhistory.phraserepititions,
                                    Model.models.Application.M_stutteringhistory.wordrepitions,
                                    Model.models.Application.M_stutteringhistory.Syllablerepitions,
                                    Model.models.Application.M_stutteringhistory.Blockslike,
                                    Model.models.Application.M_stutteringhistory.Interjections,
                                    Model.models.Application.M_stutteringhistory.demonstrated,
                                    Model.models.Application.M_stutteringhistory.phsyicaltension,
                                    Model.models.Application.M_stutteringhistory.frustrationabout,
                                    Model.models.Application.M_stutteringhistory.Complaints,
                                    Model.models.Application.M_stutteringhistory.childeverbeenteased,
                                    Model.models.Application.M_stutteringhistory.childeverdiscussed,
                                    Model.models.Application.M_stutteringhistory.childseemstostutter,
                                    Model.models.Application.M_stutteringhistory.stutterinyoursecondary,
                                    Model.models.Application.M_stutteringhistory.childstartedlearning,
                                    Model.models.Application.M_stutteringhistory.remarkableduringpregnancy,
                                    Model.models.Application.M_stutteringhistory.remarkableconditionatbirth,
                                    Model.models.Application.M_stutteringhistory.currenthealthmedicalconcerns,
                                    Model.models.Application.M_stutteringhistory.takinganymedications,
                                    Model.models.Application.M_stutteringhistory.allergies,
                                    Model.models.Application.M_stutteringhistory.developmentalconcerns,
                                    Model.models.Application.M_stutteringhistory.hearingtested,
                                    Model.models.Application.M_stutteringhistory.behavioursoccur,
                                    Model.models.Application.M_stutteringhistory.Inattentiveness,
                                    Model.models.Application.M_stutteringhistory.Hyperactivity,
                                    Model.models.Application.M_stutteringhistory.Nervousness,
                                    Model.models.Application.M_stutteringhistory.sensitivity,
                                    Model.models.Application.M_stutteringhistory.perfectionism,
                                    Model.models.Application.M_stutteringhistory.excitability,
                                    Model.models.Application.M_stutteringhistory.frustration,
                                    Model.models.Application.M_stutteringhistory.strongfears,
                                    Model.models.Application.M_stutteringhistory.excessiveneatness,
                                    Model.models.Application.M_stutteringhistory.excessiveshyness,
                                    Model.models.Application.M_stutteringhistory.lackofconfidence,
                                    Model.models.Application.M_stutteringhistory.competitiveness,
                                    Model.models.Application.M_stutteringhistory.speakfluentlyathome,
                                    Model.models.Application.M_stutteringhistory.speakfluentlyatschool,
                                    Model.models.Application.M_stutteringhistory.speakfluentlyinnewsituation,
                                    Model.models.Application.M_stutteringhistory.speakwithoutstutteringathome,
                                    Model.models.Application.M_stutteringhistory.speakwithoutstutteringatschool,
                                    Model.models.Application.M_stutteringhistory.speakwithoutstutteringinanycondition,
                                    Model.models.Application.M_stutteringhistory.stutteringaffectacademicperformance,
                                    Model.models.Application.M_stutteringhistory.participationinschool,
                                    Model.models.Application.M_stutteringhistory.interactionwithother,
                                    Model.models.Application.M_stutteringhistory.interactionwithfamily,
                                    Model.models.Application.M_stutteringhistory.willingnesstotalk,
                                    Model.models.Application.M_stutteringhistory.selfesteemorattitude,
                                    Model.models.Application.M_stutteringhistory.teachernoticedyourchild
                                            ).filter_by(MP_IsActive=1,MP_IsDeleted=0,M_AppointmentID=AID
                                            
                                ).order_by(Model.models.Application.M_stutteringhistory.MPID.desc()).all())
                    session.commit()
                    return jsonify(result={'ParentConcernReport':queryresult,'languageExposureReport':queryresult1,
                                           'STOroperipheralExam':queryresult2,'STArticulationSpeechIntelligibilityReport':queryresult3,
                                           'STArticulationVoiceReport':queryresult4,'STVerbalCommunication':queryresult5,
                                           'STNonVerbalCommunicationReport':queryresult6,'ReceptiveLanguageAssessmentReport':queryresult7,
                                           'ExpressiveLanguageAssessmentReport':queryresult8,'DiagnosticFormulationsReport':queryresult9,
                                           'ProvisionalDiagnosisFormReport':queryresult10,'stutteringhistoryReport':queryresult11 })
                    
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/OccupationalTherapy', methods=['GET','POST'])
def OccupationalTherapy():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.OTHandFunctionsReport,
                                session.query(Model.models.Application.M_OTHandFunctions.MHFID.label('ID'),
                                            Model.models.Application.M_OTHandFunctions.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTHandFunctions.MHF_HandDominance.label('Hand Dominance'),
                                            Model.models.Application.M_OTHandFunctions.MHF_HandPreference.label('Hand Preference'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachForward.label('Reach Forward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachBackward.label('Reach Backward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachLateral.label('Reach Lateral'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachDownward.label('Reach Downward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspUlnarPalmar.label('Grasp UlnarPalmar'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspPalmar.label('Grasp Palmar'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspRadialPalmar.label('Grasp RadialPalmar'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspRadialDigital.label('Grasp RadialDigital'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspInferiorPincer.label('Grasp InferiorPincer'),
                                            Model.models.Application.M_OTHandFunctions.MHF_ReachUpward.label('Reach Upward'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspNeatPincer.label('Grasp NeatPincer'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspPalmarsupinate.label('Grasp Palmarsupinate'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspDigitalpronate.label('Grasp Digitalpronate'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspStatictripod.label('Grasp Statictripod'),
                                            Model.models.Application.M_OTHandFunctions.MHF_GraspDynamictripod.label('Grasp Dynamictripod'),
                                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionPadtoPad.label('Prehension PadtoPad'),
                                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionTiptoTip.label('Prehension TiptoTip'),
                                            Model.models.Application.M_OTHandFunctions.MHF_PrehensionPadtoSide.label('Prehension PadtoSide'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MHF_IsActive=1,MHF_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTHandFunctions.MHFID.desc()).all())
                    session.commit()
                    queryresult1= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewOTNonEquilibriumCoordinationForm,
                                session.query(Model.models.Application.M_NonEquilibrium.MNEID.label('ID'),
                                            Model.models.Application.M_NonEquilibrium.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingertonose.label('Fingertonose'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingertotherapistfinger.label('Fingertotherapistfinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingertofinger.label('Fingertofinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Alternatnosefinger.label('Alternatnosefinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fingeropposition.label('Fingeropposition'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Massgrasp.label('Massgrasp'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Pronationsupination.label('Pronationsupination'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Reboundtest.label('Reboundtest'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Tappinghand.label('Tappinghand'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Tappingfeet.label('Tappingfeet'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Pointingandpastpointing.label('Pointingandpastpointing'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Alternateheeltokneeheeltoe.label('Alternateheeltokneeheeltoe'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Toetoexaminersfinger.label('Toetoexaminersfinger'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Heeltoshin.label('Heeltoshin'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Drawingacircle.label('Drawingacircle'),
                                            Model.models.Application.M_NonEquilibrium.MNE_Fixationorpositionholding.label('Fixationorpositionholding'),

                                                ).filter_by(M_AppointmentID=AID,MNE_IsActive=1,MNE_IsDeleted=0
                                ).order_by(Model.models.Application.M_NonEquilibrium.MNEID.desc()).all())

                    session.commit()
                    
                    queryresult2= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.OTEquilibriumCoordinationReport,
                                session.query(Model.models.Application.M_Equilibrium.MNEID.label('ID'),
                                            Model.models.Application.M_Equilibrium.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingwithnormalbaseofsupport.label('Standingwithnormalbaseofsupport'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingwithnarrowbaseofsupport.label('Standingwithnarrowbaseofsupport'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingintandemposition.label('Standingintandemposition'),
                                            Model.models.Application.M_Equilibrium.MNE_Standingononefeet.label('Standingononefeet'),
                                            Model.models.Application.M_Equilibrium.MNE_Perturbation.label('Perturbation'),
                                            Model.models.Application.M_Equilibrium.MNE_Standinginfunctionalreach.label('Standinginfunctionalreach'),
                                            Model.models.Application.M_Equilibrium.MNE_Standinglateralflexionofthetrunktoeachside.label('Standinglateralflexionofthetrunktoeachside'),
                                            Model.models.Application.M_Equilibrium.MNE_Tandemwalking.label('Tandemwalking'),
                                            Model.models.Application.M_Equilibrium.MNE_WalkingInastraightline.label('WalkingInastraightline'),
                                            Model.models.Application.M_Equilibrium.MNE_Walksidewaysbackwards.label('Walksidewaysbackwards'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkinhorizontalvertical.label('Walkinhorizontalvertical'),
                                            Model.models.Application.M_Equilibrium.MNE_Marchinplace.label('Marchinplace'),
                                            Model.models.Application.M_Equilibrium.MNE_Startstopabruptly.label('Startstopabruptly'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkandpivotincommand.label('Walkandpivotincommand'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkincircle.label('Walkincircle'),
                                            Model.models.Application.M_Equilibrium.MNE_Walkonheelsandtoes.label('Walkonheelsandtoes'),
                                            Model.models.Application.M_Equilibrium.MNE_Turnsoncommand.label('Turnsoncommand'),
                                            Model.models.Application.M_Equilibrium.MNE_Stepoveraroundobstacles.label('Stepoveraroundobstacles'),
                                            Model.models.Application.M_Equilibrium.MNE_Stairclimbingwithhandrails.label('Stairclimbingwithhandrails'),
                                            Model.models.Application.M_Equilibrium.MNE_Jumpingjacks.label('Jumpingjacks'),
                                            Model.models.Application.M_Equilibrium.MNE_Sittingontherapybal.label('Sittingontherapybal'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MNE_IsActive=1,MNE_IsDeleted=0
                                ).order_by(Model.models.Application.M_Equilibrium.MNEID.desc()).all())
                    session.commit()
                    
                    queryresult3= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.OTCognitionAndPerceptionReport,
                                session.query(Model.models.Application.M_OTCognition.MOCID.label('ID'),
                                            Model.models.Application.M_OTCognition.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTCognition.MOC_Praxis.label('Praxis'),
                                            Model.models.Application.M_OTCognition.MOC_Rightleftdiscrimination.label('Rightleftdiscrimination'),
                                            Model.models.Application.M_OTCognition.MOC_Fingerindentification.label('Fingerindentification'),
                                            Model.models.Application.M_OTCognition.MOC_Orientationtoperson.label('Orientationtoperson'),
                                            Model.models.Application.M_OTCognition.MOC_Orientationtoplace.label('Orientationtoplace'),
                                            Model.models.Application.M_OTCognition.MOC_Conceputalseriescompletion.label('Conceputalseriescompletion'),
                                            Model.models.Application.M_OTCognition.MOC_Selectiveattention.label('Selectiveattention'),
                                            Model.models.Application.M_OTCognition.MOC_Focusedattention.label('Focusedattention'),
                                            Model.models.Application.M_OTCognition.MOC_Spatialperception.label('Spatialperception'),
                                            Model.models.Application.M_OTCognition.MOC_Visualmemory.label('Visualmemory'),
                                            Model.models.Application.M_OTCognition.MOC_Verbalmemory.label('Verbalmemory'),
                                            Model.models.Application.M_OTCognition.MOC_Identificationofobjects.label('Identificationofobjects'),
                                            Model.models.Application.M_OTCognition.MOC_Proverbinterpretation.label('Proverbinterpretation'),
                                            Model.models.Application.M_OTCognition.MOC_Randomlettertest.label('Randomlettertest'),
                                            Model.models.Application.M_OTCognition.MOC_Overlappingfigures.label('Overlappingfigures'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MOC_IsActive=1,MOC_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTCognition.MOCID.desc()).all())

                    session.commit()
                    queryresult4= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.OTSensoryExamReport,
                                session.query(Model.models.Application.M_OTSensoryExam.MSEID.label('ID'),
                                            Model.models.Application.M_OTSensoryExam.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Visualtracking.label('Visual tracking'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Choreiformmovements.label('Choreiform movements'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Tremor.label('Tremor'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Exaggeratedassociated.label('Exaggerated associated'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Graphesthesis.label('Graphesthesis'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Stereognosis.label('Stereognosis'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Weightbearinghands.label('Weight bearing hands'),
                                            Model.models.Application.M_OTSensoryExam.MSE_Proneextensionpattern.label('Prone extension pattern'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSE_IsActive=1,MSE_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTSensoryExam.MSEID.desc()).all())
                    session.commit()
                    
                    queryresult5= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.OTSensoryProfileReport,
                                session.query(Model.models.Application.M_OTSensoryProfile.MSPID.label('ID'),
                                            Model.models.Application.M_OTSensoryProfile.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_OTSensoryProfile.MSP_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSP_IsActive=1,MSP_IsDeleted=0
                                ).order_by(Model.models.Application.M_OTSensoryProfile.MSPID.desc()).all())
                    session.commit()
                    queryresult6= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.AddtionalinfoReport,
                                session.query(Model.models.Application.M_Addtionalinfo.MAIID.label('ID'),
                                            Model.models.Application.M_Addtionalinfo.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_Addtionalinfo.MAI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MAI_IsActive=1,MAI_IsDeleted=0
                                ).order_by(Model.models.Application.M_Addtionalinfo.MAIID.desc()).all())
                    session.commit()
                    return jsonify(result={'OTHandFunctionsReport':queryresult,'viewOTNonEquilibriumCoordinationForm':queryresult1,
                                           'OTEquilibriumCoordinationReport':queryresult2,'OTCognitionAndPerceptionReport':queryresult3,
                                           'OTSensoryExamReport':queryresult4,'OTSensoryProfileReport':queryresult5,
                                           'AddtionalinfoReport':queryresult6})
                    
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/PhysicalTherapy1', methods=['GET','POST'])
def PhysicalTherapy1():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTFunctionalAbilitiesReport,
                                session.query(Model.models.Application.M_PTFunctionalAbilities.MFAID.label('ID'),
                                            Model.models.Application.M_PTFunctionalAbilities.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_GrossMotor.label('Gross Motor'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_FineMotor.label('Fine Motor'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_CommunicationSpeech.label('Communication Speech'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_Feeding.label('Feeding'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_Playskills.label('Playskills'),
                                            Model.models.Application.M_PTFunctionalAbilities.MFA_ADL.label('ADL'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MFA_IsActive=1,MFA_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTFunctionalAbilities.MFAID.desc()).all())
                    session.commit()
                    queryresult1= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTFunctionalLimitationsReport,
                                session.query(Model.models.Application.M_PTFunctionalLimitations.MFLID.label('ID'),
                                            Model.models.Application.M_PTFunctionalLimitations.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_GrossMotor.label('Gross Motor'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_FineMotor.label('Fine Motor'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_CommunicationSpeech.label('Communication Speech'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_Feeding.label('Feeding'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_Playskills.label('Playskills'),
                                            Model.models.Application.M_PTFunctionalLimitations.MFL_ADL.label('ADL'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MFL_IsActive=1,MFL_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTFunctionalLimitations.MFLID.desc()).all())
                    session.commit()
                    
                    queryresult2= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTPosturalSystemAlignmentReport,
                                session.query(Model.models.Application.M_PosturalSystemAlignments.MPSAID.label('ID'),
                                            Model.models.Application.M_PosturalSystemAlignments.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HeadNeck.label('Head Neck'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShoulderScapular.label('Shoulder Scapular'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShoulderandScapular.label('Shoulder and Scapular'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_ShouldernScapular.label('Shouldern Scapular'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_RibcageandChest.label('Ribcage and Chest'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Trunk.label('Trunk'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Trunks.label('Trunks'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_PelvicComplexRight.label('Pelvic Complex Right'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_PelvicComplexLeft.label('Pelvic Complex Left'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointAbduction.label('Hipjoint Abduction'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointAdduction.label('Hipjoint Adduction'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_HipjointRotation.label('Hipjoint Rotation'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Symmetrical.label('Symmetrical'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Assymetrical.label('Assymetrical'),
                                            Model.models.Application.M_PosturalSystemAlignments.MPSA_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPSA_IsActive=1,MPSA_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemAlignments.MPSAID.desc()).all())
                    session.commit()
                    queryresult3= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTPosturalSystemBOSReport,
                                session.query(Model.models.Application.M_PosturalSystemBOS.MPSBID.label('ID'),
                                            Model.models.Application.M_PosturalSystemBOS.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemBOS.MPSB_BaseofSupport.label('Base of Support'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPSB_IsActive=1,MPSB_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemBOS.MPSBID.desc()).all())
                    session.commit()
                    queryresult4= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTPosturalSystemCOMReport,
                                session.query(Model.models.Application.M_PosturalSystemCOM.MPSBID.label('ID'),
                                            Model.models.Application.M_PosturalSystemCOM.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemCOM.MPSC_CenterofMass.label('Center of Mass'),
                                            Model.models.Application.M_PosturalSystemCOM.MPSC_Withinsupport.label('Within support'),
                                            Model.models.Application.M_PosturalSystemCOM.MPSC_Strategiesposture.label('Strategies posture'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPSC_IsActive=1,MPSC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemCOM.MPSBID.desc()).all())
                    session.commit()
                    queryresult5= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTAnticipatoryControlReport,
                                session.query(Model.models.Application.M_PTAnticipatoryControl.MACID.label('ID'),
                                            Model.models.Application.M_PTAnticipatoryControl.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTAnticipatoryControl.MAC_Canchildanti.label('Canchildanti'),
                                            Model.models.Application.M_PTAnticipatoryControl.MAC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MAC_IsActive=1,MAC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTAnticipatoryControl.MACID.desc()).all())
                    session.commit()
                    queryresult6= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTPosturalCounterbalanceReport,
                                session.query(Model.models.Application.M_PTPosturalCounterbalance.MPCID.label('ID'),
                                            Model.models.Application.M_PTPosturalCounterbalance.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTPosturalCounterbalance.MPC_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPC_IsActive=1,MPC_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTPosturalCounterbalance.MPCID.desc()).all())
                    session.commit()
                    queryresult7= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPTPosturalSystemImpairments,
                                session.query(Model.models.Application.M_PosturalSystemImpairments.MPSIID.label('ID'),
                                            Model.models.Application.M_PosturalSystemImpairments.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_MuscleArchitecture.label('Muscle Architecture'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Anycallosities.label('Anycallosities'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Anyotherspecificposture.label('Anyother specific posture'),
                                            Model.models.Application.M_PosturalSystemImpairments.MPSI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPSI_IsActive=1,MPSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_PosturalSystemImpairments.MPSIID.desc()).all())
                    session.commit()
                    queryresult8= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTMovementSystemReport,
                                session.query(Model.models.Application.M_PTMovementSystem.MPMSID.label('ID'),
                                            Model.models.Application.M_PTMovementSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMovementSystem.MPMS_Cantheyovercome.label('Canthey overcome'),
                                            Model.models.Application.M_PTMovementSystem.MPMS_Howdoesthe.label('How do'),
                                            Model.models.Application.M_PTMovementSystem.MPMS_Strategiesused.label('Strategies used'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MPMS_IsActive=1,MPMS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementSystem.MPMSID.desc()).all())
                    session.commit()
                    queryresult9= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTMovementStrategiesReport,
                                session.query(Model.models.Application.M_PTMovementStrategies.MMSID.label('ID'),
                                            Model.models.Application.M_PTMovementStrategies.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_Childgenerallyperformsactivitie.label('Childgenerallyperformsactivitie'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformLateralweightshifts.label('CanperformLateralweightshifts'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformLateralweightshiftsleft.label('CanperformLateralweightshiftsleft'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformDiagonalweightRight.label('CanperformDiagonalweightRight'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformDiagonalweightLeft.label('CanperformDiagonalweightLeft'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformneckthoracicspineRight.label('CanperformneckthoracicspineRight'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_CanperformneckthoracicspineLeft.label('CanperformneckthoracicspineLeft'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowarethedissociationsPelvicfemoral.label('HowarethedissociationsPelvicfemoral'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowaredissociationsInterlimb.label('HowaredissociationsInterlimb'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowthedissociationsScapulohumeral.label('HowthedissociationsScapulohumeral'),
                                            Model.models.Application.M_PTMovementStrategies.MMS_HowthedissociationsUpperLowerbody.label('HowthedissociationsUpperLowerbody'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MMS_IsActive=1,MMS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementStrategies.MMSID.desc()).all())
                    session.commit()
                    
                    return jsonify(result={'PTFunctionalAbilitiesReport':queryresult,'PTFunctionalLimitationsReport':queryresult1,
                                           'PTPosturalSystemAlignmentReport':queryresult2,'PTPosturalSystemBOSReport':queryresult3,
                                           'PTPosturalSystemCOMReport':queryresult4,'PTAnticipatoryControlReport':queryresult5,
                                           'PTPosturalCounterbalanceReport':queryresult6,'viewPTPosturalSystemImpairments':queryresult7,
                                           'PTMovementSystemReport':queryresult8,'PTMovementStrategiesReport':queryresult9})
                    
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close() 
 
@app.route('/PhysicalTherapy2', methods=['GET','POST'])
def PhysicalTherapy2():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTRangeSpeedofMovementReport,
                                session.query(Model.models.Application.M_PTRangeSpeed.MPMSID.label('ID'),
                                            Model.models.Application.M_PTRangeSpeed.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTRangeSpeed.MRS_Rangespeedmovement.label('Range Speed Movement'),
                                            Model.models.Application.M_PTRangeSpeed.MRS_atTrunk.label('at Trunk'),
                                            Model.models.Application.M_PTRangeSpeed.MRS_HowisitatExtremities.label('Extremities'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MRS_IsActive=1,MRS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTRangeSpeed.MPMSID.desc()).all())
                    session.commit()
                    queryresult1= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTStabilityMobilityReport,
                                session.query(Model.models.Application.M_PTStabilityMobility.MSMID.label('ID'),
                                            Model.models.Application.M_PTStabilityMobility.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTStabilityMobility.MSM_StrategiesforStabilityMobility.label('Mobility Strategies'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSM_IsActive=1,MSM_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTStabilityMobility.MSMID.desc()).all())
                    session.commit()
                    queryresult2= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTMovementSystemImpairmentReport,
                                session.query(Model.models.Application.M_PTMovementSystemImpairment.MSIID.label('ID'),
                                            Model.models.Application.M_PTMovementSystemImpairment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Excessivemovementfortasks.label('Excessive movement'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Lackofmovementstaticpostures.label('movement StaticPostures'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_IntegrationofPostureMovement.label('Integration of PostureMovement'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Howdoeschildmaintainbalanceintransitions.label('Balance Transitions'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Accuracyofmovements.label('Accuracy of Movements'),
                                            Model.models.Application.M_PTMovementSystemImpairment.MSI_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSI_IsActive=1,MSI_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMovementSystemImpairment.MSIID.desc()).all())

                    session.commit()
                    queryresult3= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTRegulatorySystemReport,
                                session.query(Model.models.Application.M_PTRegulatorySystem.MRSID.label('ID'),
                                            Model.models.Application.M_PTRegulatorySystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Affect.label('Affect'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Arousal.label('Arousal'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Attention.label('Attention'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Action.label('Action'),
                                            Model.models.Application.M_PTRegulatorySystem.MRS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MRS_IsActive=1,MRS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTRegulatorySystem.MRSID.desc()).all())
                    session.commit()
                    queryresult4= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTNeurometerSystemReport,
                                session.query(Model.models.Application.M_PTNeurometerSystem.MPSBID.label('ID'),
                                            Model.models.Application.M_PTNeurometerSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Initiation.label('Initiation'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Sustenance.label('Sustenance'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Termination.label('Termination'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Controlandgradation.label('Control and Gradation'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionConcentric.label('Contraction Concentric'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionIsometric.label('Contraction Isometric'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_ContractionEccentric.label('Contraction Eccentric'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_CoactivationReciprocalinhibition.label('Reciprocal Inhibition'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_MasssynergyIsolatedwork.label('Isolated work'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Dynamicstiffness.label('Dynamic stiffness'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Extraneousmovement.label('Extraneous Movement'),
                                            Model.models.Application.M_PTNeurometerSystem.MNS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MNS_IsActive=1,MNS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTNeurometerSystem.MPSBID.desc()).all())
                    session.commit()
                    queryresult5= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTMusculoskeletalSystemReport,
                                session.query(Model.models.Application.M_PTMusculoskeletalSystem.MKSID.label('ID'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Muscleendurance.label('Muscle Endurance'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Skeletalcomments.label('Skeletal Comments'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR1.label('Tardieu ScaleTR1'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR2.label('Tardieu ScaleTR2'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuScaleTR3.label('Tardieu ScaleTR3'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuscaleHamsR1.label('Tardieu ScaleHamsR1'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_TardieuscaleHamsR2.label('Tardieu ScaleHamsR2'),
                                            Model.models.Application.M_PTMusculoskeletalSystem.MKS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MKS_IsActive=1,MKS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTMusculoskeletalSystem.MKSID.desc()).all())

                    session.commit()
                    queryresult6= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTSensorySystemReport,
                                session.query(Model.models.Application.M_PTSensorySystem.MSSID.label('ID'),
                                            Model.models.Application.M_PTSensorySystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTSensorySystem.MSS_sensorymodulationissues.label('Modulation Issues'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Visualsystem.label('Visual system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Auditorysystem.label('Auditory system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_AuditorysystemResponse.label('Auditory system Response'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Vestibularsystem.label('Vestibular system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Somatosensorysystem.label('Somatosensory system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Oromotorsystem.label('Oromotor system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Olfactorysystem.label('Olfactory system'),
                                            Model.models.Application.M_PTSensorySystem.MSS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSS_IsActive=1,MSS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTSensorySystem.MSSID.desc()).all())

                    session.commit()
                    queryresult7= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.PTCognitiveSystemReport,
                                session.query(Model.models.Application.M_PTCognitiveSystem.MCSID.label('ID'),
                                            Model.models.Application.M_PTCognitiveSystem.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Intelligence.label('Intelligence'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Memory.label('Memory'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Adaptability.label('Adaptability'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_MotorPlanning.label('Motor Planning'),
                                            Model.models.Application.M_PTCognitiveSystem.MCS_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MCS_IsActive=1,MCS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PTCognitiveSystem.MCSID.desc()).all())

                    session.commit()
                    return jsonify(result={'PTRangeSpeedofMovementReport':queryresult,'PTStabilityMobilityReport':queryresult1,
                                           'PTMovementSystemImpairmentReport':queryresult2,'PTRegulatorySystemReport':queryresult3,
                                           'PTNeurometerSystemReport':queryresult4,'PTMusculoskeletalSystemReport':queryresult5,
                                           'PTSensorySystemReport':queryresult6,'PTCognitiveSystemReport':queryresult7})
                    
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()  
              
@app.route('/SpecialEducation', methods=['GET','POST'])
def SpecialEducation():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    
                    queryresult3= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpecialEdassessmenttwoyearsReport,
                                session.query(Model.models.Application.M_SpecialEdassessmenttwoyears.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Respondstoname.label('Respondstoname'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Makeseyecontact.label('Makeseyecontact'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Respondstolightandsoundtoys.label('Respondstolightandsoundtoys'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmoveeyesupanddown.label('canmoveeyesupanddown'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmoveeyesleftandright.label('canmoveeyesleftandright'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_repeatswords.label('repeatswords'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsidentificationofnumber.label('knowsidentificationofnumber'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canrollpoundandsqueezeclay.label('canrollpoundandsqueezeclay'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyMom.label('vocabularyMom'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyDad.label('vocabularyDad'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Vocabularydog.label('Vocabularydog'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycat.label('vocabularycat'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularytree.label('vocabularytree'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularytable.label('vocabularytable'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularychair.label('vocabularychair'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycow.label('vocabularycow'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycrayons.label('vocabularycrayons'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybus.label('vocabularybus'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularycar.label('vocabularycar'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybook.label('vocabularybook'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularyapple.label('vocabularyapple'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybanana.label('vocabularybanana'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_vocabularybottle.label('vocabularybottle'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Candostacking.label('Candostacking'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canmaketower.label('canmaketower'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_respondstobubbles.label('respondstobubbles'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Identifieshappyandsad.label('Identifieshappyandsad'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_Knowsshapes.label('Knowsshapes'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowscolors.label('knowscolors'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsanimals.label('knowsanimals'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsvehicles.label('knowsvehicles'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsbodyparts.label('knowsbodyparts'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsidentificationofalphabets.label('knowsidentificationofalphabets'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsmoreorless.label('knowsmoreorless'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsbigandsmall.label('knowsbigandsmall'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_knowsnearandfar.label('knowsnearandfar'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifhisorher.label('canidentifhisorher'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifybag.label('canidentifybag'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifyshoes.label('canidentifyshoes'),
                                            Model.models.Application.M_SpecialEdassessmenttwoyears.MSATW_canidentifybottle.label('canidentifybottle'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialEdassessmenttwoyears.MSATWID.desc()).all())
                    session.commit()
                    queryresult4= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpecialEdassessmentthreeyearsReport,
                                session.query(Model.models.Application.M_SpecialEdassessmentThreeyears.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_respondstoname.label('respondstoname'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_makeseyecontact.label('makeseyecontact'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cansitformins.label('cansitformins'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canmoveeyesupanddown.label('canmoveeyesupanddown'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canmoveeyesleftandright.label('canmoveeyesleftandright'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerfullname.label('cananswerfullname'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularybodyparts.label('vocabularybodyparts'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfollowstepsinstruction.label('canfollowstepsinstruction'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerold.label('cananswerold'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerwhatsyourmothersname.label('cananswerwhatsyourmothersname'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cananswerwhichisyoufavoritecolour.label('cananswerwhichisyoufavoritecolour'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfixpiecepuzzle.label('canfixpiecepuzzle'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularyshapescircle.label('vocabularyshapescircle'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularycolors.label('vocabularycolors'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_vocabularywild.label('vocabularywild'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_Vocabularyfruits.label('Vocabularyfruits'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canfollowstepinstruction.label('canfollowstepinstruction'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cansingrhymes.label('cansingrhymes'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerseeinsky.label('cangiveanswerseeinsky'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerswiminwater.label('cangiveanswerswiminwater'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cangiveanswerseeontree.label('cangiveanswerseeontree'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_knowsidentificationofalphabets.label('knowsidentificationofalphabets'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_knowsidentificationofnumbers.label('knowsidentificationofnumbers'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_Canholdapencilcrayon.label('Canholdapencilcrayon'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canscribble.label('canscribble'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cancoloringivenshape.label('cancoloringivenshape'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_cantearandpaste.label('cantearandpaste'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionshappy.label('canidentifyemotionshappy'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionssad.label('canidentifyemotionssad'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionsangry.label('canidentifyemotionsangry'),
                                            Model.models.Application.M_SpecialEdassessmentThreeyears.MSATW_canidentifyemotionsupset.label('canidentifyemotionsupset'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialEdassessmentThreeyears.MSATWID.desc()).all())
                    session.commit()
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpecialEdassessmentthreefouryearsReport,
                                session.query(Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_doesrespondtonamecall.label('doesrespondtonamecall'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_doesmakeseyecontact.label('doesmakeseyecontact'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_initiatesinteractiontoward.label('initiatesinteractiontoward'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cansitformins.label('cansitformins'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_understandinstructionslikestand.label('understandinstructionslikestand'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_getthatputthere.label('getthatputthere'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_givemegetthis.label('givemegetthis'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_runwalkjump.label('runwalkjump'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_lookdownup.label('lookdownup'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cananswerwhatis.label('cananswerwhatis'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cananswerfavoritecolour.label('cananswerfavoritecolour'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canfixpiecepuzzle.label('canfixpiecepuzzle'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularyshapes.label('vocabularyshapes'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularycolors.label('vocabularycolors'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularywild.label('vocabularywild'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularyfruits.label('vocabularyfruits'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_vocabularybodyparts.label('vocabularybodyparts'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_Canunderstandpositions.label('Canunderstandpositions'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cansingrhymes.label('cansingrhymes'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canunderstandstories.label('canunderstandstories'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canWhatquestions.label('canWhatquestions'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canidentifybasicobjects.label('canidentifybasicobjects'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canholdacrayonpencil.label('canholdacrayonpencil'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canmaketower.label('canmaketower'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canimitate.label('canimitate'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canplaydoughballs.label('canplaydoughballs'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canheshethrow.label('canheshethrow'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_canrecognisealphabet.label('canrecognisealphabet'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_Canrecognisenumerals.label('Canrecognisenumerals'),
                                            Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATW_cancolourgivenshape.label('cancolourgivenshape'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentthrefourYrs.MSATWID.desc()).all())

                    session.commit()
                    queryresult1= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpecialEdassessmentfouryearsReport,
                                session.query(Model.models.Application.M_SpecialAssessmentfourYrs.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_respondnamecall.label('respondnamecall'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_makeseyecontact.label('makeseyecontact'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_interactiontowardothers.label('interactiontowardothers'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cansitformins.label('cansitformins'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cananswerwhatname.label('cananswerwhatname'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_answerfavoritecolour.label('answerfavoritecolour'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canfixpiecepuzzle.label('canfixpiecepuzzle'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularyshapes.label('vocabularyshapes'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularycolors.label('vocabularycolors'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularywild.label('vocabularywild'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_vocabularybody.label('vocabularybody'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_Vocabularyfruits.label('Vocabularyfruits'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canunderstandpositions.label('canunderstandpositions'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cansingrhymes.label('cansingrhymes'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canunderstandstories.label('canunderstandstories'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_replyWhatquestions.label('replyWhatquestions'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_identifybasicobjects.label('identifybasicobjects'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_holdcrayonpencil.label('holdcrayonpencil'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canimitate.label('canimitate'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_doughmakeballs.label('doughmakeballs'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_canthrow.label('canthrow'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_recognisealphabets.label('recognisealphabets'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_recognisenumerals.label('recognisenumerals'),
                                            Model.models.Application.M_SpecialAssessmentfourYrs.MSATW_cancolourshape.label('cancolourshape'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentfourYrs.MSATWID.desc()).all())

                    session.commit()
                    
                    queryresult2= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SpecialEdassessmentsevenyearsReport,
                                session.query(Model.models.Application.M_SpecialAssessmentSevenYrs.MSATWID.label('ID'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_putneedsminimalassistance.label('putneedsminimalassistance'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_eathandsonly.label('eathandsonly'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_fixasandwich.label('fixasandwich'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_givefirstlastname.label('givefirstlastname'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_cangiveaddress.label('cangiveaddress'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_awareofemotions.label('awareofemotions'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_canzipper.label('canzipper'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_independentlyassistanct.label('independentlyassistanct'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_asksmeaningfulquestions.label('asksmeaningfulquestions'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_tellsstorieswords.label('tellsstorieswords'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_Doestellage.label('Doestellage'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_canobeysimplecommands.label('canobeysimplecommands'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_readsimplewords.label('readsimplewords'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_writesimplewords.label('writesimplewords'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_namethingsaround.label('namethingsaround'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_alternatesfeetupdownstairs.label('alternatesfeetupdownstairs'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_pedaltricycle.label('pedaltricycle'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_catchandthrowball.label('catchandthrowball'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_towersmallblocks.label('towersmallblocks'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_doughmakeballs.label('doughmakeballs'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_tieshoes.label('tieshoes'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_holdpencilproperly.label('holdpencilproperly'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_drawsanyshape.label('drawsanyshape'),
                                            Model.models.Application.M_SpecialAssessmentSevenYrs.MSATW_usescissorscutshape.label('usescissorscutshape'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSATW_IsActive=1,MSATW_IsDeleted=0
                                ).order_by(Model.models.Application.M_SpecialAssessmentSevenYrs.MSATWID.desc()).all())
                    session.commit()
                    
                    return jsonify(result={'SpecialEdassessmentthreefouryearsReport':queryresult,'SpecialEdassessmentfouryearsReport':queryresult1,
                                           'SpecialEdassessmentsevenyearsReport':queryresult2,'SpecialEdassessmenttwoyearsReport':queryresult3,
                                           'SpecialEdassessmentthreeyearsReport':queryresult4})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/LanguageAssessment1', methods=['GET','POST'])
def LanguageAssessment1():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SystemicExamReport,
                                session.query(Model.models.Application.M_SystemicExam.MSEID.label('ID'),
                                            Model.models.Application.M_SystemicExam.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_SystemicExam.MSE_Observations.label('Observations'),
                                                ).filter_by(M_AppointmentID=AID,MSE_IsActive=1,MSE_IsDeleted=0
                                ).order_by(Model.models.Application.M_SystemicExam.MSEID.desc()).all())
                    session.commit()
                    queryresult1= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.CognitivePrerequitesReport,
                                session.query(Model.models.Application.M_CognitivePrerequites.MCPID.label('ID'),
                                            Model.models.Application.M_CognitivePrerequites.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Imitation.label('Imitation'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Objectpermanence.label('Objectpermanence'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Timeconcept.label('Timeconcept'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Colourconcept.label('Colourconcept'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Moneyconcept.label('Moneyconcept'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Sequencing.label('Sequencing'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Matching.label('Matching'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Meanendrelationship.label('Meanendrelationship'),
                                            Model.models.Application.M_CognitivePrerequites.MCP_Observations.label('Observations'),

                                                ).filter_by(M_AppointmentID=AID,MCP_IsActive=1,MCP_IsDeleted=0
                                ).order_by(Model.models.Application.M_CognitivePrerequites.MCPID.desc()).all())
                    session.commit()
                    queryresult2= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewNICHQVanderbiltADHDParentReport,
                            session.query(Model.models.Application.M_NICHQVanderbiltADHDParent.MVAID.label('ID'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_InattentionScore.label('Inattention Score'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_HyperactivityScore.label('Hyperactivity Score'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_CombinedScore.label('Combined Score'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_OppositionalScore.label('Oppositional Score'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_ConductScore.label('Conduct Score'),
                                        Model.models.Application.M_NICHQVanderbiltADHDParent.MVA_AnxietyScore.label('Anxiety Score'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MVA_IsActive=1,MVA_IsDeleted=0
                            ).order_by(Model.models.Application.M_NICHQVanderbiltADHDParent.MVAID.desc()).all())
                    session.commit()
                    
                    queryresult3= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewSequinFormBoardTestReport,
                            session.query(Model.models.Application.M_SequinFormBoardTest.MSFBID.label('ID'),
                                        Model.models.Application.M_SequinFormBoardTest.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_MentalAge.label('Mental Age'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_IQ.label('IQ'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_ShortestTime.label('Shortest Time'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_TotalTime.label('Total Time'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_CorrespondsMentalAge.label('Corresponds Mental Age'),
                                        Model.models.Application.M_SequinFormBoardTest.MSFB_suggestingIntellectualfunctioning.label('Suggesting Intellectual Functioning'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MSFB_IsActive=1,MSFB_IsDeleted=0
                            ).order_by(Model.models.Application.M_SequinFormBoardTest.MSFBID.desc()).all())
                    session.commit()
                    
                    queryresult4= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewChildhoodAutismRatingScaleReport,
                            session.query(Model.models.Application.M_ChildhoodAutismRatingScale.MCARID.label('ID'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_RelatingtoPeople.label('Relating to People'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Imitation.label('Imitation'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_EmotionalResponse.label('Emotional Response'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_BodyUse.label('Body Use'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_ObjectUse.label('Object Use'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_AdaptationChange.label('Daptation Change'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_VisualResponse.label('Visual Response'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_ListeningResponse.label('Listening Response'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_TasteSmellUse.label('Taste Smell Use'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Fearornervousness.label('Fear or Nervousness'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Verbal.label('Verbal'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Nonverbal.label('Non Verbal'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_ActivityLevel.label('Activity Level'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Consistencyresponse.label('Consistency Response'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_GeneralImpression.label('General Impression'),
                                        Model.models.Application.M_ChildhoodAutismRatingScale.MCAR_Concludinremark.label('Concluding Remark')
                                        
                                            ).filter_by(M_AppointmentID=AID,MCAR_IsActive=1,MCAR_IsDeleted=0
                            ).order_by(Model.models.Application.M_ChildhoodAutismRatingScale.MCARID.desc()).all())
                    session.commit()
                    
                    queryresult5= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewVinelandSocialMaturityScaleReport,
                            session.query(Model.models.Application.M_VinelandSocialMaturityScale.MVAMID.label('ID'),
                                        Model.models.Application.M_VinelandSocialMaturityScale.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_VinelandSocialMaturityScale.MVAM_SocialAge.label('Social Age'),
                                        Model.models.Application.M_VinelandSocialMaturityScale.MVAM_IQ.label('Social Quotient'),
                                        Model.models.Application.M_VinelandSocialMaturityScale.MVAM_Observations.label('Observations'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MVAM_IsActive=1,MVAM_IsDeleted=0
                            ).order_by(Model.models.Application.M_VinelandSocialMaturityScale.MVAMID.desc()).all())

                    session.commit()
                    
                    queryresult6= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewGeselsDrawingTestofintelligenceReport,
                            session.query(Model.models.Application.M_GeselsDrawingTestofintelligence.MGDIID.label('ID'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_MentalAge.label('Mental Age'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_IQ.label('IQ'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_MentalAgeMonths.label('Mental Age Months'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_MentalAgeYears.label('Mental Age Years'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_IQof.label('IQ of'),
                                        Model.models.Application.M_GeselsDrawingTestofintelligence.MGDI_Depicting.label('Depicting'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MGDI_IsActive=1,MGDI_IsDeleted=0
                            ).order_by(Model.models.Application.M_GeselsDrawingTestofintelligence.MGDIID.desc()).all())
                    return jsonify(result={'SystemicExamReport':queryresult,'CognitivePrerequitesReport':queryresult1,
                                           'viewNICHQVanderbiltADHDParentReport':queryresult2,'viewSequinFormBoardTestReport':queryresult3,
                                           'viewChildhoodAutismRatingScaleReport':queryresult4,'viewVinelandSocialMaturityScaleReport':queryresult5,
                                           'viewGeselsDrawingTestofintelligenceReport':queryresult6})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/LanguageAssessment2', methods=['GET','POST'])
def LanguageAssessment2():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewMalinIntelligenceScaleforIndianChildrenReport,
                            session.query(Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISIID.label('ID'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_InformationTestScores.label('InformationTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_PictureTestScores.label('PictureTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_GeneralTestScores.label('GeneralTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_BlockDesignTestScores.label('BlockDesignTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_ArithmeticTestScores.label('ArithmeticTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_ObjectScores.label('ObjectScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_VocabularyTestScores.label('VocabularyTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_MazeTestScores.label('MazeTestScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_AnalogiesScores.label('AnalogiesScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_CodingScores.label('CodingScores'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_VQ.label('VQ'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_PQ.label('PQ'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_FullScaleIQ.label('FullScaleIQ'),
                                        Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISI_Comment.label('Comment'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MISI_IsActive=1,MISI_IsDeleted=0
                            ).order_by(Model.models.Application.M_MalinIntelligenceScaleforIndianChildren.MISIID.desc()).all())
                    session.commit()
                    
                    queryresult1= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewDevelopmentalProfileReport,
                            session.query(Model.models.Application.M_DevelopmentalProfile.MDPID.label('ID'),
                                        Model.models.Application.M_DevelopmentalProfile.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_PhysicalStandardScore.label('Physical Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_PhysicalDescCategory.label('Physical Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_PhysicalAgeEquivalent.label('Physical Age Equivalent'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_AdaptiveBehaviorStandardScore.label('Adaptive Behavior Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_AdaptiveBehaviorDescCategory.label('Adaptive Behavior Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_AdaptiveBehaviorAgeEquivalent.label('Adaptive Behavior Age Equivalent'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_SocialEmoStandardScore.label('Social Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_SocialEmoDescCategory.label('Social Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_SocialEmoAgeEquivalent.label('Social Equivalent'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CognitiveStandardScore.label('Cognitive Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CognitiveDescCategory.label('Cognitive Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CognitiveAgeEquivalent.label('Cognitive Age Equivalent'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CommStandardScore.label('Comm Standard Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CommDescCategory.label('Comm Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_CommAgeEquivalent.label('Comm Age Equivalent'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_GeneralDevScoreStandardScore.label('General Dev Score'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_GeneralDevScoreDescCategory.label('General Dev Category'),
                                        Model.models.Application.M_DevelopmentalProfile.MDP_GeneralDevScoreAgeEquivalent.label('General Age Equivalent')
                                        
                                            ).filter_by(M_AppointmentID=AID,MDP_IsActive=1,MDP_IsDeleted=0
                            ).order_by(Model.models.Application.M_DevelopmentalProfile.MDPID.desc()).all())
                    session.commit()
                    
                    queryresult2= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewChildBehaviorChecklistReport,
                            session.query(Model.models.Application.M_ChildBehaviorChecklist.MCBCID.label('ID'),
                                        Model.models.Application.M_ChildBehaviorChecklist.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AnxiousScores.label('AnxiousScores'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AnxiousTscore.label('AnxiousTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AnxiousRange.label('AnxiousRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.WithdrawnScores.label('WithdrawnScores'),
                                        Model.models.Application.M_ChildBehaviorChecklist.WithdrawnTscore.label('WithdrawnTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.WithdrawnRange.label('WithdrawnRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SomaticComplaintScores.label('SomaticComplaintScores'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SomaticComplaintTscore.label('SomaticComplaintTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SomaticComplaintRange.label('SomaticComplaintRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SocialProblemScores.label('SocialProblemScores'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SocialProblemTscore.label('SocialProblemTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.SocialProblemRange.label('SocialProblemRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.ThoughtProblemScore.label('ThoughtProblemScore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.ThoughtProblemTscore.label('ThoughtProblemTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.ThoughtProblemRange.label('ThoughtProblemRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AttentionProblemScore.label('AttentionProblemScore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AttentionProblemTscore.label('AttentionProblemTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AttentionProblemRange.label('AttentionProblemRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.RuleBreakingBehaviorScore.label('RuleBreakingBehaviorScore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.RuleBreakingBehaviorTscore.label('RuleBreakingBehaviorTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.RuleBreakingBehaviorRange.label('RuleBreakingBehaviorRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AggressiveBehaviorScores.label('AggressiveBehaviorScores'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AggressiveBehaviorTscore.label('AggressiveBehaviorTscore'),
                                        Model.models.Application.M_ChildBehaviorChecklist.AggressiveBehaviorRange.label('AggressiveBehaviorRange'),
                                        Model.models.Application.M_ChildBehaviorChecklist.Comment.label('Comment')

                                        ).filter_by(M_AppointmentID=AID,MCBC_IsActive=1,MCBC_IsDeleted=0
                            ).order_by(Model.models.Application.M_ChildBehaviorChecklist.MCBCID.desc()).all())
                    session.commit()
                    queryresult3= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.ConnersParentRatingScaleReport,
                                session.query(Model.models.Application.M_ConnersParentRatingScale.MCPRID.label('ID'),
                                            Model.models.Application.M_ConnersParentRatingScale.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Scores.label('Scores'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Tscores.label('Tscores'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Range.label('Range'),
                                            Model.models.Application.M_ConnersParentRatingScale.MCPR_Observations.label('Observations'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MCPR_IsActive=1,MCPR_IsDeleted=0
                                ).order_by(Model.models.Application.M_ConnersParentRatingScale.MCPRID.desc()).all())

                    session.commit()
                    queryresult4= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewRavenStandardProgressiveMatricesReport,
                            session.query(Model.models.Application.M_RavenStandardProgressiveMatrices.MRSPID.label('ID'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_RawScore.label('Raw Score'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Percentile.label('Percentile'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Grade.label('Grade'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_Interpretation.label('Interpretation'),
                                        Model.models.Application.M_RavenStandardProgressiveMatrices.MRSP_CorrespondsTo.label('Corresponds To'),
                                        
                                            ).filter_by(M_AppointmentID=AID,MRSP_IsActive=1,MRSP_IsDeleted=0
                            ).order_by(Model.models.Application.M_RavenStandardProgressiveMatrices.MRSPID.desc()).all())
                    session.commit()
                    queryresult5= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewStutteringAssessmentReport,
                                session.query(Model.models.Application.M_StutteringAssessment.MSAID.label('ID'),
                                            Model.models.Application.M_StutteringAssessment.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_StutteringAssessment.MSA_Behaviouralassessment.label('Behavioural assessment'),
                                            Model.models.Application.M_StutteringAssessment.MSA_Cognitiveassessment.label('Cognitive assessment'),
                                            Model.models.Application.M_StutteringAssessment.MSA_Impacteducationalparticipation.label('Impact educational participation'),
                                            Model.models.Application.M_StutteringAssessment.MSA_thechildlikelytoachieve.label('Likely to Achieve'),
                                            Model.models.Application.M_StutteringAssessment.MSA_prognosisforeffect.label('Prognosis Effect'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MSA_IsActive=1,MSA_IsDeleted=0
                                ).order_by(Model.models.Application.M_StutteringAssessment.MSAID.desc()).all())
                    session.commit()
                    queryresult6= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewPragmaticSkillsReport,
                                session.query(Model.models.Application.M_PragmaticSkills.MVEFID.label('Id'),
                            Model.models.Application.M_PragmaticSkills.MPS_InitiationSkills.label('InitiationSkills'),
                            Model.models.Application.M_PragmaticSkills.MPS_RespondingSkills.label('RespondingSkills'),
                            Model.models.Application.M_PragmaticSkills.MPS_MaintenanceSkills.label('MaintenanceSkills'),
                            Model.models.Application.M_PragmaticSkills.MPS_TerminationSkills.label('TerminationSkills'),
                            Model.models.Application.M_PragmaticSkills.MPS_Observations.label('Observations')
                                ).filter_by(M_AppointmentID=AID,MPS_IsActive=1,MPS_IsDeleted=0
                                ).order_by(Model.models.Application.M_PragmaticSkills.MVEFID.desc()).all())
                    session.commit()
                    return jsonify(result={'viewMalinIntelligenceScaleforIndianChildrenReport':queryresult,'viewDevelopmentalProfileReport':queryresult1,
                                           'viewChildBehaviorChecklistReport':queryresult2,'ConnersParentRatingScaleReport':queryresult3,
                                           'viewRavenStandardProgressiveMatricesReport':queryresult4,'viewStutteringAssessmentReport':queryresult5,
                                           'viewPragmaticSkillsReport':queryresult6})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/Examination1', methods=['GET','POST'])
def Examination1():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.VitalsExamReport,
                                session.query(Model.models.Application.M_VitalsExamForm.MVEFID.label('ID'),
                                            Model.models.Application.M_VitalsExamForm.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_BloodPressure.label('Blood Pressure'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_PulseRate.label('Pulse Rate'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_RespiratoryRate.label('Respiratory Rate'),
                                            Model.models.Application.M_VitalsExamForm.MVEF_Temperator.label('Temperator'),
                                            
                                                ).filter_by(M_AppointmentID=AID,MVEF_IsActive=1,MVEF_IsDeleted=0
                                ).order_by(Model.models.Application.M_VitalsExamForm.MVEFID.desc()).all())
                    # queryresult= Common_Function.CommonFun.convertToJson(
                    #             Constant.constant.constant.VitalExamReport,
                    #             session.query(Model.models.Application.M_SystemicExam.MSEID.label('ID'),
                    #                         Model.models.Application.M_SystemicExam.M_AppointmentID.label('Appointment Id'),
                    #                         Model.models.Application.M_SystemicExam.MSE_Observations.label('Observations'),
                    #                             ).filter_by(M_AppointmentID=AID,MSE_IsActive=1,MSE_IsDeleted=0
                    #             ).order_by(Model.models.Application.M_SystemicExam.MSEID.desc()).all())
                    session.commit()
                    
                    queryresult1= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.GeneralExamReport,
                                session.query(Model.models.Application.M_GeneralExamForm.MGEFID.label('ID'),
                                            Model.models.Application.M_GeneralExamForm.M_AppointmentID.label('Appointment Id'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_Height.label('Height'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_Weight.label('Weight'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_HeadCircumference.label('Head Circumference'),
                                            Model.models.Application.M_GeneralExamForm.MGEF_Observations.label('Observations'),

                                                ).filter_by(M_AppointmentID=AID,MGEF_IsActive=1,MGEF_IsDeleted=0
                                ).order_by(Model.models.Application.M_GeneralExamForm.MGEFID.desc()).all())
                    session.commit()
                    
                    queryresult2= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewIndianScaleAssessmentAutismReport,
                            session.query(Model.models.Application.M_IndianScaleAssessmentAutism.MIID.label('ID'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.M_AppointmentID.label('Appointment Id'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.SOCIALRECIPROCITY.label('SOCIAL RECIPROCITY'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.EMOTIONALRESPONSIVENESS.label('EMOTIONAL RESPONSIVENESS'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.SPEECHCOMMUNICATION.label('SPEECH COMMUNICATION'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.BEHAVIOURPATTERNS.label('BEHAVIOUR PATTERNS'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.SENSORYASPECTS.label('SENSORY ASPECTS'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.COGNITIVECOMPONENT.label('COGNITIVE COMPONENT'),
                                        Model.models.Application.M_IndianScaleAssessmentAutism.FinalComment.label('Final Comment')
                                        
                                            ).filter_by(M_AppointmentID=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_IndianScaleAssessmentAutism.MIID.desc()).all())
                    session.commit()
                    
                    queryresult3= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewPerceptualAndVisualMotorAbilityReport,
                            session.query(Model.models.Application.M_PerceptualNvisual.MIID.label('ID'),
                                        Model.models.Application.M_PerceptualNvisual.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_PerceptualNvisual.VisualDiscr.label('VisualDiscr'),
                                        Model.models.Application.M_PerceptualNvisual.VisualDiscrComments.label('VisualDiscrComments'),
                                        Model.models.Application.M_PerceptualNvisual.VisualMemoryTest.label('VisualMemoryTest'),
                                        Model.models.Application.M_PerceptualNvisual.VisualMemoryTestComments.label('VisualMemoryTestComments'),
                                        Model.models.Application.M_PerceptualNvisual.AuditoryMemory.label('AuditoryMemory'),
                                        Model.models.Application.M_PerceptualNvisual.AuditoryMemoryComments.label('AuditoryMemoryComments'),
                                        Model.models.Application.M_PerceptualNvisual.Attention.label('Attention'),
                                        Model.models.Application.M_PerceptualNvisual.AttentionComments.label('AttentionComments'),
                                        Model.models.Application.M_PerceptualNvisual.DoubleNumCancel.label('DoubleNumCancel'),
                                        Model.models.Application.M_PerceptualNvisual.DoubleNumCancelComments.label('DoubleNumCancelComments'),
                                        Model.models.Application.M_PerceptualNvisual.Language.label('Language'),
                                        Model.models.Application.M_PerceptualNvisual.LanguageComments.label('LanguageComments'),
                                        Model.models.Application.M_PerceptualNvisual.Reading.label('Reading'),
                                        Model.models.Application.M_PerceptualNvisual.ReadingComments.label('ReadingComments'),
                                        Model.models.Application.M_PerceptualNvisual.Comprehension.label('Comprehension'),
                                        Model.models.Application.M_PerceptualNvisual.ComprehensionComments.label('ComprehensionComments'),
                                        Model.models.Application.M_PerceptualNvisual.Spelling.label('Spelling'),
                                        Model.models.Application.M_PerceptualNvisual.SpellingComments.label('SpellingComments'),
                                        Model.models.Application.M_PerceptualNvisual.WritingAndCopy.label('WritingAndCopy'),
                                        Model.models.Application.M_PerceptualNvisual.WritingAndCopyComments.label('WritingAndCopyComments'),
                                        Model.models.Application.M_PerceptualNvisual.WritingSkills.label('WritingSkills'),
                                        Model.models.Application.M_PerceptualNvisual.WritingSkillsComments.label('WritingSkillsComments'),
                                        Model.models.Application.M_PerceptualNvisual.ExpressiveWriting.label('ExpressiveWriting'),
                                        Model.models.Application.M_PerceptualNvisual.ExpressiveWritingComments.label('ExpressiveWritingComments'),
                                        Model.models.Application.M_PerceptualNvisual.Copying.label('Copying'),
                                        Model.models.Application.M_PerceptualNvisual.CopyingComments.label('CopyingComments'),
                                        Model.models.Application.M_PerceptualNvisual.Arithmetic.label('Arithmetic'),
                                        Model.models.Application.M_PerceptualNvisual.ArithmeticComments.label('ArithmeticComments'),
                                        
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_PerceptualNvisual.MIID.desc()).all())
                    session.commit()
                    
                    queryresult4= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewWechslerTestReport,
                            session.query(Model.models.Application.M_WechslerTest.MIID.label('ID'),
                                        Model.models.Application.M_WechslerTest.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_WechslerTest.SubsetScore.label('SubsetScore'),
                                        Model.models.Application.M_WechslerTest.ReadCompStandardScore.label('ReadCompStandardScore'),
                                        Model.models.Application.M_WechslerTest.ReadCompConfidenceInterval.label('ReadCompConfidenceInterval'),
                                        Model.models.Application.M_WechslerTest.ReadCompPercentileRank.label('ReadCompPercentileRank'),
                                        Model.models.Application.M_WechslerTest.ReadCompGradeEquivalent.label('ReadCompGradeEquivalent'),
                                        Model.models.Application.M_WechslerTest.WordReadStandardScore.label('WordReadStandardScore'),
                                        Model.models.Application.M_WechslerTest.WordReadConfidence.label('WordReadConfidence'),
                                        Model.models.Application.M_WechslerTest.WordReadPercentileRank.label('WordReadPercentileRank'),
                                        Model.models.Application.M_WechslerTest.WordReadGradeEquivalent.label('WordReadGradeEquivalent'),
                                        Model.models.Application.M_WechslerTest.EssayCompStandardScore.label('EssayCompStandardScore'),
                                        Model.models.Application.M_WechslerTest.EssayCompConfidence.label('EssayCompConfidence'),
                                        Model.models.Application.M_WechslerTest.EssayCompPercentileRank.label('EssayCompPercentileRank'),
                                        Model.models.Application.M_WechslerTest.EssayCompGradeEquivalent.label('EssayCompGradeEquivalent'),
                                        Model.models.Application.M_WechslerTest.NumOperStandardScore.label('NumOperStandardScore'),
                                        Model.models.Application.M_WechslerTest.NumOperConfidence.label('NumOperConfidence'),
                                        Model.models.Application.M_WechslerTest.NumOperPercentileRank.label('NumOperPercentileRank'),
                                        Model.models.Application.M_WechslerTest.NumOperGradeEquivalent.label('NumOperGradeEquivalent'),
                                        Model.models.Application.M_WechslerTest.SpelStandardScore.label('SpelStandardScore'),
                                        Model.models.Application.M_WechslerTest.SpelConfidence.label('SpelConfidence'),
                                        Model.models.Application.M_WechslerTest.SpelPercentileRank.label('SpelPercentileRank'),
                                        Model.models.Application.M_WechslerTest.SpelGradeEquivalent.label('SpelGradeEquivalent'),
                                        Model.models.Application.M_WechslerTest.Comment.label('Comment'),
                                        Model.models.Application.M_WechslerTest.MathematicsComment.label('MathematicsComment'),
                                        Model.models.Application.M_WechslerTest.WrittenExpComment.label('WrittenExpComment'),
                                        
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_WechslerTest.MIID.desc()).all())
                    session.commit()
                    queryresult5= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewHumanFormDrawingtestReport,
                            session.query(Model.models.Application.M_HumanFormDrawingtest.MIID.label('ID'),
                                        Model.models.Application.M_HumanFormDrawingtest.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_HumanFormDrawingtest.findings.label('findings'),
                                        Model.models.Application.M_HumanFormDrawingtest.indicators.label('indicators'),
                                        Model.models.Application.M_HumanFormDrawingtest.comment.label('comment')
                                        
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_HumanFormDrawingtest.MIID.desc()).all())
                    session.commit()
                    queryresult6= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewHumanTreePersonTestReport,
                            session.query(Model.models.Application.M_HumanTreePersonTest.MIID.label('ID'),
                                        Model.models.Application.M_HumanTreePersonTest.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_HumanTreePersonTest.findings.label('findings'),
                                        Model.models.Application.M_HumanTreePersonTest.indicators.label('indicators'),
                                        Model.models.Application.M_HumanTreePersonTest.comment.label('comment')
                                        
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_HumanTreePersonTest.MIID.desc()).all())
                    session.commit()
                    return jsonify(result={'VisitReasonReport':queryresult,'GeneralExamReport':queryresult1,
                                           'viewIndianScaleAssessmentAutismReport':queryresult2,'viewPerceptualAndVisualMotorAbilityReport':queryresult3,
                                           'viewWechslerTestReport':queryresult4,'viewHumanFormDrawingtestReport':queryresult5,
                                           'viewHumanTreePersonTestReport':queryresult6})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/Examination2', methods=['GET','POST'])
def Examination2():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewChildAnxietyRelatedDisordersReport,
                            session.query(Model.models.Application.M_ChildAnxietyRelatedDisorders.MIID.label('ID'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.PanicDisScore.label('PanicDisorderScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.GenAnxietyDisScore.label('GeneralizedAnxietyDisorderScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.SepAnxietyDisScore.label('SeparationAnxietyDisorderScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.SocialAnxietyDisScore.label('SocialAnxietyDisorderScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.SchoolAvoidScore.label('SchoolAvoidanceScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.AnxietyDisScore.label('AnxietyDisorderScore'),
                                        Model.models.Application.M_ChildAnxietyRelatedDisorders.Comment.label('Comment'),
                                        
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_ChildAnxietyRelatedDisorders.MIID.desc()).all())

                    session.commit()
                    queryresult1= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewDSMVCriteriaReport,
                            session.query(Model.models.Application.M_DSMVCriteria.MIID.label('ID'),
                                        Model.models.Application.M_DSMVCriteria.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_DSMVCriteria.ACriteria.label('ACriteria'),
                                        Model.models.Application.M_DSMVCriteria.ACriteriaComment.label('ACriteriaComment'),
                                        Model.models.Application.M_DSMVCriteria.BCriteria.label('BCriteria'),
                                        Model.models.Application.M_DSMVCriteria.BCriteriaComment.label('BCriteriaComment'),
                                        Model.models.Application.M_DSMVCriteria.CCriteria.label('CCriteria'),
                                        Model.models.Application.M_DSMVCriteria.CCriteriaComment.label('CCriteriaComment'),
                                        Model.models.Application.M_DSMVCriteria.DCriteria.label('DCriteria'),
                                        Model.models.Application.M_DSMVCriteria.DCriteriaComment.label('DCriteriaComment'),
                                        Model.models.Application.M_DSMVCriteria.Question5.label('Question5'),
                                        Model.models.Application.M_DSMVCriteria.Question5Comment.label('Question5Comment'),
                                        Model.models.Application.M_DSMVCriteria.Question6.label('Question6'),
                                        Model.models.Application.M_DSMVCriteria.Question6Comment.label('Question6Comment'),
                                        Model.models.Application.M_DSMVCriteria.Question7.label('Question7'),
                                        Model.models.Application.M_DSMVCriteria.Question7Comment.label('Question7Comment'),
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_DSMVCriteria.MIID.desc()).all())
                    
                    queryresult2= Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.viewEpidemiologicalStudiesDepressionScaleReport,
                            session.query(Model.models.Application.M_EpidemiologicalStudiesDepression.MIID.label('ID'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.MI_AppointmentId.label('Appointment Id'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.NotAtAllScore.label('NotAtAllScore'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.ALittleScore.label('ALittleScore'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.SomeScore.label('SomeScore'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.ALotScore.label('ALotScore'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.TotalRawScore.label('TotalRawScore'),
                                        Model.models.Application.M_EpidemiologicalStudiesDepression.Comment.label('Comment')
                                            ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                            ).order_by(Model.models.Application.M_EpidemiologicalStudiesDepression.MIID.desc()).all())

                    session.commit()
                    queryresult3= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.DSMVASDCriteriaReport,
                                session.query(Model.models.Application.M_DSMVASDCriteria.persistentDeficit.label('persistentDeficit'),
                                            Model.models.Application.M_DSMVASDCriteria.persistentDeficitComment.label('persistentDeficitComment'),
                                            Model.models.Application.M_DSMVASDCriteria.restrictedRepetitive.label('restrictedRepetitive'),
                                            Model.models.Application.M_DSMVASDCriteria.restrictedRepetitiveComment.label('restrictedRepetitiveComment'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsMust.label('symptomsMust'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsMustComment.label('symptomsMustComment'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsCause.label('symptomsCause'),
                                            Model.models.Application.M_DSMVASDCriteria.symptomsCauseComment.label('symptomsCauseComment'),
                                            Model.models.Application.M_DSMVASDCriteria.theseDisturbances.label('theseDisturbances'),
                                            Model.models.Application.M_DSMVASDCriteria.theseDisturbancesComment.label('theseDisturbancesComment'),
                                            Model.models.Application.M_DSMVASDCriteria.question7.label('question7'),
                                            Model.models.Application.M_DSMVASDCriteria.question7Comment.label('question7Comment'),
                                            Model.models.Application.M_DSMVASDCriteria.MDCID.label('Id')
                                                ).filter_by(MI_AppointmentId=AID,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_DSMVASDCriteria.MDCID.desc()).all())

                    session.commit()
                    queryresult4= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.DSMVADHDCriteriaReport,
                                session.query(Model.models.Application.M_DSMVADHDCriteria.MDID.label('ID'),
                                            Model.models.Application.M_DSMVADHDCriteria.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_DSMVADHDCriteria.APersistent.label('APersistent'),
                                            Model.models.Application.M_DSMVADHDCriteria.BSeveral.label('BSeveral'),
                                            Model.models.Application.M_DSMVADHDCriteria.CSeveral.label('CSeveral'),
                                            Model.models.Application.M_DSMVADHDCriteria.Combinedpresentation.label('Combinedpresentation'),
                                            Model.models.Application.M_DSMVADHDCriteria.DThere.label('DThere'),
                                            Model.models.Application.M_DSMVADHDCriteria.Ethesymptoms.label('Ethesymptoms'),
                                            Model.models.Application.M_DSMVADHDCriteria.Predominantly.label('Predominantly'),
                                                ).filter_by(IsActive=1,IsDeleted=0,MI_AppointmentId=AID
                                                
                                ).order_by(Model.models.Application.M_DSMVADHDCriteria.MDID.desc()).all())
                    session.commit()
                    queryresult5= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SocialResponsivenessScaleReport,
                                session.query(Model.models.Application.M_SocialResponsivenessScale.MSID.label('ID'),
                                            Model.models.Application.M_SocialResponsivenessScale.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_SocialResponsivenessScale.SCIRawScore.label('SCIRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.SCITscore.label('SCITscore'),
                                            Model.models.Application.M_SocialResponsivenessScale.BehaviorsRawScore.label('BehaviorsRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.BehaviorsTscore.label('BehaviorsTscore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialAwarenessRawScore.label('socialAwarenessRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialAwarenessTscore.label('socialAwarenessTscore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialCognitionRawScore.label('socialCognitionRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialCognitionTscore.label('socialCognitionTscore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialCommunicationRawScore.label('socialCommunicationRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialCommunicationTscore.label('socialCommunicationTscore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialMotivationRawScore.label('socialMotivationRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialMotivationTscore.label('socialMotivationTscore'),
                                                ).filter_by(IsActive=1,IsDeleted=0,MI_AppointmentId=AID
                                                
                                ).order_by(Model.models.Application.M_SocialResponsivenessScale.MSID.desc()).all())
                    session.commit()
                    return jsonify(result={'viewChildAnxietyRelatedDisordersReport':queryresult,'viewDSMVCriteriaReport':queryresult1,
                                           'viewEpidemiologicalStudiesDepressionScaleReport':queryresult2,'DSMVASDCriteriaReport':queryresult3,
                                           'DSMVADHDCriteriaReport':queryresult4,'SocialResponsivenessScaleReport':queryresult5})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/MiscReport', methods=['GET','POST'])
def MiscReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    
                    StartedDtl = session.query(Model.models.Application.T_Details.TD_Name.label('StartedDl'),
                                          Model.models.Application.T_Details.TDID.label('IDs')).subquery()
                    todayfeelDtl = session.query(Model.models.Application.T_Details.TD_Name.label('todayfeelDl'),
                                                Model.models.Application.T_Details.TDID.label('IDs')).subquery()
                    queryResult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SessionNotesReport,
                                session.query(Model.models.Application.M_SessionNotes.MSN_started.label('Staed'),
                                Model.models.Application.M_SessionNotes.M_AppointmentID.label('AppointmentId'),
                                StartedDtl.c.StartedDl.label('Started'),
                                todayfeelDtl.c.todayfeelDl.label('todayfeel'),
                                
                                            Model.models.Application.M_SessionNotes.MSN_todayfeeling.label('todaeel'),
                                            Model.models.Application.M_SessionNotes.MSN_dotoday.label('dotod'),
                                            Model.models.Application.T_Details.TD_Name.label('dotoday'),
                                            Model.models.Application.M_SessionNotes.MSN_Notes.label('Notes'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_SessionNotes.MSN_AddDate,'%d-%b-%Y').label('Date'),
                                            ).filter_by(MSN_IsActive=1,MSN_IsDeleted=0,M_AppointmentID=AID
                                            ).join(Model.models.Application.T_Details, Model.models.Application.T_Details.TDID==Model.models.Application.M_SessionNotes.MSN_dotoday       
                                            ).outerjoin(StartedDtl, StartedDtl.c.IDs==Model.models.Application.M_SessionNotes.MSN_todayfeeling
                                            ).outerjoin(todayfeelDtl, todayfeelDtl.c.IDs==Model.models.Application.M_SessionNotes.MSN_started
                                            ).all()
                                        )
                    session.commit()
                    
                    queryResult1= Common_Function.CommonFun.convertToJson(
                        Constant.constant.constant.ProvisionalDiagnosisReport,
                        session.query(Model.models.Application.M_ProvisionalDiagnosis.MPD_ProvisionalDiagnosis.label('ProvisionalDiagnosis'),
                                    Model.models.Application.M_ProvisionalDiagnosis.M_AppointmentID.label('AppointmentId'),
                                    Model.models.Application.M_ProvisionalDiagnosis.MPD_ICDCode.label('ICDCode'),
                                    Model.models.Application.M_ProvisionalDiagnosis.MPD_ICDDescription.label('ICDDescription'),
                                    sqlalchemy.func.date_format(Model.models.Application.M_ProvisionalDiagnosis.MPD_AddDate,'%d-%b-%Y').label('Date'),
                                    ).filter_by(MPD_IsActive=1,MPD_IsDeleted=0,M_AppointmentID=AID,MPD_ShowDtl=1
                                    ).all()
                                )
                    session.commit()
                    queryresult4= session.query(Model.models.Application.M_PatientReview.MPDID.label('ID'),
                                            Model.models.Application.M_PatientReview.M_AppointmentID,
                                            Model.models.Application.M_PatientReview.MPR_FollowDate,
                                            sqlalchemy.func.date_format(Model.models.Application.M_PatientReview.MPR_FollowDate,'%d-%b-%Y').label('Date')
                                            ).filter_by(M_AppointmentID=AID,MPR_IsActive=1,MPR_IsDeleted=0
                                            ).order_by(Model.models.Application.M_PatientReview.MPDID.desc()).all()
                    if(len(queryresult4)>0):
                        followdate = queryresult4[0].Date
                        # return jsonify(result={'Follow Date':queryresult[0].Date})
                    else:
                        followdate = ''
                        # return jsonify(result={'Follow Date':''})
                    queryresult3= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPatientDetailFromAppointment,
                                session.query(Model.models.Application.M_Appointment.MAID.label('AppointId'),
                                    Model.models.Application.M_Appointment.M_Patient_MPID.label('Pid'),
                                    Model.models.Application.M_Appointment.MP_Procedure.label('procedure'),
                                    Model.models.Application.M_Appointment.MA_Date.label('date'),
                                    Model.models.Application.M_Appointment.MA_Time.label('time'),
                                    Model.models.Application.M_Appointment.MP_Duration.label('duration'),
                                    Model.models.Application.M_Appointment.M_DoctorDetails_MDDID.label('doctor'),
                                    Model.models.Application.M_Patient.MP_Name.label('Patient'),
                                    Model.models.Application.M_Patient.MP_Mobile.label('Mobile'),
                                    Model.models.Application.M_Patient.MP_Address.label('Address'),
                                    Model.models.Application.M_Patient.MP_DOB.label('DOB'),
                                    Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                    Model.models.Application.M_Patient.MP_Email.label('Email'),
                                    Model.models.Application.M_DoctorDetails.MDD_FirstName.label('Doctor Name'),
                                    Model.models.Application.M_Branch.MB_Name.label('Branch'),
                                    Model.models.Application.T_Details.TD_Name.label('Gender'),
                                    
                                        ).filter_by(MAID=AID,MP_IsActive=1,MP_IsDeleted=0
                                    ).join(Model.models.Application.M_Patient,Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                    ).join(Model.models.Application.M_DoctorDetails,Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                    ).join(Model.models.Application.M_Branch,Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                    ).outerjoin(Model.models.Application.T_Details,Model.models.Application.T_Details.TDID==Model.models.Application.M_Patient.MP_Gender
                                    ).all()
                        )
                    session.commit()
                    queryresult5= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.getPrescriptionDtl,
                                session.query(Model.models.Application.M_Appointment.MAID.label('visitId'),
                                              Model.models.Application.M_Appointment.MP_Procedure.label('Service'),
                                            
                                            Model.models.Application.M_Appointment.MAID.label('visitType'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Appointment.MA_Date,'%d-%b-%Y').label('AppointDate'),
                                            sqlalchemy.func.date_format(Model.models.Application.M_Patient.MP_DOB,'%d-%b-%Y').label('DOB'),
                                            Model.models.Application.M_Patient.MP_Name.label('Name'),
                                            Model.models.Application.M_Patient.MP_UHID.label('UHID'),
                                            Model.models.Application.M_Branch.MB_Address.label('Branch'),
                                            Model.models.Application.M_Service.MS_CategoryName.label('Procedure'),
                                            func.concat(Model.models.Application.M_DoctorDetails.MDD_FirstName,' ',Model.models.Application.M_DoctorDetails.MDD_LastName).label('DoctorName'),
                                            ).filter_by(MP_IsActive=1,MP_IsDeleted=0,MAID=AID
                                ).join(Model.models.Application.M_Patient, Model.models.Application.M_Patient.MPID==Model.models.Application.M_Appointment.M_Patient_MPID
                                ).join(Model.models.Application.M_Branch, Model.models.Application.M_Branch.MBID==Model.models.Application.M_Appointment.M_Branch_MBID
                                ).join(Model.models.Application.M_Service, Model.models.Application.M_Service.MSID==Model.models.Application.M_Appointment.MP_Procedure
                                ).join(Model.models.Application.M_DoctorDetails, Model.models.Application.M_DoctorDetails.MDDID==Model.models.Application.M_Appointment.M_DoctorDetails_MDDID
                                
                                ).order_by(Model.models.Application.M_Appointment.MAID.desc()).all())
                    session.commit()
            
                    Prescrip = Common_Function.CommonFun.convertToJson(
                            Constant.constant.constant.Prescrip,
                            session.query(Model.models.Application.M_Prescription.MP_medication,
                                                    Model.models.Application.M_Prescription.MP_type,
                                                    Model.models.Application.M_Prescription.MP_route,
                                                    Model.models.Application.M_Prescription.MP_times,
                                                    Model.models.Application.M_Prescription.MP_duration,
                                                    Model.models.Application.M_Prescription.MP_dosage,
                                                    Model.models.Application.M_Prescription.MP_comments,
                                                    Model.models.Application.M_Prescription.MP_Prescription,
                        ).filter(Model.models.Application.M_Prescription.M_AppointmentID == AID
                        ).filter_by(ShowData=1,MP_IsDeleted=0).all())
                                    
                    session.commit()
                    queryresult5[0]['Prescription']=Prescrip
                    queryresult2 = queryresult5
                    return jsonify(result={'SessionNotesReport':queryResult,'ProvisionalDiagnosisReport':queryResult1,
                                           'getFollowUpDate':followdate,'getPrescriptionDtl':queryresult2,
                                           'getPatientDetailFromAppointment':queryresult3})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()





@app.route('/submitSocialResponsivenessScaleTwo',methods=['GET','POST'])
def submitSocialResponsivenessScaleTwo():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    SCIRawScore = request_json.get('SCIRawScore')
                    SCITscore = request_json.get('SCITscore')
                    BehaviorsRawScore = request_json.get('restrictedAndRepetitiveBehaviorsRawScore')
                    BehaviorsTscore = request_json.get('restrictedAndRepetitiveBehaviorsRawScoreTscore')
                    socialAwarenessRawScore = request_json.get('socialAwarenessRawScore')
                    socialAwarenessTscore = request_json.get('socialAwarenessTscore')
                    socialCognitionRawScore = request_json.get('socialCognitionRawScore')
                    socialCognitionTscore = request_json.get('socialCognitionTscore')
                    socialCommunicationRawScore = request_json.get('socialCommunicationRawScore')
                    socialCommunicationTscore = request_json.get('socialCommunicationTscore')
                    socialMotivationRawScore = request_json.get('socialMotivationRawScore')
                    socialMotivationTscore = request_json.get('socialMotivationTscore')
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_SocialResponsivenessScale()
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid
                        Insert.SCIRawScore=SCIRawScore
                        Insert.SCITscore=SCITscore
                        Insert.BehaviorsRawScore=BehaviorsRawScore
                        Insert.BehaviorsTscore=BehaviorsTscore
                        Insert.socialAwarenessRawScore=socialAwarenessRawScore
                        Insert.socialAwarenessTscore=socialAwarenessTscore
                        Insert.socialCognitionRawScore=socialCognitionRawScore
                        Insert.socialCognitionTscore=socialCognitionTscore
                        Insert.socialCommunicationRawScore=socialCommunicationRawScore
                        Insert.socialCommunicationTscore=socialCommunicationTscore
                        Insert.socialMotivationRawScore=socialMotivationRawScore
                        Insert.socialMotivationTscore=socialMotivationTscore
                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'Social Responsiveness scale Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_SocialResponsivenessScale).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid
                        Insert.SCIRawScore=SCIRawScore
                        Insert.SCITscore=SCITscore
                        Insert.BehaviorsRawScore=BehaviorsRawScore
                        Insert.BehaviorsTscore=BehaviorsTscore
                        Insert.socialAwarenessRawScore=socialAwarenessRawScore
                        Insert.socialAwarenessTscore=socialAwarenessTscore
                        Insert.socialCognitionRawScore=socialCognitionRawScore
                        Insert.socialCognitionTscore=socialCognitionTscore
                        Insert.socialCommunicationRawScore=socialCommunicationRawScore
                        Insert.socialCommunicationTscore=socialCommunicationTscore
                        Insert.socialMotivationRawScore=socialMotivationRawScore
                        Insert.socialMotivationTscore=socialMotivationTscore
                        Insert.ModUser= data['id']
                        Insert.ModDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'Social Responsiveness scale Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitDSMVADHDCriteria',methods=['GET','POST'])
def submitDSMVADHDCriteria():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    APersistent = request_json.get('APersistent')
                    BSeveral = request_json.get('BSeveral')
                    CSeveral = request_json.get('CSeveral')
                    Combinedpresentation = request_json.get('Combinedpresentation')
                    DThere = request_json.get('DThere')
                    Ethesymptoms = request_json.get('Ethesymptoms')
                    Predominantly = request_json.get('Predominantly')
                    
                    Aid = request_json.get('Aid')
                    PID = request_json.get('PID')
                    Id = request_json.get('Id')
                    if(Id=='' or Id ==None):
                        Insert=Model.models.Application.M_DSMVADHDCriteria()
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid
                        Insert.APersistent=APersistent
                        Insert.BSeveral=BSeveral
                        Insert.CSeveral=CSeveral
                        Insert.Combinedpresentation=Combinedpresentation
                        Insert.DThere=DThere
                        Insert.Ethesymptoms=Ethesymptoms
                        Insert.Predominantly=Predominantly
                        
                        Insert.AddUser= data['id']
                        Insert.AddDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr
                        session.add(Insert)
                        session.commit()
                        return jsonify({'msg':'DSM-V Criteria for Attention Added Successfully'})
                    else:
                        Insert=session.query(Model.models.Application.M_DSMVADHDCriteria).get(Id)
                        Insert.M_Patient_MPID=PID
                        Insert.MI_AppointmentId=Aid
                        Insert.APersistent=APersistent
                        Insert.BSeveral=BSeveral
                        Insert.CSeveral=CSeveral
                        Insert.Combinedpresentation=Combinedpresentation
                        Insert.DThere=DThere
                        Insert.Ethesymptoms=Ethesymptoms
                        Insert.Predominantly=Predominantly
                        Insert.ModUser= data['id']
                        Insert.ModDate = datetime.datetime.now()
                        Insert.AddIP= flask.request.remote_addr

                        session.commit()
                        return jsonify({'msg':'DSM-V Criteria for Attention Updated Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/DSMVADHDCriteriaReport', methods=['GET','POST'])
def DSMVADHDCriteriaReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    PID = request1.get('PID')
                    apply = []
                    if(PID=='' or PID==None):
                        Model.models.Application.M_DSMVADHDCriteria.MI_AppointmentId==AID
                    if(AID=='' or AID==None):
                        Model.models.Application.M_DSMVADHDCriteria.M_Patient_MPID==PID    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.DSMVADHDCriteriaReport,
                                session.query(Model.models.Application.M_DSMVADHDCriteria.MDID.label('ID'),
                                            Model.models.Application.M_DSMVADHDCriteria.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_DSMVADHDCriteria.APersistent.label('APersistent'),
                                            Model.models.Application.M_DSMVADHDCriteria.BSeveral.label('BSeveral'),
                                            Model.models.Application.M_DSMVADHDCriteria.CSeveral.label('CSeveral'),
                                            Model.models.Application.M_DSMVADHDCriteria.Combinedpresentation.label('Combinedpresentation'),
                                            Model.models.Application.M_DSMVADHDCriteria.DThere.label('DThere'),
                                            Model.models.Application.M_DSMVADHDCriteria.Ethesymptoms.label('Ethesymptoms'),
                                            Model.models.Application.M_DSMVADHDCriteria.Predominantly.label('Predominantly'),
                                                ).filter_by(IsActive=1,IsDeleted=0
                                                ).filter(*apply
                                ).order_by(Model.models.Application.M_DSMVADHDCriteria.MDID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/SocialResponsivenessScaleReport', methods=['GET','POST'])
def SocialResponsivenessScaleReport():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    AID = request1.get('AID')
                    PID = request1.get('PID')
                    apply = []
                    if(PID=='' or PID==None):
                        Model.models.Application.M_SocialResponsivenessScale.MI_AppointmentId==AID
                    if(AID=='' or AID==None):
                        Model.models.Application.M_SocialResponsivenessScale.M_Patient_MPID==PID    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.SocialResponsivenessScaleReport,
                                session.query(Model.models.Application.M_SocialResponsivenessScale.MSID.label('ID'),
                                            Model.models.Application.M_SocialResponsivenessScale.MI_AppointmentId.label('Appointment Id'),
                                            Model.models.Application.M_SocialResponsivenessScale.SCIRawScore.label('SCIRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.SCITscore.label('SCITscore'),
                                            Model.models.Application.M_SocialResponsivenessScale.BehaviorsRawScore.label('BehaviorsRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.BehaviorsTscore.label('BehaviorsTscore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialAwarenessRawScore.label('socialAwarenessRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialAwarenessTscore.label('socialAwarenessTscore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialCognitionRawScore.label('socialCognitionRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialCognitionTscore.label('socialCognitionTscore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialCommunicationRawScore.label('socialCommunicationRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialCommunicationTscore.label('socialCommunicationTscore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialMotivationRawScore.label('socialMotivationRawScore'),
                                            Model.models.Application.M_SocialResponsivenessScale.socialMotivationTscore.label('socialMotivationTscore'),
                                                ).filter_by(IsActive=1,IsDeleted=0
                                                ).filter(*apply
                                ).order_by(Model.models.Application.M_SocialResponsivenessScale.MSID.desc()).all())
                    session.commit()

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/editCKAutismScreening', methods=['GET','POST'])
def editCKAutismScreening():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    Aid = request1.get('AID')
                    PID = request1.get('PID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.editCKAutismScreening,
                                session.query(Model.models.Application.M_CKASAssessment.MCAID.label('ID'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASConsistentEyeContact.label('CKASConsistentEyeContact'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASPointsTowardsObject.label('CKASPointsTowardsObject'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASFollowSimpleCommand.label('CKASFollowSimpleCommand'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASRespondWhencalled.label('CKASRespondWhencalled'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASTryToCopy.label('CKASTryToCopy'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASCallOutMama.label('CKASCallOutMama'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASInterestInplaying.label('CKASInterestInplaying'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASLimitedUseofLanguage.label('CKASLimitedUseofLanguage'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASFrequentEyeBlinkt.label('CKASFrequentEyeBlinkt'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASClimbWithoutScare.label('CKASClimbWithoutScare'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASSpeakNonContextly.label('CKASSpeakNonContextly'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASIndicateTowardsObject.label('CKASIndicateTowardsObject'),
                                            Model.models.Application.M_CKASAssessment.MCA_CKASAnyRegression.label('CKASAnyRegression')
                                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,MCA_IsActive=1,MCA_IsDeleted=0
                                ).order_by(Model.models.Application.M_CKASAssessment.MCAID.desc()).all())

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/editCKADHDScreening', methods=['GET','POST'])
def editCKADHDScreening():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    Aid = request1.get('AID')
                    PID = request1.get('PID')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.editCKADHDScreening,
                                session.query(Model.models.Application.M_CKADHDScreening.MCKID.label('ID'),
                                            Model.models.Application.M_CKADHDScreening.mistakesinschoolwork.label('mistakesinschoolwork'),
                                            Model.models.Application.M_CKADHDScreening.playactivities.label('playactivities'),
                                            Model.models.Application.M_CKADHDScreening.spokentodirectly.label('spokentodirectly'),
                                            Model.models.Application.M_CKADHDScreening.failstofinishschool.label('failstofinishschool'),
                                            Model.models.Application.M_CKADHDScreening.difficulttoorganize.label('difficulttoorganize'),
                                            Model.models.Application.M_CKADHDScreening.reluctantlyengages.label('reluctantlyengages'),
                                            Model.models.Application.M_CKADHDScreening.losethings.label('losethings'),
                                            Model.models.Application.M_CKADHDScreening.distractedbyextraneous.label('distractedbyextraneous'),
                                            Model.models.Application.M_CKADHDScreening.dailyactivities.label('dailyactivities'),
                                            Model.models.Application.M_CKADHDScreening.maintainalertness.label('maintainalertness'),
                                            Model.models.Application.M_CKADHDScreening.squirmsinseat.label('squirmsinseat'),
                                            Model.models.Application.M_CKADHDScreening.seatinclassroom.label('seatinclassroom'),
                                            Model.models.Application.M_CKADHDScreening.climbsexcessively.label('climbsexcessively'),
                                            Model.models.Application.M_CKADHDScreening.leisureactivities.label('leisureactivities'),
                                            Model.models.Application.M_CKADHDScreening.drivenbyamotor.label('drivenbyamotor'),
                                            Model.models.Application.M_CKADHDScreening.Talksexcessively.label('Talksexcessively'),
                                            Model.models.Application.M_CKADHDScreening.answersbefore.label('answersbefore'),
                                            Model.models.Application.M_CKADHDScreening.difficulttosit.label('difficulttosit'),
                                            Model.models.Application.M_CKADHDScreening.symptomspresent.label('symptomspresent'),
                                            Model.models.Application.M_CKADHDScreening.symptomsleading.label('symptomsleading'),
                                            Model.models.Application.M_CKADHDScreening.symptomsaffecting.label('symptomsaffecting')
                                            
                                                ).filter_by(M_Patient_MPID=PID,M_AppointmentID=Aid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKADHDScreening.MCKID.desc()).all())

                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitGrossMotorForm', methods=['GET','POST'])
def submitGrossMotorForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    question1 = request_json.get('question1')
                    question2 = request_json.get('question2')
                    question3 = request_json.get('question3')
                    question4 = request_json.get('question4')
                    question5 = request_json.get('question5')
                    question6 = request_json.get('question6')
                    question7 = request_json.get('question7')
                    question8 = request_json.get('question8')
                    question9 = request_json.get('question9')
                    question10 = request_json.get('question10')
                    question11 = request_json.get('question11')
                    question12 = request_json.get('question12')
                    question13 = request_json.get('question13')
                    question14 = request_json.get('question14')
                    question15 = request_json.get('question15')
                    question16 = request_json.get('question16')
                    question17 = request_json.get('question17')
                    question18 = request_json.get('question18')
                    question19 = request_json.get('question19')
                    question20 = request_json.get('question20')
                    question21 = request_json.get('question21')
                    question22 = request_json.get('question22')
                    question23 = request_json.get('question23')
                    question24 = request_json.get('question24')
                    question25 = request_json.get('question25')
                    question26 = request_json.get('question26')
                    question27 = request_json.get('question27')
                    question28 = request_json.get('question28')
                    question29 = request_json.get('question29')
                    question30 = request_json.get('question30')
                    question31 = request_json.get('question31')
                    question32 = request_json.get('question32')
                    question33 = request_json.get('question33')
                    question34 = request_json.get('question34')
                    question4B = request_json.get('question4B')
                    question4C = request_json.get('question4C')
                    
                    grossmotor3yes = request_json.get('grossMotor0To3Yes')
                    grossmotor3no = request_json.get('grossMotor0To3No')
                    grossmotor6yes = request_json.get('grossMotor3To6Yes')
                    grossmotor6no = request_json.get('grossMotor3To6No')
                    grossmotor9yes = request_json.get('grossMotor6To9Yes')
                    grossmotor9no = request_json.get('grossMotor6To9No')
                    grossmotor12yes = request_json.get('grossMotor9To12Yes')
                    grossmotor12no = request_json.get('grossMotor9To12No')
                    grossmotor18yes = request_json.get('grossMotor12To18Yes')
                    grossmotor18no = request_json.get('grossMotor12To18No')
                    grossmotor24yes = request_json.get('grossMotor18To24Yes')
                    grossmotor24no = request_json.get('grossMotor18To24No')
                    grossmotor30yes = request_json.get('grossMotor24To30Yes')
                    grossmotor30no = request_json.get('grossMotor24To30No')
                    grossmotor36yes = request_json.get('grossMotor30To36Yes')
                    grossmotor36no = request_json.get('grossMotor30To36No')
                    grossmotor42yes = request_json.get('grossMotor36To42Yes')
                    grossmotor42no = request_json.get('grossMotor36To42No')
                    grossmotor48yes = request_json.get('grossMotor42To48Yes')
                    grossmotor48no = request_json.get('grossMotor42To48No')
                    grossmotor54yes = request_json.get('grossMotor48To54Yes')
                    grossmotor54no = request_json.get('grossMotor48To54No')
                    grossmotor60yes = request_json.get('grossMotor54To60Yes')
                    grossmotor60no = request_json.get('grossMotor54To60No')


                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_CKGrossmotor()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    Insert.canlifttheheadup=question1
                    Insert.triestostabilizehead=question2
                    Insert.lessroundingofback=question3
                    Insert.canstabiliseheadfully=question4
                    Insert.Rollsfromfronttoback=question5
                    Insert.Cansitwithoutsupport=question6
                    Insert.Bearswholebodyweightonlegs=question7
                    Insert.Standswellwitharmshigh=question8
                    Insert.Cruisesfurnitureusinonehand=question9
                    Insert.Walkswithonehandheld=question10
                    Insert.Standsononefootwithslight=question11
                    Insert.Seatsselfinsmallchair=question12
                    Insert.Throwsballwhilestanding=question13
                    Insert.Walksdownstairsholdingrail=question14
                    Insert.Kicksballwithoutdemonstration=question15
                    Insert.Squatsinplay=question16
                    Insert.Walkupstairswithrail=question17
                    Insert.Jumpsinplace=question18
                    Insert.Standswithbothfeetonbalance=question19
                    Insert.Balancesononefootfor3seconds=question20
                    Insert.Goesupstairsnorails=question21
                    Insert.Pedalstricycle=question22
                    Insert.Balancesononefoot4to8second=question23
                    Insert.Hopononefoottwotothreetimes=question24
                    Insert.Standingbroadjump1to2feet=question25
                    Insert.Gallops=question26
                    Insert.Throwsballoverhand10feet=question27
                    Insert.Catchesbouncedball=question28
                    Insert.Walksdownstairswithrail=question29
                    Insert.Balanceononefoot8seconds=question30
                    Insert.Hopononefoot15times=question31
                    Insert.Canskip=question32
                    Insert.Runbroadjumpapproximately2to3feet=question33
                    Insert.Walksbackwardheeltoe=question34
                    Insert.Rollsfrombacktofront=question4B
                    Insert.Sittingsupportstarts=question4C
                    
                    Insert.grossmotor3yes=grossmotor3yes
                    Insert.grossmotor3no =grossmotor3no 
                    Insert.grossmotor6yes=grossmotor6yes
                    Insert.grossmotor6no=grossmotor6no
                    Insert.grossmotor9yes=grossmotor9yes
                    Insert.grossmotor9no=grossmotor9no
                    Insert.grossmotor12yes=grossmotor12yes
                    Insert.grossmotor12no=grossmotor12no
                    Insert.grossmotor18yes=grossmotor18yes
                    Insert.grossmotor18no=grossmotor18no
                    Insert.grossmotor24yes=grossmotor24yes
                    Insert.grossmotor24no=grossmotor24no
                    Insert.grossmotor30yes=grossmotor30yes
                    Insert.grossmotor30no=grossmotor30no
                    Insert.grossmotor36yes=grossmotor36yes
                    Insert.grossmotor36no=grossmotor36no
                    Insert.grossmotor42yes=grossmotor42yes
                    Insert.grossmotor42no=grossmotor42no
                    Insert.grossmotor48yes=grossmotor48yes
                    Insert.grossmotor48no=grossmotor48no
                    Insert.grossmotor54yes=grossmotor54yes
                    Insert.grossmotor54no=grossmotor54no
                    Insert.grossmotor60yes=grossmotor60yes
                    Insert.grossmotor60no=grossmotor60no
                    
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'CK Developmental Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewGrossMotorForm', methods=['GET','POST'])
def viewGrossMotorForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewGrossMotorForm,
                                session.query(Model.models.Application.M_CKGrossmotor.CKGID.label('ID'),
                                            Model.models.Application.M_CKGrossmotor.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor3yes.label('0-3 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor3no.label('grossmotor03no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor6yes.label('3-6 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor6no.label('grossmotor36no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor9yes.label('6-9 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor9no.label('grossmotor69no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor12yes.label('9-12 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor12no.label('grossmotor12no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor18yes.label('12-18 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor18no.label('grossmotor1218no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor24yes.label('18-24 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor24no.label('grossmotor1824no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor30yes.label('24-30 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor30no.label('grossmotor2430no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor36yes.label('30-36 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor36no.label('grossmotor3036no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor42yes.label('36-42 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor42no.label('grossmotor3642no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor48yes.label('42-48 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor48no.label('grossmotor4248no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor54yes.label('48-54 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor54no.label('grossmotor4854no'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor60yes.label('54-60 Months'),
                                            Model.models.Application.M_CKGrossmotor.grossmotor60no.label('grossmotor5460no'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKGrossmotor.CKGID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()
              
@app.route('/submitCKSelfHelp', methods=['GET','POST'])
def submitCKSelfHelp():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    
                    question73 = request_json.get('question73')
                    question74 = request_json.get('question74')
                    question75 = request_json.get('question75')
                    question76 = request_json.get('question76')
                    question77 = request_json.get('question77')
                    question78 = request_json.get('question78')
                    question79 = request_json.get('question79')
                    question80 = request_json.get('question80')
                    question81 = request_json.get('question81')
                    question82 = request_json.get('question82')
                    question83 = request_json.get('question83')
                    question84 = request_json.get('question84')
                    question85 = request_json.get('question85')
                    question86 = request_json.get('question86')
                    question87 = request_json.get('question87')
                    question88 = request_json.get('question88')
                    question89 = request_json.get('question89')
                    question90 = request_json.get('question90')
                    question91 = request_json.get('question91')
                    question92 = request_json.get('question92')
                    question93 = request_json.get('question93')
                    question94 = request_json.get('question94')
                    question95 = request_json.get('question95')
                    question96 = request_json.get('question96')
                    question97 = request_json.get('question97')
                    question98 = request_json.get('question98')
                    question99 = request_json.get('question98')
                    question100 = request_json.get('question100')
                    question101 = request_json.get('question101')
                    question102 = request_json.get('question102')
                    question103 = request_json.get('question103')
                    question104 = request_json.get('question104')
                    question105 = request_json.get('question105')
                    question106 = request_json.get('question106')
                    question107 = request_json.get('question107')
                    question108 = request_json.get('question108')
                    
                    selfhelp3yes = request_json.get('selfHelp0To3Yes')
                    selfhelp3no = request_json.get('selfHelp0To3No')
                    selfhelp6yes = request_json.get('selfHelp3To6Yes')
                    selfhelp6no = request_json.get('selfHelp3To6No')
                    selfhelp9yes = request_json.get('selfHelp6To9Yes')
                    selfhelp9no = request_json.get('selfHelpTo9No')
                    selfhelp12yes = request_json.get('selfHelp9To12Yes')
                    selfhelp12no = request_json.get('selfHelp9To12No')
                    selfhelp18yes = request_json.get('selfHelp12To18Yes')
                    selfhelp18no = request_json.get('selfHelp12To18No')
                    selfhelp24yes = request_json.get('selfHelp18To24Yes')
                    selfhelp24no = request_json.get('selfHelp18To24No')
                    selfhelp30yes = request_json.get('selfHelp24To30Yes')
                    selfhelp30no = request_json.get('selfHelp24To30No')
                    selfhelp36yes = request_json.get('selfHelp30To36Yes')
                    selfhelp36no = request_json.get('selfHelp30To36No')
                    selfhelp42yes = request_json.get('selfHelp36To42Yes')
                    selfhelp42no = request_json.get('selfHelp36To42No')
                    selfhelp48yes = request_json.get('selfHelp42To48Yes')
                    selfhelp48no = request_json.get('selfHelp42To48No')
                    selfhelp54yes = request_json.get('selfHelp48To54Yes')
                    selfhelp54no = request_json.get('selfHelp48To54No')
                    selfhelp60yes = request_json.get('selfHelp54To60Yes')
                    selfhelp60no = request_json.get('selfHelp54To60No')

                    
                    


                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_CKSelfhelp()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    
                    Insert.Turnsheadtowardssound=question73
                    Insert.Opensmouthatthesiteofbreast=question74
                    Insert.Suckingestablished=question75
                    Insert.Gumsmouthspureedfood=question76
                    Insert.Placeshandsonbottle=question77
                    Insert.Drinksfromcupwhen=question78
                    Insert.Canholdownbottle=question79
                    Insert.Canholdabiscuittofeed=question80
                    Insert.Biteschewsfood=question81
                    Insert.Cooperateswithdressing=question82
                    Insert.Fingerfeedspartofmeal=question83
                    Insert.Takesoffshoescapetc=question84
                    Insert.Removessocksshoes=question85
                    Insert.Putsspooninmouth=question86
                    Insert.Attemptstobrushownhair=question87
                    Insert.Opensdoorusingsknob=question88
                    Insert.Takesoffclotheswithoutbuttons=question89
                    Insert.Pullsoffpants=question90
                    Insert.Washeshands=question91
                    Insert.Putsthingsaway=question92
                    Insert.Brushesteethwithassistance=question93
                    Insert.Poursliquidfromonecontainer=question94
                    Insert.Independenteating=question95
                    Insert.Putsonshoeswithoutlaces=question96
                    Insert.Unbuttons=question97
                    Insert.Goestotoiletalone=question98
                    Insert.Washesafterbowelmovement=question99
                    Insert.Washesfaceonhisown=question100
                    Insert.Brushesteethalone=question101
                    Insert.Buttons=question102
                    Insert.Usesforkwell=question103
                    Insert.Spreadswithknife=question104
                    Insert.Independentdressing=question105
                    Insert.BathesIndependently=question106
                    Insert.Combshair=question107
                    Insert.Looksbothwaysatstreet=question108
                    
                    Insert.selfhelp3yes=selfhelp3yes
                    Insert.selfhelp3no =selfhelp3no 
                    Insert.selfhelp6yes=selfhelp6yes
                    Insert.selfhelp6no=selfhelp6no
                    Insert.selfhelp9yes=selfhelp9yes
                    Insert.selfhelp9no=selfhelp9no
                    Insert.selfhelp12yes=selfhelp12yes
                    Insert.selfhelp12no=selfhelp12no
                    Insert.selfhelp18yes=selfhelp18yes
                    Insert.selfhelp18no=selfhelp18no
                    Insert.selfhelp24yes=selfhelp24yes
                    Insert.selfhelp24no=selfhelp24no
                    Insert.selfhelp30yes=selfhelp30yes
                    Insert.selfhelp30no=selfhelp30no
                    Insert.selfhelp36yes=selfhelp36yes
                    Insert.selfhelp36no=selfhelp36no
                    Insert.selfhelp42yes=selfhelp42yes
                    Insert.selfhelp42no=selfhelp42no
                    Insert.selfhelp48yes=selfhelp48yes
                    Insert.selfhelp48no=selfhelp48no
                    Insert.selfhelp54yes=selfhelp54yes
                    Insert.selfhelp54no=selfhelp54no
                    Insert.selfhelp60yes=selfhelp60yes
                    Insert.selfhelp60no=selfhelp60no
                    
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'CK Self Help Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSelfHelpForm', methods=['GET','POST'])
def viewSelfHelpForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSelfHelpForm,
                                session.query(Model.models.Application.M_CKSelfhelp.CKSID.label('ID'),
                                            Model.models.Application.M_CKSelfhelp.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp3yes.label('0-3 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp3no.label('selfhelp03no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp6yes.label('3-6 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp6no.label('selfhelp36no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp9yes.label('6-9 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp9no.label('selfhelp69no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp12yes.label('9-12 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp12no.label('selfhelp12no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp18yes.label('12-18 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp18no.label('selfhelp1218no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp24yes.label('18-24 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp24no.label('selfhelp1824no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp30yes.label('24-30 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp30no.label('selfhelp2430no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp36yes.label('30-36 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp36no.label('selfhelp3036no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp42yes.label('36-42 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp42no.label('selfhelp3642no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp48yes.label('42-48 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp48no.label('selfhelp4248no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp54yes.label('48-54 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp54no.label('selfhelp4854no'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp60yes.label('54-60 Months'),
                                            Model.models.Application.M_CKSelfhelp.selfhelp60no.label('selfhelp5460no'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKSelfhelp.CKSID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()


@app.route('/submitCKFinemotor', methods=['GET','POST'])
def submitCKFinemotor():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    
                    question37 = request_json.get('question37')
                    question38 = request_json.get('question38')
                    question39 = request_json.get('question39')
                    question40 = request_json.get('question40')
                    question41 = request_json.get('question41')
                    question42 = request_json.get('question42')
                    question43 = request_json.get('question43')
                    question44 = request_json.get('question44')
                    question45 = request_json.get('question45')
                    question46 = request_json.get('question46')
                    question47 = request_json.get('question47')
                    question48 = request_json.get('question48')
                    question49 = request_json.get('question49')
                    question50 = request_json.get('question50')
                    question51 = request_json.get('question51')
                    question52 = request_json.get('question52')
                    question53 = request_json.get('question53')
                    question54 = request_json.get('question54')
                    question55 = request_json.get('question55')
                    question56 = request_json.get('question56')
                    question57 = request_json.get('question57')
                    question58 = request_json.get('question58')
                    question59 = request_json.get('question59')
                    question60 = request_json.get('question60')
                    question61 = request_json.get('question61')
                    question62 = request_json.get('question62')
                    question63 = request_json.get('question63')
                    question64 = request_json.get('question64')
                    question65 = request_json.get('question65')
                    question66 = request_json.get('question66')
                    question67 = request_json.get('question67')
                    question68 = request_json.get('question68')
                    question69 = request_json.get('question69')
                    question70 = request_json.get('question70')
                    question71 = request_json.get('question71')
                    question72 = request_json.get('question72')
                    
                    finemotor3yes = request_json.get('fineMotor0To3Yes')
                    finemotor3no = request_json.get('fineMotor0To3No')
                    finemotor6yes = request_json.get('fineMotor3To6Yes')
                    finemotor6no = request_json.get('fineMotorTo6No')
                    finemotor9yes = request_json.get('fineMotor6To9Yes')
                    finemotor9no = request_json.get('fineMotor6To9No')
                    finemotor12yes = request_json.get('fineMotor9To12Yes')
                    finemotor12no = request_json.get('fineMotor9To12No')
                    finemotor18yes = request_json.get('fineMotor12To18Yes')
                    finemotor18no = request_json.get('fineMotor12To18No')
                    finemotor24yes = request_json.get('fineMotor18To24Yes')
                    finemotor24no = request_json.get('fineMotor18To24No')
                    finemotor30yes = request_json.get('fineMotor24To30Yes')
                    finemotor30no = request_json.get('fineMotor24To30No')
                    finemotor36yes = request_json.get('fineMotor30To36Yes')
                    finemotor36no = request_json.get('fineMotor30To36No')
                    finemotor42yes = request_json.get('fineMotor36To42Yes')
                    finemotor42no = request_json.get('fineMotor36To42No')
                    finemotor48yes = request_json.get('fineMotor42To48Yes')
                    finemotor48no = request_json.get('fineMotor42To48No')
                    finemotor54yes = request_json.get('fineMotor48To54Yes')
                    finemotor54no = request_json.get('fineMotor48To54No')
                    finemotor60yes = request_json.get('fineMotor54To60Yes')
                    finemotor60no = request_json.get('fineMotor54To60No')
                    

                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_CKFinemotor()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    
                    Insert.Handsunfisted=question37
                    Insert.Watchesmovement=question38
                    Insert.Whenrattleifplaced=question39
                    Insert.Dropsoneobjectfrom=question40
                    Insert.Abletoholdobjects=question41
                    Insert.Reachesdanglingobjects=question42
                    Insert.pickupobjectsofsmallsize=question43
                    Insert.Canbangtoysontable=question44
                    Insert.Cantransferobjectfromonehandtoanother=question45
                    Insert.Scribblesafterdemonstration=question46
                    Insert.Canholdacrayon=question47
                    Insert.Attemptsputtingoneblock=question48
                    Insert.Makesfourblocktower=question49
                    Insert.Places10blocksinacontainer=question50
                    Insert.Crudelycopiesverticallines=question51
                    Insert.Makesasinglelinetrain=question52
                    Insert.Imitatescircle=question53
                    Insert.Imitateshorizontalline=question54
                    Insert.Stringslargebeadsawkwardly=question55
                    Insert.Unscrewsjarlid=question56
                    Insert.Turnspaperpages=question57
                    Insert.Copiescircle=question58
                    Insert.Cutswithscissors=question59
                    Insert.Stringssmallbeadswell=question60
                    Insert.Imitatescomplexfigureswithblocks=question61
                    Insert.Canusescissorsinabetterway=question62
                    Insert.Washeshandonhisown=question63
                    Insert.Copiessquare=question64
                    Insert.Tiessingleknot=question65
                    Insert.Writespartoffirstname=question66
                    Insert.Putspapercliponpaper=question67
                    Insert.Canuseclothespins=question68
                    Insert.Cutswithscissors=question69
                    Insert.Buildsstairsfrommodel=question70
                    Insert.Drawsdiamond=question71
                    Insert.Writesfirstandlastname=question72
                    
                    Insert.finemotor3yes=finemotor3yes
                    Insert.finemotor3no =finemotor3no 
                    Insert.finemotor6yes=finemotor6yes
                    Insert.finemotor6no=finemotor6no
                    Insert.finemotor9yes=finemotor9yes
                    Insert.finemotor9no=finemotor9no
                    Insert.finemotor12yes=finemotor12yes
                    Insert.finemotor12no=finemotor12no
                    Insert.finemotor18yes=finemotor18yes
                    Insert.finemotor18no=finemotor18no
                    Insert.finemotor24yes=finemotor24yes
                    Insert.finemotor24no=finemotor24no
                    Insert.finemotor30yes=finemotor30yes
                    Insert.finemotor30no=finemotor30no
                    Insert.finemotor36yes=finemotor36yes
                    Insert.finemotor36no=finemotor36no
                    Insert.finemotor42yes=finemotor42yes
                    Insert.finemotor42no=finemotor42no
                    Insert.finemotor48yes=finemotor48yes
                    Insert.finemotor48no=finemotor48no
                    Insert.finemotor54yes=finemotor54yes
                    Insert.finemotor54no=finemotor54no
                    Insert.finemotor60yes=finemotor60yes
                    Insert.finemotor60no=finemotor60no
                    
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'CK Fine Motor Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewFineMotorForm', methods=['GET','POST'])
def viewFineMotorForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewFineMotorForm,
                                session.query(Model.models.Application.M_CKFinemotor.CKGID.label('ID'),
                                            Model.models.Application.M_CKFinemotor.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_CKFinemotor.finemotor3yes.label('0-3 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor3no.label('finemotor03no'),
                                            Model.models.Application.M_CKFinemotor.finemotor6yes.label('3-6 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor6no.label('finemotor36no'),
                                            Model.models.Application.M_CKFinemotor.finemotor9yes.label('6-9 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor9no.label('finemotor69no'),
                                            Model.models.Application.M_CKFinemotor.finemotor12yes.label('9-12 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor12no.label('finemotor12no'),
                                            Model.models.Application.M_CKFinemotor.finemotor18yes.label('12-18 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor18no.label('finemotor1218no'),
                                            Model.models.Application.M_CKFinemotor.finemotor24yes.label('18-24 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor24no.label('finemotor1824no'),
                                            Model.models.Application.M_CKFinemotor.finemotor30yes.label('24-30 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor30no.label('finemotor2430no'),
                                            Model.models.Application.M_CKFinemotor.finemotor36yes.label('30-36 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor36no.label('finemotor3036no'),
                                            Model.models.Application.M_CKFinemotor.finemotor42yes.label('36-42 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor42no.label('finemotor3642no'),
                                            Model.models.Application.M_CKFinemotor.finemotor48yes.label('42-48 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor48no.label('finemotor4248no'),
                                            Model.models.Application.M_CKFinemotor.finemotor54yes.label('48-54 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor54no.label('finemotor4854no'),
                                            Model.models.Application.M_CKFinemotor.finemotor60yes.label('54-60 Months'),
                                            Model.models.Application.M_CKFinemotor.finemotor60no.label('finemotor5460no'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKFinemotor.CKGID.desc()).all())


                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitCKProblemSolving', methods=['GET','POST'])
def submitCKProblemSolving():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    
                    question37 = request_json.get('question109')
                    question38 = request_json.get('question110')
                    question39 = request_json.get('question111')
                    question40 = request_json.get('question112')
                    question41 = request_json.get('question113')
                    question42 = request_json.get('question114')
                    question43 = request_json.get('question115')
                    question44 = request_json.get('question116')
                    question45 = request_json.get('question117')
                    question46 = request_json.get('question118')
                    question47 = request_json.get('question119')
                    question48 = request_json.get('question120')
                    question49 = request_json.get('question121')
                    question50 = request_json.get('question122')
                    question51 = request_json.get('question123')
                    question52 = request_json.get('question124')
                    question53 = request_json.get('question125')
                    question54 = request_json.get('question126')
                    question55 = request_json.get('question127')
                    question56 = request_json.get('question128')
                    question57 = request_json.get('question129')
                    question58 = request_json.get('question130')
                    question59 = request_json.get('question131')
                    question60 = request_json.get('question132')
                    question61 = request_json.get('question133')
                    question62 = request_json.get('question134')
                    question63 = request_json.get('question135')
                    question64 = request_json.get('question136')
                    question65 = request_json.get('question137')
                    question66 = request_json.get('question138')
                    question67 = request_json.get('question139')
                    question68 = request_json.get('question140')
                    question69 = request_json.get('question141')
                    question70 = request_json.get('question142')
                    question71 = request_json.get('question143')
                    question72 = request_json.get('question144')
                    
                    problem3yes = request_json.get('problemSolving0To3Yes')
                    problem3no = request_json.get('problemSolving0To3No')
                    problem6yes = request_json.get('problemSolving3To6Yes')
                    problem6no = request_json.get('problemSolvingTo6No')
                    problem9yes = request_json.get('problemSolving6To9Yes')
                    problem9no = request_json.get('problemSolving6To9No')
                    problem12yes = request_json.get('problemSolving9To12Yes')
                    problem12no = request_json.get('problemSolving9To12No')
                    problem18yes = request_json.get('problemSolving12To18Yes')
                    problem18no = request_json.get('problemSolving12To18No')
                    problem24yes = request_json.get('problemSolving18To24Yes')
                    problem24no = request_json.get('problemSolving18To24No')
                    problem30yes = request_json.get('problemSolving24To30Yes')
                    problem30no = request_json.get('problemSolving24To30No')
                    problem36yes = request_json.get('problemSolving30To36Yes')
                    problem36no = request_json.get('problemSolving30To36No')
                    problem42yes = request_json.get('problemSolving36To42Yes')
                    problem42no = request_json.get('problemSolving36To42No')
                    problem48yes = request_json.get('problemSolving42To48Yes')
                    problem48no = request_json.get('problemSolving42To48No')
                    problem54yes = request_json.get('problemSolving48To54Yes')
                    problem54no = request_json.get('problemSolving48To54No')
                    problem60yes = request_json.get('problemSolving54To60Yes')
                    problem60no = request_json.get('problemSolving54To60No')
                    

                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_CKProblemSolving()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    
                    Insert.Reachesforface=question37
                    Insert.Followsdanglingobjectsfrom=question38
                    Insert.Looksatobjectsinmidline=question39
                    Insert.Touchesreflectioninmirror=question40
                    Insert.Removesclothonface=question41
                    Insert.Bangsandshakestoys=question42
                    Insert.Imitatessimpleacts=question43
                    Insert.Patsimageofselfinmirror=question44
                    Insert.Reachespersistentlyforobjects=question45
                    Insert.Couldlocaliseahiddentoy=question46
                    Insert.Looksatpicturesinbook=question47
                    Insert.Rattlesspoonincup=question48
                    Insert.Dumpspelletoutofbottle=question49
                    Insert.Turnspagesinbook=question50
                    Insert.Findstoyobservedtobehidden=question51
                    Insert.Matchesobjectstopictures=question52
                    Insert.Sortsobjects=question53
                    Insert.Showsuseoffamiliarobjects=question54
                    Insert.Matchesshapes=question55
                    Insert.Matchescolors=question56
                    Insert.Pointstosmalldetails=question57
                    Insert.Drawatwotothree=question58
                    Insert.Understandslongshort=question59
                    Insert.Knowsowngender=question60
                    Insert.Knowsownage=question61
                    Insert.Matcheslettersnumerals=question62
                    Insert.Drawsafourtosixpartperson=question63
                    Insert.Cangiveamounts=question64
                    Insert.Understandssimplenalogies=question65
                    Insert.Pointstofivetosixcolors=question66
                    Insert.Pointstolettersnumerals=question67
                    Insert.Readseveralcommon=question68
                    Insert.RoteCountsToforty=question69
                    Insert.Pointstoeighttotenbodypart=question70
                    Insert.AmountGreaterThanTen=question71
                    Insert.ReadtwofiveWords=question72
                    
                    Insert.problem3yes=problem3yes
                    Insert.problem3no =problem3no 
                    Insert.problem6yes=problem6yes
                    Insert.problem6no=problem6no
                    Insert.problem9yes=problem9yes
                    Insert.problem9no=problem9no
                    Insert.problem12yes=problem12yes
                    Insert.problem12no=problem12no
                    Insert.problem18yes=problem18yes
                    Insert.problem18no=problem18no
                    Insert.problem24yes=problem24yes
                    Insert.problem24no=problem24no
                    Insert.problem30yes=problem30yes
                    Insert.problem30no=problem30no
                    Insert.problem36yes=problem36yes
                    Insert.problem36no=problem36no
                    Insert.problem42yes=problem42yes
                    Insert.problem42no=problem42no
                    Insert.problem48yes=problem48yes
                    Insert.problem48no=problem48no
                    Insert.problem54yes=problem54yes
                    Insert.problem54no=problem54no
                    Insert.problem60yes=problem60yes
                    Insert.problem60no=problem60no
                    
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'CK Fine Motor Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewProblemSolvingForm', methods=['GET','POST'])
def viewProblemSolvingForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')
                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewProblemSolvingForm,
                                session.query(Model.models.Application.M_CKProblemSolving.CKPID.label('ID'),
                                            Model.models.Application.M_CKProblemSolving.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_CKProblemSolving.problem3yes.label('0-3 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem3no.label('finemotor03no'),
                                            Model.models.Application.M_CKProblemSolving.problem6yes.label('3-6 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem6no.label('finemotor36no'),
                                            Model.models.Application.M_CKProblemSolving.problem9yes.label('6-9 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem9no.label('finemotor69no'),
                                            Model.models.Application.M_CKProblemSolving.problem12yes.label('9-12 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem12no.label('finemotor12no'),
                                            Model.models.Application.M_CKProblemSolving.problem18yes.label('12-18 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem18no.label('finemotor1218no'),
                                            Model.models.Application.M_CKProblemSolving.problem24yes.label('18-24 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem24no.label('finemotor1824no'),
                                            Model.models.Application.M_CKProblemSolving.problem30yes.label('24-30 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem30no.label('finemotor2430no'),
                                            Model.models.Application.M_CKProblemSolving.problem36yes.label('30-36 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem36no.label('finemotor3036no'),
                                            Model.models.Application.M_CKProblemSolving.problem42yes.label('36-42 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem42no.label('finemotor3642no'),
                                            Model.models.Application.M_CKProblemSolving.problem48yes.label('42-48 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem48no.label('finemotor4248no'),
                                            Model.models.Application.M_CKProblemSolving.problem54yes.label('48-54 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem54no.label('finemotor4854no'),
                                            Model.models.Application.M_CKProblemSolving.problem60yes.label('54-60 Months'),
                                            Model.models.Application.M_CKProblemSolving.problem60no.label('finemotor5460no'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKProblemSolving.CKPID.desc()).all())
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitEmotionalForm', methods=['GET','POST'])
def submitEmotionalForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    
                    question37 = request_json.get('question145')
                    question38 = request_json.get('question146')
                    question39 = request_json.get('question147')
                    question40 = request_json.get('question148')
                    question41 = request_json.get('question149')
                    question42 = request_json.get('question150')
                    question43 = request_json.get('question151')
                    question44 = request_json.get('question152')
                    question45 = request_json.get('question153')
                    question46 = request_json.get('question154')
                    question47 = request_json.get('question155')
                    question48 = request_json.get('question156')
                    question49 = request_json.get('question157')
                    question50 = request_json.get('question158')
                    question51 = request_json.get('question159')
                    question52 = request_json.get('question160')
                    question53 = request_json.get('question161')
                    question54 = request_json.get('question162')
                    question55 = request_json.get('question163')
                    question56 = request_json.get('question164')
                    question57 = request_json.get('question165')
                    question58 = request_json.get('question166')
                    question59 = request_json.get('question167')
                    question60 = request_json.get('question168')
                    question61 = request_json.get('question169')
                    question62 = request_json.get('question170')
                    question63 = request_json.get('question171')
                    question64 = request_json.get('question172')
                    question65 = request_json.get('question173')
                    question66 = request_json.get('question174')
                    question67 = request_json.get('question175')
                    question68 = request_json.get('question176')
                    question69 = request_json.get('question177')
                    question70 = request_json.get('question178')
                    question71 = request_json.get('question179')
                    question72 = request_json.get('question180')
                    
                    problem3yes = request_json.get('emotional0To3Yes')
                    problem3no = request_json.get('emotional0To3No')
                    problem6yes = request_json.get('emotional3To6Yes')
                    problem6no = request_json.get('emotionalTo6No')
                    problem9yes = request_json.get('emotional6To9Yes')
                    problem9no = request_json.get('emotional6To9No')
                    problem12yes = request_json.get('emotional9To12Yes')
                    problem12no = request_json.get('emotionalg9To12No')
                    problem18yes = request_json.get('emotional12To18Yes')
                    problem18no = request_json.get('emotional12To18No')
                    problem24yes = request_json.get('emotional18To24Yes')
                    problem24no = request_json.get('emotional18To24No')
                    problem30yes = request_json.get('emotional24To30Yes')
                    problem30no = request_json.get('emotional24To30No')
                    problem36yes = request_json.get('emotional30To36Yes')
                    problem36no = request_json.get('emotional30To36No')
                    problem42yes = request_json.get('emotional36To42Yes')
                    problem42no = request_json.get('emotional36To42No')
                    problem48yes = request_json.get('emotional42To48Yes')
                    problem48no = request_json.get('emotional42To48No')
                    problem54yes = request_json.get('emotional48To54Yes')
                    problem54no = request_json.get('emotional48To54No')
                    problem60yes = request_json.get('emotional54To60Yes')
                    problem60no = request_json.get('emotional54To60No')
                    

                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_CKEmotional()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    
                    Insert.RespondToVoice=question37
                    Insert.ExpressionOfDisgust=question38
                    Insert.VisuallyFollowsPerson=question39
                    Insert.RecognizesCaregiver=question40
                    Insert.ExcitesOnSeeingToys=question41
                    Insert.LooktoSeenWhereGone=question42
                    Insert.SoundsToGetAttention=question43
                    Insert.LooksInDirection=question44
                    Insert.EngagesInGaze=question45
                    Insert.GivesObjectsToAdults=question46
                    Insert.ShowsObjectsToParent=question47
                    Insert.PointsTogetDesire=question48
                    Insert.ShowsEmpathy=question49
                    Insert.HugsAdults=question50
                    Insert.RecognizesDemo=question51
                    Insert.EngagesInPretend=question52
                    Insert.BeginsToShowShame=question53
                    Insert.WatchesOtherChildren=question54
                    Insert.BeginsToShow=question55
                    Insert.ParellelPlay=question56
                    Insert.IncreasedUnderstanding=question57
                    Insert.FearImaginary=question58
                    Insert.SenseOfPersonalIdentity=question59
                    Insert.StartsToSharePrompt=question60
                    Insert.InterestedInTricking=question61
                    Insert.HasPrefferedFriend=question62
                    Insert.LabelsHappiness=question63
                    Insert.GroupPlay=question64
                    Insert.ApologizesMistake=question65
                    Insert.IdentityFeeling=question66
                    Insert.BestFriendofSameSex=question67
                    Insert.PlayBoardGames=question68
                    Insert.DistinguisesFantacy=question69
                    Insert.WantsTobeFriends=question70
                    Insert.EnjoysSchool=question71
                    Insert.EngagesInHouseHoldRole=question72
                    
                    Insert.emotional3yes=problem3yes
                    Insert.emotional3no =problem3no 
                    Insert.emotional6yes=problem6yes
                    Insert.emotional6no=problem6no
                    Insert.emotional9yes=problem9yes
                    Insert.emotional9no=problem9no
                    Insert.emotional12yes=problem12yes
                    Insert.emotional12no=problem12no
                    Insert.emotional18yes=problem18yes
                    Insert.emotional18no=problem18no
                    Insert.emotional24yes=problem24yes
                    Insert.emotional24no=problem24no
                    Insert.emotional30yes=problem30yes
                    Insert.emotional30no=problem30no
                    Insert.emotional36yes=problem36yes
                    Insert.emotional36no=problem36no
                    Insert.emotional42yes=problem42yes
                    Insert.emotional42no=problem42no
                    Insert.emotional48yes=problem48yes
                    Insert.emotional48no=problem48no
                    Insert.emotional54yes=problem54yes
                    Insert.emotional54no=problem54no
                    Insert.emotional60yes=problem60yes
                    Insert.emotional60no=problem60no
                    
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'CK Fine Motor Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewEmotionalForm', methods=['GET','POST'])
def viewEmotionalForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewEmotionalForm,
                                session.query(Model.models.Application.M_CKEmotional.CKEID.label('ID'),
                                            Model.models.Application.M_CKEmotional.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_CKEmotional.emotional3yes.label('0-3 Months'),
                                            Model.models.Application.M_CKEmotional.emotional3no.label('finemotor03no'),
                                            Model.models.Application.M_CKEmotional.emotional6yes.label('3-6 Months'),
                                            Model.models.Application.M_CKEmotional.emotional6no.label('finemotor36no'),
                                            Model.models.Application.M_CKEmotional.emotional9yes.label('6-9 Months'),
                                            Model.models.Application.M_CKEmotional.emotional9no.label('finemotor69no'),
                                            Model.models.Application.M_CKEmotional.emotional12yes.label('9-12 Months'),
                                            Model.models.Application.M_CKEmotional.emotional12no.label('finemotor12no'),
                                            Model.models.Application.M_CKEmotional.emotional18yes.label('12-18 Months'),
                                            Model.models.Application.M_CKEmotional.emotional18no.label('finemotor1218no'),
                                            Model.models.Application.M_CKEmotional.emotional24yes.label('18-24 Months'),
                                            Model.models.Application.M_CKEmotional.emotional24no.label('finemotor1824no'),
                                            Model.models.Application.M_CKEmotional.emotional30yes.label('24-30 Months'),
                                            Model.models.Application.M_CKEmotional.emotional30no.label('finemotor2430no'),
                                            Model.models.Application.M_CKEmotional.emotional36yes.label('30-36 Months'),
                                            Model.models.Application.M_CKEmotional.emotional36no.label('finemotor3036no'),
                                            Model.models.Application.M_CKEmotional.emotional42yes.label('36-42 Months'),
                                            Model.models.Application.M_CKEmotional.emotional42no.label('finemotor3642no'),
                                            Model.models.Application.M_CKEmotional.emotional48yes.label('42-48 Months'),
                                            Model.models.Application.M_CKEmotional.emotional48no.label('finemotor4248no'),
                                            Model.models.Application.M_CKEmotional.emotional54yes.label('48-54 Months'),
                                            Model.models.Application.M_CKEmotional.emotional54no.label('finemotor4854no'),
                                            Model.models.Application.M_CKEmotional.emotional60yes.label('54-60 Months'),
                                            Model.models.Application.M_CKEmotional.emotional60no.label('finemotor5460no'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKEmotional.CKEID.desc()).all())
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitReceptiveLanguageForm', methods=['GET','POST'])
def submitReceptiveLanguageForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    
                    question37 = request_json.get('question181')
                    question38 = request_json.get('question182')
                    question39 = request_json.get('question183')
                    question40 = request_json.get('question184')
                    question41 = request_json.get('question185')
                    question42 = request_json.get('question186')
                    question43 = request_json.get('question187')
                    question44 = request_json.get('question188')
                    question45 = request_json.get('question189')
                    question46 = request_json.get('question190')
                    question47 = request_json.get('question191')
                    question48 = request_json.get('question192')
                    question49 = request_json.get('question193')
                    question50 = request_json.get('question194')
                    question51 = request_json.get('question195')
                    question52 = request_json.get('question196')
                    question53 = request_json.get('question197')
                    question54 = request_json.get('question198')
                    question55 = request_json.get('question199')
                    question56 = request_json.get('question200')
                    question57 = request_json.get('question201')
                    question58 = request_json.get('question202')
                    question59 = request_json.get('question203')
                    question60 = request_json.get('question204')
                    question61 = request_json.get('question205')
                    question62 = request_json.get('question206')
                    question63 = request_json.get('question207')
                    question64 = request_json.get('question208')
                    question65 = request_json.get('question209')
                    question66 = request_json.get('question210')
                    question67 = request_json.get('question211')
                    question68 = request_json.get('question212')
                    question69 = request_json.get('question213')
                    question70 = request_json.get('question214')
                    question71 = request_json.get('question215')
                    question72 = request_json.get('question216')
                    
                    problem3yes = request_json.get('receptiveLanguage0To3Yes')
                    problem3no = request_json.get('receptiveLanguage0To3No')
                    problem6yes = request_json.get('receptiveLanguage3To6Yes')
                    problem6no = request_json.get('receptiveLanguage3To6No')
                    problem9yes = request_json.get('receptiveLanguage6To9Yes')
                    problem9no = request_json.get('receptiveLanguage6To9No')
                    problem12yes = request_json.get('receptiveLanguage9To12Yes')
                    problem12no = request_json.get('receptiveLanguage9To12No')
                    problem18yes = request_json.get('receptiveLanguage12To18Yes')
                    problem18no = request_json.get('receptiveLanguage12To18No')
                    problem24yes = request_json.get('receptiveLanguage18To24Yes')
                    problem24no = request_json.get('receptiveLanguage18To24No')
                    problem30yes = request_json.get('receptiveLanguage24To30Yes')
                    problem30no = request_json.get('receptiveLanguage24To30No')
                    problem36yes = request_json.get('receptiveLanguage30To36Yes')
                    problem36no = request_json.get('receptiveLanguage30To36No')
                    problem42yes = request_json.get('receptiveLanguage36To42Yes')
                    problem42no = request_json.get('receptiveLanguage36To42No')
                    problem48yes = request_json.get('receptiveLanguage42To48Yes')
                    problem48no = request_json.get('receptiveLanguage42To48No')
                    problem54yes = request_json.get('receptiveLanguage48To54Yes')
                    problem54no = request_json.get('receptiveLanguage48To54No')
                    problem60yes = request_json.get('receptiveLanguage54To60Yes')
                    problem60no = request_json.get('receptiveLanguage54To60No')
                    

                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_CKReceptive()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    
                    Insert.question181=question37
                    Insert.question182=question38
                    Insert.question183=question39
                    Insert.question184=question40
                    Insert.question185=question41
                    Insert.question186=question42
                    Insert.question187=question43
                    Insert.question188=question44
                    Insert.question189=question45
                    Insert.question190=question46
                    Insert.question191=question47
                    Insert.question192=question48
                    Insert.question193=question49
                    Insert.question194=question50
                    Insert.question195=question51
                    Insert.question196=question52
                    Insert.question197=question53
                    Insert.question198=question54
                    Insert.question199=question55
                    Insert.question200=question56
                    Insert.question201=question57
                    Insert.question202=question58
                    Insert.question203=question59
                    Insert.question204=question60
                    Insert.question205=question61
                    Insert.question206=question62
                    Insert.question207=question63
                    Insert.question208=question64
                    Insert.question209=question65
                    Insert.question210=question66
                    Insert.question211=question67
                    Insert.question212=question68
                    Insert.question213=question69
                    Insert.question214=question70
                    Insert.question215=question71
                    Insert.question216=question72
                    
                    Insert.receptive3yes=problem3yes
                    Insert.receptive3no =problem3no 
                    Insert.receptive6yes=problem6yes
                    Insert.receptive6no=problem6no
                    Insert.receptive9yes=problem9yes
                    Insert.receptive9no=problem9no
                    Insert.receptive12yes=problem12yes
                    Insert.receptive12no=problem12no
                    Insert.receptive18yes=problem18yes
                    Insert.receptive18no=problem18no
                    Insert.receptive24yes=problem24yes
                    Insert.receptive24no=problem24no
                    Insert.receptive30yes=problem30yes
                    Insert.receptive30no=problem30no
                    Insert.receptive36yes=problem36yes
                    Insert.receptive36no=problem36no
                    Insert.receptive42yes=problem42yes
                    Insert.receptive42no=problem42no
                    Insert.receptive48yes=problem48yes
                    Insert.receptive48no=problem48no
                    Insert.receptive54yes=problem54yes
                    Insert.receptive54no=problem54no
                    Insert.receptive60yes=problem60yes
                    Insert.receptive60no=problem60no
                    
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'CK Fine Motor Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewReceptiveForm', methods=['GET','POST'])
def viewReceptiveForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewReceptiveForm,
                                session.query(Model.models.Application.M_CKReceptive.CKRID.label('ID'),
                                            Model.models.Application.M_CKReceptive.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_CKReceptive.receptive3yes.label('0-3 Months'),
                                            Model.models.Application.M_CKReceptive.receptive3no.label('finemotor03no'),
                                            Model.models.Application.M_CKReceptive.receptive6yes.label('3-6 Months'),
                                            Model.models.Application.M_CKReceptive.receptive6no.label('finemotor36no'),
                                            Model.models.Application.M_CKReceptive.receptive9yes.label('6-9 Months'),
                                            Model.models.Application.M_CKReceptive.receptive9no.label('finemotor69no'),
                                            Model.models.Application.M_CKReceptive.receptive12yes.label('9-12 Months'),
                                            Model.models.Application.M_CKReceptive.receptive12no.label('finemotor12no'),
                                            Model.models.Application.M_CKReceptive.receptive18yes.label('12-18 Months'),
                                            Model.models.Application.M_CKReceptive.receptive18no.label('finemotor1218no'),
                                            Model.models.Application.M_CKReceptive.receptive24yes.label('18-24 Months'),
                                            Model.models.Application.M_CKReceptive.receptive24no.label('finemotor1824no'),
                                            Model.models.Application.M_CKReceptive.receptive30yes.label('24-30 Months'),
                                            Model.models.Application.M_CKReceptive.receptive30no.label('finemotor2430no'),
                                            Model.models.Application.M_CKReceptive.receptive36yes.label('30-36 Months'),
                                            Model.models.Application.M_CKReceptive.receptive36no.label('finemotor3036no'),
                                            Model.models.Application.M_CKReceptive.receptive42yes.label('36-42 Months'),
                                            Model.models.Application.M_CKReceptive.receptive42no.label('finemotor3642no'),
                                            Model.models.Application.M_CKReceptive.receptive48yes.label('42-48 Months'),
                                            Model.models.Application.M_CKReceptive.receptive48no.label('finemotor4248no'),
                                            Model.models.Application.M_CKReceptive.receptive54yes.label('48-54 Months'),
                                            Model.models.Application.M_CKReceptive.receptive54no.label('finemotor4854no'),
                                            Model.models.Application.M_CKReceptive.receptive60yes.label('54-60 Months'),
                                            Model.models.Application.M_CKReceptive.receptive60no.label('finemotor5460no'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKReceptive.CKRID.desc()).all())
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitExpressiveLanguageForm', methods=['GET','POST'])
def submitExpressiveLanguageForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    
                    question37 = request_json.get('question217')
                    question38 = request_json.get('question218')
                    question39 = request_json.get('question219')
                    question40 = request_json.get('question220')
                    question41 = request_json.get('question221')
                    question42 = request_json.get('question222')
                    question43 = request_json.get('question223')
                    question44 = request_json.get('question224')
                    question45 = request_json.get('question225')
                    question46 = request_json.get('question226')
                    question47 = request_json.get('question227')
                    question48 = request_json.get('question228')
                    question49 = request_json.get('question229')
                    question50 = request_json.get('question230')
                    question51 = request_json.get('question231')
                    question52 = request_json.get('question232')
                    question53 = request_json.get('question233')
                    question54 = request_json.get('question234')
                    question55 = request_json.get('question235')
                    question56 = request_json.get('question236')
                    question57 = request_json.get('question237')
                    question58 = request_json.get('question238')
                    question59 = request_json.get('question239')
                    question60 = request_json.get('question240')
                    question61 = request_json.get('question241')
                    question62 = request_json.get('question242')
                    question63 = request_json.get('question243')
                    question64 = request_json.get('question244')
                    question65 = request_json.get('question245')
                    question66 = request_json.get('question246')
                    question67 = request_json.get('question247')
                    question68 = request_json.get('question248')
                    question69 = request_json.get('question249')
                    question70 = request_json.get('question250')
                    question71 = request_json.get('question251')
                    question72 = request_json.get('question252')
                    
                    problem3yes = request_json.get('expressiveLanguage0To3Yes')
                    problem3no = request_json.get('expressiveLanguage0To3No')
                    problem6yes = request_json.get('expressiveLanguage3To6Yes')
                    problem6no = request_json.get('expressiveLanguage3To6No')
                    problem9yes = request_json.get('expressiveLanguage6To9Yes')
                    problem9no = request_json.get('expressiveLanguage6To9No')
                    problem12yes = request_json.get('expressiveLanguage9To12Yes')
                    problem12no = request_json.get('expressiveLanguage9To12No')
                    problem18yes = request_json.get('expressiveLanguage12To18Yes')
                    problem18no = request_json.get('expressiveLanguage12To18No')
                    problem24yes = request_json.get('expressiveLanguage18To24Yes')
                    problem24no = request_json.get('expressiveLanguage18To24No')
                    problem30yes = request_json.get('expressiveLanguage24To30Yes')
                    problem30no = request_json.get('expressiveLanguage24To30No')
                    problem36yes = request_json.get('expressiveLanguage30To36Yes')
                    problem36no = request_json.get('expressiveLanguage30To36No')
                    problem42yes = request_json.get('expressiveLanguage36To42Yes')
                    problem42no = request_json.get('expressiveLanguage36To42No')
                    problem48yes = request_json.get('expressiveLanguage42To48Yes')
                    problem48no = request_json.get('expressiveLanguage42To48No')
                    problem54yes = request_json.get('expressiveLanguage48To54Yes')
                    problem54no = request_json.get('expressiveLanguage48To54No')
                    problem60yes = request_json.get('expressiveLanguage54To60Yes')
                    problem60no = request_json.get('expressiveLanguage54To60No')
                    

                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_CKExpressive()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    
                    Insert.question217=question37
                    Insert.question218=question38
                    Insert.question219=question39
                    Insert.question220=question40
                    Insert.question221=question41
                    Insert.question222=question42
                    Insert.question223=question43
                    Insert.question224=question44
                    Insert.question225=question45
                    Insert.question226=question46
                    Insert.question227=question47
                    Insert.question228=question48
                    Insert.question229=question49
                    Insert.question230=question50
                    Insert.question231=question51
                    Insert.question232=question52
                    Insert.question233=question53
                    Insert.question234=question54
                    Insert.question235=question55
                    Insert.question236=question56
                    Insert.question237=question57
                    Insert.question238=question58
                    Insert.question239=question59
                    Insert.question240=question60
                    Insert.question241=question61
                    Insert.question242=question62
                    Insert.question243=question63
                    Insert.question244=question64
                    Insert.question245=question65
                    Insert.question246=question66
                    Insert.question247=question67
                    Insert.question248=question68
                    Insert.question249=question69
                    Insert.question250=question70
                    Insert.question251=question71
                    Insert.question252=question72
                    
                    Insert.expressive3yes=problem3yes
                    Insert.expressive3no =problem3no 
                    Insert.expressive6yes=problem6yes
                    Insert.expressive6no=problem6no
                    Insert.expressive9yes=problem9yes
                    Insert.expressive9no=problem9no
                    Insert.expressive12yes=problem12yes
                    Insert.expressive12no=problem12no
                    Insert.expressive18yes=problem18yes
                    Insert.expressive18no=problem18no
                    Insert.expressive24yes=problem24yes
                    Insert.expressive24no=problem24no
                    Insert.expressive30yes=problem30yes
                    Insert.expressive30no=problem30no
                    Insert.expressive36yes=problem36yes
                    Insert.expressive36no=problem36no
                    Insert.expressive42yes=problem42yes
                    Insert.expressive42no=problem42no
                    Insert.expressive48yes=problem48yes
                    Insert.expressive48no=problem48no
                    Insert.expressive54yes=problem54yes
                    Insert.expressive54no=problem54no
                    Insert.expressive60yes=problem60yes
                    Insert.expressive60no=problem60no
                    
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'CK Expressive Language Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewExpressiveLanguageForm', methods=['GET','POST'])
def viewExpressiveLanguageForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewExpressiveLanguageForm,
                                session.query(Model.models.Application.M_CKExpressive.CKRID.label('ID'),
                                            Model.models.Application.M_CKExpressive.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_CKExpressive.expressive3yes.label('0-3 Months'),
                                            Model.models.Application.M_CKExpressive.expressive3no.label('finemotor03no'),
                                            Model.models.Application.M_CKExpressive.expressive6yes.label('3-6 Months'),
                                            Model.models.Application.M_CKExpressive.expressive6no.label('finemotor36no'),
                                            Model.models.Application.M_CKExpressive.expressive9yes.label('6-9 Months'),
                                            Model.models.Application.M_CKExpressive.expressive9no.label('finemotor69no'),
                                            Model.models.Application.M_CKExpressive.expressive12yes.label('9-12 Months'),
                                            Model.models.Application.M_CKExpressive.expressive12no.label('finemotor12no'),
                                            Model.models.Application.M_CKExpressive.expressive18yes.label('12-18 Months'),
                                            Model.models.Application.M_CKExpressive.expressive18no.label('finemotor1218no'),
                                            Model.models.Application.M_CKExpressive.expressive24yes.label('18-24 Months'),
                                            Model.models.Application.M_CKExpressive.expressive24no.label('finemotor1824no'),
                                            Model.models.Application.M_CKExpressive.expressive30yes.label('24-30 Months'),
                                            Model.models.Application.M_CKExpressive.expressive30no.label('finemotor2430no'),
                                            Model.models.Application.M_CKExpressive.expressive36yes.label('30-36 Months'),
                                            Model.models.Application.M_CKExpressive.expressive36no.label('finemotor3036no'),
                                            Model.models.Application.M_CKExpressive.expressive42yes.label('36-42 Months'),
                                            Model.models.Application.M_CKExpressive.expressive42no.label('finemotor3642no'),
                                            Model.models.Application.M_CKExpressive.expressive48yes.label('42-48 Months'),
                                            Model.models.Application.M_CKExpressive.expressive48no.label('finemotor4248no'),
                                            Model.models.Application.M_CKExpressive.expressive54yes.label('48-54 Months'),
                                            Model.models.Application.M_CKExpressive.expressive54no.label('finemotor4854no'),
                                            Model.models.Application.M_CKExpressive.expressive60yes.label('54-60 Months'),
                                            Model.models.Application.M_CKExpressive.expressive60no.label('finemotor5460no'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKExpressive.CKRID.desc()).all())
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/submitSocialSkillsForm', methods=['GET','POST'])
def submitSocialSkillsForm():

    session=Session()
    try:

        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')

                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request_json = request.get_json()
                    
                    question37 = request_json.get('question253')
                    question38 = request_json.get('question254')
                    question39 = request_json.get('question255')
                    question40 = request_json.get('question256')
                    question41 = request_json.get('question257')
                    question42 = request_json.get('question258')
                    question43 = request_json.get('question259')
                    question44 = request_json.get('question260')
                    question45 = request_json.get('question261')
                    question46 = request_json.get('question262')
                    question47 = request_json.get('question263')
                    question48 = request_json.get('question264')
                    question49 = request_json.get('question265')
                    question50 = request_json.get('question266')
                    question51 = request_json.get('question267')
                    question52 = request_json.get('question268')
                    question53 = request_json.get('question269')
                    question54 = request_json.get('question270')
                    question55 = request_json.get('question271')
                    question56 = request_json.get('question272')
                    question57 = request_json.get('question273')
                    question58 = request_json.get('question274')
                    question59 = request_json.get('question275')
                    question60 = request_json.get('question276')
                    question61 = request_json.get('question277')
                    question62 = request_json.get('question278')
                    question63 = request_json.get('question279')
                    question64 = request_json.get('question280')
                    question65 = request_json.get('question281')
                    question66 = request_json.get('question282')
                    question67 = request_json.get('question283')
                    question68 = request_json.get('question284')
                    question69 = request_json.get('question285')
                    question70 = request_json.get('question286')
                    question71 = request_json.get('question287')
                    question72 = request_json.get('question288')
                    
                    problem3yes = request_json.get('socialSkills0To3Yes')
                    problem3no = request_json.get('socialSkills0To3No')
                    problem6yes = request_json.get('socialSkills3To6Yes')
                    problem6no = request_json.get('socialSkills3To6No')
                    problem9yes = request_json.get('socialSkills6To9Yes')
                    problem9no = request_json.get('socialSkills6To9No')
                    problem12yes = request_json.get('socialSkills9To12Yes')
                    problem12no = request_json.get('socialSkills9To12No')
                    problem18yes = request_json.get('socialSkills12To18Yes')
                    problem18no = request_json.get('socialSkills12To18No')
                    problem24yes = request_json.get('socialSkills18To24Yes')
                    problem24no = request_json.get('socialSkills18To24No')
                    problem30yes = request_json.get('socialSkills24To30Yes')
                    problem30no = request_json.get('socialSkills24To30No')
                    problem36yes = request_json.get('socialSkills30To36Yes')
                    problem36no = request_json.get('socialSkills30To36No')
                    problem42yes = request_json.get('socialSkills36To42Yes')
                    problem42no = request_json.get('socialSkills36To42No')
                    problem48yes = request_json.get('socialSkills42To48Yes')
                    problem48no = request_json.get('socialSkills42To48No')
                    problem54yes = request_json.get('socialSkills48To54Yes')
                    problem54no = request_json.get('socialSkills48To54No')
                    problem60yes = request_json.get('socialSkills54To60Yes')
                    problem60no = request_json.get('socialSkills54To60No')
                    

                    Aid = request_json.get('Aid')
                    PID = request_json.get('pid')
                    Id = request_json.get('Id')

                    Insert=Model.models.Application.M_CKSocialSkills()
                    Insert.M_Patient_MPID=PID
                    Insert.M_AppointmentID=Aid
                    
                    Insert.question253=question37
                    Insert.question254=question38
                    Insert.question255=question39
                    Insert.question256=question40
                    Insert.question257=question41
                    Insert.question258=question42
                    Insert.question259=question43
                    Insert.question260=question44
                    Insert.question261=question45
                    Insert.question262=question46
                    Insert.question263=question47
                    Insert.question264=question48
                    Insert.question265=question49
                    Insert.question266=question50
                    Insert.question267=question51
                    Insert.question268=question52
                    Insert.question269=question53
                    Insert.question270=question54
                    Insert.question271=question55
                    Insert.question272=question56
                    Insert.question273=question57
                    Insert.question274=question58
                    Insert.question275=question59
                    Insert.question276=question60
                    Insert.question277=question61
                    Insert.question278=question62
                    Insert.question279=question63
                    Insert.question280=question64
                    Insert.question281=question65
                    Insert.question282=question66
                    Insert.question283=question67
                    Insert.question284=question68
                    Insert.question285=question69
                    Insert.question286=question70
                    Insert.question287=question71
                    Insert.question288=question72
                    
                    Insert.socialskill3yes=problem3yes
                    Insert.socialskill3no =problem3no 
                    Insert.socialskill6yes=problem6yes
                    Insert.socialskill6no=problem6no
                    Insert.socialskill9yes=problem9yes
                    Insert.socialskill9no=problem9no
                    Insert.socialskill12yes=problem12yes
                    Insert.socialskill12no=problem12no
                    Insert.socialskill18yes=problem18yes
                    Insert.socialskill18no=problem18no
                    Insert.socialskill24yes=problem24yes
                    Insert.socialskill24no=problem24no
                    Insert.socialskill30yes=problem30yes
                    Insert.socialskill30no=problem30no
                    Insert.socialskill36yes=problem36yes
                    Insert.socialskill36no=problem36no
                    Insert.socialskill42yes=problem42yes
                    Insert.socialskill42no=problem42no
                    Insert.socialskill48yes=problem48yes
                    Insert.socialskill48no=problem48no
                    Insert.socialskill54yes=problem54yes
                    Insert.socialskill54no=problem54no
                    Insert.socialskill60yes=problem60yes
                    Insert.socialskill60no=problem60no
                    
                    Insert.AddDate = datetime.datetime.now()
                    Insert.AddIP= flask.request.remote_addr
                    session.add(Insert)
                    session.commit()
                    return jsonify({'msg':'CK Expressive Language Added Successfully'})
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})

    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()

@app.route('/viewSocialSkillsForm', methods=['GET','POST'])
def viewSocialSkillsForm():
    session=Session()
    try:
        if(request.method == "POST"):
            if('Authorization' in request.headers):
                token= request.headers.get('Authorization')
                if not token:
                    return jsonify({'MSG':'Token is missing'})
                data = jwt.decode(token,app.config['SECRET_KEY'], algorithms=['HS256', ])
                if(data):
                    request1= request.get_json()
                    pid = request1.get('pid')                    
                    queryresult= Common_Function.CommonFun.convertToJson(
                                Constant.constant.constant.viewSocialSkillsForm,
                                session.query(Model.models.Application.M_CKSocialSkills.CKSID.label('ID'),
                                            Model.models.Application.M_CKSocialSkills.M_AppointmentID.label('Appointment ID'),
                                            Model.models.Application.M_CKSocialSkills.socialskill3yes.label('0-3 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill3no.label('finemotor03no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill6yes.label('3-6 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill6no.label('finemotor36no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill9yes.label('6-9 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill9no.label('finemotor69no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill12yes.label('9-12 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill12no.label('finemotor12no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill18yes.label('12-18 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill18no.label('finemotor1218no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill24yes.label('18-24 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill24no.label('finemotor1824no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill30yes.label('24-30 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill30no.label('finemotor2430no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill36yes.label('30-36 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill36no.label('finemotor3036no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill42yes.label('36-42 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill42no.label('finemotor3642no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill48yes.label('42-48 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill48no.label('finemotor4248no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill54yes.label('48-54 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill54no.label('finemotor4854no'),
                                            Model.models.Application.M_CKSocialSkills.socialskill60yes.label('54-60 Months'),
                                            Model.models.Application.M_CKSocialSkills.socialskill60no.label('finemotor5460no'),
                                            
                                                ).filter_by(M_Patient_MPID=pid,IsActive=1,IsDeleted=0
                                ).order_by(Model.models.Application.M_CKSocialSkills.CKSID.desc()).all())
                    return jsonify(result=queryresult)
                else:
                    return jsonify({'err':'Token is expired'})
            else:
                return jsonify({'err':'Please Login'})
    except Exception as e:
        return jsonify({'err':str(e)})
    finally:
        session.close()              
              
 



